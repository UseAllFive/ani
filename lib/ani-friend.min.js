!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("ani-friend",[],e):"object"==typeof exports?exports["ani-friend"]=e():t["ani-friend"]=e()}("undefined"!=typeof self?self:this,(function(){return function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=291)}([function(t,e,i){"use strict";(function(t){i.d(e,"e",(function(){return n})),i.d(e,"g",(function(){return s})),i.d(e,"f",(function(){return r})),i.d(e,"c",(function(){return a})),i.d(e,"a",(function(){return u})),i.d(e,"b",(function(){return l})),i.d(e,"d",(function(){return c}));
/*!
 * VERSION: 2.1.3
 * DATE: 2019-05-17
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 */
var n="undefined"!=typeof window?window:t.exports&&"undefined"!=typeof global?global:{},r=function(t){var e={},i=t.document,n=t.GreenSockGlobals=t.GreenSockGlobals||t;if(n.TweenLite)return n.TweenLite;var r,s,o,a,u,l,c,f=function(t){var e,i=t.split("."),r=n;for(e=0;e<i.length;e++)r[i[e]]=r=r[i[e]]||{};return r},h=f("com.greensock"),p=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},_=function(){},d=(l=Object.prototype.toString,c=l.call([]),function(t){return null!=t&&(t instanceof Array||"object"==typeof t&&!!t.push&&l.call(t)===c)}),v={},m=function(t,i,r,s){this.sc=v[t]?v[t].sc:[],v[t]=this,this.gsClass=null,this.func=r;var o=[];this.check=function(a){for(var u,l,c,h,p=i.length,_=p;--p>-1;)(u=v[i[p]]||new m(i[p],[])).gsClass?(o[p]=u.gsClass,_--):a&&u.sc.push(this);if(0===_&&r)for(c=(l=("com.greensock."+t).split(".")).pop(),h=f(l.join("."))[c]=this.gsClass=r.apply(r,o),s&&(n[c]=e[c]=h),p=0;p<this.sc.length;p++)this.sc[p].check()},this.check(!0)},g=t._gsDefine=function(t,e,i,n){return new m(t,e,i,n)},y=h._class=function(t,e,i){return e=e||function(){},g(t,[],(function(){return e}),i),e};g.globals=n;var x=[0,0,1,1],b=y("easing.Ease",(function(t,e,i,n){this._func=t,this._type=i||0,this._power=n||0,this._params=e?x.concat(e):x}),!0),w=b.map={},T=b.register=function(t,e,i,n){for(var r,s,o,a,u=e.split(","),l=u.length,c=(i||"easeIn,easeOut,easeInOut").split(",");--l>-1;)for(s=u[l],r=n?y("easing."+s,null,!0):h.easing[s]||{},o=c.length;--o>-1;)a=c[o],w[s+"."+a]=w[a+s]=r[a]=t.getRatio?t:t[a]||new t};for((o=b.prototype)._calcEnd=!1,o.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,n=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===e?1-n:2===e?n:t<.5?n/2:1-n/2},s=(r=["Linear","Quad","Cubic","Quart","Quint,Strong"]).length;--s>-1;)o=r[s]+",Power"+s,T(new b(null,null,1,s),o,"easeOut",!0),T(new b(null,null,2,s),o,"easeIn"+(0===s?",easeNone":"")),T(new b(null,null,3,s),o,"easeInOut");w.linear=h.easing.Linear.easeIn,w.swing=h.easing.Quad.easeInOut;var S=y("events.EventDispatcher",(function(t){this._listeners={},this._eventTarget=t||this}));(o=S.prototype).addEventListener=function(t,e,i,n,r){r=r||0;var s,o,l=this._listeners[t],c=0;for(this!==a||u||a.wake(),null==l&&(this._listeners[t]=l=[]),o=l.length;--o>-1;)(s=l[o]).c===e&&s.s===i?l.splice(o,1):0===c&&s.pr<r&&(c=o+1);l.splice(c,0,{c:e,s:i,up:n,pr:r})},o.removeEventListener=function(t,e){var i,n=this._listeners[t];if(n)for(i=n.length;--i>-1;)if(n[i].c===e)return void n.splice(i,1)},o.dispatchEvent=function(t){var e,i,n,r=this._listeners[t];if(r)for((e=r.length)>1&&(r=r.slice(0)),i=this._eventTarget;--e>-1;)(n=r[e])&&(n.up?n.c.call(n.s||i,{type:t,target:i}):n.c.call(n.s||i))};var P=t.requestAnimationFrame,O=t.cancelAnimationFrame,A=Date.now||function(){return(new Date).getTime()},k=A();for(s=(r=["ms","moz","webkit","o"]).length;--s>-1&&!P;)P=t[r[s]+"RequestAnimationFrame"],O=t[r[s]+"CancelAnimationFrame"]||t[r[s]+"CancelRequestAnimationFrame"];y("Ticker",(function(t,e){var n,r,s,o,l,c=this,f=A(),h=!(!1===e||!P)&&"auto",p=500,d=33,v=function(t){var e,i,a=A()-k;a>p&&(f+=a-d),k+=a,c.time=(k-f)/1e3,e=c.time-l,(!n||e>0||!0===t)&&(c.frame++,l+=e+(e>=o?.004:o-e),i=!0),!0!==t&&(s=r(v)),i&&c.dispatchEvent("tick")};S.call(c),c.time=c.frame=0,c.tick=function(){v(!0)},c.lagSmoothing=function(t,e){if(!arguments.length)return p<1e8;p=t||1e8,d=Math.min(e,p,0)},c.sleep=function(){null!=s&&(h&&O?O(s):clearTimeout(s),r=_,s=null,c===a&&(u=!1))},c.wake=function(t){null!==s?c.sleep():t?f+=-k+(k=A()):c.frame>10&&(k=A()-p+5),r=0===n?_:h&&P?P:function(t){return setTimeout(t,1e3*(l-c.time)+1|0)},c===a&&(u=!0),v(2)},c.fps=function(t){if(!arguments.length)return n;o=1/((n=t)||60),l=this.time+o,c.wake()},c.useRAF=function(t){if(!arguments.length)return h;c.sleep(),h=t,c.fps(n)},c.fps(t),setTimeout((function(){"auto"===h&&c.frame<5&&"hidden"!==(i||{}).visibilityState&&c.useRAF(!1)}),1500)})),(o=h.Ticker.prototype=new h.events.EventDispatcher).constructor=h.Ticker;var M=y("core.Animation",(function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=!!e.immediateRender,this.data=e.data,this._reversed=!!e.reversed,Z){u||a.wake();var i=this.vars.useFrames?H:Z;i.add(this,i._time),this.vars.paused&&this.paused(!0)}}));a=M.ticker=new h.Ticker,(o=M.prototype)._dirty=o._gc=o._initted=o._paused=!1,o._totalTime=o._time=0,o._rawPrevTime=-1,o._next=o._last=o._onUpdate=o._timeline=o.timeline=null,o._paused=!1;var R=function(){u&&A()-k>2e3&&("hidden"!==(i||{}).visibilityState||!a.lagSmoothing())&&a.wake();var t=setTimeout(R,2e3);t.unref&&t.unref()};R(),o.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},o.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},o.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},o.seek=function(t,e){return this.totalTime(Number(t),!1!==e)},o.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,!1!==e,!0)},o.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},o.render=function(t,e,i){},o.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},o.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<i+this.totalDuration()/this._timeScale-1e-8},o._enabled=function(t,e){return u||a.wake(),this._gc=!t,this._active=this.isActive(),!0!==e&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},o._kill=function(t,e){return this._enabled(!1,!1)},o.kill=function(t,e){return this._kill(t,e),this},o._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},o._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},o._callback=function(t){var e=this.vars,i=e[t],n=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this;switch(n?n.length:0){case 0:i.call(r);break;case 1:i.call(r,n[0]);break;case 2:i.call(r,n[0],n[1]);break;default:i.apply(r,n)}},o.eventCallback=function(t,e,i,n){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=d(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,r[t+"Scope"]=n),"onUpdate"===t&&(this._onUpdate=e)}return this},o.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},o.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},o.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},o.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},o.totalTime=function(t,e,i){if(u||a.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(t>n&&!i&&(t=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(I.length&&K(),this.render(t,e,!1),I.length&&K())}return this},o.progress=o.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},o.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},o.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},o.timeScale=function(t){if(!arguments.length)return this._timeScale;var e,i;for(t=t||1e-8,this._timeline&&this._timeline.smoothChildTiming&&(i=(e=this._pauseTime)||0===e?e:this._timeline.totalTime(),this._startTime=i-(i-this._startTime)*this._timeScale/t),this._timeScale=t,i=this.timeline;i&&i.timeline;)i._dirty=!0,i.totalDuration(),i=i.timeline;return this},o.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},o.paused=function(t){if(!arguments.length)return this._paused;var e,i,n=this._timeline;return t!=this._paused&&n&&(u||t||a.wake(),i=(e=n.rawTime())-this._pauseTime,!t&&n.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=n.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var E=y("core.SimpleTimeline",(function(t){M.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0}));(o=E.prototype=new M).constructor=E,o.kill()._gc=!1,o._first=o._last=o._recent=null,o._sortChildren=!1,o.add=o.insert=function(t,e,i,n){var r,s;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=this.rawTime()-(t._timeline.rawTime()-t._pauseTime)),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(s=t._startTime;r&&r._startTime>s;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},o._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},o.render=function(t,e,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)n=r._next,(r._active||t>=r._startTime&&!r._paused&&!r._gc)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n},o.rawTime=function(){return u||a.wake(),this._totalTime};var F=y("TweenLite",(function(e,i,n){if(M.call(this,i,n),this.render=F.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:F.selector(e)||e;var r,s,o,a=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),u=this.vars.overwrite;if(this._overwrite=u=null==u?q[F.defaultOverwrite]:"number"==typeof u?u>>0:q[u],(a||e instanceof Array||e.push&&d(e))&&"number"!=typeof e[0])for(this._targets=o=p(e),this._propLookup=[],this._siblings=[],r=0;r<o.length;r++)(s=o[r])?"string"!=typeof s?s.length&&s!==t&&s[0]&&(s[0]===t||s[0].nodeType&&s[0].style&&!s.nodeType)?(o.splice(r--,1),this._targets=o=o.concat(p(s))):(this._siblings[r]=Q(s,this,!1),1===u&&this._siblings[r].length>1&&tt(s,this,null,1,this._siblings[r])):"string"==typeof(s=o[r--]=F.selector(s))&&o.splice(r+1,1):o.splice(r--,1);else this._propLookup={},this._siblings=Q(e,this,!1),1===u&&this._siblings.length>1&&tt(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&!1!==this.vars.immediateRender)&&(this._time=-1e-8,this.render(Math.min(0,-this._delay)))}),!0),C=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)};(o=F.prototype=new M).constructor=F,o.kill()._gc=!1,o.ratio=0,o._firstPT=o._targets=o._overwrittenProps=o._startAt=null,o._notifyPluginsOfEnabled=o._lazy=!1,F.version="2.1.3",F.defaultEase=o._ease=new b(null,null,1,1),F.defaultOverwrite="auto",F.ticker=a,F.autoSleep=120,F.lagSmoothing=function(t,e){a.lagSmoothing(t,e)},F.selector=t.$||t.jQuery||function(e){var n=t.$||t.jQuery;return n?(F.selector=n,n(e)):(i||(i=t.document),i?i.querySelectorAll?i.querySelectorAll(e):i.getElementById("#"===e.charAt(0)?e.substr(1):e):e)};var I=[],D={},L=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,N=/[\+-]=-?[\.\d]/,j=function(t){for(var e,i=this._firstPT;i;)e=i.blob?1===t&&null!=this.end?this.end:t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m.call(this._tween,e,this._target||i.t,this._tween):e<1e-6&&e>-1e-6&&!i.blob&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},z=function(t){return(1e3*t|0)/1e3+""},B=function(t,e,i,n){var r,s,o,a,u,l,c,f=[],h=0,p="",_=0;for(f.start=t,f.end=e,t=f[0]=t+"",e=f[1]=e+"",i&&(i(f),t=f[0],e=f[1]),f.length=0,r=t.match(L)||[],s=e.match(L)||[],n&&(n._next=null,n.blob=1,f._firstPT=f._applyPT=n),u=s.length,a=0;a<u;a++)c=s[a],p+=(l=e.substr(h,e.indexOf(c,h)-h))||!a?l:",",h+=l.length,_?_=(_+1)%5:"rgba("===l.substr(-5)&&(_=1),c===r[a]||r.length<=a?p+=c:(p&&(f.push(p),p=""),o=parseFloat(r[a]),f.push(o),f._firstPT={_next:f._firstPT,t:f,p:f.length-1,s:o,c:("="===c.charAt(1)?parseInt(c.charAt(0)+"1",10)*parseFloat(c.substr(2)):parseFloat(c)-o)||0,f:0,m:_&&_<4?Math.round:z}),h+=c.length;return(p+=e.substr(h))&&f.push(p),f.setRatio=j,N.test(e)&&(f.end=null),f},X=function(t,e,i,n,r,s,o,a,u){"function"==typeof n&&(n=n(u||0,t));var l=typeof t[e],c="function"!==l?"":e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),f="get"!==i?i:c?o?t[c](o):t[c]():t[e],h="string"==typeof n&&"="===n.charAt(1),p={t:t,p:e,s:f,f:"function"===l,pg:0,n:r||e,m:s?"function"==typeof s?s:Math.round:0,pr:0,c:h?parseInt(n.charAt(0)+"1",10)*parseFloat(n.substr(2)):parseFloat(n)-f||0};if(("number"!=typeof f||"number"!=typeof n&&!h)&&(o||isNaN(f)||!h&&isNaN(n)||"boolean"==typeof f||"boolean"==typeof n?(p.fp=o,p={t:B(f,h?parseFloat(p.s)+p.c+(p.s+"").replace(/[0-9\-\.]/g,""):n,a||F.defaultStringFilter,p),p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):(p.s=parseFloat(f),h||(p.c=parseFloat(n)-p.s||0))),p.c)return(p._next=this._firstPT)&&(p._next._prev=p),this._firstPT=p,p},V=F._internals={isArray:d,isSelector:C,lazyTweens:I,blobDif:B},Y=F._plugins={},U=V.tweenLookup={},W=0,G=V.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1,yoyoEase:1,stagger:1},q={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},H=M._rootFramesTimeline=new E,Z=M._rootTimeline=new E,$=30,K=V.lazyRender=function(){var t,e,i=I.length;for(D={},t=0;t<i;t++)(e=I[t])&&!1!==e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0),e._lazy=!1);I.length=0};Z._startTime=a.time,H._startTime=a.frame,Z._active=H._active=!0,setTimeout(K,1),M._updateRoot=F.render=function(){var t,e,i;if(I.length&&K(),Z.render((a.time-Z._startTime)*Z._timeScale,!1,!1),H.render((a.frame-H._startTime)*H._timeScale,!1,!1),I.length&&K(),a.frame>=$){for(i in $=a.frame+(parseInt(F.autoSleep,10)||120),U){for(t=(e=U[i].tweens).length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete U[i]}if((!(i=Z._first)||i._paused)&&F.autoSleep&&!H._first&&1===a._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||a.sleep()}}},a.addEventListener("tick",M._updateRoot);var Q=function(t,e,i){var n,r,s=t._gsTweenID;if(U[s||(t._gsTweenID=s="t"+W++)]||(U[s]={target:t,tweens:[]}),e&&((n=U[s].tweens)[r=n.length]=e,i))for(;--r>-1;)n[r]===e&&n.splice(r,1);return U[s].tweens},J=function(t,e,i,n){var r,s,o=t.vars.onOverwrite;return o&&(r=o(t,e,i,n)),(o=F.onOverwrite)&&(s=o(t,e,i,n)),!1!==r&&!1!==s},tt=function(t,e,i,n,r){var s,o,a,u;if(1===n||n>=4){for(u=r.length,s=0;s<u;s++)if((a=r[s])!==e)a._gc||a._kill(null,t,e)&&(o=!0);else if(5===n)break;return o}var l,c=e._startTime+1e-8,f=[],h=0,p=0===e._duration;for(s=r.length;--s>-1;)(a=r[s])===e||a._gc||a._paused||(a._timeline!==e._timeline?(l=l||et(e,0,p),0===et(a,l,p)&&(f[h++]=a)):a._startTime<=c&&a._startTime+a.totalDuration()/a._timeScale>c&&((p||!a._initted)&&c-a._startTime<=2e-8||(f[h++]=a)));for(s=h;--s>-1;)if(u=(a=f[s])._firstPT,2===n&&a._kill(i,t,e)&&(o=!0),2!==n||!a._firstPT&&a._initted&&u){if(2!==n&&!J(a,e))continue;a._enabled(!1,!1)&&(o=!0)}return o},et=function(t,e,i){for(var n=t._timeline,r=n._timeScale,s=t._startTime;n._timeline;){if(s+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return(s/=r)>e?s-e:i&&s===e||!t._initted&&s-e<2e-8?1e-8:(s+=t.totalDuration()/t._timeScale/r)>e+1e-8?0:s-e-1e-8};o._init=function(){var t,e,i,n,r,s,o=this.vars,a=this._overwrittenProps,u=this._duration,l=!!o.immediateRender,c=o.ease,f=this._startAt;if(o.startAt){for(n in f&&(f.render(-1,!0),f.kill()),r={},o.startAt)r[n]=o.startAt[n];if(r.data="isStart",r.overwrite=!1,r.immediateRender=!0,r.lazy=l&&!1!==o.lazy,r.startAt=r.delay=null,r.onUpdate=o.onUpdate,r.onUpdateParams=o.onUpdateParams,r.onUpdateScope=o.onUpdateScope||o.callbackScope||this,this._startAt=F.to(this.target||{},0,r),l)if(this._time>0)this._startAt=null;else if(0!==u)return}else if(o.runBackwards&&0!==u)if(f)f.render(-1,!0),f.kill(),this._startAt=null;else{for(n in 0!==this._time&&(l=!1),i={},o)G[n]&&"autoCSS"!==n||(i[n]=o[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=l&&!1!==o.lazy,i.immediateRender=l,this._startAt=F.to(this.target,0,i),l){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=c=c?c instanceof b?c:"function"==typeof c?new b(c,o.easeParams):w[c]||F.defaultEase:F.defaultEase,o.easeParams instanceof Array&&c.config&&(this._ease=c.config.apply(c,o.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(s=this._targets.length,t=0;t<s;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],a?a[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,a,0);if(e&&F._onPluginEvent("_onInitAllProps",this),a&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),o.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=o.onUpdate,this._initted=!0},o._initProps=function(e,i,n,r,s){var o,a,u,l,c,f;if(null==e)return!1;for(o in D[e._gsTweenID]&&K(),this.vars.css||e.style&&e!==t&&e.nodeType&&Y.css&&!1!==this.vars.autoCSS&&function(t,e){var i,n={};for(i in t)G[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!Y[i]||Y[i]&&Y[i]._autoCSS)||(n[i]=t[i],delete t[i]);t.css=n}(this.vars,e),this.vars)if(f=this.vars[o],G[o])f&&(f instanceof Array||f.push&&d(f))&&-1!==f.join("").indexOf("{self}")&&(this.vars[o]=f=this._swapSelfInParams(f,this));else if(Y[o]&&(l=new Y[o])._onInitTween(e,this.vars[o],this,s)){for(this._firstPT=c={_next:this._firstPT,t:l,p:"setRatio",s:0,c:1,f:1,n:o,pg:1,pr:l._priority,m:0},a=l._overwriteProps.length;--a>-1;)i[l._overwriteProps[a]]=this._firstPT;(l._priority||l._onInitAllProps)&&(u=!0),(l._onDisable||l._onEnable)&&(this._notifyPluginsOfEnabled=!0),c._next&&(c._next._prev=c)}else i[o]=X.call(this,e,o,"get",f,o,0,null,this.vars.stringFilter,s);return r&&this._kill(r,e)?this._initProps(e,i,n,r,s):this._overwrite>1&&this._firstPT&&n.length>1&&tt(e,this,i,this._overwrite,n)?(this._kill(i,e),this._initProps(e,i,n,r,s)):(this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration)&&(D[e._gsTweenID]=!0),u)},o.render=function(t,e,i){var n,r,s,o,a=this._time,u=this._duration,l=this._rawPrevTime;if(t>=u-1e-8&&t>=0)this._totalTime=this._time=u,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===u&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(l<0||t<=0&&t>=-1e-8||1e-8===l&&"isPause"!==this.data)&&l!==t&&(i=!0,l>1e-8&&(r="onReverseComplete")),this._rawPrevTime=o=!e||t||l===t?t:1e-8);else if(t<1e-8)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===u&&l>0)&&(r="onReverseComplete",n=this._reversed),t>-1e-8?t=0:t<0&&(this._active=!1,0===u&&(this._initted||!this.vars.lazy||i)&&(l>=0&&(1e-8!==l||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=o=!e||t||l===t?t:1e-8)),(!this._initted||this._startAt&&this._startAt.progress())&&(i=!0);else if(this._totalTime=this._time=t,this._easeType){var c=t/u,f=this._easeType,h=this._easePower;(1===f||3===f&&c>=.5)&&(c=1-c),3===f&&(c*=2),1===h?c*=c:2===h?c*=c*c:3===h?c*=c*c*c:4===h&&(c*=c*c*c*c),this.ratio=1===f?1-c:2===f?c:t/u<.5?c/2:1-c/2}else this.ratio=this._ease.getRatio(t/u);if(this._time!==a||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=l,I.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/u):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&t>=0&&(this._active=!0),0===a&&(this._startAt&&(t>=0?this._startAt.render(t,!0,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==u||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&-1e-4!==t&&this._startAt.render(t,!0,i),e||(this._time!==a||n||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&-1e-4!==t&&this._startAt.render(t,!0,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===u&&1e-8===this._rawPrevTime&&1e-8!==o&&(this._rawPrevTime=0)))}},o._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:F.selector(e)||e;var n,r,s,o,a,u,l,c,f,h=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline,p=this._firstPT;if((d(e)||C(e))&&"number"!=typeof e[0])for(n=e.length;--n>-1;)this._kill(t,e[n],i)&&(u=!0);else{if(this._targets){for(n=this._targets.length;--n>-1;)if(e===this._targets[n]){a=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=t?this._overwrittenProps[n]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){if(l=t||a,c=t!==r&&"all"!==r&&t!==a&&("object"!=typeof t||!t._tempKill),i&&(F.onOverwrite||this.vars.onOverwrite)){for(s in l)a[s]&&(f||(f=[]),f.push(s));if((f||!t)&&!J(this,i,e,f))return!1}for(s in l)(o=a[s])&&(h&&(o.f?o.t[o.p](o.s):o.t[o.p]=o.s,u=!0),o.pg&&o.t._kill(l)&&(u=!0),o.pg&&0!==o.t._overwriteProps.length||(o._prev?o._prev._next=o._next:o===this._firstPT&&(this._firstPT=o._next),o._next&&(o._next._prev=o._prev),o._next=o._prev=null),delete a[s]),c&&(r[s]=1);!this._firstPT&&this._initted&&p&&this._enabled(!1,!1)}}return u},o.invalidate=function(){this._notifyPluginsOfEnabled&&F._onPluginEvent("_onDisable",this);var t=this._time;return this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],M.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-1e-8,this.render(t,!1,!1!==this.vars.lazy)),this},o._enabled=function(t,e){if(u||a.wake(),t&&this._gc){var i,n=this._targets;if(n)for(i=n.length;--i>-1;)this._siblings[i]=Q(n[i],this,!0);else this._siblings=Q(this.target,this,!0)}return M.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&F._onPluginEvent(t?"_onEnable":"_onDisable",this)},F.to=function(t,e,i){return new F(t,e,i)},F.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new F(t,e,i)},F.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new F(t,e,n)},F.delayedCall=function(t,e,i,n,r){return new F(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},F.set=function(t,e){return new F(t,0,e)},F.getTweensOf=function(t,e){if(null==t)return[];var i,n,r,s;if(t="string"!=typeof t?t:F.selector(t)||t,(d(t)||C(t))&&"number"!=typeof t[0]){for(i=t.length,n=[];--i>-1;)n=n.concat(F.getTweensOf(t[i],e));for(i=n.length;--i>-1;)for(s=n[i],r=i;--r>-1;)s===n[r]&&n.splice(i,1)}else if(t._gsTweenID)for(i=(n=Q(t).concat()).length;--i>-1;)(n[i]._gc||e&&!n[i].isActive())&&n.splice(i,1);return n||[]},F.killTweensOf=F.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var n=F.getTweensOf(t,e),r=n.length;--r>-1;)n[r]._kill(i,t)};var it=y("plugins.TweenPlugin",(function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=it.prototype}),!0);if(o=it.prototype,it.version="1.19.0",it.API=2,o._firstPT=null,o._addTween=X,o.setRatio=j,o._kill=function(t){var e,i=this._overwriteProps,n=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;n;)null!=t[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},o._mod=o._roundProps=function(t){for(var e,i=this._firstPT;i;)(e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},F._onPluginEvent=function(t,e){var i,n,r,s,o,a=e._firstPT;if("_onInitAllProps"===t){for(;a;){for(o=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:s)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:s=a,a=o}a=e._firstPT=r}for(;a;)a.pg&&"function"==typeof a.t[t]&&a.t[t]()&&(i=!0),a=a._next;return i},it.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===it.API&&(Y[(new t[e])._propName]=t[e]);return!0},g.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,n=t.priority||0,r=t.overwriteProps,s={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},o=y("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",(function(){it.call(this,i,n),this._overwriteProps=r||[]}),!0===t.global),a=o.prototype=new it(i);for(e in a.constructor=o,o.API=t.API,s)"function"==typeof t[e]&&(a[s[e]]=t[e]);return o.version=t.version,it.activate([o]),o},r=t._gsQueue){for(s=0;s<r.length;s++)r[s]();for(o in v)v[o].func||t.console.log("GSAP encountered missing dependency: "+o)}return u=!1,F}(n),s=n.GreenSockGlobals,o=s.com.greensock,a=o.core.SimpleTimeline,u=o.core.Animation,l=s.Ease,c=(s.Linear,s.Power1,s.Power2,s.Power3,s.Power4,s.TweenPlugin);o.events.EventDispatcher}).call(this,i(290)(t))},function(t,e,i){var n=i(2),r=i(8),s=i(15),o=i(12),a=i(18),u=function(t,e,i){var l,c,f,h,p=t&u.F,_=t&u.G,d=t&u.S,v=t&u.P,m=t&u.B,g=_?n:d?n[e]||(n[e]={}):(n[e]||{}).prototype,y=_?r:r[e]||(r[e]={}),x=y.prototype||(y.prototype={});for(l in _&&(i=e),i)f=((c=!p&&g&&void 0!==g[l])?g:i)[l],h=m&&c?a(f,n):v&&"function"==typeof f?a(Function.call,f):f,g&&o(g,l,f,t&u.U),y[l]!=f&&s(y,l,h),v&&x[l]!=f&&(x[l]=f)};n.core=r,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},function(t,e){var i=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=i)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,i){var n=i(5);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,i){var n=i(49)("wks"),r=i(30),s=i(2).Symbol,o="function"==typeof s;(t.exports=function(t){return n[t]||(n[t]=o&&s[t]||(o?s:r)("Symbol."+t))}).store=n},function(t,e,i){var n=i(20),r=Math.min;t.exports=function(t){return t>0?r(n(t),9007199254740991):0}},function(t,e){var i=t.exports={version:"2.6.9"};"number"==typeof __e&&(__e=i)},function(t,e,i){t.exports=!i(3)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,e,i){var n=i(4),r=i(86),s=i(27),o=Object.defineProperty;e.f=i(9)?Object.defineProperty:function(t,e,i){if(n(t),e=s(e,!0),n(i),r)try{return o(t,e,i)}catch(t){}if("get"in i||"set"in i)throw TypeError("Accessors not supported!");return"value"in i&&(t[e]=i.value),t}},function(t,e,i){var n=i(25);t.exports=function(t){return Object(n(t))}},function(t,e,i){var n=i(2),r=i(15),s=i(14),o=i(30)("src"),a=i(121),u=(""+a).split("toString");i(8).inspectSource=function(t){return a.call(t)},(t.exports=function(t,e,i,a){var l="function"==typeof i;l&&(s(i,"name")||r(i,"name",e)),t[e]!==i&&(l&&(s(i,o)||r(i,o,t[e]?""+t[e]:u.join(String(e)))),t===n?t[e]=i:a?t[e]?t[e]=i:r(t,e,i):(delete t[e],r(t,e,i)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[o]||a.call(this)}))},function(t,e,i){var n=i(1),r=i(3),s=i(25),o=/"/g,a=function(t,e,i,n){var r=String(s(t)),a="<"+e;return""!==i&&(a+=" "+i+'="'+String(n).replace(o,"&quot;")+'"'),a+">"+r+"</"+e+">"};t.exports=function(t,e){var i={};i[t]=e(a),n(n.P+n.F*r((function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3})),"String",i)}},function(t,e){var i={}.hasOwnProperty;t.exports=function(t,e){return i.call(t,e)}},function(t,e,i){var n=i(10),r=i(29);t.exports=i(9)?function(t,e,i){return n.f(t,e,r(1,i))}:function(t,e,i){return t[e]=i,t}},function(t,e,i){var n=i(45),r=i(25);t.exports=function(t){return n(r(t))}},function(t,e,i){"use strict";var n=i(3);t.exports=function(t,e){return!!t&&n((function(){e?t.call(null,(function(){}),1):t.call(null)}))}},function(t,e,i){var n=i(19);t.exports=function(t,e,i){if(n(t),void 0===e)return t;switch(i){case 1:return function(i){return t.call(e,i)};case 2:return function(i,n){return t.call(e,i,n)};case 3:return function(i,n,r){return t.call(e,i,n,r)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e){var i=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:i)(t)}},function(t,e,i){var n=i(46),r=i(29),s=i(16),o=i(27),a=i(14),u=i(86),l=Object.getOwnPropertyDescriptor;e.f=i(9)?l:function(t,e){if(t=s(t),e=o(e,!0),u)try{return l(t,e)}catch(t){}if(a(t,e))return r(!n.f.call(t,e),t[e])}},function(t,e,i){var n=i(1),r=i(8),s=i(3);t.exports=function(t,e){var i=(r.Object||{})[t]||Object[t],o={};o[t]=e(i),n(n.S+n.F*s((function(){i(1)})),"Object",o)}},function(t,e,i){var n=i(18),r=i(45),s=i(11),o=i(7),a=i(102);t.exports=function(t,e){var i=1==t,u=2==t,l=3==t,c=4==t,f=6==t,h=5==t||f,p=e||a;return function(e,a,_){for(var d,v,m=s(e),g=r(m),y=n(a,_,3),x=o(g.length),b=0,w=i?p(e,x):u?p(e,0):void 0;x>b;b++)if((h||b in g)&&(v=y(d=g[b],b,m),t))if(i)w[b]=v;else if(v)switch(t){case 3:return!0;case 5:return d;case 6:return b;case 2:w.push(d)}else if(c)return!1;return f?-1:l||c?c:w}}},function(t,e){var i={}.toString;t.exports=function(t){return i.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,i){"use strict";if(i(9)){var n=i(31),r=i(2),s=i(3),o=i(1),a=i(60),u=i(85),l=i(18),c=i(43),f=i(29),h=i(15),p=i(44),_=i(20),d=i(7),v=i(113),m=i(33),g=i(27),y=i(14),x=i(47),b=i(5),w=i(11),T=i(77),S=i(34),P=i(36),O=i(35).f,A=i(79),k=i(30),M=i(6),R=i(23),E=i(50),F=i(48),C=i(81),I=i(41),D=i(53),L=i(42),N=i(80),j=i(104),z=i(10),B=i(21),X=z.f,V=B.f,Y=r.RangeError,U=r.TypeError,W=r.Uint8Array,G=Array.prototype,q=u.ArrayBuffer,H=u.DataView,Z=R(0),$=R(2),K=R(3),Q=R(4),J=R(5),tt=R(6),et=E(!0),it=E(!1),nt=C.values,rt=C.keys,st=C.entries,ot=G.lastIndexOf,at=G.reduce,ut=G.reduceRight,lt=G.join,ct=G.sort,ft=G.slice,ht=G.toString,pt=G.toLocaleString,_t=M("iterator"),dt=M("toStringTag"),vt=k("typed_constructor"),mt=k("def_constructor"),gt=a.CONSTR,yt=a.TYPED,xt=a.VIEW,bt=R(1,(function(t,e){return Ot(F(t,t[mt]),e)})),wt=s((function(){return 1===new W(new Uint16Array([1]).buffer)[0]})),Tt=!!W&&!!W.prototype.set&&s((function(){new W(1).set({})})),St=function(t,e){var i=_(t);if(i<0||i%e)throw Y("Wrong offset!");return i},Pt=function(t){if(b(t)&&yt in t)return t;throw U(t+" is not a typed array!")},Ot=function(t,e){if(!(b(t)&&vt in t))throw U("It is not a typed array constructor!");return new t(e)},At=function(t,e){return kt(F(t,t[mt]),e)},kt=function(t,e){for(var i=0,n=e.length,r=Ot(t,n);n>i;)r[i]=e[i++];return r},Mt=function(t,e,i){X(t,e,{get:function(){return this._d[i]}})},Rt=function(t){var e,i,n,r,s,o,a=w(t),u=arguments.length,c=u>1?arguments[1]:void 0,f=void 0!==c,h=A(a);if(null!=h&&!T(h)){for(o=h.call(a),n=[],e=0;!(s=o.next()).done;e++)n.push(s.value);a=n}for(f&&u>2&&(c=l(c,arguments[2],2)),e=0,i=d(a.length),r=Ot(this,i);i>e;e++)r[e]=f?c(a[e],e):a[e];return r},Et=function(){for(var t=0,e=arguments.length,i=Ot(this,e);e>t;)i[t]=arguments[t++];return i},Ft=!!W&&s((function(){pt.call(new W(1))})),Ct=function(){return pt.apply(Ft?ft.call(Pt(this)):Pt(this),arguments)},It={copyWithin:function(t,e){return j.call(Pt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return Q(Pt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return N.apply(Pt(this),arguments)},filter:function(t){return At(this,$(Pt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return J(Pt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Pt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){Z(Pt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return it(Pt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(Pt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return lt.apply(Pt(this),arguments)},lastIndexOf:function(t){return ot.apply(Pt(this),arguments)},map:function(t){return bt(Pt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return at.apply(Pt(this),arguments)},reduceRight:function(t){return ut.apply(Pt(this),arguments)},reverse:function(){for(var t,e=Pt(this).length,i=Math.floor(e/2),n=0;n<i;)t=this[n],this[n++]=this[--e],this[e]=t;return this},some:function(t){return K(Pt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ct.call(Pt(this),t)},subarray:function(t,e){var i=Pt(this),n=i.length,r=m(t,n);return new(F(i,i[mt]))(i.buffer,i.byteOffset+r*i.BYTES_PER_ELEMENT,d((void 0===e?n:m(e,n))-r))}},Dt=function(t,e){return At(this,ft.call(Pt(this),t,e))},Lt=function(t){Pt(this);var e=St(arguments[1],1),i=this.length,n=w(t),r=d(n.length),s=0;if(r+e>i)throw Y("Wrong length!");for(;s<r;)this[e+s]=n[s++]},Nt={entries:function(){return st.call(Pt(this))},keys:function(){return rt.call(Pt(this))},values:function(){return nt.call(Pt(this))}},jt=function(t,e){return b(t)&&t[yt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},zt=function(t,e){return jt(t,e=g(e,!0))?f(2,t[e]):V(t,e)},Bt=function(t,e,i){return!(jt(t,e=g(e,!0))&&b(i)&&y(i,"value"))||y(i,"get")||y(i,"set")||i.configurable||y(i,"writable")&&!i.writable||y(i,"enumerable")&&!i.enumerable?X(t,e,i):(t[e]=i.value,t)};gt||(B.f=zt,z.f=Bt),o(o.S+o.F*!gt,"Object",{getOwnPropertyDescriptor:zt,defineProperty:Bt}),s((function(){ht.call({})}))&&(ht=pt=function(){return lt.call(this)});var Xt=p({},It);p(Xt,Nt),h(Xt,_t,Nt.values),p(Xt,{slice:Dt,set:Lt,constructor:function(){},toString:ht,toLocaleString:Ct}),Mt(Xt,"buffer","b"),Mt(Xt,"byteOffset","o"),Mt(Xt,"byteLength","l"),Mt(Xt,"length","e"),X(Xt,dt,{get:function(){return this[yt]}}),t.exports=function(t,e,i,u){var l=t+((u=!!u)?"Clamped":"")+"Array",f="get"+t,p="set"+t,_=r[l],m=_||{},g=_&&P(_),y=!_||!a.ABV,w={},T=_&&_.prototype,A=function(t,i){X(t,i,{get:function(){return function(t,i){var n=t._d;return n.v[f](i*e+n.o,wt)}(this,i)},set:function(t){return function(t,i,n){var r=t._d;u&&(n=(n=Math.round(n))<0?0:n>255?255:255&n),r.v[p](i*e+r.o,n,wt)}(this,i,t)},enumerable:!0})};y?(_=i((function(t,i,n,r){c(t,_,l,"_d");var s,o,a,u,f=0,p=0;if(b(i)){if(!(i instanceof q||"ArrayBuffer"==(u=x(i))||"SharedArrayBuffer"==u))return yt in i?kt(_,i):Rt.call(_,i);s=i,p=St(n,e);var m=i.byteLength;if(void 0===r){if(m%e)throw Y("Wrong length!");if((o=m-p)<0)throw Y("Wrong length!")}else if((o=d(r)*e)+p>m)throw Y("Wrong length!");a=o/e}else a=v(i),s=new q(o=a*e);for(h(t,"_d",{b:s,o:p,l:o,e:a,v:new H(s)});f<a;)A(t,f++)})),T=_.prototype=S(Xt),h(T,"constructor",_)):s((function(){_(1)}))&&s((function(){new _(-1)}))&&D((function(t){new _,new _(null),new _(1.5),new _(t)}),!0)||(_=i((function(t,i,n,r){var s;return c(t,_,l),b(i)?i instanceof q||"ArrayBuffer"==(s=x(i))||"SharedArrayBuffer"==s?void 0!==r?new m(i,St(n,e),r):void 0!==n?new m(i,St(n,e)):new m(i):yt in i?kt(_,i):Rt.call(_,i):new m(v(i))})),Z(g!==Function.prototype?O(m).concat(O(g)):O(m),(function(t){t in _||h(_,t,m[t])})),_.prototype=T,n||(T.constructor=_));var k=T[_t],M=!!k&&("values"==k.name||null==k.name),R=Nt.values;h(_,vt,!0),h(T,yt,l),h(T,xt,!0),h(T,mt,_),(u?new _(1)[dt]==l:dt in T)||X(T,dt,{get:function(){return l}}),w[l]=_,o(o.G+o.W+o.F*(_!=m),w),o(o.S,l,{BYTES_PER_ELEMENT:e}),o(o.S+o.F*s((function(){m.of.call(_,1)})),l,{from:Rt,of:Et}),"BYTES_PER_ELEMENT"in T||h(T,"BYTES_PER_ELEMENT",e),o(o.P,l,It),L(l),o(o.P+o.F*Tt,l,{set:Lt}),o(o.P+o.F*!M,l,Nt),n||T.toString==ht||(T.toString=ht),o(o.P+o.F*s((function(){new _(1).slice()})),l,{slice:Dt}),o(o.P+o.F*(s((function(){return[1,2].toLocaleString()!=new _([1,2]).toLocaleString()}))||!s((function(){T.toLocaleString.call([1,2])}))),l,{toLocaleString:Ct}),I[l]=M?k:R,n||M||h(T,_t,R)}}else t.exports=function(){}},function(t,e,i){var n=i(5);t.exports=function(t,e){if(!n(t))return t;var i,r;if(e&&"function"==typeof(i=t.toString)&&!n(r=i.call(t)))return r;if("function"==typeof(i=t.valueOf)&&!n(r=i.call(t)))return r;if(!e&&"function"==typeof(i=t.toString)&&!n(r=i.call(t)))return r;throw TypeError("Can't convert object to primitive value")}},function(t,e,i){var n=i(30)("meta"),r=i(5),s=i(14),o=i(10).f,a=0,u=Object.isExtensible||function(){return!0},l=!i(3)((function(){return u(Object.preventExtensions({}))})),c=function(t){o(t,n,{value:{i:"O"+ ++a,w:{}}})},f=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!r(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!s(t,n)){if(!u(t))return"F";if(!e)return"E";c(t)}return t[n].i},getWeak:function(t,e){if(!s(t,n)){if(!u(t))return!0;if(!e)return!1;c(t)}return t[n].w},onFreeze:function(t){return l&&f.NEED&&u(t)&&!s(t,n)&&c(t),t}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var i=0,n=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++i+n).toString(36))}},function(t,e){t.exports=!1},function(t,e,i){var n=i(88),r=i(64);t.exports=Object.keys||function(t){return n(t,r)}},function(t,e,i){var n=i(20),r=Math.max,s=Math.min;t.exports=function(t,e){return(t=n(t))<0?r(t+e,0):s(t,e)}},function(t,e,i){var n=i(4),r=i(89),s=i(64),o=i(63)("IE_PROTO"),a=function(){},u=function(){var t,e=i(61)("iframe"),n=s.length;for(e.style.display="none",i(65).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),u=t.F;n--;)delete u.prototype[s[n]];return u()};t.exports=Object.create||function(t,e){var i;return null!==t?(a.prototype=n(t),i=new a,a.prototype=null,i[o]=t):i=u(),void 0===e?i:r(i,e)}},function(t,e,i){var n=i(88),r=i(64).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,r)}},function(t,e,i){var n=i(14),r=i(11),s=i(63)("IE_PROTO"),o=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=r(t),n(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?o:null}},function(t,e,i){var n=i(6)("unscopables"),r=Array.prototype;null==r[n]&&i(15)(r,n,{}),t.exports=function(t){r[n][t]=!0}},function(t,e,i){var n=i(5);t.exports=function(t,e){if(!n(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,i){var n=i(10).f,r=i(14),s=i(6)("toStringTag");t.exports=function(t,e,i){t&&!r(t=i?t:t.prototype,s)&&n(t,s,{configurable:!0,value:e})}},function(t,e,i){var n=i(1),r=i(25),s=i(3),o=i(67),a="["+o+"]",u=RegExp("^"+a+a+"*"),l=RegExp(a+a+"*$"),c=function(t,e,i){var r={},a=s((function(){return!!o[t]()||"​"!="​"[t]()})),u=r[t]=a?e(f):o[t];i&&(r[i]=u),n(n.P+n.F*a,"String",r)},f=c.trim=function(t,e){return t=String(r(t)),1&e&&(t=t.replace(u,"")),2&e&&(t=t.replace(l,"")),t};t.exports=c},function(t,e){t.exports={}},function(t,e,i){"use strict";var n=i(2),r=i(10),s=i(9),o=i(6)("species");t.exports=function(t){var e=n[t];s&&e&&!e[o]&&r.f(e,o,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,i,n){if(!(t instanceof e)||void 0!==n&&n in t)throw TypeError(i+": incorrect invocation!");return t}},function(t,e,i){var n=i(12);t.exports=function(t,e,i){for(var r in e)n(t,r,e[r],i);return t}},function(t,e,i){var n=i(24);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,i){var n=i(24),r=i(6)("toStringTag"),s="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,i,o;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(i=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),r))?i:s?n(e):"Object"==(o=n(e))&&"function"==typeof e.callee?"Arguments":o}},function(t,e,i){var n=i(4),r=i(19),s=i(6)("species");t.exports=function(t,e){var i,o=n(t).constructor;return void 0===o||null==(i=n(o)[s])?e:r(i)}},function(t,e,i){var n=i(8),r=i(2),s=r["__core-js_shared__"]||(r["__core-js_shared__"]={});(t.exports=function(t,e){return s[t]||(s[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:i(31)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e,i){var n=i(16),r=i(7),s=i(33);t.exports=function(t){return function(e,i,o){var a,u=n(e),l=r(u.length),c=s(o,l);if(t&&i!=i){for(;l>c;)if((a=u[c++])!=a)return!0}else for(;l>c;c++)if((t||c in u)&&u[c]===i)return t||c||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,i){var n=i(24);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,i){var n=i(6)("iterator"),r=!1;try{var s=[7][n]();s.return=function(){r=!0},Array.from(s,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!r)return!1;var i=!1;try{var s=[7],o=s[n]();o.next=function(){return{done:i=!0}},s[n]=function(){return o},t(s)}catch(t){}return i}},function(t,e,i){"use strict";var n=i(4);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,i){"use strict";var n=i(47),r=RegExp.prototype.exec;t.exports=function(t,e){var i=t.exec;if("function"==typeof i){var s=i.call(t,e);if("object"!=typeof s)throw new TypeError("RegExp exec method returned something other than an Object or null");return s}if("RegExp"!==n(t))throw new TypeError("RegExp#exec called on incompatible receiver");return r.call(t,e)}},function(t,e,i){"use strict";i(106);var n=i(12),r=i(15),s=i(3),o=i(25),a=i(6),u=i(82),l=a("species"),c=!s((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),f=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var i="ab".split(t);return 2===i.length&&"a"===i[0]&&"b"===i[1]}();t.exports=function(t,e,i){var h=a(t),p=!s((function(){var e={};return e[h]=function(){return 7},7!=""[t](e)})),_=p?!s((function(){var e=!1,i=/a/;return i.exec=function(){return e=!0,null},"split"===t&&(i.constructor={},i.constructor[l]=function(){return i}),i[h](""),!e})):void 0;if(!p||!_||"replace"===t&&!c||"split"===t&&!f){var d=/./[h],v=i(o,h,""[t],(function(t,e,i,n,r){return e.exec===u?p&&!r?{done:!0,value:d.call(e,i,n)}:{done:!0,value:t.call(i,e,n)}:{done:!1}})),m=v[0],g=v[1];n(String.prototype,t,m),r(RegExp.prototype,h,2==e?function(t,e){return g.call(t,this,e)}:function(t){return g.call(t,this)})}}},function(t,e,i){var n=i(18),r=i(101),s=i(77),o=i(4),a=i(7),u=i(79),l={},c={};(e=t.exports=function(t,e,i,f,h){var p,_,d,v,m=h?function(){return t}:u(t),g=n(i,f,e?2:1),y=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(s(m)){for(p=a(t.length);p>y;y++)if((v=e?g(o(_=t[y])[0],_[1]):g(t[y]))===l||v===c)return v}else for(d=m.call(t);!(_=d.next()).done;)if((v=r(d,g,_.value,e))===l||v===c)return v}).BREAK=l,e.RETURN=c},function(t,e,i){var n=i(2).navigator;t.exports=n&&n.userAgent||""},function(t,e,i){"use strict";var n=i(2),r=i(1),s=i(12),o=i(44),a=i(28),u=i(57),l=i(43),c=i(5),f=i(3),h=i(53),p=i(39),_=i(68);t.exports=function(t,e,i,d,v,m){var g=n[t],y=g,x=v?"set":"add",b=y&&y.prototype,w={},T=function(t){var e=b[t];s(b,t,"delete"==t?function(t){return!(m&&!c(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!c(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!c(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,i){return e.call(this,0===t?0:t,i),this})};if("function"==typeof y&&(m||b.forEach&&!f((function(){(new y).entries().next()})))){var S=new y,P=S[x](m?{}:-0,1)!=S,O=f((function(){S.has(1)})),A=h((function(t){new y(t)})),k=!m&&f((function(){for(var t=new y,e=5;e--;)t[x](e,e);return!t.has(-0)}));A||((y=e((function(e,i){l(e,y,t);var n=_(new g,e,y);return null!=i&&u(i,v,n[x],n),n}))).prototype=b,b.constructor=y),(O||k)&&(T("delete"),T("has"),v&&T("get")),(k||P)&&T(x),m&&b.clear&&delete b.clear}else y=d.getConstructor(e,t,v,x),o(y.prototype,i),a.NEED=!0;return p(y,t),w[t]=y,r(r.G+r.W+r.F*(y!=g),w),m||d.setStrong(y,t,v),y}},function(t,e,i){for(var n,r=i(2),s=i(15),o=i(30),a=o("typed_array"),u=o("view"),l=!(!r.ArrayBuffer||!r.DataView),c=l,f=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(n=r[h[f++]])?(s(n.prototype,a,!0),s(n.prototype,u,!0)):c=!1;t.exports={ABV:l,CONSTR:c,TYPED:a,VIEW:u}},function(t,e,i){var n=i(5),r=i(2).document,s=n(r)&&n(r.createElement);t.exports=function(t){return s?r.createElement(t):{}}},function(t,e,i){e.f=i(6)},function(t,e,i){var n=i(49)("keys"),r=i(30);t.exports=function(t){return n[t]||(n[t]=r(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,i){var n=i(2).document;t.exports=n&&n.documentElement},function(t,e,i){var n=i(5),r=i(4),s=function(t,e){if(r(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=i(18)(Function.call,i(21).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,i){return s(t,i),e?t.__proto__=i:n(t,i),t}}({},!1):void 0),check:s}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,i){var n=i(5),r=i(66).set;t.exports=function(t,e,i){var s,o=e.constructor;return o!==i&&"function"==typeof o&&(s=o.prototype)!==i.prototype&&n(s)&&r&&r(t,s),t}},function(t,e,i){"use strict";var n=i(20),r=i(25);t.exports=function(t){var e=String(r(this)),i="",s=n(t);if(s<0||s==1/0)throw RangeError("Count can't be negative");for(;s>0;(s>>>=1)&&(e+=e))1&s&&(i+=e);return i}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var i=Math.expm1;t.exports=!i||i(10)>22025.465794806718||i(10)<22025.465794806718||-2e-17!=i(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:i},function(t,e,i){var n=i(20),r=i(25);t.exports=function(t){return function(e,i){var s,o,a=String(r(e)),u=n(i),l=a.length;return u<0||u>=l?t?"":void 0:(s=a.charCodeAt(u))<55296||s>56319||u+1===l||(o=a.charCodeAt(u+1))<56320||o>57343?t?a.charAt(u):s:t?a.slice(u,u+2):o-56320+(s-55296<<10)+65536}}},function(t,e,i){"use strict";var n=i(31),r=i(1),s=i(12),o=i(15),a=i(41),u=i(100),l=i(39),c=i(36),f=i(6)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,i,_,d,v,m){u(i,e,_);var g,y,x,b=function(t){if(!h&&t in P)return P[t];switch(t){case"keys":case"values":return function(){return new i(this,t)}}return function(){return new i(this,t)}},w=e+" Iterator",T="values"==d,S=!1,P=t.prototype,O=P[f]||P["@@iterator"]||d&&P[d],A=O||b(d),k=d?T?b("entries"):A:void 0,M="Array"==e&&P.entries||O;if(M&&(x=c(M.call(new t)))!==Object.prototype&&x.next&&(l(x,w,!0),n||"function"==typeof x[f]||o(x,f,p)),T&&O&&"values"!==O.name&&(S=!0,A=function(){return O.call(this)}),n&&!m||!h&&!S&&P[f]||o(P,f,A),a[e]=A,a[w]=p,d)if(g={values:T?A:b("values"),keys:v?A:b("keys"),entries:k},m)for(y in g)y in P||s(P,y,g[y]);else r(r.P+r.F*(h||S),e,g);return g}},function(t,e,i){var n=i(75),r=i(25);t.exports=function(t,e,i){if(n(e))throw TypeError("String#"+i+" doesn't accept regex!");return String(r(t))}},function(t,e,i){var n=i(5),r=i(24),s=i(6)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[s])?!!e:"RegExp"==r(t))}},function(t,e,i){var n=i(6)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(i){try{return e[n]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,i){var n=i(41),r=i(6)("iterator"),s=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||s[r]===t)}},function(t,e,i){"use strict";var n=i(10),r=i(29);t.exports=function(t,e,i){e in t?n.f(t,e,r(0,i)):t[e]=i}},function(t,e,i){var n=i(47),r=i(6)("iterator"),s=i(41);t.exports=i(8).getIteratorMethod=function(t){if(null!=t)return t[r]||t["@@iterator"]||s[n(t)]}},function(t,e,i){"use strict";var n=i(11),r=i(33),s=i(7);t.exports=function(t){for(var e=n(this),i=s(e.length),o=arguments.length,a=r(o>1?arguments[1]:void 0,i),u=o>2?arguments[2]:void 0,l=void 0===u?i:r(u,i);l>a;)e[a++]=t;return e}},function(t,e,i){"use strict";var n=i(37),r=i(105),s=i(41),o=i(16);t.exports=i(73)(Array,"Array",(function(t,e){this._t=o(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,i=this._i++;return!t||i>=t.length?(this._t=void 0,r(1)):r(0,"keys"==e?i:"values"==e?t[i]:[i,t[i]])}),"values"),s.Arguments=s.Array,n("keys"),n("values"),n("entries")},function(t,e,i){"use strict";var n,r,s=i(54),o=RegExp.prototype.exec,a=String.prototype.replace,u=o,l=(n=/a/,r=/b*/g,o.call(n,"a"),o.call(r,"a"),0!==n.lastIndex||0!==r.lastIndex),c=void 0!==/()??/.exec("")[1];(l||c)&&(u=function(t){var e,i,n,r,u=this;return c&&(i=new RegExp("^"+u.source+"$(?!\\s)",s.call(u))),l&&(e=u.lastIndex),n=o.call(u,t),l&&n&&(u.lastIndex=u.global?n.index+n[0].length:e),c&&n&&n.length>1&&a.call(n[0],i,(function(){for(r=1;r<arguments.length-2;r++)void 0===arguments[r]&&(n[r]=void 0)})),n}),t.exports=u},function(t,e,i){"use strict";var n=i(72)(!0);t.exports=function(t,e,i){return e+(i?n(t,e).length:1)}},function(t,e,i){var n,r,s,o=i(18),a=i(94),u=i(65),l=i(61),c=i(2),f=c.process,h=c.setImmediate,p=c.clearImmediate,_=c.MessageChannel,d=c.Dispatch,v=0,m={},g=function(){var t=+this;if(m.hasOwnProperty(t)){var e=m[t];delete m[t],e()}},y=function(t){g.call(t.data)};h&&p||(h=function(t){for(var e=[],i=1;arguments.length>i;)e.push(arguments[i++]);return m[++v]=function(){a("function"==typeof t?t:Function(t),e)},n(v),v},p=function(t){delete m[t]},"process"==i(24)(f)?n=function(t){f.nextTick(o(g,t,1))}:d&&d.now?n=function(t){d.now(o(g,t,1))}:_?(s=(r=new _).port2,r.port1.onmessage=y,n=o(s.postMessage,s,1)):c.addEventListener&&"function"==typeof postMessage&&!c.importScripts?(n=function(t){c.postMessage(t+"","*")},c.addEventListener("message",y,!1)):n="onreadystatechange"in l("script")?function(t){u.appendChild(l("script")).onreadystatechange=function(){u.removeChild(this),g.call(t)}}:function(t){setTimeout(o(g,t,1),0)}),t.exports={set:h,clear:p}},function(t,e,i){"use strict";var n=i(2),r=i(9),s=i(31),o=i(60),a=i(15),u=i(44),l=i(3),c=i(43),f=i(20),h=i(7),p=i(113),_=i(35).f,d=i(10).f,v=i(80),m=i(39),g="prototype",y="Wrong index!",x=n.ArrayBuffer,b=n.DataView,w=n.Math,T=n.RangeError,S=n.Infinity,P=x,O=w.abs,A=w.pow,k=w.floor,M=w.log,R=w.LN2,E=r?"_b":"buffer",F=r?"_l":"byteLength",C=r?"_o":"byteOffset";function I(t,e,i){var n,r,s,o=new Array(i),a=8*i-e-1,u=(1<<a)-1,l=u>>1,c=23===e?A(2,-24)-A(2,-77):0,f=0,h=t<0||0===t&&1/t<0?1:0;for((t=O(t))!=t||t===S?(r=t!=t?1:0,n=u):(n=k(M(t)/R),t*(s=A(2,-n))<1&&(n--,s*=2),(t+=n+l>=1?c/s:c*A(2,1-l))*s>=2&&(n++,s/=2),n+l>=u?(r=0,n=u):n+l>=1?(r=(t*s-1)*A(2,e),n+=l):(r=t*A(2,l-1)*A(2,e),n=0));e>=8;o[f++]=255&r,r/=256,e-=8);for(n=n<<e|r,a+=e;a>0;o[f++]=255&n,n/=256,a-=8);return o[--f]|=128*h,o}function D(t,e,i){var n,r=8*i-e-1,s=(1<<r)-1,o=s>>1,a=r-7,u=i-1,l=t[u--],c=127&l;for(l>>=7;a>0;c=256*c+t[u],u--,a-=8);for(n=c&(1<<-a)-1,c>>=-a,a+=e;a>0;n=256*n+t[u],u--,a-=8);if(0===c)c=1-o;else{if(c===s)return n?NaN:l?-S:S;n+=A(2,e),c-=o}return(l?-1:1)*n*A(2,c-e)}function L(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function N(t){return[255&t]}function j(t){return[255&t,t>>8&255]}function z(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function B(t){return I(t,52,8)}function X(t){return I(t,23,4)}function V(t,e,i){d(t[g],e,{get:function(){return this[i]}})}function Y(t,e,i,n){var r=p(+i);if(r+e>t[F])throw T(y);var s=t[E]._b,o=r+t[C],a=s.slice(o,o+e);return n?a:a.reverse()}function U(t,e,i,n,r,s){var o=p(+i);if(o+e>t[F])throw T(y);for(var a=t[E]._b,u=o+t[C],l=n(+r),c=0;c<e;c++)a[u+c]=l[s?c:e-c-1]}if(o.ABV){if(!l((function(){x(1)}))||!l((function(){new x(-1)}))||l((function(){return new x,new x(1.5),new x(NaN),"ArrayBuffer"!=x.name}))){for(var W,G=(x=function(t){return c(this,x),new P(p(t))})[g]=P[g],q=_(P),H=0;q.length>H;)(W=q[H++])in x||a(x,W,P[W]);s||(G.constructor=x)}var Z=new b(new x(2)),$=b[g].setInt8;Z.setInt8(0,2147483648),Z.setInt8(1,2147483649),!Z.getInt8(0)&&Z.getInt8(1)||u(b[g],{setInt8:function(t,e){$.call(this,t,e<<24>>24)},setUint8:function(t,e){$.call(this,t,e<<24>>24)}},!0)}else x=function(t){c(this,x,"ArrayBuffer");var e=p(t);this._b=v.call(new Array(e),0),this[F]=e},b=function(t,e,i){c(this,b,"DataView"),c(t,x,"DataView");var n=t[F],r=f(e);if(r<0||r>n)throw T("Wrong offset!");if(r+(i=void 0===i?n-r:h(i))>n)throw T("Wrong length!");this[E]=t,this[C]=r,this[F]=i},r&&(V(x,"byteLength","_l"),V(b,"buffer","_b"),V(b,"byteLength","_l"),V(b,"byteOffset","_o")),u(b[g],{getInt8:function(t){return Y(this,1,t)[0]<<24>>24},getUint8:function(t){return Y(this,1,t)[0]},getInt16:function(t){var e=Y(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=Y(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return L(Y(this,4,t,arguments[1]))},getUint32:function(t){return L(Y(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return D(Y(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return D(Y(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){U(this,1,t,N,e)},setUint8:function(t,e){U(this,1,t,N,e)},setInt16:function(t,e){U(this,2,t,j,e,arguments[2])},setUint16:function(t,e){U(this,2,t,j,e,arguments[2])},setInt32:function(t,e){U(this,4,t,z,e,arguments[2])},setUint32:function(t,e){U(this,4,t,z,e,arguments[2])},setFloat32:function(t,e){U(this,4,t,X,e,arguments[2])},setFloat64:function(t,e){U(this,8,t,B,e,arguments[2])}});m(x,"ArrayBuffer"),m(b,"DataView"),a(b[g],o.VIEW,!0),e.ArrayBuffer=x,e.DataView=b},function(t,e,i){t.exports=!i(9)&&!i(3)((function(){return 7!=Object.defineProperty(i(61)("div"),"a",{get:function(){return 7}}).a}))},function(t,e,i){var n=i(2),r=i(8),s=i(31),o=i(62),a=i(10).f;t.exports=function(t){var e=r.Symbol||(r.Symbol=s?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||a(e,t,{value:o.f(t)})}},function(t,e,i){var n=i(14),r=i(16),s=i(50)(!1),o=i(63)("IE_PROTO");t.exports=function(t,e){var i,a=r(t),u=0,l=[];for(i in a)i!=o&&n(a,i)&&l.push(i);for(;e.length>u;)n(a,i=e[u++])&&(~s(l,i)||l.push(i));return l}},function(t,e,i){var n=i(10),r=i(4),s=i(32);t.exports=i(9)?Object.defineProperties:function(t,e){r(t);for(var i,o=s(e),a=o.length,u=0;a>u;)n.f(t,i=o[u++],e[i]);return t}},function(t,e,i){var n=i(16),r=i(35).f,s={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==s.call(t)?function(t){try{return r(t)}catch(t){return o.slice()}}(t):r(n(t))}},function(t,e,i){"use strict";var n=i(9),r=i(32),s=i(51),o=i(46),a=i(11),u=i(45),l=Object.assign;t.exports=!l||i(3)((function(){var t={},e={},i=Symbol(),n="abcdefghijklmnopqrst";return t[i]=7,n.split("").forEach((function(t){e[t]=t})),7!=l({},t)[i]||Object.keys(l({},e)).join("")!=n}))?function(t,e){for(var i=a(t),l=arguments.length,c=1,f=s.f,h=o.f;l>c;)for(var p,_=u(arguments[c++]),d=f?r(_).concat(f(_)):r(_),v=d.length,m=0;v>m;)p=d[m++],n&&!h.call(_,p)||(i[p]=_[p]);return i}:l},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,i){"use strict";var n=i(19),r=i(5),s=i(94),o=[].slice,a={},u=function(t,e,i){if(!(e in a)){for(var n=[],r=0;r<e;r++)n[r]="a["+r+"]";a[e]=Function("F,a","return new F("+n.join(",")+")")}return a[e](t,i)};t.exports=Function.bind||function(t){var e=n(this),i=o.call(arguments,1),a=function(){var n=i.concat(o.call(arguments));return this instanceof a?u(e,n.length,n):s(e,n,t)};return r(e.prototype)&&(a.prototype=e.prototype),a}},function(t,e){t.exports=function(t,e,i){var n=void 0===i;switch(e.length){case 0:return n?t():t.call(i);case 1:return n?t(e[0]):t.call(i,e[0]);case 2:return n?t(e[0],e[1]):t.call(i,e[0],e[1]);case 3:return n?t(e[0],e[1],e[2]):t.call(i,e[0],e[1],e[2]);case 4:return n?t(e[0],e[1],e[2],e[3]):t.call(i,e[0],e[1],e[2],e[3])}return t.apply(i,e)}},function(t,e,i){var n=i(2).parseInt,r=i(40).trim,s=i(67),o=/^[-+]?0[xX]/;t.exports=8!==n(s+"08")||22!==n(s+"0x16")?function(t,e){var i=r(String(t),3);return n(i,e>>>0||(o.test(i)?16:10))}:n},function(t,e,i){var n=i(2).parseFloat,r=i(40).trim;t.exports=1/n(i(67)+"-0")!=-1/0?function(t){var e=r(String(t),3),i=n(e);return 0===i&&"-"==e.charAt(0)?-0:i}:n},function(t,e,i){var n=i(24);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=n(t))throw TypeError(e);return+t}},function(t,e,i){var n=i(5),r=Math.floor;t.exports=function(t){return!n(t)&&isFinite(t)&&r(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,i){"use strict";var n=i(34),r=i(29),s=i(39),o={};i(15)(o,i(6)("iterator"),(function(){return this})),t.exports=function(t,e,i){t.prototype=n(o,{next:r(1,i)}),s(t,e+" Iterator")}},function(t,e,i){var n=i(4);t.exports=function(t,e,i,r){try{return r?e(n(i)[0],i[1]):e(i)}catch(e){var s=t.return;throw void 0!==s&&n(s.call(t)),e}}},function(t,e,i){var n=i(211);t.exports=function(t,e){return new(n(t))(e)}},function(t,e,i){var n=i(19),r=i(11),s=i(45),o=i(7);t.exports=function(t,e,i,a,u){n(e);var l=r(t),c=s(l),f=o(l.length),h=u?f-1:0,p=u?-1:1;if(i<2)for(;;){if(h in c){a=c[h],h+=p;break}if(h+=p,u?h<0:f<=h)throw TypeError("Reduce of empty array with no initial value")}for(;u?h>=0:f>h;h+=p)h in c&&(a=e(a,c[h],h,l));return a}},function(t,e,i){"use strict";var n=i(11),r=i(33),s=i(7);t.exports=[].copyWithin||function(t,e){var i=n(this),o=s(i.length),a=r(t,o),u=r(e,o),l=arguments.length>2?arguments[2]:void 0,c=Math.min((void 0===l?o:r(l,o))-u,o-a),f=1;for(u<a&&a<u+c&&(f=-1,u+=c-1,a+=c-1);c-- >0;)u in i?i[a]=i[u]:delete i[a],a+=f,u+=f;return i}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,i){"use strict";var n=i(82);i(1)({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},function(t,e,i){i(9)&&"g"!=/./g.flags&&i(10).f(RegExp.prototype,"flags",{configurable:!0,get:i(54)})},function(t,e,i){"use strict";var n,r,s,o,a=i(31),u=i(2),l=i(18),c=i(47),f=i(1),h=i(5),p=i(19),_=i(43),d=i(57),v=i(48),m=i(84).set,g=i(231)(),y=i(109),x=i(232),b=i(58),w=i(110),T=u.TypeError,S=u.process,P=S&&S.versions,O=P&&P.v8||"",A=u.Promise,k="process"==c(S),M=function(){},R=r=y.f,E=!!function(){try{var t=A.resolve(1),e=(t.constructor={})[i(6)("species")]=function(t){t(M,M)};return(k||"function"==typeof PromiseRejectionEvent)&&t.then(M)instanceof e&&0!==O.indexOf("6.6")&&-1===b.indexOf("Chrome/66")}catch(t){}}(),F=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},C=function(t,e){if(!t._n){t._n=!0;var i=t._c;g((function(){for(var n=t._v,r=1==t._s,s=0,o=function(e){var i,s,o,a=r?e.ok:e.fail,u=e.resolve,l=e.reject,c=e.domain;try{a?(r||(2==t._h&&L(t),t._h=1),!0===a?i=n:(c&&c.enter(),i=a(n),c&&(c.exit(),o=!0)),i===e.promise?l(T("Promise-chain cycle")):(s=F(i))?s.call(i,u,l):u(i)):l(n)}catch(t){c&&!o&&c.exit(),l(t)}};i.length>s;)o(i[s++]);t._c=[],t._n=!1,e&&!t._h&&I(t)}))}},I=function(t){m.call(u,(function(){var e,i,n,r=t._v,s=D(t);if(s&&(e=x((function(){k?S.emit("unhandledRejection",r,t):(i=u.onunhandledrejection)?i({promise:t,reason:r}):(n=u.console)&&n.error&&n.error("Unhandled promise rejection",r)})),t._h=k||D(t)?2:1),t._a=void 0,s&&e.e)throw e.v}))},D=function(t){return 1!==t._h&&0===(t._a||t._c).length},L=function(t){m.call(u,(function(){var e;k?S.emit("rejectionHandled",t):(e=u.onrejectionhandled)&&e({promise:t,reason:t._v})}))},N=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),C(e,!0))},j=function(t){var e,i=this;if(!i._d){i._d=!0,i=i._w||i;try{if(i===t)throw T("Promise can't be resolved itself");(e=F(t))?g((function(){var n={_w:i,_d:!1};try{e.call(t,l(j,n,1),l(N,n,1))}catch(t){N.call(n,t)}})):(i._v=t,i._s=1,C(i,!1))}catch(t){N.call({_w:i,_d:!1},t)}}};E||(A=function(t){_(this,A,"Promise","_h"),p(t),n.call(this);try{t(l(j,this,1),l(N,this,1))}catch(t){N.call(this,t)}},(n=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=i(44)(A.prototype,{then:function(t,e){var i=R(v(this,A));return i.ok="function"!=typeof t||t,i.fail="function"==typeof e&&e,i.domain=k?S.domain:void 0,this._c.push(i),this._a&&this._a.push(i),this._s&&C(this,!1),i.promise},catch:function(t){return this.then(void 0,t)}}),s=function(){var t=new n;this.promise=t,this.resolve=l(j,t,1),this.reject=l(N,t,1)},y.f=R=function(t){return t===A||t===o?new s(t):r(t)}),f(f.G+f.W+f.F*!E,{Promise:A}),i(39)(A,"Promise"),i(42)("Promise"),o=i(8).Promise,f(f.S+f.F*!E,"Promise",{reject:function(t){var e=R(this);return(0,e.reject)(t),e.promise}}),f(f.S+f.F*(a||!E),"Promise",{resolve:function(t){return w(a&&this===o?A:this,t)}}),f(f.S+f.F*!(E&&i(53)((function(t){A.all(t).catch(M)}))),"Promise",{all:function(t){var e=this,i=R(e),n=i.resolve,r=i.reject,s=x((function(){var i=[],s=0,o=1;d(t,!1,(function(t){var a=s++,u=!1;i.push(void 0),o++,e.resolve(t).then((function(t){u||(u=!0,i[a]=t,--o||n(i))}),r)})),--o||n(i)}));return s.e&&r(s.v),i.promise},race:function(t){var e=this,i=R(e),n=i.reject,r=x((function(){d(t,!1,(function(t){e.resolve(t).then(i.resolve,n)}))}));return r.e&&n(r.v),i.promise}})},function(t,e,i){"use strict";var n=i(19);function r(t){var e,i;this.promise=new t((function(t,n){if(void 0!==e||void 0!==i)throw TypeError("Bad Promise constructor");e=t,i=n})),this.resolve=n(e),this.reject=n(i)}t.exports.f=function(t){return new r(t)}},function(t,e,i){var n=i(4),r=i(5),s=i(109);t.exports=function(t,e){if(n(t),r(e)&&e.constructor===t)return e;var i=s.f(t);return(0,i.resolve)(e),i.promise}},function(t,e,i){"use strict";var n=i(10).f,r=i(34),s=i(44),o=i(18),a=i(43),u=i(57),l=i(73),c=i(105),f=i(42),h=i(9),p=i(28).fastKey,_=i(38),d=h?"_s":"size",v=function(t,e){var i,n=p(e);if("F"!==n)return t._i[n];for(i=t._f;i;i=i.n)if(i.k==e)return i};t.exports={getConstructor:function(t,e,i,l){var c=t((function(t,n){a(t,c,e,"_i"),t._t=e,t._i=r(null),t._f=void 0,t._l=void 0,t[d]=0,null!=n&&u(n,i,t[l],t)}));return s(c.prototype,{clear:function(){for(var t=_(this,e),i=t._i,n=t._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete i[n.i];t._f=t._l=void 0,t[d]=0},delete:function(t){var i=_(this,e),n=v(i,t);if(n){var r=n.n,s=n.p;delete i._i[n.i],n.r=!0,s&&(s.n=r),r&&(r.p=s),i._f==n&&(i._f=r),i._l==n&&(i._l=s),i[d]--}return!!n},forEach:function(t){_(this,e);for(var i,n=o(t,arguments.length>1?arguments[1]:void 0,3);i=i?i.n:this._f;)for(n(i.v,i.k,this);i&&i.r;)i=i.p},has:function(t){return!!v(_(this,e),t)}}),h&&n(c.prototype,"size",{get:function(){return _(this,e)[d]}}),c},def:function(t,e,i){var n,r,s=v(t,e);return s?s.v=i:(t._l=s={i:r=p(e,!0),k:e,v:i,p:n=t._l,n:void 0,r:!1},t._f||(t._f=s),n&&(n.n=s),t[d]++,"F"!==r&&(t._i[r]=s)),t},getEntry:v,setStrong:function(t,e,i){l(t,e,(function(t,i){this._t=_(t,e),this._k=i,this._l=void 0}),(function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?c(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,c(1))}),i?"entries":"values",!i,!0),f(e)}}},function(t,e,i){"use strict";var n=i(44),r=i(28).getWeak,s=i(4),o=i(5),a=i(43),u=i(57),l=i(23),c=i(14),f=i(38),h=l(5),p=l(6),_=0,d=function(t){return t._l||(t._l=new v)},v=function(){this.a=[]},m=function(t,e){return h(t.a,(function(t){return t[0]===e}))};v.prototype={get:function(t){var e=m(this,t);if(e)return e[1]},has:function(t){return!!m(this,t)},set:function(t,e){var i=m(this,t);i?i[1]=e:this.a.push([t,e])},delete:function(t){var e=p(this.a,(function(e){return e[0]===t}));return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,i,s){var l=t((function(t,n){a(t,l,e,"_i"),t._t=e,t._i=_++,t._l=void 0,null!=n&&u(n,i,t[s],t)}));return n(l.prototype,{delete:function(t){if(!o(t))return!1;var i=r(t);return!0===i?d(f(this,e)).delete(t):i&&c(i,this._i)&&delete i[this._i]},has:function(t){if(!o(t))return!1;var i=r(t);return!0===i?d(f(this,e)).has(t):i&&c(i,this._i)}}),l},def:function(t,e,i){var n=r(s(e),!0);return!0===n?d(t).set(e,i):n[t._i]=i,t},ufstore:d}},function(t,e,i){var n=i(20),r=i(7);t.exports=function(t){if(void 0===t)return 0;var e=n(t),i=r(e);if(e!==i)throw RangeError("Wrong length!");return i}},function(t,e,i){var n=i(35),r=i(51),s=i(4),o=i(2).Reflect;t.exports=o&&o.ownKeys||function(t){var e=n.f(s(t)),i=r.f;return i?e.concat(i(t)):e}},function(t,e,i){var n=i(7),r=i(69),s=i(25);t.exports=function(t,e,i,o){var a=String(s(t)),u=a.length,l=void 0===i?" ":String(i),c=n(e);if(c<=u||""==l)return a;var f=c-u,h=r.call(l,Math.ceil(f/l.length));return h.length>f&&(h=h.slice(0,f)),o?h+a:a+h}},function(t,e,i){var n=i(9),r=i(32),s=i(16),o=i(46).f;t.exports=function(t){return function(e){for(var i,a=s(e),u=r(a),l=u.length,c=0,f=[];l>c;)i=u[c++],n&&!o.call(a,i)||f.push(t?[i,a[i]]:a[i]);return f}}},function(t,e,i){i(118)},function(t,e,i){"use strict";i(119),i(262),i(264),i(267),i(269),i(271),i(273),i(275),i(277),i(279),i(281),i(283),i(285),i(289)},function(t,e,i){i(120),i(123),i(124),i(125),i(126),i(127),i(128),i(129),i(130),i(131),i(132),i(133),i(134),i(135),i(136),i(137),i(138),i(139),i(140),i(141),i(142),i(143),i(144),i(145),i(146),i(147),i(148),i(149),i(150),i(151),i(152),i(153),i(154),i(155),i(156),i(157),i(158),i(159),i(160),i(161),i(162),i(163),i(164),i(166),i(167),i(168),i(169),i(170),i(171),i(172),i(173),i(174),i(175),i(176),i(177),i(178),i(179),i(180),i(181),i(182),i(183),i(184),i(185),i(186),i(187),i(188),i(189),i(190),i(191),i(192),i(193),i(194),i(195),i(196),i(197),i(198),i(199),i(201),i(202),i(204),i(205),i(206),i(207),i(208),i(209),i(210),i(212),i(213),i(214),i(215),i(216),i(217),i(218),i(219),i(220),i(221),i(222),i(223),i(224),i(81),i(225),i(106),i(226),i(107),i(227),i(228),i(229),i(230),i(108),i(233),i(234),i(235),i(236),i(237),i(238),i(239),i(240),i(241),i(242),i(243),i(244),i(245),i(246),i(247),i(248),i(249),i(250),i(251),i(252),i(253),i(254),i(255),i(256),i(257),i(258),i(259),i(260),i(261),t.exports=i(8)},function(t,e,i){"use strict";var n=i(2),r=i(14),s=i(9),o=i(1),a=i(12),u=i(28).KEY,l=i(3),c=i(49),f=i(39),h=i(30),p=i(6),_=i(62),d=i(87),v=i(122),m=i(52),g=i(4),y=i(5),x=i(11),b=i(16),w=i(27),T=i(29),S=i(34),P=i(90),O=i(21),A=i(51),k=i(10),M=i(32),R=O.f,E=k.f,F=P.f,C=n.Symbol,I=n.JSON,D=I&&I.stringify,L=p("_hidden"),N=p("toPrimitive"),j={}.propertyIsEnumerable,z=c("symbol-registry"),B=c("symbols"),X=c("op-symbols"),V=Object.prototype,Y="function"==typeof C&&!!A.f,U=n.QObject,W=!U||!U.prototype||!U.prototype.findChild,G=s&&l((function(){return 7!=S(E({},"a",{get:function(){return E(this,"a",{value:7}).a}})).a}))?function(t,e,i){var n=R(V,e);n&&delete V[e],E(t,e,i),n&&t!==V&&E(V,e,n)}:E,q=function(t){var e=B[t]=S(C.prototype);return e._k=t,e},H=Y&&"symbol"==typeof C.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof C},Z=function(t,e,i){return t===V&&Z(X,e,i),g(t),e=w(e,!0),g(i),r(B,e)?(i.enumerable?(r(t,L)&&t[L][e]&&(t[L][e]=!1),i=S(i,{enumerable:T(0,!1)})):(r(t,L)||E(t,L,T(1,{})),t[L][e]=!0),G(t,e,i)):E(t,e,i)},$=function(t,e){g(t);for(var i,n=v(e=b(e)),r=0,s=n.length;s>r;)Z(t,i=n[r++],e[i]);return t},K=function(t){var e=j.call(this,t=w(t,!0));return!(this===V&&r(B,t)&&!r(X,t))&&(!(e||!r(this,t)||!r(B,t)||r(this,L)&&this[L][t])||e)},Q=function(t,e){if(t=b(t),e=w(e,!0),t!==V||!r(B,e)||r(X,e)){var i=R(t,e);return!i||!r(B,e)||r(t,L)&&t[L][e]||(i.enumerable=!0),i}},J=function(t){for(var e,i=F(b(t)),n=[],s=0;i.length>s;)r(B,e=i[s++])||e==L||e==u||n.push(e);return n},tt=function(t){for(var e,i=t===V,n=F(i?X:b(t)),s=[],o=0;n.length>o;)!r(B,e=n[o++])||i&&!r(V,e)||s.push(B[e]);return s};Y||(a((C=function(){if(this instanceof C)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(i){this===V&&e.call(X,i),r(this,L)&&r(this[L],t)&&(this[L][t]=!1),G(this,t,T(1,i))};return s&&W&&G(V,t,{configurable:!0,set:e}),q(t)}).prototype,"toString",(function(){return this._k})),O.f=Q,k.f=Z,i(35).f=P.f=J,i(46).f=K,A.f=tt,s&&!i(31)&&a(V,"propertyIsEnumerable",K,!0),_.f=function(t){return q(p(t))}),o(o.G+o.W+o.F*!Y,{Symbol:C});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),it=0;et.length>it;)p(et[it++]);for(var nt=M(p.store),rt=0;nt.length>rt;)d(nt[rt++]);o(o.S+o.F*!Y,"Symbol",{for:function(t){return r(z,t+="")?z[t]:z[t]=C(t)},keyFor:function(t){if(!H(t))throw TypeError(t+" is not a symbol!");for(var e in z)if(z[e]===t)return e},useSetter:function(){W=!0},useSimple:function(){W=!1}}),o(o.S+o.F*!Y,"Object",{create:function(t,e){return void 0===e?S(t):$(S(t),e)},defineProperty:Z,defineProperties:$,getOwnPropertyDescriptor:Q,getOwnPropertyNames:J,getOwnPropertySymbols:tt});var st=l((function(){A.f(1)}));o(o.S+o.F*st,"Object",{getOwnPropertySymbols:function(t){return A.f(x(t))}}),I&&o(o.S+o.F*(!Y||l((function(){var t=C();return"[null]"!=D([t])||"{}"!=D({a:t})||"{}"!=D(Object(t))}))),"JSON",{stringify:function(t){for(var e,i,n=[t],r=1;arguments.length>r;)n.push(arguments[r++]);if(i=e=n[1],(y(e)||void 0!==t)&&!H(t))return m(e)||(e=function(t,e){if("function"==typeof i&&(e=i.call(this,t,e)),!H(e))return e}),n[1]=e,D.apply(I,n)}}),C.prototype[N]||i(15)(C.prototype,N,C.prototype.valueOf),f(C,"Symbol"),f(Math,"Math",!0),f(n.JSON,"JSON",!0)},function(t,e,i){t.exports=i(49)("native-function-to-string",Function.toString)},function(t,e,i){var n=i(32),r=i(51),s=i(46);t.exports=function(t){var e=n(t),i=r.f;if(i)for(var o,a=i(t),u=s.f,l=0;a.length>l;)u.call(t,o=a[l++])&&e.push(o);return e}},function(t,e,i){var n=i(1);n(n.S,"Object",{create:i(34)})},function(t,e,i){var n=i(1);n(n.S+n.F*!i(9),"Object",{defineProperty:i(10).f})},function(t,e,i){var n=i(1);n(n.S+n.F*!i(9),"Object",{defineProperties:i(89)})},function(t,e,i){var n=i(16),r=i(21).f;i(22)("getOwnPropertyDescriptor",(function(){return function(t,e){return r(n(t),e)}}))},function(t,e,i){var n=i(11),r=i(36);i(22)("getPrototypeOf",(function(){return function(t){return r(n(t))}}))},function(t,e,i){var n=i(11),r=i(32);i(22)("keys",(function(){return function(t){return r(n(t))}}))},function(t,e,i){i(22)("getOwnPropertyNames",(function(){return i(90).f}))},function(t,e,i){var n=i(5),r=i(28).onFreeze;i(22)("freeze",(function(t){return function(e){return t&&n(e)?t(r(e)):e}}))},function(t,e,i){var n=i(5),r=i(28).onFreeze;i(22)("seal",(function(t){return function(e){return t&&n(e)?t(r(e)):e}}))},function(t,e,i){var n=i(5),r=i(28).onFreeze;i(22)("preventExtensions",(function(t){return function(e){return t&&n(e)?t(r(e)):e}}))},function(t,e,i){var n=i(5);i(22)("isFrozen",(function(t){return function(e){return!n(e)||!!t&&t(e)}}))},function(t,e,i){var n=i(5);i(22)("isSealed",(function(t){return function(e){return!n(e)||!!t&&t(e)}}))},function(t,e,i){var n=i(5);i(22)("isExtensible",(function(t){return function(e){return!!n(e)&&(!t||t(e))}}))},function(t,e,i){var n=i(1);n(n.S+n.F,"Object",{assign:i(91)})},function(t,e,i){var n=i(1);n(n.S,"Object",{is:i(92)})},function(t,e,i){var n=i(1);n(n.S,"Object",{setPrototypeOf:i(66).set})},function(t,e,i){"use strict";var n=i(47),r={};r[i(6)("toStringTag")]="z",r+""!="[object z]"&&i(12)(Object.prototype,"toString",(function(){return"[object "+n(this)+"]"}),!0)},function(t,e,i){var n=i(1);n(n.P,"Function",{bind:i(93)})},function(t,e,i){var n=i(10).f,r=Function.prototype,s=/^\s*function ([^ (]*)/;"name"in r||i(9)&&n(r,"name",{configurable:!0,get:function(){try{return(""+this).match(s)[1]}catch(t){return""}}})},function(t,e,i){"use strict";var n=i(5),r=i(36),s=i(6)("hasInstance"),o=Function.prototype;s in o||i(10).f(o,s,{value:function(t){if("function"!=typeof this||!n(t))return!1;if(!n(this.prototype))return t instanceof this;for(;t=r(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,i){var n=i(1),r=i(95);n(n.G+n.F*(parseInt!=r),{parseInt:r})},function(t,e,i){var n=i(1),r=i(96);n(n.G+n.F*(parseFloat!=r),{parseFloat:r})},function(t,e,i){"use strict";var n=i(2),r=i(14),s=i(24),o=i(68),a=i(27),u=i(3),l=i(35).f,c=i(21).f,f=i(10).f,h=i(40).trim,p=n.Number,_=p,d=p.prototype,v="Number"==s(i(34)(d)),m="trim"in String.prototype,g=function(t){var e=a(t,!1);if("string"==typeof e&&e.length>2){var i,n,r,s=(e=m?e.trim():h(e,3)).charCodeAt(0);if(43===s||45===s){if(88===(i=e.charCodeAt(2))||120===i)return NaN}else if(48===s){switch(e.charCodeAt(1)){case 66:case 98:n=2,r=49;break;case 79:case 111:n=8,r=55;break;default:return+e}for(var o,u=e.slice(2),l=0,c=u.length;l<c;l++)if((o=u.charCodeAt(l))<48||o>r)return NaN;return parseInt(u,n)}}return+e};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var e=arguments.length<1?0:t,i=this;return i instanceof p&&(v?u((function(){d.valueOf.call(i)})):"Number"!=s(i))?o(new _(g(e)),i,p):g(e)};for(var y,x=i(9)?l(_):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),b=0;x.length>b;b++)r(_,y=x[b])&&!r(p,y)&&f(p,y,c(_,y));p.prototype=d,d.constructor=p,i(12)(n,"Number",p)}},function(t,e,i){"use strict";var n=i(1),r=i(20),s=i(97),o=i(69),a=1..toFixed,u=Math.floor,l=[0,0,0,0,0,0],c="Number.toFixed: incorrect invocation!",f=function(t,e){for(var i=-1,n=e;++i<6;)n+=t*l[i],l[i]=n%1e7,n=u(n/1e7)},h=function(t){for(var e=6,i=0;--e>=0;)i+=l[e],l[e]=u(i/t),i=i%t*1e7},p=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==l[t]){var i=String(l[t]);e=""===e?i:e+o.call("0",7-i.length)+i}return e},_=function(t,e,i){return 0===e?i:e%2==1?_(t,e-1,i*t):_(t*t,e/2,i)};n(n.P+n.F*(!!a&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!i(3)((function(){a.call({})}))),"Number",{toFixed:function(t){var e,i,n,a,u=s(this,c),l=r(t),d="",v="0";if(l<0||l>20)throw RangeError(c);if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(d="-",u=-u),u>1e-21)if(i=(e=function(t){for(var e=0,i=t;i>=4096;)e+=12,i/=4096;for(;i>=2;)e+=1,i/=2;return e}(u*_(2,69,1))-69)<0?u*_(2,-e,1):u/_(2,e,1),i*=4503599627370496,(e=52-e)>0){for(f(0,i),n=l;n>=7;)f(1e7,0),n-=7;for(f(_(10,n,1),0),n=e-1;n>=23;)h(1<<23),n-=23;h(1<<n),f(1,1),h(2),v=p()}else f(0,i),f(1<<-e,0),v=p()+o.call("0",l);return v=l>0?d+((a=v.length)<=l?"0."+o.call("0",l-a)+v:v.slice(0,a-l)+"."+v.slice(a-l)):d+v}})},function(t,e,i){"use strict";var n=i(1),r=i(3),s=i(97),o=1..toPrecision;n(n.P+n.F*(r((function(){return"1"!==o.call(1,void 0)}))||!r((function(){o.call({})}))),"Number",{toPrecision:function(t){var e=s(this,"Number#toPrecision: incorrect invocation!");return void 0===t?o.call(e):o.call(e,t)}})},function(t,e,i){var n=i(1);n(n.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,i){var n=i(1),r=i(2).isFinite;n(n.S,"Number",{isFinite:function(t){return"number"==typeof t&&r(t)}})},function(t,e,i){var n=i(1);n(n.S,"Number",{isInteger:i(98)})},function(t,e,i){var n=i(1);n(n.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,i){var n=i(1),r=i(98),s=Math.abs;n(n.S,"Number",{isSafeInteger:function(t){return r(t)&&s(t)<=9007199254740991}})},function(t,e,i){var n=i(1);n(n.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,i){var n=i(1);n(n.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,i){var n=i(1),r=i(96);n(n.S+n.F*(Number.parseFloat!=r),"Number",{parseFloat:r})},function(t,e,i){var n=i(1),r=i(95);n(n.S+n.F*(Number.parseInt!=r),"Number",{parseInt:r})},function(t,e,i){var n=i(1),r=i(99),s=Math.sqrt,o=Math.acosh;n(n.S+n.F*!(o&&710==Math.floor(o(Number.MAX_VALUE))&&o(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:r(t-1+s(t-1)*s(t+1))}})},function(t,e,i){var n=i(1),r=Math.asinh;n(n.S+n.F*!(r&&1/r(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,i){var n=i(1),r=Math.atanh;n(n.S+n.F*!(r&&1/r(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,i){var n=i(1),r=i(70);n(n.S,"Math",{cbrt:function(t){return r(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,i){var n=i(1);n(n.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,i){var n=i(1),r=Math.exp;n(n.S,"Math",{cosh:function(t){return(r(t=+t)+r(-t))/2}})},function(t,e,i){var n=i(1),r=i(71);n(n.S+n.F*(r!=Math.expm1),"Math",{expm1:r})},function(t,e,i){var n=i(1);n(n.S,"Math",{fround:i(165)})},function(t,e,i){var n=i(70),r=Math.pow,s=r(2,-52),o=r(2,-23),a=r(2,127)*(2-o),u=r(2,-126);t.exports=Math.fround||function(t){var e,i,r=Math.abs(t),l=n(t);return r<u?l*(r/u/o+1/s-1/s)*u*o:(i=(e=(1+o/s)*r)-(e-r))>a||i!=i?l*(1/0):l*i}},function(t,e,i){var n=i(1),r=Math.abs;n(n.S,"Math",{hypot:function(t,e){for(var i,n,s=0,o=0,a=arguments.length,u=0;o<a;)u<(i=r(arguments[o++]))?(s=s*(n=u/i)*n+1,u=i):s+=i>0?(n=i/u)*n:i;return u===1/0?1/0:u*Math.sqrt(s)}})},function(t,e,i){var n=i(1),r=Math.imul;n(n.S+n.F*i(3)((function(){return-5!=r(4294967295,5)||2!=r.length})),"Math",{imul:function(t,e){var i=+t,n=+e,r=65535&i,s=65535&n;return 0|r*s+((65535&i>>>16)*s+r*(65535&n>>>16)<<16>>>0)}})},function(t,e,i){var n=i(1);n(n.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,i){var n=i(1);n(n.S,"Math",{log1p:i(99)})},function(t,e,i){var n=i(1);n(n.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,i){var n=i(1);n(n.S,"Math",{sign:i(70)})},function(t,e,i){var n=i(1),r=i(71),s=Math.exp;n(n.S+n.F*i(3)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(r(t)-r(-t))/2:(s(t-1)-s(-t-1))*(Math.E/2)}})},function(t,e,i){var n=i(1),r=i(71),s=Math.exp;n(n.S,"Math",{tanh:function(t){var e=r(t=+t),i=r(-t);return e==1/0?1:i==1/0?-1:(e-i)/(s(t)+s(-t))}})},function(t,e,i){var n=i(1);n(n.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,i){var n=i(1),r=i(33),s=String.fromCharCode,o=String.fromCodePoint;n(n.S+n.F*(!!o&&1!=o.length),"String",{fromCodePoint:function(t){for(var e,i=[],n=arguments.length,o=0;n>o;){if(e=+arguments[o++],r(e,1114111)!==e)throw RangeError(e+" is not a valid code point");i.push(e<65536?s(e):s(55296+((e-=65536)>>10),e%1024+56320))}return i.join("")}})},function(t,e,i){var n=i(1),r=i(16),s=i(7);n(n.S,"String",{raw:function(t){for(var e=r(t.raw),i=s(e.length),n=arguments.length,o=[],a=0;i>a;)o.push(String(e[a++])),a<n&&o.push(String(arguments[a]));return o.join("")}})},function(t,e,i){"use strict";i(40)("trim",(function(t){return function(){return t(this,3)}}))},function(t,e,i){"use strict";var n=i(72)(!0);i(73)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,i=this._i;return i>=e.length?{value:void 0,done:!0}:(t=n(e,i),this._i+=t.length,{value:t,done:!1})}))},function(t,e,i){"use strict";var n=i(1),r=i(72)(!1);n(n.P,"String",{codePointAt:function(t){return r(this,t)}})},function(t,e,i){"use strict";var n=i(1),r=i(7),s=i(74),o="".endsWith;n(n.P+n.F*i(76)("endsWith"),"String",{endsWith:function(t){var e=s(this,t,"endsWith"),i=arguments.length>1?arguments[1]:void 0,n=r(e.length),a=void 0===i?n:Math.min(r(i),n),u=String(t);return o?o.call(e,u,a):e.slice(a-u.length,a)===u}})},function(t,e,i){"use strict";var n=i(1),r=i(74);n(n.P+n.F*i(76)("includes"),"String",{includes:function(t){return!!~r(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,i){var n=i(1);n(n.P,"String",{repeat:i(69)})},function(t,e,i){"use strict";var n=i(1),r=i(7),s=i(74),o="".startsWith;n(n.P+n.F*i(76)("startsWith"),"String",{startsWith:function(t){var e=s(this,t,"startsWith"),i=r(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),n=String(t);return o?o.call(e,n,i):e.slice(i,i+n.length)===n}})},function(t,e,i){"use strict";i(13)("anchor",(function(t){return function(e){return t(this,"a","name",e)}}))},function(t,e,i){"use strict";i(13)("big",(function(t){return function(){return t(this,"big","","")}}))},function(t,e,i){"use strict";i(13)("blink",(function(t){return function(){return t(this,"blink","","")}}))},function(t,e,i){"use strict";i(13)("bold",(function(t){return function(){return t(this,"b","","")}}))},function(t,e,i){"use strict";i(13)("fixed",(function(t){return function(){return t(this,"tt","","")}}))},function(t,e,i){"use strict";i(13)("fontcolor",(function(t){return function(e){return t(this,"font","color",e)}}))},function(t,e,i){"use strict";i(13)("fontsize",(function(t){return function(e){return t(this,"font","size",e)}}))},function(t,e,i){"use strict";i(13)("italics",(function(t){return function(){return t(this,"i","","")}}))},function(t,e,i){"use strict";i(13)("link",(function(t){return function(e){return t(this,"a","href",e)}}))},function(t,e,i){"use strict";i(13)("small",(function(t){return function(){return t(this,"small","","")}}))},function(t,e,i){"use strict";i(13)("strike",(function(t){return function(){return t(this,"strike","","")}}))},function(t,e,i){"use strict";i(13)("sub",(function(t){return function(){return t(this,"sub","","")}}))},function(t,e,i){"use strict";i(13)("sup",(function(t){return function(){return t(this,"sup","","")}}))},function(t,e,i){var n=i(1);n(n.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,i){"use strict";var n=i(1),r=i(11),s=i(27);n(n.P+n.F*i(3)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(t){var e=r(this),i=s(e);return"number"!=typeof i||isFinite(i)?e.toISOString():null}})},function(t,e,i){var n=i(1),r=i(200);n(n.P+n.F*(Date.prototype.toISOString!==r),"Date",{toISOString:r})},function(t,e,i){"use strict";var n=i(3),r=Date.prototype.getTime,s=Date.prototype.toISOString,o=function(t){return t>9?t:"0"+t};t.exports=n((function(){return"0385-07-25T07:06:39.999Z"!=s.call(new Date(-5e13-1))}))||!n((function(){s.call(new Date(NaN))}))?function(){if(!isFinite(r.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),i=t.getUTCMilliseconds(),n=e<0?"-":e>9999?"+":"";return n+("00000"+Math.abs(e)).slice(n?-6:-4)+"-"+o(t.getUTCMonth()+1)+"-"+o(t.getUTCDate())+"T"+o(t.getUTCHours())+":"+o(t.getUTCMinutes())+":"+o(t.getUTCSeconds())+"."+(i>99?i:"0"+o(i))+"Z"}:s},function(t,e,i){var n=Date.prototype,r=n.toString,s=n.getTime;new Date(NaN)+""!="Invalid Date"&&i(12)(n,"toString",(function(){var t=s.call(this);return t==t?r.call(this):"Invalid Date"}))},function(t,e,i){var n=i(6)("toPrimitive"),r=Date.prototype;n in r||i(15)(r,n,i(203))},function(t,e,i){"use strict";var n=i(4),r=i(27);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return r(n(this),"number"!=t)}},function(t,e,i){var n=i(1);n(n.S,"Array",{isArray:i(52)})},function(t,e,i){"use strict";var n=i(18),r=i(1),s=i(11),o=i(101),a=i(77),u=i(7),l=i(78),c=i(79);r(r.S+r.F*!i(53)((function(t){Array.from(t)})),"Array",{from:function(t){var e,i,r,f,h=s(t),p="function"==typeof this?this:Array,_=arguments.length,d=_>1?arguments[1]:void 0,v=void 0!==d,m=0,g=c(h);if(v&&(d=n(d,_>2?arguments[2]:void 0,2)),null==g||p==Array&&a(g))for(i=new p(e=u(h.length));e>m;m++)l(i,m,v?d(h[m],m):h[m]);else for(f=g.call(h),i=new p;!(r=f.next()).done;m++)l(i,m,v?o(f,d,[r.value,m],!0):r.value);return i.length=m,i}})},function(t,e,i){"use strict";var n=i(1),r=i(78);n(n.S+n.F*i(3)((function(){function t(){}return!(Array.of.call(t)instanceof t)})),"Array",{of:function(){for(var t=0,e=arguments.length,i=new("function"==typeof this?this:Array)(e);e>t;)r(i,t,arguments[t++]);return i.length=e,i}})},function(t,e,i){"use strict";var n=i(1),r=i(16),s=[].join;n(n.P+n.F*(i(45)!=Object||!i(17)(s)),"Array",{join:function(t){return s.call(r(this),void 0===t?",":t)}})},function(t,e,i){"use strict";var n=i(1),r=i(65),s=i(24),o=i(33),a=i(7),u=[].slice;n(n.P+n.F*i(3)((function(){r&&u.call(r)})),"Array",{slice:function(t,e){var i=a(this.length),n=s(this);if(e=void 0===e?i:e,"Array"==n)return u.call(this,t,e);for(var r=o(t,i),l=o(e,i),c=a(l-r),f=new Array(c),h=0;h<c;h++)f[h]="String"==n?this.charAt(r+h):this[r+h];return f}})},function(t,e,i){"use strict";var n=i(1),r=i(19),s=i(11),o=i(3),a=[].sort,u=[1,2,3];n(n.P+n.F*(o((function(){u.sort(void 0)}))||!o((function(){u.sort(null)}))||!i(17)(a)),"Array",{sort:function(t){return void 0===t?a.call(s(this)):a.call(s(this),r(t))}})},function(t,e,i){"use strict";var n=i(1),r=i(23)(0),s=i(17)([].forEach,!0);n(n.P+n.F*!s,"Array",{forEach:function(t){return r(this,t,arguments[1])}})},function(t,e,i){var n=i(5),r=i(52),s=i(6)("species");t.exports=function(t){var e;return r(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!r(e.prototype)||(e=void 0),n(e)&&null===(e=e[s])&&(e=void 0)),void 0===e?Array:e}},function(t,e,i){"use strict";var n=i(1),r=i(23)(1);n(n.P+n.F*!i(17)([].map,!0),"Array",{map:function(t){return r(this,t,arguments[1])}})},function(t,e,i){"use strict";var n=i(1),r=i(23)(2);n(n.P+n.F*!i(17)([].filter,!0),"Array",{filter:function(t){return r(this,t,arguments[1])}})},function(t,e,i){"use strict";var n=i(1),r=i(23)(3);n(n.P+n.F*!i(17)([].some,!0),"Array",{some:function(t){return r(this,t,arguments[1])}})},function(t,e,i){"use strict";var n=i(1),r=i(23)(4);n(n.P+n.F*!i(17)([].every,!0),"Array",{every:function(t){return r(this,t,arguments[1])}})},function(t,e,i){"use strict";var n=i(1),r=i(103);n(n.P+n.F*!i(17)([].reduce,!0),"Array",{reduce:function(t){return r(this,t,arguments.length,arguments[1],!1)}})},function(t,e,i){"use strict";var n=i(1),r=i(103);n(n.P+n.F*!i(17)([].reduceRight,!0),"Array",{reduceRight:function(t){return r(this,t,arguments.length,arguments[1],!0)}})},function(t,e,i){"use strict";var n=i(1),r=i(50)(!1),s=[].indexOf,o=!!s&&1/[1].indexOf(1,-0)<0;n(n.P+n.F*(o||!i(17)(s)),"Array",{indexOf:function(t){return o?s.apply(this,arguments)||0:r(this,t,arguments[1])}})},function(t,e,i){"use strict";var n=i(1),r=i(16),s=i(20),o=i(7),a=[].lastIndexOf,u=!!a&&1/[1].lastIndexOf(1,-0)<0;n(n.P+n.F*(u||!i(17)(a)),"Array",{lastIndexOf:function(t){if(u)return a.apply(this,arguments)||0;var e=r(this),i=o(e.length),n=i-1;for(arguments.length>1&&(n=Math.min(n,s(arguments[1]))),n<0&&(n=i+n);n>=0;n--)if(n in e&&e[n]===t)return n||0;return-1}})},function(t,e,i){var n=i(1);n(n.P,"Array",{copyWithin:i(104)}),i(37)("copyWithin")},function(t,e,i){var n=i(1);n(n.P,"Array",{fill:i(80)}),i(37)("fill")},function(t,e,i){"use strict";var n=i(1),r=i(23)(5),s=!0;"find"in[]&&Array(1).find((function(){s=!1})),n(n.P+n.F*s,"Array",{find:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}}),i(37)("find")},function(t,e,i){"use strict";var n=i(1),r=i(23)(6),s="findIndex",o=!0;s in[]&&Array(1)[s]((function(){o=!1})),n(n.P+n.F*o,"Array",{findIndex:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}}),i(37)(s)},function(t,e,i){i(42)("Array")},function(t,e,i){var n=i(2),r=i(68),s=i(10).f,o=i(35).f,a=i(75),u=i(54),l=n.RegExp,c=l,f=l.prototype,h=/a/g,p=/a/g,_=new l(h)!==h;if(i(9)&&(!_||i(3)((function(){return p[i(6)("match")]=!1,l(h)!=h||l(p)==p||"/a/i"!=l(h,"i")})))){l=function(t,e){var i=this instanceof l,n=a(t),s=void 0===e;return!i&&n&&t.constructor===l&&s?t:r(_?new c(n&&!s?t.source:t,e):c((n=t instanceof l)?t.source:t,n&&s?u.call(t):e),i?this:f,l)};for(var d=function(t){t in l||s(l,t,{configurable:!0,get:function(){return c[t]},set:function(e){c[t]=e}})},v=o(c),m=0;v.length>m;)d(v[m++]);f.constructor=l,l.prototype=f,i(12)(n,"RegExp",l)}i(42)("RegExp")},function(t,e,i){"use strict";i(107);var n=i(4),r=i(54),s=i(9),o=/./.toString,a=function(t){i(12)(RegExp.prototype,"toString",t,!0)};i(3)((function(){return"/a/b"!=o.call({source:"a",flags:"b"})}))?a((function(){var t=n(this);return"/".concat(t.source,"/","flags"in t?t.flags:!s&&t instanceof RegExp?r.call(t):void 0)})):"toString"!=o.name&&a((function(){return o.call(this)}))},function(t,e,i){"use strict";var n=i(4),r=i(7),s=i(83),o=i(55);i(56)("match",1,(function(t,e,i,a){return[function(i){var n=t(this),r=null==i?void 0:i[e];return void 0!==r?r.call(i,n):new RegExp(i)[e](String(n))},function(t){var e=a(i,t,this);if(e.done)return e.value;var u=n(t),l=String(this);if(!u.global)return o(u,l);var c=u.unicode;u.lastIndex=0;for(var f,h=[],p=0;null!==(f=o(u,l));){var _=String(f[0]);h[p]=_,""===_&&(u.lastIndex=s(l,r(u.lastIndex),c)),p++}return 0===p?null:h}]}))},function(t,e,i){"use strict";var n=i(4),r=i(11),s=i(7),o=i(20),a=i(83),u=i(55),l=Math.max,c=Math.min,f=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;i(56)("replace",2,(function(t,e,i,_){return[function(n,r){var s=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,s,r):i.call(String(s),n,r)},function(t,e){var r=_(i,t,this,e);if(r.done)return r.value;var f=n(t),h=String(this),p="function"==typeof e;p||(e=String(e));var v=f.global;if(v){var m=f.unicode;f.lastIndex=0}for(var g=[];;){var y=u(f,h);if(null===y)break;if(g.push(y),!v)break;""===String(y[0])&&(f.lastIndex=a(h,s(f.lastIndex),m))}for(var x,b="",w=0,T=0;T<g.length;T++){y=g[T];for(var S=String(y[0]),P=l(c(o(y.index),h.length),0),O=[],A=1;A<y.length;A++)O.push(void 0===(x=y[A])?x:String(x));var k=y.groups;if(p){var M=[S].concat(O,P,h);void 0!==k&&M.push(k);var R=String(e.apply(void 0,M))}else R=d(S,h,P,O,k,e);P>=w&&(b+=h.slice(w,P)+R,w=P+S.length)}return b+h.slice(w)}];function d(t,e,n,s,o,a){var u=n+t.length,l=s.length,c=p;return void 0!==o&&(o=r(o),c=h),i.call(a,c,(function(i,r){var a;switch(r.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,n);case"'":return e.slice(u);case"<":a=o[r.slice(1,-1)];break;default:var c=+r;if(0===c)return i;if(c>l){var h=f(c/10);return 0===h?i:h<=l?void 0===s[h-1]?r.charAt(1):s[h-1]+r.charAt(1):i}a=s[c-1]}return void 0===a?"":a}))}}))},function(t,e,i){"use strict";var n=i(4),r=i(92),s=i(55);i(56)("search",1,(function(t,e,i,o){return[function(i){var n=t(this),r=null==i?void 0:i[e];return void 0!==r?r.call(i,n):new RegExp(i)[e](String(n))},function(t){var e=o(i,t,this);if(e.done)return e.value;var a=n(t),u=String(this),l=a.lastIndex;r(l,0)||(a.lastIndex=0);var c=s(a,u);return r(a.lastIndex,l)||(a.lastIndex=l),null===c?-1:c.index}]}))},function(t,e,i){"use strict";var n=i(75),r=i(4),s=i(48),o=i(83),a=i(7),u=i(55),l=i(82),c=i(3),f=Math.min,h=[].push,p=!c((function(){RegExp(4294967295,"y")}));i(56)("split",2,(function(t,e,i,c){var _;return _="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,e){var r=String(this);if(void 0===t&&0===e)return[];if(!n(t))return i.call(r,t,e);for(var s,o,a,u=[],c=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),f=0,p=void 0===e?4294967295:e>>>0,_=new RegExp(t.source,c+"g");(s=l.call(_,r))&&!((o=_.lastIndex)>f&&(u.push(r.slice(f,s.index)),s.length>1&&s.index<r.length&&h.apply(u,s.slice(1)),a=s[0].length,f=o,u.length>=p));)_.lastIndex===s.index&&_.lastIndex++;return f===r.length?!a&&_.test("")||u.push(""):u.push(r.slice(f)),u.length>p?u.slice(0,p):u}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:i.call(this,t,e)}:i,[function(i,n){var r=t(this),s=null==i?void 0:i[e];return void 0!==s?s.call(i,r,n):_.call(String(r),i,n)},function(t,e){var n=c(_,t,this,e,_!==i);if(n.done)return n.value;var l=r(t),h=String(this),d=s(l,RegExp),v=l.unicode,m=(l.ignoreCase?"i":"")+(l.multiline?"m":"")+(l.unicode?"u":"")+(p?"y":"g"),g=new d(p?l:"^(?:"+l.source+")",m),y=void 0===e?4294967295:e>>>0;if(0===y)return[];if(0===h.length)return null===u(g,h)?[h]:[];for(var x=0,b=0,w=[];b<h.length;){g.lastIndex=p?b:0;var T,S=u(g,p?h:h.slice(b));if(null===S||(T=f(a(g.lastIndex+(p?0:b)),h.length))===x)b=o(h,b,v);else{if(w.push(h.slice(x,b)),w.length===y)return w;for(var P=1;P<=S.length-1;P++)if(w.push(S[P]),w.length===y)return w;b=x=T}}return w.push(h.slice(x)),w}]}))},function(t,e,i){var n=i(2),r=i(84).set,s=n.MutationObserver||n.WebKitMutationObserver,o=n.process,a=n.Promise,u="process"==i(24)(o);t.exports=function(){var t,e,i,l=function(){var n,r;for(u&&(n=o.domain)&&n.exit();t;){r=t.fn,t=t.next;try{r()}catch(n){throw t?i():e=void 0,n}}e=void 0,n&&n.enter()};if(u)i=function(){o.nextTick(l)};else if(!s||n.navigator&&n.navigator.standalone)if(a&&a.resolve){var c=a.resolve(void 0);i=function(){c.then(l)}}else i=function(){r.call(n,l)};else{var f=!0,h=document.createTextNode("");new s(l).observe(h,{characterData:!0}),i=function(){h.data=f=!f}}return function(n){var r={fn:n,next:void 0};e&&(e.next=r),t||(t=r,i()),e=r}}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,i){"use strict";var n=i(111),r=i(38);t.exports=i(59)("Map",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(t){var e=n.getEntry(r(this,"Map"),t);return e&&e.v},set:function(t,e){return n.def(r(this,"Map"),0===t?0:t,e)}},n,!0)},function(t,e,i){"use strict";var n=i(111),r=i(38);t.exports=i(59)("Set",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return n.def(r(this,"Set"),t=0===t?0:t,t)}},n)},function(t,e,i){"use strict";var n,r=i(2),s=i(23)(0),o=i(12),a=i(28),u=i(91),l=i(112),c=i(5),f=i(38),h=i(38),p=!r.ActiveXObject&&"ActiveXObject"in r,_=a.getWeak,d=Object.isExtensible,v=l.ufstore,m=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},g={get:function(t){if(c(t)){var e=_(t);return!0===e?v(f(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return l.def(f(this,"WeakMap"),t,e)}},y=t.exports=i(59)("WeakMap",m,g,l,!0,!0);h&&p&&(u((n=l.getConstructor(m,"WeakMap")).prototype,g),a.NEED=!0,s(["delete","has","get","set"],(function(t){var e=y.prototype,i=e[t];o(e,t,(function(e,r){if(c(e)&&!d(e)){this._f||(this._f=new n);var s=this._f[t](e,r);return"set"==t?this:s}return i.call(this,e,r)}))})))},function(t,e,i){"use strict";var n=i(112),r=i(38);i(59)("WeakSet",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return n.def(r(this,"WeakSet"),t,!0)}},n,!1,!0)},function(t,e,i){"use strict";var n=i(1),r=i(60),s=i(85),o=i(4),a=i(33),u=i(7),l=i(5),c=i(2).ArrayBuffer,f=i(48),h=s.ArrayBuffer,p=s.DataView,_=r.ABV&&c.isView,d=h.prototype.slice,v=r.VIEW;n(n.G+n.W+n.F*(c!==h),{ArrayBuffer:h}),n(n.S+n.F*!r.CONSTR,"ArrayBuffer",{isView:function(t){return _&&_(t)||l(t)&&v in t}}),n(n.P+n.U+n.F*i(3)((function(){return!new h(2).slice(1,void 0).byteLength})),"ArrayBuffer",{slice:function(t,e){if(void 0!==d&&void 0===e)return d.call(o(this),t);for(var i=o(this).byteLength,n=a(t,i),r=a(void 0===e?i:e,i),s=new(f(this,h))(u(r-n)),l=new p(this),c=new p(s),_=0;n<r;)c.setUint8(_++,l.getUint8(n++));return s}}),i(42)("ArrayBuffer")},function(t,e,i){var n=i(1);n(n.G+n.W+n.F*!i(60).ABV,{DataView:i(85).DataView})},function(t,e,i){i(26)("Int8",1,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},function(t,e,i){i(26)("Uint8",1,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},function(t,e,i){i(26)("Uint8",1,(function(t){return function(e,i,n){return t(this,e,i,n)}}),!0)},function(t,e,i){i(26)("Int16",2,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},function(t,e,i){i(26)("Uint16",2,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},function(t,e,i){i(26)("Int32",4,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},function(t,e,i){i(26)("Uint32",4,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},function(t,e,i){i(26)("Float32",4,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},function(t,e,i){i(26)("Float64",8,(function(t){return function(e,i,n){return t(this,e,i,n)}}))},function(t,e,i){var n=i(1),r=i(19),s=i(4),o=(i(2).Reflect||{}).apply,a=Function.apply;n(n.S+n.F*!i(3)((function(){o((function(){}))})),"Reflect",{apply:function(t,e,i){var n=r(t),u=s(i);return o?o(n,e,u):a.call(n,e,u)}})},function(t,e,i){var n=i(1),r=i(34),s=i(19),o=i(4),a=i(5),u=i(3),l=i(93),c=(i(2).Reflect||{}).construct,f=u((function(){function t(){}return!(c((function(){}),[],t)instanceof t)})),h=!u((function(){c((function(){}))}));n(n.S+n.F*(f||h),"Reflect",{construct:function(t,e){s(t),o(e);var i=arguments.length<3?t:s(arguments[2]);if(h&&!f)return c(t,e,i);if(t==i){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return n.push.apply(n,e),new(l.apply(t,n))}var u=i.prototype,p=r(a(u)?u:Object.prototype),_=Function.apply.call(t,p,e);return a(_)?_:p}})},function(t,e,i){var n=i(10),r=i(1),s=i(4),o=i(27);r(r.S+r.F*i(3)((function(){Reflect.defineProperty(n.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(t,e,i){s(t),e=o(e,!0),s(i);try{return n.f(t,e,i),!0}catch(t){return!1}}})},function(t,e,i){var n=i(1),r=i(21).f,s=i(4);n(n.S,"Reflect",{deleteProperty:function(t,e){var i=r(s(t),e);return!(i&&!i.configurable)&&delete t[e]}})},function(t,e,i){"use strict";var n=i(1),r=i(4),s=function(t){this._t=r(t),this._i=0;var e,i=this._k=[];for(e in t)i.push(e)};i(100)(s,"Object",(function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}})),n(n.S,"Reflect",{enumerate:function(t){return new s(t)}})},function(t,e,i){var n=i(21),r=i(36),s=i(14),o=i(1),a=i(5),u=i(4);o(o.S,"Reflect",{get:function t(e,i){var o,l,c=arguments.length<3?e:arguments[2];return u(e)===c?e[i]:(o=n.f(e,i))?s(o,"value")?o.value:void 0!==o.get?o.get.call(c):void 0:a(l=r(e))?t(l,i,c):void 0}})},function(t,e,i){var n=i(21),r=i(1),s=i(4);r(r.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return n.f(s(t),e)}})},function(t,e,i){var n=i(1),r=i(36),s=i(4);n(n.S,"Reflect",{getPrototypeOf:function(t){return r(s(t))}})},function(t,e,i){var n=i(1);n(n.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,i){var n=i(1),r=i(4),s=Object.isExtensible;n(n.S,"Reflect",{isExtensible:function(t){return r(t),!s||s(t)}})},function(t,e,i){var n=i(1);n(n.S,"Reflect",{ownKeys:i(114)})},function(t,e,i){var n=i(1),r=i(4),s=Object.preventExtensions;n(n.S,"Reflect",{preventExtensions:function(t){r(t);try{return s&&s(t),!0}catch(t){return!1}}})},function(t,e,i){var n=i(10),r=i(21),s=i(36),o=i(14),a=i(1),u=i(29),l=i(4),c=i(5);a(a.S,"Reflect",{set:function t(e,i,a){var f,h,p=arguments.length<4?e:arguments[3],_=r.f(l(e),i);if(!_){if(c(h=s(e)))return t(h,i,a,p);_=u(0)}if(o(_,"value")){if(!1===_.writable||!c(p))return!1;if(f=r.f(p,i)){if(f.get||f.set||!1===f.writable)return!1;f.value=a,n.f(p,i,f)}else n.f(p,i,u(0,a));return!0}return void 0!==_.set&&(_.set.call(p,a),!0)}})},function(t,e,i){var n=i(1),r=i(66);r&&n(n.S,"Reflect",{setPrototypeOf:function(t,e){r.check(t,e);try{return r.set(t,e),!0}catch(t){return!1}}})},function(t,e,i){i(263),t.exports=i(8).Array.includes},function(t,e,i){"use strict";var n=i(1),r=i(50)(!0);n(n.P,"Array",{includes:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}}),i(37)("includes")},function(t,e,i){i(265),t.exports=i(8).Array.flatMap},function(t,e,i){"use strict";var n=i(1),r=i(266),s=i(11),o=i(7),a=i(19),u=i(102);n(n.P,"Array",{flatMap:function(t){var e,i,n=s(this);return a(t),e=o(n.length),i=u(n,0),r(i,n,n,e,0,1,t,arguments[1]),i}}),i(37)("flatMap")},function(t,e,i){"use strict";var n=i(52),r=i(5),s=i(7),o=i(18),a=i(6)("isConcatSpreadable");t.exports=function t(e,i,u,l,c,f,h,p){for(var _,d,v=c,m=0,g=!!h&&o(h,p,3);m<l;){if(m in u){if(_=g?g(u[m],m,i):u[m],d=!1,r(_)&&(d=void 0!==(d=_[a])?!!d:n(_)),d&&f>0)v=t(e,i,_,s(_.length),v,f-1)-1;else{if(v>=9007199254740991)throw TypeError();e[v]=_}v++}m++}return v}},function(t,e,i){i(268),t.exports=i(8).String.padStart},function(t,e,i){"use strict";var n=i(1),r=i(115),s=i(58),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(s);n(n.P+n.F*o,"String",{padStart:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,i){i(270),t.exports=i(8).String.padEnd},function(t,e,i){"use strict";var n=i(1),r=i(115),s=i(58),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(s);n(n.P+n.F*o,"String",{padEnd:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,i){i(272),t.exports=i(8).String.trimLeft},function(t,e,i){"use strict";i(40)("trimLeft",(function(t){return function(){return t(this,1)}}),"trimStart")},function(t,e,i){i(274),t.exports=i(8).String.trimRight},function(t,e,i){"use strict";i(40)("trimRight",(function(t){return function(){return t(this,2)}}),"trimEnd")},function(t,e,i){i(276),t.exports=i(62).f("asyncIterator")},function(t,e,i){i(87)("asyncIterator")},function(t,e,i){i(278),t.exports=i(8).Object.getOwnPropertyDescriptors},function(t,e,i){var n=i(1),r=i(114),s=i(16),o=i(21),a=i(78);n(n.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,i,n=s(t),u=o.f,l=r(n),c={},f=0;l.length>f;)void 0!==(i=u(n,e=l[f++]))&&a(c,e,i);return c}})},function(t,e,i){i(280),t.exports=i(8).Object.values},function(t,e,i){var n=i(1),r=i(116)(!1);n(n.S,"Object",{values:function(t){return r(t)}})},function(t,e,i){i(282),t.exports=i(8).Object.entries},function(t,e,i){var n=i(1),r=i(116)(!0);n(n.S,"Object",{entries:function(t){return r(t)}})},function(t,e,i){"use strict";i(108),i(284),t.exports=i(8).Promise.finally},function(t,e,i){"use strict";var n=i(1),r=i(8),s=i(2),o=i(48),a=i(110);n(n.P+n.R,"Promise",{finally:function(t){var e=o(this,r.Promise||s.Promise),i="function"==typeof t;return this.then(i?function(i){return a(e,t()).then((function(){return i}))}:t,i?function(i){return a(e,t()).then((function(){throw i}))}:t)}})},function(t,e,i){i(286),i(287),i(288),t.exports=i(8)},function(t,e,i){var n=i(2),r=i(1),s=i(58),o=[].slice,a=/MSIE .\./.test(s),u=function(t){return function(e,i){var n=arguments.length>2,r=!!n&&o.call(arguments,2);return t(n?function(){("function"==typeof e?e:Function(e)).apply(this,r)}:e,i)}};r(r.G+r.B+r.F*a,{setTimeout:u(n.setTimeout),setInterval:u(n.setInterval)})},function(t,e,i){var n=i(1),r=i(84);n(n.G+n.B,{setImmediate:r.set,clearImmediate:r.clear})},function(t,e,i){for(var n=i(81),r=i(32),s=i(12),o=i(2),a=i(15),u=i(41),l=i(6),c=l("iterator"),f=l("toStringTag"),h=u.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},_=r(p),d=0;d<_.length;d++){var v,m=_[d],g=p[m],y=o[m],x=y&&y.prototype;if(x&&(x[c]||a(x,c,h),x[f]||a(x,f,m),u[m]=h,g))for(v in n)x[v]||s(x,v,n[v],!0)}},function(t,e,i){var n=function(t){"use strict";var e,i=Object.prototype,n=i.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},s=r.iterator||"@@iterator",o=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function u(t,e,i,n){var r=e&&e.prototype instanceof d?e:d,s=Object.create(r.prototype),o=new A(n||[]);return s._invoke=function(t,e,i){var n=c;return function(r,s){if(n===h)throw new Error("Generator is already running");if(n===p){if("throw"===r)throw s;return M()}for(i.method=r,i.arg=s;;){var o=i.delegate;if(o){var a=S(o,i);if(a){if(a===_)continue;return a}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if(n===c)throw n=p,i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);n=h;var u=l(t,e,i);if("normal"===u.type){if(n=i.done?p:f,u.arg===_)continue;return{value:u.arg,done:i.done}}"throw"===u.type&&(n=p,i.method="throw",i.arg=u.arg)}}}(t,i,o),s}function l(t,e,i){try{return{type:"normal",arg:t.call(e,i)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var c="suspendedStart",f="suspendedYield",h="executing",p="completed",_={};function d(){}function v(){}function m(){}var g={};g[s]=function(){return this};var y=Object.getPrototypeOf,x=y&&y(y(k([])));x&&x!==i&&n.call(x,s)&&(g=x);var b=m.prototype=d.prototype=Object.create(g);function w(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function T(t){var e;this._invoke=function(i,r){function s(){return new Promise((function(e,s){!function e(i,r,s,o){var a=l(t[i],t,r);if("throw"!==a.type){var u=a.arg,c=u.value;return c&&"object"==typeof c&&n.call(c,"__await")?Promise.resolve(c.__await).then((function(t){e("next",t,s,o)}),(function(t){e("throw",t,s,o)})):Promise.resolve(c).then((function(t){u.value=t,s(u)}),(function(t){return e("throw",t,s,o)}))}o(a.arg)}(i,r,e,s)}))}return e=e?e.then(s,s):s()}}function S(t,i){var n=t.iterator[i.method];if(n===e){if(i.delegate=null,"throw"===i.method){if(t.iterator.return&&(i.method="return",i.arg=e,S(t,i),"throw"===i.method))return _;i.method="throw",i.arg=new TypeError("The iterator does not provide a 'throw' method")}return _}var r=l(n,t.iterator,i.arg);if("throw"===r.type)return i.method="throw",i.arg=r.arg,i.delegate=null,_;var s=r.arg;return s?s.done?(i[t.resultName]=s.value,i.next=t.nextLoc,"return"!==i.method&&(i.method="next",i.arg=e),i.delegate=null,_):s:(i.method="throw",i.arg=new TypeError("iterator result is not an object"),i.delegate=null,_)}function P(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function A(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(P,this),this.reset(!0)}function k(t){if(t){var i=t[s];if(i)return i.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function i(){for(;++r<t.length;)if(n.call(t,r))return i.value=t[r],i.done=!1,i;return i.value=e,i.done=!0,i};return o.next=o}}return{next:M}}function M(){return{value:e,done:!0}}return v.prototype=b.constructor=m,m.constructor=v,m[a]=v.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(b),t},t.awrap=function(t){return{__await:t}},w(T.prototype),T.prototype[o]=function(){return this},t.AsyncIterator=T,t.async=function(e,i,n,r){var s=new T(u(e,i,n,r));return t.isGeneratorFunction(i)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},w(b),b[a]="Generator",b[s]=function(){return this},b.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var i in t)e.push(i);return e.reverse(),function i(){for(;e.length;){var n=e.pop();if(n in t)return i.value=n,i.done=!1,i}return i.done=!0,i}},t.values=k,A.prototype={constructor:A,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var i in this)"t"===i.charAt(0)&&n.call(this,i)&&!isNaN(+i.slice(1))&&(this[i]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var i=this;function r(n,r){return a.type="throw",a.arg=t,i.next=n,r&&(i.method="next",i.arg=e),!!r}for(var s=this.tryEntries.length-1;s>=0;--s){var o=this.tryEntries[s],a=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var u=n.call(o,"catchLoc"),l=n.call(o,"finallyLoc");if(u&&l){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(t,e){for(var i=this.tryEntries.length-1;i>=0;--i){var r=this.tryEntries[i];if(r.tryLoc<=this.prev&&n.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var s=r;break}}s&&("break"===t||"continue"===t)&&s.tryLoc<=e&&e<=s.finallyLoc&&(s=null);var o=s?s.completion:{};return o.type=t,o.arg=e,s?(this.method="next",this.next=s.finallyLoc,_):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),_},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.finallyLoc===t)return this.complete(i.completion,i.afterLoc),O(i),_}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc===t){var n=i.completion;if("throw"===n.type){var r=n.arg;O(i)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(t,i,n){return this.delegate={iterator:k(t),resultName:i,nextLoc:n},"next"===this.method&&(this.arg=e),_}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,i){"use strict";i.r(e);i(117);var n=function(t){var e=t.Element.prototype;"function"!=typeof e.matches&&(e.matches=e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||function(t){for(var e=(this.document||this.ownerDocument).querySelectorAll(t),i=0;e[i]&&e[i]!==this;)++i;return Boolean(e[i])}),"function"!=typeof e.closest&&(e.closest=function(t){for(var e=this;e&&1===e.nodeType;){if(e.matches(t))return e;e=e.parentNode}return null})},r=i(0);
/*!
 * VERSION: 2.1.3
 * DATE: 2019-05-17
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
r.e._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],(function(){var t=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},e=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r(i,e[i],e):r[i%r.length];delete t.cycle},i=function(t){if("function"==typeof t)return t;var e="object"==typeof t?t:{each:t},i=e.ease,n=e.from||0,r=e.base||0,s={},o=isNaN(n),a=e.axis,u={center:.5,end:1}[n]||0;return function(t,l,c){var f,h,p,_,d,v,m,g,y,x=(c||e).length,b=s[x];if(!b){if(!(y="auto"===e.grid?0:(e.grid||[1/0])[0])){for(m=-1/0;m<(m=c[y++].getBoundingClientRect().left)&&y<x;);y--}for(b=s[x]=[],f=o?Math.min(y,x)*u-.5:n%y,h=o?x*u/y-.5:n/y|0,m=0,g=1/0,v=0;v<x;v++)p=v%y-f,_=h-(v/y|0),b[v]=d=a?Math.abs("y"===a?_:p):Math.sqrt(p*p+_*_),d>m&&(m=d),d<g&&(g=d);b.max=m-g,b.min=g,b.v=x=e.amount||e.each*(y>x?x-1:a?"y"===a?x/y:y:Math.max(y,x/y))||0,b.b=x<0?r-x:r}return x=(b[t]-b.min)/b.max,b.b+(i?i.getRatio(x):x)*b.v}},n=function(t,e,i){r.f.call(this,t,e,i),this._cycle=0,this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._repeat&&this._uncache(!0),this.render=n.prototype.render},s=r.f._internals,o=s.isSelector,a=s.isArray,u=n.prototype=r.f.to({},.1,{}),l=[];n.version="2.1.3",u.constructor=n,u.kill()._gc=!1,n.killTweensOf=n.killDelayedCallsTo=r.f.killTweensOf,n.getTweensOf=r.f.getTweensOf,n.lagSmoothing=r.f.lagSmoothing,n.ticker=r.f.ticker,n.render=r.f.render,n.distribute=i,u.invalidate=function(){return this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._yoyoEase=null,this._uncache(!0),r.f.prototype.invalidate.call(this)},u.updateTo=function(t,e){var i,n=this.ratio,s=this.vars.immediateRender||t.immediateRender;for(i in e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay)),t)this.vars[i]=t[i];if(this._initted||s)if(e)this._initted=!1,s&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&r.f._onPluginEvent("_onDisable",this),this._time/this._duration>.998){var o=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(o,!0,!1)}else if(this._initted=!1,this._init(),this._time>0||s)for(var a,u=1/(1-n),l=this._firstPT;l;)a=l.s+l.c,l.c*=u,l.s=a-l.c,l=l._next;return this},u.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var n,o,a,u,l,c,f,h,p,_=this._dirty?this.totalDuration():this._totalDuration,d=this._time,v=this._totalTime,m=this._cycle,g=this._duration,y=this._rawPrevTime;if(t>=_-1e-8&&t>=0?(this._totalTime=_,this._cycle=this._repeat,this._yoyo&&0!=(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=g,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(n=!0,o="onComplete",i=i||this._timeline.autoRemoveChildren),0===g&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(y<0||t<=0&&t>=-1e-8||1e-8===y&&"isPause"!==this.data)&&y!==t&&(i=!0,y>1e-8&&(o="onReverseComplete")),this._rawPrevTime=h=!e||t||y===t?t:1e-8)):t<1e-8?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==v||0===g&&y>0)&&(o="onReverseComplete",n=this._reversed),t>-1e-8?t=0:t<0&&(this._active=!1,0===g&&(this._initted||!this.vars.lazy||i)&&(y>=0&&(i=!0),this._rawPrevTime=h=!e||t||y===t?t:1e-8)),this._initted||(i=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(u=g+this._repeatDelay,this._cycle=this._totalTime/u>>0,0!==this._cycle&&this._cycle===this._totalTime/u&&v<=t&&this._cycle--,this._time=this._totalTime-this._cycle*u,this._yoyo&&0!=(1&this._cycle)&&(this._time=g-this._time,(p=this._yoyoEase||this.vars.yoyoEase)&&(this._yoyoEase||(!0!==p||this._initted?this._yoyoEase=p=!0===p?this._ease:p instanceof r.b?p:r.b.map[p]:(p=this.vars.ease,this._yoyoEase=p=p?p instanceof r.b?p:"function"==typeof p?new r.b(p,this.vars.easeParams):r.b.map[p]||r.f.defaultEase:r.f.defaultEase)),this.ratio=p?1-p.getRatio((g-this._time)/g):0)),this._time>g?this._time=g:this._time<0&&(this._time=0)),this._easeType&&!p?(l=this._time/g,(1===(c=this._easeType)||3===c&&l>=.5)&&(l=1-l),3===c&&(l*=2),1===(f=this._easePower)?l*=l:2===f?l*=l*l:3===f?l*=l*l*l:4===f&&(l*=l*l*l*l),this.ratio=1===c?1-l:2===c?l:this._time/g<.5?l/2:1-l/2):p||(this.ratio=this._ease.getRatio(this._time/g))),d!==this._time||i||m!==this._cycle){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=d,this._totalTime=v,this._rawPrevTime=y,this._cycle=m,s.lazyTweens.push(this),void(this._lazy=[t,e]);!this._time||n||p?n&&this._ease._calcEnd&&!p&&(this.ratio=this._ease.getRatio(0===this._time?0:1)):this.ratio=this._ease.getRatio(this._time/g)}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==d&&t>=0&&(this._active=!0),0===v&&(2===this._initted&&t>0&&this._init(),this._startAt&&(t>=0?this._startAt.render(t,!0,i):o||(o="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==g||e||this._callback("onStart"))),a=this._firstPT;a;)a.f?a.t[a.p](a.c*this.ratio+a.s):a.t[a.p]=a.c*this.ratio+a.s,a=a._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,!0,i),e||(this._totalTime!==v||o)&&this._callback("onUpdate")),this._cycle!==m&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),o&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,!0,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[o]&&this._callback(o),0===g&&1e-8===this._rawPrevTime&&1e-8!==h&&(this._rawPrevTime=0)))}else v!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},n.to=function(t,e,i){return new n(t,e,i)},n.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new n(t,e,i)},n.fromTo=function(t,e,i,r){return r.startAt=i,r.immediateRender=0!=r.immediateRender&&0!=i.immediateRender,new n(t,e,r)},n.staggerTo=n.allTo=function(s,u,c,f,h,p,_){var d,v,m,g,y=[],x=i(c.stagger||f),b=c.cycle,w=(c.startAt||l).cycle;for(a(s)||("string"==typeof s&&(s=r.f.selector(s)||s),o(s)&&(s=t(s))),d=(s=s||[]).length-1,m=0;m<=d;m++){for(g in v={},c)v[g]=c[g];if(b&&(e(v,s,m),null!=v.duration&&(u=v.duration,delete v.duration)),w){for(g in w=v.startAt={},c.startAt)w[g]=c.startAt[g];e(v.startAt,s,m)}v.delay=x(m,s[m],s)+(v.delay||0),m===d&&h&&(v.onComplete=function(){c.onComplete&&c.onComplete.apply(c.onCompleteScope||this,arguments),h.apply(_||c.callbackScope||this,p||l)}),y[m]=new n(s[m],u,v)}return y},n.staggerFrom=n.allFrom=function(t,e,i,r,s,o,a){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,n.staggerTo(t,e,i,r,s,o,a)},n.staggerFromTo=n.allFromTo=function(t,e,i,r,s,o,a,u){return r.startAt=i,r.immediateRender=0!=r.immediateRender&&0!=i.immediateRender,n.staggerTo(t,e,r,s,o,a,u)},n.delayedCall=function(t,e,i,r,s){return new n(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:r,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,useFrames:s,overwrite:0})},n.set=function(t,e){return new n(t,0,e)},n.isTweening=function(t){return r.f.getTweensOf(t,!0).length>0};var c=function(t,e){for(var i=[],n=0,s=t._first;s;)s instanceof r.f?i[n++]=s:(e&&(i[n++]=s),n=(i=i.concat(c(s,e))).length),s=s._next;return i},f=n.getAllTweens=function(t){return c(r.a._rootTimeline,t).concat(c(r.a._rootFramesTimeline,t))};n.killAll=function(t,e,i,n){null==e&&(e=!0),null==i&&(i=!0);var s,o,a,u=f(0!=n),l=u.length,c=e&&i&&n;for(a=0;a<l;a++)o=u[a],(c||o instanceof r.c||(s=o.target===o.vars.onComplete)&&i||e&&!s)&&(t?o.totalTime(o._reversed?0:o.totalDuration()):o._enabled(!1,!1))},n.killChildTweensOf=function(e,i){if(null!=e){var u,l,c,f,h,p=s.tweenLookup;if("string"==typeof e&&(e=r.f.selector(e)||e),o(e)&&(e=t(e)),a(e))for(f=e.length;--f>-1;)n.killChildTweensOf(e[f],i);else{for(c in u=[],p)for(l=p[c].target.parentNode;l;)l===e&&(u=u.concat(p[c].tweens)),l=l.parentNode;for(h=u.length,f=0;f<h;f++)i&&u[f].totalTime(u[f].totalDuration()),u[f]._enabled(!1,!1)}}};var h=function(t,e,i,n){e=!1!==e,i=!1!==i;for(var s,o,a=f(n=!1!==n),u=e&&i&&n,l=a.length;--l>-1;)o=a[l],(u||o instanceof r.c||(s=o.target===o.vars.onComplete)&&i||e&&!s)&&o.paused(t)};return n.pauseAll=function(t,e,i){h(!0,t,e,i)},n.resumeAll=function(t,e,i){h(!1,t,e,i)},n.globalTimeScale=function(t){var e=r.a._rootTimeline,i=r.f.ticker.time;return arguments.length?(t=t||1e-8,e._startTime=i-(i-e._startTime)*e._timeScale/t,e=r.a._rootFramesTimeline,i=r.f.ticker.frame,e._startTime=i-(i-e._startTime)*e._timeScale/t,e._timeScale=r.a._rootTimeline._timeScale=t,t):e._timeScale},u.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this.duration()?this._time/this._duration:this.ratio},u.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},u.time=function(t,e){if(!arguments.length)return this._time;this._dirty&&this.totalDuration();var i=this._duration,n=this._cycle,r=n*(i+this._repeatDelay);return t>i&&(t=i),this.totalTime(this._yoyo&&1&n?i-t+r:this._repeat?t+r:t,e)},u.duration=function(t){return arguments.length?r.a.prototype.duration.call(this,t):this._duration},u.totalDuration=function(t){return arguments.length?-1===this._repeat?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},u.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},u.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},u.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},n}),!0);var s=r.g.TweenMax;
/*!
 * VERSION: 2.1.3
 * DATE: 2019-05-17
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
r.e._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],(function(){var t,e,i,n,s=function(){r.d.call(this,"css"),this._overwriteProps.length=0,this.setRatio=s.prototype.setRatio},o=r.e._gsDefine.globals,a={},u=s.prototype=new r.d("css");u.constructor=s,s.version="2.1.3",s.API=2,s.defaultTransformPerspective=0,s.defaultSkewType="compensated",s.defaultSmoothOrigin=!0,u="px",s.suffixMap={top:u,right:u,bottom:u,left:u,width:u,height:u,fontSize:u,padding:u,margin:u,perspective:u,lineHeight:""};var l,c,f,h,p,_,d,v,m=/(?:\-|\.|\b)(\d|\.|e\-)+/g,g=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,y=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,x=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b),?/gi,b=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,w=/(?:\d|\-|\+|=|#|\.)*/g,T=/opacity *= *([^)]*)/i,S=/opacity:([^;]*)/i,P=/alpha\(opacity *=.+?\)/i,O=/^(rgb|hsl)/,A=/([A-Z])/g,k=/-([a-z])/gi,M=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,R=function(t,e){return e.toUpperCase()},E=/(?:Left|Right|Width)/i,F=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,C=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,I=/,(?=[^\)]*(?:\(|$))/gi,D=/[\s,\(]/i,L=Math.PI/180,N=180/Math.PI,j={},z={style:{}},B=r.e.document||{createElement:function(){return z}},X=function(t,e){var i=B.createElementNS?B.createElementNS(e||"http://www.w3.org/1999/xhtml",t):B.createElement(t);return i.style?i:B.createElement(t)},V=X("div"),Y=X("img"),U=s._internals={_specialProps:a},W=(r.e.navigator||{}).userAgent||"",G=function(){var t=W.indexOf("Android"),e=X("a");return f=-1!==W.indexOf("Safari")&&-1===W.indexOf("Chrome")&&(-1===t||parseFloat(W.substr(t+8,2))>3),p=f&&parseFloat(W.substr(W.indexOf("Version/")+8,2))<6,h=-1!==W.indexOf("Firefox"),(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(W)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(W))&&(_=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),q=function(t){return T.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},H=function(t){r.e.console&&console.log(t)},Z="",$="",K=function(t,e){var i,n,r=(e=e||V).style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],n=5;--n>-1&&void 0===r[i[n]+t];);return n>=0?(Z="-"+($=3===n?"ms":i[n]).toLowerCase()+"-",$+t):null},Q="undefined"!=typeof window?window:B.defaultView||{getComputedStyle:function(){}},J=function(t){return Q.getComputedStyle(t)},tt=s.getStyle=function(t,e,i,n,r){var s;return G||"opacity"!==e?(!n&&t.style[e]?s=t.style[e]:(i=i||J(t))?s=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(A,"-$1").toLowerCase()):t.currentStyle&&(s=t.currentStyle[e]),null==r||s&&"none"!==s&&"auto"!==s&&"auto auto"!==s?s:r):q(t)},et=U.convertToPixels=function(t,e,i,n,o){if("px"===n||!n&&"lineHeight"!==e)return i;if("auto"===n||!i)return 0;var a,u,l,c=E.test(e),f=t,h=V.style,p=i<0,_=1===i;if(p&&(i=-i),_&&(i*=100),"lineHeight"!==e||n)if("%"===n&&-1!==e.indexOf("border"))a=i/100*(c?t.clientWidth:t.clientHeight);else{if(h.cssText="border:0 solid red;position:"+tt(t,"position")+";line-height:0;","%"!==n&&f.appendChild&&"v"!==n.charAt(0)&&"rem"!==n)h[c?"borderLeftWidth":"borderTopWidth"]=i+n;else{if(f=t.parentNode||B.body,-1!==tt(f,"display").indexOf("flex")&&(h.position="absolute"),u=f._gsCache,l=r.f.ticker.frame,u&&c&&u.time===l)return u.width*i/100;h[c?"width":"height"]=i+n}f.appendChild(V),a=parseFloat(V[c?"offsetWidth":"offsetHeight"]),f.removeChild(V),c&&"%"===n&&!1!==s.cacheWidths&&((u=f._gsCache=f._gsCache||{}).time=l,u.width=a/i*100),0!==a||o||(a=et(t,e,i,n,!0))}else u=J(t).lineHeight,t.style.lineHeight=i,a=parseFloat(J(t).lineHeight),t.style.lineHeight=u;return _&&(a/=100),p?-a:a},it=U.calculateOffset=function(t,e,i){if("absolute"!==tt(t,"position",i))return 0;var n="left"===e?"Left":"Top",r=tt(t,"margin"+n,i);return t["offset"+n]-(et(t,e,parseFloat(r),r.replace(w,""))||0)},nt=function(t,e){var i,n,r,s={};if(e=e||J(t))if(i=e.length)for(;--i>-1;)-1!==(r=e[i]).indexOf("-transform")&&It!==r||(s[r.replace(k,R)]=e.getPropertyValue(r));else for(i in e)-1!==i.indexOf("Transform")&&Ct!==i||(s[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===s[i]&&(s[i.replace(k,R)]=e[i]);return G||(s.opacity=q(t)),n=qt(t,e,!1),s.rotation=n.rotation,s.skewX=n.skewX,s.scaleX=n.scaleX,s.scaleY=n.scaleY,s.x=n.x,s.y=n.y,Lt&&(s.z=n.z,s.rotationX=n.rotationX,s.rotationY=n.rotationY,s.scaleZ=n.scaleZ),s.filters&&delete s.filters,s},rt=function(t,e,i,n,r){var s,o,a,u={},l=t.style;for(o in i)"cssText"!==o&&"length"!==o&&isNaN(o)&&(e[o]!==(s=i[o])||r&&r[o])&&-1===o.indexOf("Origin")&&("number"!=typeof s&&"string"!=typeof s||(u[o]="auto"!==s||"left"!==o&&"top"!==o?""!==s&&"auto"!==s&&"none"!==s||"string"!=typeof e[o]||""===e[o].replace(b,"")?s:0:it(t,o),void 0!==l[o]&&(a=new yt(l,o,l[o],a))));if(n)for(o in n)"className"!==o&&(u[o]=n[o]);return{difs:u,firstMPT:a}},st={width:["Left","Right"],height:["Top","Bottom"]},ot=["marginLeft","marginRight","marginTop","marginBottom"],at=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||J(t))[e]||0;if(t.getCTM&&Ut(t))return t.getBBox()[e]||0;var n=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=st[e],s=r.length;for(i=i||J(t);--s>-1;)n-=parseFloat(tt(t,"padding"+r[s],i,!0))||0,n-=parseFloat(tt(t,"border"+r[s]+"Width",i,!0))||0;return n},ut=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,n=t.split(" "),r=-1!==t.indexOf("left")?"0%":-1!==t.indexOf("right")?"100%":n[0],s=-1!==t.indexOf("top")?"0%":-1!==t.indexOf("bottom")?"100%":n[1];if(n.length>3&&!e){for(n=t.split(", ").join(",").split(","),t=[],i=0;i<n.length;i++)t.push(ut(n[i]));return t.join(",")}return null==s?s="center"===r?"50%":"0":"center"===s&&(s="50%"),("center"===r||isNaN(parseFloat(r))&&-1===(r+"").indexOf("="))&&(r="50%"),t=r+" "+s+(n.length>2?" "+n[2]:""),e&&(e.oxp=-1!==r.indexOf("%"),e.oyp=-1!==s.indexOf("%"),e.oxr="="===r.charAt(1),e.oyr="="===s.charAt(1),e.ox=parseFloat(r.replace(b,"")),e.oy=parseFloat(s.replace(b,"")),e.v=t),e||t},lt=function(t,e){return"function"==typeof t&&(t=t(v,d)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},ct=function(t,e){"function"==typeof t&&(t=t(v,d));var i="string"==typeof t&&"="===t.charAt(1);return"string"==typeof t&&"v"===t.charAt(t.length-2)&&(t=(i?t.substr(0,2):0)+window["inner"+("vh"===t.substr(-2)?"Height":"Width")]*(parseFloat(i?t.substr(2):t)/100)),null==t?e:i?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ft=function(t,e,i,n){var r,s,o,a;return"function"==typeof t&&(t=t(v,d)),null==t?o=e:"number"==typeof t?o=t:(360,r=t.split("_"),s=((a="="===t.charAt(1))?parseInt(t.charAt(0)+"1",10)*parseFloat(r[0].substr(2)):parseFloat(r[0]))*(-1===t.indexOf("rad")?1:N)-(a?0:e),r.length&&(n&&(n[i]=e+s),-1!==t.indexOf("short")&&(s%=360)!==s%180&&(s=s<0?s+360:s-360),-1!==t.indexOf("_cw")&&s<0?s=(s+3599999999640)%360-360*(s/360|0):-1!==t.indexOf("ccw")&&s>0&&(s=(s-3599999999640)%360-360*(s/360|0))),o=e+s),o<1e-6&&o>-1e-6&&(o=0),o},ht={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},pt=function(t,e,i){return 255*(6*(t=t<0?t+1:t>1?t-1:t)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},_t=s.parseColor=function(t,e){var i,n,r,s,o,a,u,l,c,f,h;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ht[t])i=ht[t];else if("#"===t.charAt(0))4===t.length&&(n=t.charAt(1),r=t.charAt(2),s=t.charAt(3),t="#"+n+n+r+r+s+s),i=[(t=parseInt(t.substr(1),16))>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=h=t.match(m),e){if(-1!==t.indexOf("="))return t.match(g)}else o=Number(i[0])%360/360,a=Number(i[1])/100,n=2*(u=Number(i[2])/100)-(r=u<=.5?u*(a+1):u+a-u*a),i.length>3&&(i[3]=Number(i[3])),i[0]=pt(o+1/3,n,r),i[1]=pt(o,n,r),i[2]=pt(o-1/3,n,r);else i=t.match(m)||ht.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ht.black;return e&&!h&&(n=i[0]/255,r=i[1]/255,s=i[2]/255,u=((l=Math.max(n,r,s))+(c=Math.min(n,r,s)))/2,l===c?o=a=0:(f=l-c,a=u>.5?f/(2-l-c):f/(l+c),o=l===n?(r-s)/f+(r<s?6:0):l===r?(s-n)/f+2:(n-r)/f+4,o*=60),i[0]=o+.5|0,i[1]=100*a+.5|0,i[2]=100*u+.5|0),i},dt=function(t,e){var i,n,r,s=t.match(vt)||[],o=0,a="";if(!s.length)return t;for(i=0;i<s.length;i++)n=s[i],o+=(r=t.substr(o,t.indexOf(n,o)-o)).length+n.length,3===(n=_t(n,e)).length&&n.push(1),a+=r+(e?"hsla("+n[0]+","+n[1]+"%,"+n[2]+"%,"+n[3]:"rgba("+n.join(","))+")";return a+t.substr(o)},vt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(u in ht)vt+="|"+u+"\\b";vt=new RegExp(vt+")","gi"),s.colorStringFilter=function(t){var e,i=t[0]+" "+t[1];vt.test(i)&&(e=-1!==i.indexOf("hsl(")||-1!==i.indexOf("hsla("),t[0]=dt(t[0],e),t[1]=dt(t[1],e)),vt.lastIndex=0},r.f.defaultStringFilter||(r.f.defaultStringFilter=s.colorStringFilter);var mt=function(t,e,i,n){if(null==t)return function(t){return t};var r,s=e?(t.match(vt)||[""])[0]:"",o=t.split(s).join("").match(y)||[],a=t.substr(0,t.indexOf(o[0])),u=")"===t.charAt(t.length-1)?")":"",l=-1!==t.indexOf(" ")?" ":",",c=o.length,f=c>0?o[0].replace(m,""):"";return c?r=e?function(t){var e,h,p,_;if("number"==typeof t)t+=f;else if(n&&I.test(t)){for(_=t.replace(I,"|").split("|"),p=0;p<_.length;p++)_[p]=r(_[p]);return _.join(",")}if(e=(t.match(vt)||[s])[0],p=(h=t.split(e).join("").match(y)||[]).length,c>p--)for(;++p<c;)h[p]=i?h[(p-1)/2|0]:o[p];return a+h.join(l)+l+e+u+(-1!==t.indexOf("inset")?" inset":"")}:function(t){var e,s,h;if("number"==typeof t)t+=f;else if(n&&I.test(t)){for(s=t.replace(I,"|").split("|"),h=0;h<s.length;h++)s[h]=r(s[h]);return s.join(",")}if(h=(e=t.match(","===l?y:x)||[]).length,c>h--)for(;++h<c;)e[h]=i?e[(h-1)/2|0]:o[h];return(a&&"none"!==t&&t.substr(0,t.indexOf(e[0]))||a)+e.join(l)+u}:function(t){return t}},gt=function(t){return t=t.split(","),function(e,i,n,r,s,o,a){var u,l=(i+"").split(" ");for(a={},u=0;u<4;u++)a[t[u]]=l[u]=l[u]||l[(u-1)/2>>0];return r.parse(e,a,s,o)}},yt=(U._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,n,r,s,o=this.data,a=o.proxy,u=o.firstMPT;u;)e=a[u.v],u.r?e=u.r(e):e<1e-6&&e>-1e-6&&(e=0),u.t[u.p]=e,u=u._next;if(o.autoRotate&&(o.autoRotate.rotation=o.mod?o.mod.call(this._tween,a.rotation,this.t,this._tween):a.rotation),1===t||0===t)for(u=o.firstMPT,s=1===t?"e":"b";u;){if((i=u.t).type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,n=1;n<i.l;n++)r+=i["xn"+n]+i["xs"+(n+1)];i[s]=r}}else i[s]=i.s+i.xs0;u=u._next}},function(t,e,i,n,r){this.t=t,this.p=e,this.v=i,this.r=r,n&&(n._prev=this,this._next=n)}),xt=(U._parseToProxy=function(t,e,i,n,r,s){var o,a,u,l,c,f=n,h={},p={},_=i._transform,d=j;for(i._transform=null,j=e,n=c=i.parse(t,e,n,r),j=d,s&&(i._transform=_,f&&(f._prev=null,f._prev&&(f._prev._next=null)));n&&n!==f;){if(n.type<=1&&(p[a=n.p]=n.s+n.c,h[a]=n.s,s||(l=new yt(n,"s",a,l,n.r),n.c=0),1===n.type))for(o=n.l;--o>0;)u="xn"+o,p[a=n.p+"_"+u]=n.data[u],h[a]=n[u],s||(l=new yt(n,u,a,l,n.rxp[u]));n=n._next}return{proxy:h,end:p,firstMPT:l,pt:c}},U.CSSPropTween=function(e,i,r,s,o,a,u,l,c,f,h){this.t=e,this.p=i,this.s=r,this.c=s,this.n=u||i,e instanceof xt||n.push(this.n),this.r=l?"function"==typeof l?l:Math.round:l,this.type=a||0,c&&(this.pr=c,t=!0),this.b=void 0===f?r:f,this.e=void 0===h?r+s:h,o&&(this._next=o,o._prev=this)}),bt=function(t,e,i,n,r,s){var o=new xt(t,e,i,n-i,r,-1,s);return o.b=i,o.e=o.xs0=n,o},wt=s.parseComplex=function(t,e,i,n,r,o,a,u,c,f){i=i||o||"","function"==typeof n&&(n=n(v,d)),a=new xt(t,e,0,0,a,f?2:1,null,!1,u,i,n),n+="",r&&vt.test(n+i)&&(n=[i,n],s.colorStringFilter(n),i=n[0],n=n[1]);var h,p,_,y,x,b,w,T,S,P,O,A,k,M=i.split(", ").join(",").split(" "),R=n.split(", ").join(",").split(" "),E=M.length,F=!1!==l;for(-1===n.indexOf(",")&&-1===i.indexOf(",")||(-1!==(n+i).indexOf("rgb")||-1!==(n+i).indexOf("hsl")?(M=M.join(" ").replace(I,", ").split(" "),R=R.join(" ").replace(I,", ").split(" ")):(M=M.join(" ").split(",").join(", ").split(" "),R=R.join(" ").split(",").join(", ").split(" ")),E=M.length),E!==R.length&&(E=(M=(o||"").split(" ")).length),a.plugin=c,a.setRatio=f,vt.lastIndex=0,h=0;h<E;h++)if(y=M[h],x=R[h]+"",(T=parseFloat(y))||0===T)a.appendXtra("",T,lt(x,T),x.replace(g,""),!(!F||-1===x.indexOf("px"))&&Math.round,!0);else if(r&&vt.test(y))A=")"+((A=x.indexOf(")")+1)?x.substr(A):""),k=-1!==x.indexOf("hsl")&&G,P=x,y=_t(y,k),x=_t(x,k),(S=y.length+x.length>6)&&!G&&0===x[3]?(a["xs"+a.l]+=a.l?" transparent":"transparent",a.e=a.e.split(R[h]).join("transparent")):(G||(S=!1),k?a.appendXtra(P.substr(0,P.indexOf("hsl"))+(S?"hsla(":"hsl("),y[0],lt(x[0],y[0]),",",!1,!0).appendXtra("",y[1],lt(x[1],y[1]),"%,",!1).appendXtra("",y[2],lt(x[2],y[2]),S?"%,":"%"+A,!1):a.appendXtra(P.substr(0,P.indexOf("rgb"))+(S?"rgba(":"rgb("),y[0],x[0]-y[0],",",Math.round,!0).appendXtra("",y[1],x[1]-y[1],",",Math.round).appendXtra("",y[2],x[2]-y[2],S?",":A,Math.round),S&&(y=y.length<4?1:y[3],a.appendXtra("",y,(x.length<4?1:x[3])-y,A,!1))),vt.lastIndex=0;else if(b=y.match(m)){if(!(w=x.match(g))||w.length!==b.length)return a;for(_=0,p=0;p<b.length;p++)O=b[p],P=y.indexOf(O,_),a.appendXtra(y.substr(_,P-_),Number(O),lt(w[p],O),"",!(!F||"px"!==y.substr(P+O.length,2))&&Math.round,0===p),_=P+O.length;a["xs"+a.l]+=y.substr(_)}else a["xs"+a.l]+=a.l||a["xs"+a.l]?" "+x:x;if(-1!==n.indexOf("=")&&a.data){for(A=a.xs0+a.data.s,h=1;h<a.l;h++)A+=a["xs"+h]+a.data["xn"+h];a.e=A+a["xs"+h]}return a.l||(a.type=-1,a.xs0=a.e),a.xfirst||a},Tt=9;for((u=xt.prototype).l=u.pr=0;--Tt>0;)u["xn"+Tt]=0,u["xs"+Tt]="";u.xs0="",u._next=u._prev=u.xfirst=u.data=u.plugin=u.setRatio=u.rxp=null,u.appendXtra=function(t,e,i,n,r,s){var o=this,a=o.l;return o["xs"+a]+=s&&(a||o["xs"+a])?" "+t:t||"",i||0===a||o.plugin?(o.l++,o.type=o.setRatio?2:1,o["xs"+o.l]=n||"",a>0?(o.data["xn"+a]=e+i,o.rxp["xn"+a]=r,o["xn"+a]=e,o.plugin||(o.xfirst=new xt(o,"xn"+a,e,i,o.xfirst||o,0,o.n,r,o.pr),o.xfirst.xs0=0),o):(o.data={s:e+i},o.rxp={},o.s=e,o.c=i,o.r=r,o)):(o["xs"+a]+=e+(n||""),o)};var St=function(t,e){e=e||{},this.p=e.prefix&&K(t)||t,a[t]=a[this.p]=this,this.format=e.formatter||mt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.allowFunc=e.allowFunc,this.pr=e.priority||0},Pt=U._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var n,r=t.split(","),s=e.defaultValue;for(i=i||[s],n=0;n<r.length;n++)e.prefix=0===n&&e.prefix,e.defaultValue=i[n]||s,new St(r[n],e)},Ot=U._registerPluginProp=function(t){if(!a[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";Pt(t,{parser:function(t,i,n,r,s,u,l){var c=o.com.greensock.plugins[e];return c?(c._cssRegister(),a[n].parse(t,i,n,r,s,u,l)):(H("Error: "+e+" js file not loaded."),s)}})}};(u=St.prototype).parseComplex=function(t,e,i,n,r,s){var o,a,u,l,c,f,h=this.keyword;if(this.multi&&(I.test(i)||I.test(e)?(a=e.replace(I,"|").split("|"),u=i.replace(I,"|").split("|")):h&&(a=[e],u=[i])),u){for(l=u.length>a.length?u.length:a.length,o=0;o<l;o++)e=a[o]=a[o]||this.dflt,i=u[o]=u[o]||this.dflt,h&&(c=e.indexOf(h))!==(f=i.indexOf(h))&&(-1===f?a[o]=a[o].split(h).join(""):-1===c&&(a[o]+=" "+h));e=a.join(", "),i=u.join(", ")}return wt(t,this.p,e,i,this.clrs,this.dflt,n,this.pr,r,s)},u.parse=function(t,e,n,r,s,o,a){return this.parseComplex(t.style,this.format(tt(t,this.p,i,!1,this.dflt)),this.format(e),s,o)},s.registerSpecialProp=function(t,e,i){Pt(t,{parser:function(t,n,r,s,o,a,u){var l=new xt(t,r,0,0,o,2,r,!1,i);return l.plugin=a,l.setRatio=e(t,n,s._tween,r),l},priority:i})},s.useSVGTransformAttr=!0;var At,kt,Mt,Rt,Et,Ft="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Ct=K("transform"),It=Z+"transform",Dt=K("transformOrigin"),Lt=null!==K("perspective"),Nt=U.Transform=function(){this.perspective=parseFloat(s.defaultTransformPerspective)||0,this.force3D=!(!1===s.defaultForce3D||!Lt)&&(s.defaultForce3D||"auto")},jt=r.e.SVGElement,zt=function(t,e,i){var n,r=B.createElementNS("http://www.w3.org/2000/svg",t),s=/([a-z])([A-Z])/g;for(n in i)r.setAttributeNS(null,n.replace(s,"$1-$2").toLowerCase(),i[n]);return e.appendChild(r),r},Bt=B.documentElement||{},Xt=(Et=_||/Android/i.test(W)&&!r.e.chrome,B.createElementNS&&Bt.appendChild&&!Et&&(kt=zt("svg",Bt),Rt=(Mt=zt("rect",kt,{width:100,height:50,x:100})).getBoundingClientRect().width,Mt.style[Dt]="50% 50%",Mt.style[Ct]="scaleX(0.5)",Et=Rt===Mt.getBoundingClientRect().width&&!(h&&Lt),Bt.removeChild(kt)),Et),Vt=function(t,e,i,n,r,o){var a,u,l,c,f,h,p,_,d,v,m,g,y,x,b=t._gsTransform,w=Gt(t,!0);b&&(y=b.xOrigin,x=b.yOrigin),(!n||(a=n.split(" ")).length<2)&&(0===(p=t.getBBox()).x&&0===p.y&&p.width+p.height===0&&(p={x:parseFloat(t.hasAttribute("x")?t.getAttribute("x"):t.hasAttribute("cx")?t.getAttribute("cx"):0)||0,y:parseFloat(t.hasAttribute("y")?t.getAttribute("y"):t.hasAttribute("cy")?t.getAttribute("cy"):0)||0,width:0,height:0}),a=[(-1!==(e=ut(e).split(" "))[0].indexOf("%")?parseFloat(e[0])/100*p.width:parseFloat(e[0]))+p.x,(-1!==e[1].indexOf("%")?parseFloat(e[1])/100*p.height:parseFloat(e[1]))+p.y]),i.xOrigin=c=parseFloat(a[0]),i.yOrigin=f=parseFloat(a[1]),n&&w!==Wt&&(h=w[0],p=w[1],_=w[2],d=w[3],v=w[4],m=w[5],(g=h*d-p*_)&&(u=c*(d/g)+f*(-_/g)+(_*m-d*v)/g,l=c*(-p/g)+f*(h/g)-(h*m-p*v)/g,c=i.xOrigin=a[0]=u,f=i.yOrigin=a[1]=l)),b&&(o&&(i.xOffset=b.xOffset,i.yOffset=b.yOffset,b=i),r||!1!==r&&!1!==s.defaultSmoothOrigin?(u=c-y,l=f-x,b.xOffset+=u*w[0]+l*w[2]-u,b.yOffset+=u*w[1]+l*w[3]-l):b.xOffset=b.yOffset=0),o||t.setAttribute("data-svg-origin",a.join(" "))},Yt=function(t){var e,i=X("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,r=this.nextSibling,s=this.style.cssText;if(Bt.appendChild(i),i.appendChild(this),this.style.display="block",t)try{e=this.getBBox(),this._originalGetBBox=this.getBBox,this.getBBox=Yt}catch(t){}else this._originalGetBBox&&(e=this._originalGetBBox());return r?n.insertBefore(this,r):n.appendChild(this),Bt.removeChild(i),this.style.cssText=s,e},Ut=function(t){return!(!jt||!t.getCTM||t.parentNode&&!t.ownerSVGElement||!function(t){try{return t.getBBox()}catch(e){return Yt.call(t,!0)}}(t))},Wt=[1,0,0,1,0,0],Gt=function(t,e){var i,n,r,s,o,a,u,l=t._gsTransform||new Nt,c=t.style;if(Ct?n=tt(t,It,null,!0):t.currentStyle&&(n=(n=t.currentStyle.filter.match(F))&&4===n.length?[n[0].substr(4),Number(n[2].substr(4)),Number(n[1].substr(4)),n[3].substr(4),l.x||0,l.y||0].join(","):""),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,Ct&&i&&!t.offsetParent&&t!==Bt&&(s=c.display,c.display="block",(u=t.parentNode)&&t.offsetParent||(o=1,a=t.nextSibling,Bt.appendChild(t)),i=!(n=tt(t,It,null,!0))||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,s?c.display=s:Kt(c,"display"),o&&(a?u.insertBefore(t,a):u?u.appendChild(t):Bt.removeChild(t))),(l.svg||t.getCTM&&Ut(t))&&(i&&-1!==(c[Ct]+"").indexOf("matrix")&&(n=c[Ct],i=0),r=t.getAttribute("transform"),i&&r&&(n="matrix("+(r=t.transform.baseVal.consolidate().matrix).a+","+r.b+","+r.c+","+r.d+","+r.e+","+r.f+")",i=0)),i)return Wt;for(r=(n||"").match(m)||[],Tt=r.length;--Tt>-1;)s=Number(r[Tt]),r[Tt]=(o=s-(s|=0))?(1e5*o+(o<0?-.5:.5)|0)/1e5+s:s;return e&&r.length>6?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},qt=U.getTransform=function(t,e,i,n){if(t._gsTransform&&i&&!n)return t._gsTransform;var o,a,u,l,c,f,h=i&&t._gsTransform||new Nt,p=h.scaleX<0,_=Lt&&(parseFloat(tt(t,Dt,e,!1,"0 0 0").split(" ")[2])||h.zOrigin)||0,d=parseFloat(s.defaultTransformPerspective)||0;if(h.svg=!(!t.getCTM||!Ut(t)),h.svg&&(Vt(t,tt(t,Dt,e,!1,"50% 50%")+"",h,t.getAttribute("data-svg-origin")),At=s.useSVGTransformAttr||Xt),(o=Gt(t))!==Wt){if(16===o.length){var v,m,g,y,x,b=o[0],w=o[1],T=o[2],S=o[3],P=o[4],O=o[5],A=o[6],k=o[7],M=o[8],R=o[9],E=o[10],F=o[12],C=o[13],I=o[14],D=o[11],L=Math.atan2(A,E);h.zOrigin&&(F=M*(I=-h.zOrigin)-o[12],C=R*I-o[13],I=E*I+h.zOrigin-o[14]),h.rotationX=L*N,L&&(v=P*(y=Math.cos(-L))+M*(x=Math.sin(-L)),m=O*y+R*x,g=A*y+E*x,M=P*-x+M*y,R=O*-x+R*y,E=A*-x+E*y,D=k*-x+D*y,P=v,O=m,A=g),L=Math.atan2(-T,E),h.rotationY=L*N,L&&(m=w*(y=Math.cos(-L))-R*(x=Math.sin(-L)),g=T*y-E*x,R=w*x+R*y,E=T*x+E*y,D=S*x+D*y,b=v=b*y-M*x,w=m,T=g),L=Math.atan2(w,b),h.rotation=L*N,L&&(v=b*(y=Math.cos(L))+w*(x=Math.sin(L)),m=P*y+O*x,g=M*y+R*x,w=w*y-b*x,O=O*y-P*x,R=R*y-M*x,b=v,P=m,M=g),h.rotationX&&Math.abs(h.rotationX)+Math.abs(h.rotation)>359.9&&(h.rotationX=h.rotation=0,h.rotationY=180-h.rotationY),L=Math.atan2(P,O),h.scaleX=(1e5*Math.sqrt(b*b+w*w+T*T)+.5|0)/1e5,h.scaleY=(1e5*Math.sqrt(O*O+A*A)+.5|0)/1e5,h.scaleZ=(1e5*Math.sqrt(M*M+R*R+E*E)+.5|0)/1e5,b/=h.scaleX,P/=h.scaleY,w/=h.scaleX,O/=h.scaleY,Math.abs(L)>2e-5?(h.skewX=L*N,P=0,"simple"!==h.skewType&&(h.scaleY*=1/Math.cos(L))):h.skewX=0,h.perspective=D?1/(D<0?-D:D):0,h.x=F,h.y=C,h.z=I,h.svg&&(h.x-=h.xOrigin-(h.xOrigin*b-h.yOrigin*P),h.y-=h.yOrigin-(h.yOrigin*w-h.xOrigin*O))}else if(!Lt||n||!o.length||h.x!==o[4]||h.y!==o[5]||!h.rotationX&&!h.rotationY){var j=o.length>=6,z=j?o[0]:1,B=o[1]||0,X=o[2]||0,V=j?o[3]:1;h.x=o[4]||0,h.y=o[5]||0,u=Math.sqrt(z*z+B*B),l=Math.sqrt(V*V+X*X),c=z||B?Math.atan2(B,z)*N:h.rotation||0,f=X||V?Math.atan2(X,V)*N+c:h.skewX||0,h.scaleX=u,h.scaleY=l,h.rotation=c,h.skewX=f,Lt&&(h.rotationX=h.rotationY=h.z=0,h.perspective=d,h.scaleZ=1),h.svg&&(h.x-=h.xOrigin-(h.xOrigin*z+h.yOrigin*X),h.y-=h.yOrigin-(h.xOrigin*B+h.yOrigin*V))}for(a in Math.abs(h.skewX)>90&&Math.abs(h.skewX)<270&&(p?(h.scaleX*=-1,h.skewX+=h.rotation<=0?180:-180,h.rotation+=h.rotation<=0?180:-180):(h.scaleY*=-1,h.skewX+=h.skewX<=0?180:-180)),h.zOrigin=_,h)h[a]<2e-5&&h[a]>-2e-5&&(h[a]=0)}return i&&(t._gsTransform=h,h.svg&&(At&&t.style[Ct]?r.f.delayedCall(.001,(function(){Kt(t.style,Ct)})):!At&&t.getAttribute("transform")&&r.f.delayedCall(.001,(function(){t.removeAttribute("transform")})))),h},Ht=function(t){var e,i,n=this.data,r=-n.rotation*L,s=r+n.skewX*L,o=(Math.cos(r)*n.scaleX*1e5|0)/1e5,a=(Math.sin(r)*n.scaleX*1e5|0)/1e5,u=(Math.sin(s)*-n.scaleY*1e5|0)/1e5,l=(Math.cos(s)*n.scaleY*1e5|0)/1e5,c=this.t.style,f=this.t.currentStyle;if(f){i=a,a=-u,u=-i,e=f.filter,c.filter="";var h,p,d=this.t.offsetWidth,v=this.t.offsetHeight,m="absolute"!==f.position,g="progid:DXImageTransform.Microsoft.Matrix(M11="+o+", M12="+a+", M21="+u+", M22="+l,y=n.x+d*n.xPercent/100,x=n.y+v*n.yPercent/100;if(null!=n.ox&&(y+=(h=(n.oxp?d*n.ox*.01:n.ox)-d/2)-(h*o+(p=(n.oyp?v*n.oy*.01:n.oy)-v/2)*a),x+=p-(h*u+p*l)),g+=m?", Dx="+((h=d/2)-(h*o+(p=v/2)*a)+y)+", Dy="+(p-(h*u+p*l)+x)+")":", sizingMethod='auto expand')",-1!==e.indexOf("DXImageTransform.Microsoft.Matrix(")?c.filter=e.replace(C,g):c.filter=g+" "+e,0!==t&&1!==t||1===o&&0===a&&0===u&&1===l&&(m&&-1===g.indexOf("Dx=0, Dy=0")||T.test(e)&&100!==parseFloat(RegExp.$1)||-1===e.indexOf(e.indexOf("Alpha"))&&c.removeAttribute("filter")),!m){var b,S,P,O=_<8?1:-1;for(h=n.ieOffsetX||0,p=n.ieOffsetY||0,n.ieOffsetX=Math.round((d-((o<0?-o:o)*d+(a<0?-a:a)*v))/2+y),n.ieOffsetY=Math.round((v-((l<0?-l:l)*v+(u<0?-u:u)*d))/2+x),Tt=0;Tt<4;Tt++)P=(i=-1!==(b=f[S=ot[Tt]]).indexOf("px")?parseFloat(b):et(this.t,S,parseFloat(b),b.replace(w,""))||0)!==n[S]?Tt<2?-n.ieOffsetX:-n.ieOffsetY:Tt<2?h-n.ieOffsetX:p-n.ieOffsetY,c[S]=(n[S]=Math.round(i-P*(0===Tt||2===Tt?1:O)))+"px"}}},Zt=U.set3DTransformRatio=U.setTransformRatio=function(t){var e,i,n,r,s,o,a,u,l,c,f,p,_,d,v,m,g,y,x,b,w=this.data,T=this.t.style,S=w.rotation,P=w.rotationX,O=w.rotationY,A=w.scaleX,k=w.scaleY,M=w.scaleZ,R=w.x,E=w.y,F=w.z,C=w.svg,I=w.perspective,D=w.force3D,N=w.skewY,j=w.skewX;if(N&&(j+=N,S+=N),!((1!==t&&0!==t||"auto"!==D||this.tween._totalTime!==this.tween._totalDuration&&this.tween._totalTime)&&D||F||I||O||P||1!==M)||At&&C||!Lt)S||j||C?(S*=L,b=j*L,1e5,i=Math.cos(S)*A,s=Math.sin(S)*A,n=Math.sin(S-b)*-k,o=Math.cos(S-b)*k,b&&"simple"===w.skewType&&(e=Math.tan(b-N*L),n*=e=Math.sqrt(1+e*e),o*=e,N&&(e=Math.tan(N*L),i*=e=Math.sqrt(1+e*e),s*=e)),C&&(R+=w.xOrigin-(w.xOrigin*i+w.yOrigin*n)+w.xOffset,E+=w.yOrigin-(w.xOrigin*s+w.yOrigin*o)+w.yOffset,At&&(w.xPercent||w.yPercent)&&(v=this.t.getBBox(),R+=.01*w.xPercent*v.width,E+=.01*w.yPercent*v.height),R<(v=1e-6)&&R>-v&&(R=0),E<v&&E>-v&&(E=0)),x=(1e5*i|0)/1e5+","+(1e5*s|0)/1e5+","+(1e5*n|0)/1e5+","+(1e5*o|0)/1e5+","+R+","+E+")",C&&At?this.t.setAttribute("transform","matrix("+x):T[Ct]=(w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) matrix(":"matrix(")+x):T[Ct]=(w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) matrix(":"matrix(")+A+",0,0,"+k+","+R+","+E+")";else{if(h&&(A<(v=1e-4)&&A>-v&&(A=M=2e-5),k<v&&k>-v&&(k=M=2e-5),!I||w.z||w.rotationX||w.rotationY||(I=0)),S||j)S*=L,m=i=Math.cos(S),g=s=Math.sin(S),j&&(S-=j*L,m=Math.cos(S),g=Math.sin(S),"simple"===w.skewType&&(e=Math.tan((j-N)*L),m*=e=Math.sqrt(1+e*e),g*=e,w.skewY&&(e=Math.tan(N*L),i*=e=Math.sqrt(1+e*e),s*=e))),n=-g,o=m;else{if(!(O||P||1!==M||I||C))return void(T[Ct]=(w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) translate3d(":"translate3d(")+R+"px,"+E+"px,"+F+"px)"+(1!==A||1!==k?" scale("+A+","+k+")":""));i=o=1,n=s=0}c=1,r=a=u=l=f=p=0,_=I?-1/I:0,d=w.zOrigin,v=1e-6,",","0",(S=O*L)&&(m=Math.cos(S),u=-(g=Math.sin(S)),f=_*-g,r=i*g,a=s*g,c=m,_*=m,i*=m,s*=m),(S=P*L)&&(e=n*(m=Math.cos(S))+r*(g=Math.sin(S)),y=o*m+a*g,l=c*g,p=_*g,r=n*-g+r*m,a=o*-g+a*m,c*=m,_*=m,n=e,o=y),1!==M&&(r*=M,a*=M,c*=M,_*=M),1!==k&&(n*=k,o*=k,l*=k,p*=k),1!==A&&(i*=A,s*=A,u*=A,f*=A),(d||C)&&(d&&(R+=r*-d,E+=a*-d,F+=c*-d+d),C&&(R+=w.xOrigin-(w.xOrigin*i+w.yOrigin*n)+w.xOffset,E+=w.yOrigin-(w.xOrigin*s+w.yOrigin*o)+w.yOffset),R<v&&R>-v&&(R="0"),E<v&&E>-v&&(E="0"),F<v&&F>-v&&(F=0)),x=w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) matrix3d(":"matrix3d(",x+=(i<v&&i>-v?"0":i)+","+(s<v&&s>-v?"0":s)+","+(u<v&&u>-v?"0":u),x+=","+(f<v&&f>-v?"0":f)+","+(n<v&&n>-v?"0":n)+","+(o<v&&o>-v?"0":o),P||O||1!==M?(x+=","+(l<v&&l>-v?"0":l)+","+(p<v&&p>-v?"0":p)+","+(r<v&&r>-v?"0":r),x+=","+(a<v&&a>-v?"0":a)+","+(c<v&&c>-v?"0":c)+","+(_<v&&_>-v?"0":_)+","):x+=",0,0,0,0,1,0,",x+=R+","+E+","+F+","+(I?1+-F/I:1)+")",T[Ct]=x}};(u=Nt.prototype).x=u.y=u.z=u.skewX=u.skewY=u.rotation=u.rotationX=u.rotationY=u.zOrigin=u.xPercent=u.yPercent=u.xOffset=u.yOffset=0,u.scaleX=u.scaleY=u.scaleZ=1,Pt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,n,r,o,a,u){if(r._lastParsedTransform===u)return o;r._lastParsedTransform=u;var l=u.scale&&"function"==typeof u.scale?u.scale:0;l&&(u.scale=l(v,t));var c,f,h,p,_,m,g,y,x,b=t._gsTransform,w=t.style,T=Ft.length,S=u,P={},O=qt(t,i,!0,S.parseTransform),A=S.transform&&("function"==typeof S.transform?S.transform(v,d):S.transform);if(O.skewType=S.skewType||O.skewType||s.defaultSkewType,r._transform=O,"rotationZ"in S&&(S.rotation=S.rotationZ),A&&"string"==typeof A&&Ct)(f=V.style)[Ct]=A,f.display="block",f.position="absolute",-1!==A.indexOf("%")&&(f.width=tt(t,"width"),f.height=tt(t,"height")),B.body.appendChild(V),c=qt(V,null,!1),"simple"===O.skewType&&(c.scaleY*=Math.cos(c.skewX*L)),O.svg&&(m=O.xOrigin,g=O.yOrigin,c.x-=O.xOffset,c.y-=O.yOffset,(S.transformOrigin||S.svgOrigin)&&(A={},Vt(t,ut(S.transformOrigin),A,S.svgOrigin,S.smoothOrigin,!0),m=A.xOrigin,g=A.yOrigin,c.x-=A.xOffset-O.xOffset,c.y-=A.yOffset-O.yOffset),(m||g)&&(y=Gt(V,!0),c.x-=m-(m*y[0]+g*y[2]),c.y-=g-(m*y[1]+g*y[3]))),B.body.removeChild(V),c.perspective||(c.perspective=O.perspective),null!=S.xPercent&&(c.xPercent=ct(S.xPercent,O.xPercent)),null!=S.yPercent&&(c.yPercent=ct(S.yPercent,O.yPercent));else if("object"==typeof S){if(c={scaleX:ct(null!=S.scaleX?S.scaleX:S.scale,O.scaleX),scaleY:ct(null!=S.scaleY?S.scaleY:S.scale,O.scaleY),scaleZ:ct(S.scaleZ,O.scaleZ),x:ct(S.x,O.x),y:ct(S.y,O.y),z:ct(S.z,O.z),xPercent:ct(S.xPercent,O.xPercent),yPercent:ct(S.yPercent,O.yPercent),perspective:ct(S.transformPerspective,O.perspective)},null!=(_=S.directionalRotation))if("object"==typeof _)for(f in _)S[f]=_[f];else S.rotation=_;"string"==typeof S.x&&-1!==S.x.indexOf("%")&&(c.x=0,c.xPercent=ct(S.x,O.xPercent)),"string"==typeof S.y&&-1!==S.y.indexOf("%")&&(c.y=0,c.yPercent=ct(S.y,O.yPercent)),c.rotation=ft("rotation"in S?S.rotation:"shortRotation"in S?S.shortRotation+"_short":O.rotation,O.rotation,"rotation",P),Lt&&(c.rotationX=ft("rotationX"in S?S.rotationX:"shortRotationX"in S?S.shortRotationX+"_short":O.rotationX||0,O.rotationX,"rotationX",P),c.rotationY=ft("rotationY"in S?S.rotationY:"shortRotationY"in S?S.shortRotationY+"_short":O.rotationY||0,O.rotationY,"rotationY",P)),c.skewX=ft(S.skewX,O.skewX),c.skewY=ft(S.skewY,O.skewY)}for(Lt&&null!=S.force3D&&(O.force3D=S.force3D,p=!0),(h=O.force3D||O.z||O.rotationX||O.rotationY||c.z||c.rotationX||c.rotationY||c.perspective)||null==S.scale||(c.scaleZ=1);--T>-1;)((A=c[x=Ft[T]]-O[x])>1e-6||A<-1e-6||null!=S[x]||null!=j[x])&&(p=!0,o=new xt(O,x,O[x],A,o),x in P&&(o.e=P[x]),o.xs0=0,o.plugin=a,r._overwriteProps.push(o.n));return A="function"==typeof S.transformOrigin?S.transformOrigin(v,d):S.transformOrigin,O.svg&&(A||S.svgOrigin)&&(m=O.xOffset,g=O.yOffset,Vt(t,ut(A),c,S.svgOrigin,S.smoothOrigin),o=bt(O,"xOrigin",(b?O:c).xOrigin,c.xOrigin,o,"transformOrigin"),o=bt(O,"yOrigin",(b?O:c).yOrigin,c.yOrigin,o,"transformOrigin"),m===O.xOffset&&g===O.yOffset||(o=bt(O,"xOffset",b?m:O.xOffset,O.xOffset,o,"transformOrigin"),o=bt(O,"yOffset",b?g:O.yOffset,O.yOffset,o,"transformOrigin")),A="0px 0px"),(A||Lt&&h&&O.zOrigin)&&(Ct?(p=!0,x=Dt,A||(A=(A=(tt(t,x,i,!1,"50% 50%")+"").split(" "))[0]+" "+A[1]+" "+O.zOrigin+"px"),A+="",(o=new xt(w,x,0,0,o,-1,"transformOrigin")).b=w[x],o.plugin=a,Lt?(f=O.zOrigin,A=A.split(" "),O.zOrigin=(A.length>2?parseFloat(A[2]):f)||0,o.xs0=o.e=A[0]+" "+(A[1]||"50%")+" 0px",(o=new xt(O,"zOrigin",0,0,o,-1,o.n)).b=f,o.xs0=o.e=O.zOrigin):o.xs0=o.e=A):ut(A+"",O)),p&&(r._transformType=O.svg&&At||!h&&3!==this._transformType?2:3),l&&(u.scale=l),o},allowFunc:!0,prefix:!0}),Pt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),Pt("clipPath",{defaultValue:"inset(0%)",prefix:!0,multi:!0,formatter:mt("inset(0% 0% 0% 0%)",!1,!0)}),Pt("borderRadius",{defaultValue:"0px",parser:function(t,n,r,s,o,a){n=this.format(n);var u,l,c,f,h,p,_,d,v,m,g,y,x,b,w,T,S=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],P=t.style;for(v=parseFloat(t.offsetWidth),m=parseFloat(t.offsetHeight),u=n.split(" "),l=0;l<S.length;l++)this.p.indexOf("border")&&(S[l]=K(S[l])),-1!==(h=f=tt(t,S[l],i,!1,"0px")).indexOf(" ")&&(f=h.split(" "),h=f[0],f=f[1]),p=c=u[l],_=parseFloat(h),y=h.substr((_+"").length),(x="="===p.charAt(1))?(d=parseInt(p.charAt(0)+"1",10),p=p.substr(2),d*=parseFloat(p),g=p.substr((d+"").length-(d<0?1:0))||""):(d=parseFloat(p),g=p.substr((d+"").length)),""===g&&(g=e[r]||y),g!==y&&(b=et(t,"borderLeft",_,y),w=et(t,"borderTop",_,y),"%"===g?(h=b/v*100+"%",f=w/m*100+"%"):"em"===g?(h=b/(T=et(t,"borderLeft",1,"em"))+"em",f=w/T+"em"):(h=b+"px",f=w+"px"),x&&(p=parseFloat(h)+d+g,c=parseFloat(f)+d+g)),o=wt(P,S[l],h+" "+f,p+" "+c,!1,"0px",o);return o},prefix:!0,formatter:mt("0px 0px 0px 0px",!1,!0)}),Pt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,n,r,s,o){return wt(t.style,n,this.format(tt(t,n,i,!1,"0px 0px")),this.format(e),!1,"0px",s)},prefix:!0,formatter:mt("0px 0px",!1,!0)}),Pt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,n,r,s,o){var a,u,l,c,f,h,p="background-position",d=i||J(t),v=this.format((d?_?d.getPropertyValue(p+"-x")+" "+d.getPropertyValue(p+"-y"):d.getPropertyValue(p):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),m=this.format(e);if(-1!==v.indexOf("%")!=(-1!==m.indexOf("%"))&&m.split(",").length<2&&(h=tt(t,"backgroundImage").replace(M,""))&&"none"!==h){for(a=v.split(" "),u=m.split(" "),Y.setAttribute("src",h),l=2;--l>-1;)(c=-1!==(v=a[l]).indexOf("%"))!==(-1!==u[l].indexOf("%"))&&(f=0===l?t.offsetWidth-Y.width:t.offsetHeight-Y.height,a[l]=c?parseFloat(v)/100*f+"px":parseFloat(v)/f*100+"%");v=a.join(" ")}return this.parseComplex(t.style,v,m,s,o)},formatter:ut}),Pt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return"co"===(t+="").substr(0,2)?t:ut(-1===t.indexOf(" ")?t+" "+t:t)}}),Pt("perspective",{defaultValue:"0px",prefix:!0}),Pt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),Pt("transformStyle",{prefix:!0}),Pt("backfaceVisibility",{prefix:!0}),Pt("userSelect",{prefix:!0}),Pt("margin",{parser:gt("marginTop,marginRight,marginBottom,marginLeft")}),Pt("padding",{parser:gt("paddingTop,paddingRight,paddingBottom,paddingLeft")}),Pt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,n,r,s,o){var a,u,l;return _<9?(u=t.currentStyle,l=_<8?" ":",",a="rect("+u.clipTop+l+u.clipRight+l+u.clipBottom+l+u.clipLeft+")",e=this.format(e).split(",").join(l)):(a=this.format(tt(t,this.p,i,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,a,e,s,o)}}),Pt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),Pt("autoRound,strictUnits",{parser:function(t,e,i,n,r){return r}}),Pt("border",{defaultValue:"0px solid #000",parser:function(t,e,n,r,s,o){var a=tt(t,"borderTopWidth",i,!1,"0px"),u=this.format(e).split(" "),l=u[0].replace(w,"");return"px"!==l&&(a=parseFloat(a)/et(t,"borderTopWidth",1,l)+l),this.parseComplex(t.style,this.format(a+" "+tt(t,"borderTopStyle",i,!1,"solid")+" "+tt(t,"borderTopColor",i,!1,"#000")),u.join(" "),s,o)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(vt)||["#000"])[0]}}),Pt("borderWidth",{parser:gt("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),Pt("float,cssFloat,styleFloat",{parser:function(t,e,i,n,r,s){var o=t.style,a="cssFloat"in o?"cssFloat":"styleFloat";return new xt(o,a,0,0,r,-1,i,!1,0,o[a],e)}});var $t=function(t){var e,i=this.t,n=i.filter||tt(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(-1===n.indexOf("atrix(")&&-1===n.indexOf("radient(")&&-1===n.indexOf("oader(")?(i.removeAttribute("filter"),e=!tt(this.data,"filter")):(i.filter=n.replace(P,""),e=!0)),e||(this.xn1&&(i.filter=n=n||"alpha(opacity="+r+")"),-1===n.indexOf("pacity")?0===r&&this.xn1||(i.filter=n+" alpha(opacity="+r+")"):i.filter=n.replace(T,"opacity="+r))};Pt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,n,r,s,o){var a=parseFloat(tt(t,"opacity",i,!1,"1")),u=t.style,l="autoAlpha"===n;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),l&&1===a&&"hidden"===tt(t,"visibility",i)&&0!==e&&(a=0),G?s=new xt(u,"opacity",a,e-a,s):((s=new xt(u,"opacity",100*a,100*(e-a),s)).xn1=l?1:0,u.zoom=1,s.type=2,s.b="alpha(opacity="+s.s+")",s.e="alpha(opacity="+(s.s+s.c)+")",s.data=t,s.plugin=o,s.setRatio=$t),l&&((s=new xt(u,"visibility",0,0,s,-1,null,!1,0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit")).xs0="inherit",r._overwriteProps.push(s.n),r._overwriteProps.push(n)),s}});var Kt=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(A,"-$1").toLowerCase())):t.removeAttribute(e))},Qt=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Kt(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};Pt("className",{parser:function(e,n,r,s,o,a,u){var l,c,f,h,p,_=e.getAttribute("class")||"",d=e.style.cssText;if((o=s._classNamePT=new xt(e,r,0,0,o,2)).setRatio=Qt,o.pr=-11,t=!0,o.b=_,c=nt(e,i),f=e._gsClassPT){for(h={},p=f.data;p;)h[p.p]=1,p=p._next;f.setRatio(1)}return e._gsClassPT=o,o.e="="!==n.charAt(1)?n:_.replace(new RegExp("(?:\\s|^)"+n.substr(2)+"(?![\\w-])"),"")+("+"===n.charAt(0)?" "+n.substr(2):""),e.setAttribute("class",o.e),l=rt(e,c,nt(e),u,h),e.setAttribute("class",_),o.data=l.firstMPT,e.style.cssText!==d&&(e.style.cssText=d),o=o.xfirst=s.parse(e,l.difs,o,a)}});var Jt=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,n,r,s,o=this.t.style,u=a.transform.parse;if("all"===this.e)o.cssText="",r=!0;else for(n=(e=this.e.split(" ").join("").split(",")).length;--n>-1;)i=e[n],a[i]&&(a[i].parse===u?r=!0:i="transformOrigin"===i?Dt:a[i].p),Kt(o,i);r&&(Kt(o,Ct),(s=this.t._gsTransform)&&(s.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(Pt("clearProps",{parser:function(e,i,n,r,s){return(s=new xt(e,n,0,0,s,2)).setRatio=Jt,s.e=i,s.pr=-10,s.data=r._tween,t=!0,s}}),u="bezier,throwProps,physicsProps,physics2D".split(","),Tt=u.length;Tt--;)Ot(u[Tt]);(u=s.prototype)._firstPT=u._lastParsedTransform=u._transform=null,u._onInitTween=function(r,o,u,h){if(!r.nodeType)return!1;this._target=d=r,this._tween=u,this._vars=o,v=h,l=o.autoRound,t=!1,e=o.suffixMap||s.suffixMap,i=J(r),n=this._overwriteProps;var _,m,g,y,x,b,w,T,P,O=r.style;if(c&&""===O.zIndex&&("auto"!==(_=tt(r,"zIndex",i))&&""!==_||this._addLazySet(O,"zIndex",0)),"string"==typeof o&&(y=O.cssText,_=nt(r,i),O.cssText=y+";"+o,_=rt(r,_,nt(r)).difs,!G&&S.test(o)&&(_.opacity=parseFloat(RegExp.$1)),o=_,O.cssText=y),o.className?this._firstPT=m=a.className.parse(r,o.className,"className",this,null,null,o):this._firstPT=m=this.parse(r,o,null),this._transformType){for(P=3===this._transformType,Ct?f&&(c=!0,""===O.zIndex&&("auto"!==(w=tt(r,"zIndex",i))&&""!==w||this._addLazySet(O,"zIndex",0)),p&&this._addLazySet(O,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(P?"visible":"hidden"))):O.zoom=1,g=m;g&&g._next;)g=g._next;T=new xt(r,"transform",0,0,null,2),this._linkCSSP(T,null,g),T.setRatio=Ct?Zt:Ht,T.data=this._transform||qt(r,i,!0),T.tween=u,T.pr=-1,n.pop()}if(t){for(;m;){for(b=m._next,g=y;g&&g.pr>m.pr;)g=g._next;(m._prev=g?g._prev:x)?m._prev._next=m:y=m,(m._next=g)?g._prev=m:x=m,m=b}this._firstPT=y}return!0},u.parse=function(t,n,r,s){var o,u,c,f,h,p,_,m,g,y,x=t.style;for(o in n){if(p=n[o],u=a[o],"function"!=typeof p||u&&u.allowFunc||(p=p(v,d)),u)r=u.parse(t,p,o,this,r,s,n);else{if("--"===o.substr(0,2)){this._tween._propLookup[o]=this._addTween.call(this._tween,t.style,"setProperty",J(t).getPropertyValue(o)+"",p+"",o,!1,o);continue}h=tt(t,o,i)+"",g="string"==typeof p,"color"===o||"fill"===o||"stroke"===o||-1!==o.indexOf("Color")||g&&O.test(p)?(g||(p=((p=_t(p)).length>3?"rgba(":"rgb(")+p.join(",")+")"),r=wt(x,o,h,p,!0,"transparent",r,0,s)):g&&D.test(p)?r=wt(x,o,h,p,!0,null,r,0,s):(_=(c=parseFloat(h))||0===c?h.substr((c+"").length):"",""!==h&&"auto"!==h||("width"===o||"height"===o?(c=at(t,o,i),_="px"):"left"===o||"top"===o?(c=it(t,o,i),_="px"):(c="opacity"!==o?0:1,_="")),(y=g&&"="===p.charAt(1))?(f=parseInt(p.charAt(0)+"1",10),p=p.substr(2),f*=parseFloat(p),m=p.replace(w,"")):(f=parseFloat(p),m=g?p.replace(w,""):""),""===m&&(m=o in e?e[o]:_),p=f||0===f?(y?f+c:f)+m:n[o],_!==m&&(""===m&&"lineHeight"!==o||(f||0===f)&&c&&(c=et(t,o,c,_),"%"===m?(c/=et(t,o,100,"%")/100,!0!==n.strictUnits&&(h=c+"%")):"em"===m||"rem"===m||"vw"===m||"vh"===m?c/=et(t,o,1,m):"px"!==m&&(f=et(t,o,f,m),m="px"),y&&(f||0===f)&&(p=f+c+m))),y&&(f+=c),!c&&0!==c||!f&&0!==f?void 0!==x[o]&&(p||p+""!="NaN"&&null!=p)?(r=new xt(x,o,f||c||0,0,r,-1,o,!1,0,h,p)).xs0="none"!==p||"display"!==o&&-1===o.indexOf("Style")?p:h:H("invalid "+o+" tween value: "+n[o]):(r=new xt(x,o,c,f-c,r,0,o,!1!==l&&("px"===m||"zIndex"===o),0,h,p)).xs0=m)}s&&r&&!r.plugin&&(r.plugin=s)}return r},u.setRatio=function(t){var e,i,n,r=this._firstPT;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||-1e-6===this._tween._rawPrevTime)for(;r;){if(e=r.c*t+r.s,r.r?e=r.r(e):e<1e-6&&e>-1e-6&&(e=0),r.type)if(1===r.type)if(2===(n=r.l))r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}else-1===r.type?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&-1!==r.type)if(e=r.r(r.s+r.c),r.type){if(1===r.type){for(n=r.l,i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},u._enableTransforms=function(t){this._transform=this._transform||qt(this._target,i,!0),this._transformType=this._transform.svg&&At||!t&&3!==this._transformType?2:3};var te=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};u._addLazySet=function(t,e,i){var n=this._firstPT=new xt(t,e,0,0,this._firstPT,2);n.e=i,n.setRatio=te,n.data=this},u._linkCSSP=function(t,e,i,n){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,n=!0),i?i._next=t:n||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},u._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&(e.r=t[e.p]),e=e._next},u._kill=function(t){var e,i,n,s=t;if(t.autoAlpha||t.alpha){for(i in s={},t)s[i]=t[i];s.opacity=1,s.autoAlpha&&(s.visibility=1)}for(t.className&&(e=this._classNamePT)&&((n=e.xfirst)&&n._prev?this._linkCSSP(n._prev,e._next,n._prev._prev):n===this._firstPT&&(this._firstPT=e._next),e._next&&this._linkCSSP(e._next,e._next._next,n._prev),this._classNamePT=null),e=this._firstPT;e;)e.plugin&&e.plugin!==i&&e.plugin._kill&&(e.plugin._kill(t),i=e.plugin),e=e._next;return r.d.prototype._kill.call(this,s)};var ee=function(t,e,i){var n,r,s,o;if(t.slice)for(r=t.length;--r>-1;)ee(t[r],e,i);else for(r=(n=t.childNodes).length;--r>-1;)o=(s=n[r]).type,s.style&&(e.push(nt(s)),i&&i.push(s)),1!==o&&9!==o&&11!==o||!s.childNodes.length||ee(s,e,i)};return s.cascadeTo=function(t,e,i){var n,s,o,a,u=r.f.to(t,e,i),l=[u],c=[],f=[],h=[],p=r.f._internals.reservedProps;for(t=u._targets||u.target,ee(t,c,h),u.render(e,!0,!0),ee(t,f),u.render(0,!0,!0),u._enabled(!0),n=h.length;--n>-1;)if((s=rt(h[n],c[n],f[n])).firstMPT){for(o in s=s.difs,i)p[o]&&(s[o]=i[o]);for(o in a={},s)a[o]=c[n][o];l.push(r.f.fromTo(h[n],e,a,s))}return l},r.d.activate([s]),s}),!0);var o=r.g.CSSPlugin,a=r.e._gsDefine.plugin({propName:"attr",API:2,version:"0.6.1",init:function(t,e,i,n){var r,s;if("function"!=typeof t.setAttribute)return!1;for(r in e)"function"==typeof(s=e[r])&&(s=s(n,t)),this._addTween(t,"setAttribute",t.getAttribute(r)+"",s+"",r,!1,r),this._overwriteProps.push(r);return!0}}),u=r.e._gsDefine.plugin({propName:"roundProps",version:"1.7.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),l=function(t){var e=t<1?Math.pow(10,(t+"").length-2):1;return function(i){return(Math.round(i/t)*t*e|0)/e}},c=function(t,e){for(;t;)t.f||t.blob||(t.m=e||Math.round),t=t._next},f=u.prototype;
/*!
 * VERSION: 0.6.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */f._onInitAllProps=function(){var t,e,i,n,r=this._tween,s=r.vars.roundProps,o={},a=r._propLookup.roundProps;if("object"!=typeof s||s.push)for("string"==typeof s&&(s=s.split(",")),i=s.length;--i>-1;)o[s[i]]=Math.round;else for(n in s)o[n]=l(s[n]);for(n in o)for(t=r._firstPT;t;)e=t._next,t.pg?t.t._mod(o):t.n===n&&(2===t.f&&t.t?c(t.t._firstPT,o[n]):(this._add(t.t,n,t.s,t.c,o[n]),e&&(e._prev=t._prev),t._prev?t._prev._next=e:r._firstPT===t&&(r._firstPT=e),t._next=t._prev=null,r._propLookup[n]=a)),t=e;return!1},f._add=function(t,e,i,n,r){this._addTween(t,e,i,i+n,e,r||Math.round),this._overwriteProps.push(e)};
/*!
 * VERSION: 0.3.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
var h=r.e._gsDefine.plugin({propName:"directionalRotation",version:"0.3.1",API:2,init:function(t,e,i,n){"object"!=typeof e&&(e={rotation:e}),this.finals={};var r,s,o,a,u,l,c=!0===e.useRadians?2*Math.PI:360;for(r in e)"useRadians"!==r&&("function"==typeof(a=e[r])&&(a=a(n,t)),s=(l=(a+"").split("_"))[0],o=parseFloat("function"!=typeof t[r]?t[r]:t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]()),u=(a=this.finals[r]="string"==typeof s&&"="===s.charAt(1)?o+parseInt(s.charAt(0)+"1",10)*Number(s.substr(2)):Number(s)||0)-o,l.length&&(-1!==(s=l.join("_")).indexOf("short")&&(u%=c)!==u%(c/2)&&(u=u<0?u+c:u-c),-1!==s.indexOf("_cw")&&u<0?u=(u+9999999999*c)%c-(u/c|0)*c:-1!==s.indexOf("ccw")&&u>0&&(u=(u-9999999999*c)%c-(u/c|0)*c)),(u>1e-6||u<-1e-6)&&(this._addTween(t,r,o,o+u,r),this._overwriteProps.push(r)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}});h._autoCSS=!0,
/*!
 * VERSION: 2.1.3
 * DATE: 2019-05-17
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
r.e._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],(function(){var t=function(t){r.c.call(this,t);var e,i,n=this.vars;for(i in this._labels={},this.autoRemoveChildren=!!n.autoRemoveChildren,this.smoothChildTiming=!!n.smoothChildTiming,this._sortChildren=!0,this._onUpdate=n.onUpdate,n)e=n[i],s(e)&&-1!==e.join("").indexOf("{self}")&&(n[i]=this._swapSelfInParams(e));s(n.tweens)&&this.add(n.tweens,0,n.align,n.stagger)},e=r.f._internals,i=t._internals={},n=e.isSelector,s=e.isArray,o=e.lazyTweens,a=e.lazyRender,u=r.e._gsDefine.globals,l=function(t){var e,i={};for(e in t)i[e]=t[e];return i},c=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r(i,e[i],e):r[i%r.length];delete t.cycle},f=i.pauseCallback=function(){},h=function(t,e,i,n){var r="immediateRender";return r in e||(e[r]=!(i&&!1===i[r]||n)),e},p=function(t){if("function"==typeof t)return t;var e="object"==typeof t?t:{each:t},i=e.ease,n=e.from||0,r=e.base||0,s={},o=isNaN(n),a=e.axis,u={center:.5,end:1}[n]||0;return function(t,l,c){var f,h,p,_,d,v,m,g,y,x=(c||e).length,b=s[x];if(!b){if(!(y="auto"===e.grid?0:(e.grid||[1/0])[0])){for(m=-1/0;m<(m=c[y++].getBoundingClientRect().left)&&y<x;);y--}for(b=s[x]=[],f=o?Math.min(y,x)*u-.5:n%y,h=o?x*u/y-.5:n/y|0,m=0,g=1/0,v=0;v<x;v++)p=v%y-f,_=h-(v/y|0),b[v]=d=a?Math.abs("y"===a?_:p):Math.sqrt(p*p+_*_),d>m&&(m=d),d<g&&(g=d);b.max=m-g,b.min=g,b.v=x=e.amount||e.each*(y>x?x-1:a?"y"===a?x/y:y:Math.max(y,x/y))||0,b.b=x<0?r-x:r}return x=(b[t]-b.min)/b.max,b.b+(i?i.getRatio(x):x)*b.v}},_=t.prototype=new r.c;return t.version="2.1.3",t.distribute=p,_.constructor=t,_.kill()._gc=_._forcingPlayhead=_._hasPause=!1,_.to=function(t,e,i,n){var s=i.repeat&&u.TweenMax||r.f;return e?this.add(new s(t,e,i),n):this.set(t,i,n)},_.from=function(t,e,i,n){return this.add((i.repeat&&u.TweenMax||r.f).from(t,e,h(0,i)),n)},_.fromTo=function(t,e,i,n,s){var o=n.repeat&&u.TweenMax||r.f;return n=h(0,n,i),e?this.add(o.fromTo(t,e,i,n),s):this.set(t,n,s)},_.staggerTo=function(e,i,s,o,a,u,f,h){var _,d,v=new t({onComplete:u,onCompleteParams:f,callbackScope:h,smoothChildTiming:this.smoothChildTiming}),m=p(s.stagger||o),g=s.startAt,y=s.cycle;for("string"==typeof e&&(e=r.f.selector(e)||e),n(e=e||[])&&(e=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i}(e)),d=0;d<e.length;d++)_=l(s),g&&(_.startAt=l(g),g.cycle&&c(_.startAt,e,d)),y&&(c(_,e,d),null!=_.duration&&(i=_.duration,delete _.duration)),v.to(e[d],i,_,m(d,e[d],e));return this.add(v,a)},_.staggerFrom=function(t,e,i,n,r,s,o,a){return i.runBackwards=!0,this.staggerTo(t,e,h(0,i),n,r,s,o,a)},_.staggerFromTo=function(t,e,i,n,r,s,o,a,u){return n.startAt=i,this.staggerTo(t,e,h(0,n,i),r,s,o,a,u)},_.call=function(t,e,i,n){return this.add(r.f.delayedCall(0,t,e,i),n)},_.set=function(t,e,i){return this.add(new r.f(t,0,h(0,e,null,!0)),i)},t.exportRoot=function(e,i){null==(e=e||{}).smoothChildTiming&&(e.smoothChildTiming=!0);var n,s,o,a,u=new t(e),l=u._timeline;for(null==i&&(i=!0),l._remove(u,!0),u._startTime=0,u._rawPrevTime=u._time=u._totalTime=l._time,o=l._first;o;)a=o._next,i&&o instanceof r.f&&o.target===o.vars.onComplete||((s=o._startTime-o._delay)<0&&(n=1),u.add(o,s)),o=a;return l.add(u,0),n&&u.totalDuration(),u},_.add=function(e,i,n,o){var a,u,l,c,f,h;if("number"!=typeof i&&(i=this._parseTimeOrLabel(i,0,!0,e)),!(e instanceof r.a)){if(e instanceof Array||e&&e.push&&s(e)){for(n=n||"normal",o=o||0,a=i,u=e.length,l=0;l<u;l++)s(c=e[l])&&(c=new t({tweens:c})),this.add(c,a),"string"!=typeof c&&"function"!=typeof c&&("sequence"===n?a=c._startTime+c.totalDuration()/c._timeScale:"start"===n&&(c._startTime-=c.delay())),a+=o;return this._uncache(!0)}if("string"==typeof e)return this.addLabel(e,i);if("function"!=typeof e)throw"Cannot add "+e+" into the timeline; it is not a tween, timeline, function, or string.";e=r.f.delayedCall(0,e)}if(r.c.prototype.add.call(this,e,i),(e._time||!e._duration&&e._initted)&&(a=(this.rawTime()-e._startTime)*e._timeScale,(!e._duration||Math.abs(Math.max(0,Math.min(e.totalDuration(),a)))-e._totalTime>1e-5)&&e.render(a,!1,!1)),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(h=(f=this).rawTime()>e._startTime;f._timeline;)h&&f._timeline.smoothChildTiming?f.totalTime(f._totalTime,!0):f._gc&&f._enabled(!0,!1),f=f._timeline;return this},_.remove=function(t){if(t instanceof r.a){this._remove(t,!1);var e=t._timeline=t.vars.useFrames?r.a._rootFramesTimeline:r.a._rootTimeline;return t._startTime=(t._paused?t._pauseTime:e._time)-(t._reversed?t.totalDuration()-t._totalTime:t._totalTime)/t._timeScale,this}if(t instanceof Array||t&&t.push&&s(t)){for(var i=t.length;--i>-1;)this.remove(t[i]);return this}return"string"==typeof t?this.removeLabel(t):this.kill(null,t)},_._remove=function(t,e){return r.c.prototype._remove.call(this,t,e),this._last?this._time>this.duration()&&(this._time=this._duration,this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},_.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},_.insert=_.insertMultiple=function(t,e,i,n){return this.add(t,e||0,i,n)},_.appendMultiple=function(t,e,i,n){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,n)},_.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},_.addPause=function(t,e,i,n){var s=r.f.delayedCall(0,f,i,n||this);return s.vars.onComplete=s.vars.onReverseComplete=e,s.data="isPause",this._hasPause=!0,this.add(s,t)},_.removeLabel=function(t){return delete this._labels[t],this},_.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},_._parseTimeOrLabel=function(t,e,i,n){var o,a;if(n instanceof r.a&&n.timeline===this)this.remove(n);else if(n&&(n instanceof Array||n.push&&s(n)))for(a=n.length;--a>-1;)n[a]instanceof r.a&&n[a].timeline===this&&this.remove(n[a]);if(o="number"!=typeof t||e?this.duration()>99999999999?this.recent().endTime(!1):this._duration:0,"string"==typeof e)return this._parseTimeOrLabel(e,i&&"number"==typeof t&&null==this._labels[e]?t-o:0,i);if(e=e||0,"string"!=typeof t||!isNaN(t)&&null==this._labels[t])null==t&&(t=o);else{if(-1===(a=t.indexOf("=")))return null==this._labels[t]?i?this._labels[t]=o+e:e:this._labels[t]+e;e=parseInt(t.charAt(a-1)+"1",10)*Number(t.substr(a+1)),t=a>1?this._parseTimeOrLabel(t.substr(0,a-1),0,i):o}return Number(t)+e},_.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),!1!==e)},_.stop=function(){return this.paused(!0)},_.gotoAndPlay=function(t,e){return this.play(t,e)},_.gotoAndStop=function(t,e){return this.pause(t,e)},_.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,s,u,l,c,f,h,p=this._time,_=this._dirty?this.totalDuration():this._totalDuration,d=this._startTime,v=this._timeScale,m=this._paused;if(p!==this._time&&(t+=this._time-p),this._hasPause&&!this._forcingPlayhead&&!e){if(t>p)for(n=this._first;n&&n._startTime<=t&&!c;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(c=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!c;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(c=n),n=n._prev;c&&(this._time=this._totalTime=t=c._startTime,h=this._startTime+(this._reversed?this._duration-t:t)/this._timeScale)}if(t>=_-1e-8&&t>=0)this._totalTime=this._time=_,this._reversed||this._hasPausedChild()||(r=!0,u="onComplete",l=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-8||this._rawPrevTime<0||1e-8===this._rawPrevTime)&&this._rawPrevTime!==t&&this._first&&(l=!0,this._rawPrevTime>1e-8&&(u="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-8,t=_+1e-4;else if(t<1e-8)if(this._totalTime=this._time=0,t>-1e-8&&(t=0),(0!==p||0===this._duration&&1e-8!==this._rawPrevTime&&(this._rawPrevTime>0||t<0&&this._rawPrevTime>=0))&&(u="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(l=r=!0,u="onReverseComplete"):this._rawPrevTime>=0&&this._first&&(l=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-8,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(l=!0)}else this._totalTime=this._time=this._rawPrevTime=t;if(this._time!==p&&this._first||i||l||c){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==p&&t>0&&(this._active=!0),0===p&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),(f=this._time)>=p)for(n=this._first;n&&(s=n._next,f===this._time&&(!this._paused||m));)(n._active||n._startTime<=f&&!n._paused&&!n._gc)&&(c===n&&(this.pause(),this._pauseTime=h),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=s;else for(n=this._last;n&&(s=n._prev,f===this._time&&(!this._paused||m));){if(n._active||n._startTime<=p&&!n._paused&&!n._gc){if(c===n){for(c=n._prev;c&&c.endTime()>this._time;)c.render(c._reversed?c.totalDuration()-(t-c._startTime)*c._timeScale:(t-c._startTime)*c._timeScale,e,i),c=c._prev;c=null,this.pause(),this._pauseTime=h}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=s}this._onUpdate&&(e||(o.length&&a(),this._callback("onUpdate"))),u&&(this._gc||d!==this._startTime&&v===this._timeScale||(0===this._time||_>=this.totalDuration())&&(r&&(o.length&&a(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[u]&&this._callback(u)))}},_._hasPausedChild=function(){for(var e=this._first;e;){if(e._paused||e instanceof t&&e._hasPausedChild())return!0;e=e._next}return!1},_.getChildren=function(t,e,i,n){n=n||-9999999999;for(var s=[],o=this._first,a=0;o;)o._startTime<n||(o instanceof r.f?!1!==e&&(s[a++]=o):(!1!==i&&(s[a++]=o),!1!==t&&(a=(s=s.concat(o.getChildren(!0,e,i))).length))),o=o._next;return s},_.getTweensOf=function(t,e){var i,n,s=this._gc,o=[],a=0;for(s&&this._enabled(!0,!0),n=(i=r.f.getTweensOf(t)).length;--n>-1;)(i[n].timeline===this||e&&this._contains(i[n]))&&(o[a++]=i[n]);return s&&this._enabled(!1,!0),o},_.recent=function(){return this._recent},_._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},_.shiftChildren=function(t,e,i){i=i||0;for(var n,r=this._first,s=this._labels;r;)r._startTime>=i&&(r._startTime+=t),r=r._next;if(e)for(n in s)s[n]>=i&&(s[n]+=t);return this._uncache(!0)},_._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),n=i.length,r=!1;--n>-1;)i[n]._kill(t,e)&&(r=!0);return r},_.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;--i>-1;)e[i]._enabled(!1,!1);return!1!==t&&(this._labels={}),this._uncache(!0)},_.invalidate=function(){for(var t=this._first;t;)t.invalidate(),t=t._next;return r.a.prototype.invalidate.call(this)},_._enabled=function(t,e){if(t===this._gc)for(var i=this._first;i;)i._enabled(t,!0),i=i._next;return r.c.prototype._enabled.call(this,t,e)},_.totalTime=function(t,e,i){this._forcingPlayhead=!0;var n=r.a.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,n},_.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},_.totalDuration=function(t){if(!arguments.length){if(this._dirty){for(var e,i,n=0,r=this,s=r._last,o=999999999999;s;)e=s._prev,s._dirty&&s.totalDuration(),s._startTime>o&&r._sortChildren&&!s._paused&&!r._calculatingDuration?(r._calculatingDuration=1,r.add(s,s._startTime-s._delay),r._calculatingDuration=0):o=s._startTime,s._startTime<0&&!s._paused&&(n-=s._startTime,r._timeline.smoothChildTiming&&(r._startTime+=s._startTime/r._timeScale,r._time-=s._startTime,r._totalTime-=s._startTime,r._rawPrevTime-=s._startTime),r.shiftChildren(-s._startTime,!1,-9999999999),o=0),(i=s._startTime+s._totalDuration/s._timeScale)>n&&(n=i),s=e;r._duration=r._totalDuration=n,r._dirty=!1}return this._totalDuration}return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this},_.paused=function(t){if(!1===t&&this._paused)for(var e=this._first;e;)e._startTime===this._time&&"isPause"===e.data&&(e._rawPrevTime=0),e=e._next;return r.a.prototype.paused.apply(this,arguments)},_.usesFrames=function(){for(var t=this._timeline;t._timeline;)t=t._timeline;return t===r.a._rootFramesTimeline},_.rawTime=function(t){return t&&(this._paused||this._repeat&&this.time()>0&&this.totalProgress()<1)?this._totalTime%(this._duration+this._repeatDelay):this._paused?this._totalTime:(this._timeline.rawTime(t)-this._startTime)*this._timeScale},t}),!0);var p=r.g.TimelineLite;
/*!
 * VERSION: 2.1.3
 * DATE: 2019-05-17
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */r.e._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],(function(){var t=function(t){p.call(this,t),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=!!this.vars.yoyo,this._dirty=!0},e=r.f._internals,i=e.lazyTweens,n=e.lazyRender,s=r.e._gsDefine.globals,o=new r.b(null,null,1,0),a=t.prototype=new p;return a.constructor=t,a.kill()._gc=!1,t.version="2.1.3",a.invalidate=function(){return this._yoyo=!!this.vars.yoyo,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),p.prototype.invalidate.call(this)},a.addCallback=function(t,e,i,n){return this.add(r.f.delayedCall(0,t,i,n),e)},a.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),n=i.length,r=this._parseTimeOrLabel(e);--n>-1;)i[n]._startTime===r&&i[n]._enabled(!1,!1);return this},a.removePause=function(t){return this.removeCallback(p._internals.pauseCallback,t)},a.tweenTo=function(t,e){e=e||{};var i,n,a,u={ease:o,useFrames:this.usesFrames(),immediateRender:!1,lazy:!1},l=e.repeat&&s.TweenMax||r.f;for(n in e)u[n]=e[n];return u.time=this._parseTimeOrLabel(t),i=Math.abs(Number(u.time)-this._time)/this._timeScale||.001,a=new l(this,i,u),u.onStart=function(){a.target.paused(!0),a.vars.time===a.target.time()||i!==a.duration()||a.isFromTo||a.duration(Math.abs(a.vars.time-a.target.time())/a.target._timeScale).render(a.time(),!0,!0),e.onStart&&e.onStart.apply(e.onStartScope||e.callbackScope||a,e.onStartParams||[])},a},a.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=!1!==i.immediateRender;var n=this.tweenTo(e,i);return n.isFromTo=1,n.duration(Math.abs(n.vars.time-t)/this._timeScale||.001)},a.render=function(t,e,r){this._gc&&this._enabled(!0,!1);var s,o,a,u,l,c,f,h,p,_=this._time,d=this._dirty?this.totalDuration():this._totalDuration,v=this._duration,m=this._totalTime,g=this._startTime,y=this._timeScale,x=this._rawPrevTime,b=this._paused,w=this._cycle;if(_!==this._time&&(t+=this._time-_),t>=d-1e-8&&t>=0)this._locked||(this._totalTime=d,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(o=!0,u="onComplete",l=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-8||x<0||1e-8===x)&&x!==t&&this._first&&(l=!0,x>1e-8&&(u="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-8,this._yoyo&&1&this._cycle?this._time=t=0:(this._time=v,t=v+1e-4);else if(t<1e-8)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,t>-1e-8&&(t=0),(0!==_||0===v&&1e-8!==x&&(x>0||t<0&&x>=0)&&!this._locked)&&(u="onReverseComplete",o=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(l=o=!0,u="onReverseComplete"):x>=0&&this._first&&(l=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=v||!e||t||this._rawPrevTime===t?t:1e-8,0===t&&o)for(s=this._first;s&&0===s._startTime;)s._duration||(o=!1),s=s._next;t=0,this._initted||(l=!0)}else 0===v&&x<0&&(l=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(c=v+this._repeatDelay,this._cycle=this._totalTime/c>>0,this._cycle&&this._cycle===this._totalTime/c&&m<=t&&this._cycle--,this._time=this._totalTime-this._cycle*c,this._yoyo&&1&this._cycle&&(this._time=v-this._time),this._time>v?(this._time=v,t=v+1e-4):this._time<0?this._time=t=0:t=this._time));if(this._hasPause&&!this._forcingPlayhead&&!e){if((t=this._time)>_||this._repeat&&w!==this._cycle)for(s=this._first;s&&s._startTime<=t&&!f;)s._duration||"isPause"!==s.data||s.ratio||0===s._startTime&&0===this._rawPrevTime||(f=s),s=s._next;else for(s=this._last;s&&s._startTime>=t&&!f;)s._duration||"isPause"===s.data&&s._rawPrevTime>0&&(f=s),s=s._prev;f&&(p=this._startTime+(this._reversed?this._duration-f._startTime:f._startTime)/this._timeScale,f._startTime<v&&(this._time=this._rawPrevTime=t=f._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay)))}if(this._cycle!==w&&!this._locked){var T=this._yoyo&&0!=(1&w),S=T===(this._yoyo&&0!=(1&this._cycle)),P=this._totalTime,O=this._cycle,A=this._rawPrevTime,k=this._time;if(this._totalTime=w*v,this._cycle<w?T=!T:this._totalTime+=v,this._time=_,this._rawPrevTime=0===v?x-1e-4:x,this._cycle=w,this._locked=!0,_=T?0:v,this.render(_,e,0===v),e||this._gc||this.vars.onRepeat&&(this._cycle=O,this._locked=!1,this._callback("onRepeat")),_!==this._time)return;if(S&&(this._cycle=w,this._locked=!0,_=T?v+1e-4:-1e-4,this.render(_,!0,!1)),this._locked=!1,this._paused&&!b)return;this._time=k,this._totalTime=P,this._cycle=O,this._rawPrevTime=A}if(this._time!==_&&this._first||r||l||f){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==m&&t>0&&(this._active=!0),0===m&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),(h=this._time)>=_)for(s=this._first;s&&(a=s._next,h===this._time&&(!this._paused||b));)(s._active||s._startTime<=this._time&&!s._paused&&!s._gc)&&(f===s&&(this.pause(),this._pauseTime=p),s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,r):s.render((t-s._startTime)*s._timeScale,e,r)),s=a;else for(s=this._last;s&&(a=s._prev,h===this._time&&(!this._paused||b));){if(s._active||s._startTime<=_&&!s._paused&&!s._gc){if(f===s){for(f=s._prev;f&&f.endTime()>this._time;)f.render(f._reversed?f.totalDuration()-(t-f._startTime)*f._timeScale:(t-f._startTime)*f._timeScale,e,r),f=f._prev;f=null,this.pause(),this._pauseTime=p}s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,r):s.render((t-s._startTime)*s._timeScale,e,r)}s=a}this._onUpdate&&(e||(i.length&&n(),this._callback("onUpdate"))),u&&(this._locked||this._gc||g!==this._startTime&&y===this._timeScale||(0===this._time||d>=this.totalDuration())&&(o&&(i.length&&n(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[u]&&this._callback(u)))}else m!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},a.getActive=function(t,e,i){var n,r,s=[],o=this.getChildren(t||null==t,e||null==t,!!i),a=0,u=o.length;for(n=0;n<u;n++)(r=o[n]).isActive()&&(s[a++]=r);return s},a.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),n=i.length;for(e=0;e<n;e++)if(i[e].time>t)return i[e].name;return null},a.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;--i>-1;)if(e[i].time<t)return e[i].name;return null},a.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort((function(t,e){return t.time-e.time})),e},a.invalidate=function(){return this._locked=!1,p.prototype.invalidate.call(this)},a.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()||0},a.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()||0},a.totalDuration=function(t){return arguments.length?-1!==this._repeat&&t?this.timeScale(this.totalDuration()/t):this:(this._dirty&&(p.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},a.time=function(t,e){if(!arguments.length)return this._time;this._dirty&&this.totalDuration();var i=this._duration,n=this._cycle,r=n*(i+this._repeatDelay);return t>i&&(t=i),this.totalTime(this._yoyo&&1&n?i-t+r:this._repeat?t+r:t,e)},a.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},a.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},a.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},a.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},t}),!0);var _=r.g.TimelineMax,d=180/Math.PI,v=[],m=[],g=[],y={},x=r.e._gsDefine.globals,b=function(t,e,i,n){i===n&&(i=n-(n-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=n,this.da=n-t,this.ca=i-t,this.ba=e-t},w=function(t,e,i,n){var r={a:t},s={},o={},a={c:n},u=(t+e)/2,l=(e+i)/2,c=(i+n)/2,f=(u+l)/2,h=(l+c)/2,p=(h-f)/8;return r.b=u+(t-u)/4,s.b=f+p,r.c=s.a=(r.b+s.b)/2,s.c=o.a=(f+h)/2,o.b=h-p,a.b=c+(n-c)/4,o.c=a.a=(o.b+a.b)/2,[r,s,o,a]},T=function(t,e,i,n,r){var s,o,a,u,l,c,f,h,p,_,d,y,x,b=t.length-1,T=0,S=t[0].a;for(s=0;s<b;s++)o=(l=t[T]).a,a=l.d,u=t[T+1].d,r?(d=v[s],x=((y=m[s])+d)*e*.25/(n?.5:g[s]||.5),h=a-((c=a-(a-o)*(n?.5*e:0!==d?x/d:0))+(((f=a+(u-a)*(n?.5*e:0!==y?x/y:0))-c)*(3*d/(d+y)+.5)/4||0))):h=a-((c=a-(a-o)*e*.5)+(f=a+(u-a)*e*.5))/2,c+=h,f+=h,l.c=p=c,l.b=0!==s?S:S=l.a+.6*(l.c-l.a),l.da=a-o,l.ca=p-o,l.ba=S-o,i?(_=w(o,S,p,a),t.splice(T,1,_[0],_[1],_[2],_[3]),T+=4):T++,S=f;(l=t[T]).b=S,l.c=S+.4*(l.d-S),l.da=l.d-l.a,l.ca=l.c-l.a,l.ba=S-l.a,i&&(_=w(l.a,S,l.c,l.d),t.splice(T,1,_[0],_[1],_[2],_[3]))},S=function(t,e,i,n){var r,s,o,a,u,l,c=[];if(n)for(s=(t=[n].concat(t)).length;--s>-1;)"string"==typeof(l=t[s][e])&&"="===l.charAt(1)&&(t[s][e]=n[e]+Number(l.charAt(0)+l.substr(2)));if((r=t.length-2)<0)return c[0]=new b(t[0][e],0,0,t[0][e]),c;for(s=0;s<r;s++)o=t[s][e],a=t[s+1][e],c[s]=new b(o,0,0,a),i&&(u=t[s+2][e],v[s]=(v[s]||0)+(a-o)*(a-o),m[s]=(m[s]||0)+(u-a)*(u-a));return c[s]=new b(t[s][e],0,0,t[s+1][e]),c},P=function(t,e,i,n,r,s){var o,a,u,l,c,f,h,p,_={},d=[],x=s||t[0];for(a in r="string"==typeof r?","+r+",":",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",null==e&&(e=1),t[0])d.push(a);if(t.length>1){for(p=t[t.length-1],h=!0,o=d.length;--o>-1;)if(a=d[o],Math.abs(x[a]-p[a])>.05){h=!1;break}h&&(t=t.concat(),s&&t.unshift(s),t.push(t[1]),s=t[t.length-3])}for(v.length=m.length=g.length=0,o=d.length;--o>-1;)a=d[o],y[a]=-1!==r.indexOf(","+a+","),_[a]=S(t,a,y[a],s);for(o=v.length;--o>-1;)v[o]=Math.sqrt(v[o]),m[o]=Math.sqrt(m[o]);if(!n){for(o=d.length;--o>-1;)if(y[a])for(f=(u=_[d[o]]).length-1,l=0;l<f;l++)c=u[l+1].da/m[l]+u[l].da/v[l]||0,g[l]=(g[l]||0)+c*c;for(o=g.length;--o>-1;)g[o]=Math.sqrt(g[o])}for(o=d.length,l=i?4:1;--o>-1;)u=_[a=d[o]],T(u,e,i,n,y[a]),h&&(u.splice(0,l),u.splice(u.length-l,l));return _},O=function(t,e,i){for(var n,r,s,o,a,u,l,c,f,h,p,_=1/i,d=t.length;--d>-1;)for(s=(h=t[d]).a,o=h.d-s,a=h.c-s,u=h.b-s,n=r=0,c=1;c<=i;c++)n=r-(r=((l=_*c)*l*o+3*(f=1-l)*(l*a+f*u))*l),e[p=d*i+c-1]=(e[p]||0)+n*n},A=r.e._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.9",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var n,r,s,o,a,u=e.values||[],l={},c=u[0],f=e.autoRotate||i.vars.orientToBezier;for(n in this._autoRotate=f?f instanceof Array?f:[["x","y","rotation",!0===f?0:Number(f)||0]]:null,c)this._props.push(n);for(s=this._props.length;--s>-1;)n=this._props[s],this._overwriteProps.push(n),r=this._func[n]="function"==typeof t[n],l[n]=r?t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)]():parseFloat(t[n]),a||l[n]!==u[0][n]&&(a=l);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?P(u,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,a):function(t,e,i){var n,r,s,o,a,u,l,c,f,h,p,_={},d="cubic"===(e=e||"soft")?3:2,v="soft"===e,m=[];if(v&&i&&(t=[i].concat(t)),null==t||t.length<d+1)throw"invalid Bezier data";for(f in t[0])m.push(f);for(u=m.length;--u>-1;){for(_[f=m[u]]=a=[],h=0,c=t.length,l=0;l<c;l++)n=null==i?t[l][f]:"string"==typeof(p=t[l][f])&&"="===p.charAt(1)?i[f]+Number(p.charAt(0)+p.substr(2)):Number(p),v&&l>1&&l<c-1&&(a[h++]=(n+a[h-2])/2),a[h++]=n;for(c=h-d+1,h=0,l=0;l<c;l+=d)n=a[l],r=a[l+1],s=a[l+2],o=2===d?0:a[l+3],a[h++]=p=3===d?new b(n,r,s,o):new b(n,(2*r+n)/3,(2*r+s)/3,s);a.length=h}return _}(u,e.type,l),this._segCount=this._beziers[n].length,this._timeRes){var h=function(t,e){var i,n,r,s,o=[],a=[],u=0,l=0,c=(e=e>>0||6)-1,f=[],h=[];for(i in t)O(t[i],o,e);for(r=o.length,n=0;n<r;n++)u+=Math.sqrt(o[n]),h[s=n%e]=u,s===c&&(l+=u,f[s=n/e>>0]=h,a[s]=l,u=0,h=[]);return{length:l,lengths:a,segments:f}}(this._beziers,this._timeRes);this._length=h.length,this._lengths=h.lengths,this._segments=h.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(f=this._autoRotate)for(this._initialRotations=[],f[0]instanceof Array||(this._autoRotate=f=[f]),s=f.length;--s>-1;){for(o=0;o<3;o++)n=f[s][o],this._func[n]="function"==typeof t[n]&&t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)];n=f[s][2],this._initialRotations[s]=(this._func[n]?this._func[n].call(this._target):this._target[n])||0,this._overwriteProps.push(n)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(t){var e,i,n,r,s,o,a,u,l,c,f,h=this._segCount,p=this._func,_=this._target,v=t!==this._startRatio;if(this._timeRes){if(l=this._lengths,c=this._curSeg,f=t*this._length,n=this._li,f>this._l2&&n<h-1){for(u=h-1;n<u&&(this._l2=l[++n])<=f;);this._l1=l[n-1],this._li=n,this._curSeg=c=this._segments[n],this._s2=c[this._s1=this._si=0]}else if(f<this._l1&&n>0){for(;n>0&&(this._l1=l[--n])>=f;);0===n&&f<this._l1?this._l1=0:n++,this._l2=l[n],this._li=n,this._curSeg=c=this._segments[n],this._s1=c[(this._si=c.length-1)-1]||0,this._s2=c[this._si]}if(e=n,f-=this._l1,n=this._si,f>this._s2&&n<c.length-1){for(u=c.length-1;n<u&&(this._s2=c[++n])<=f;);this._s1=c[n-1],this._si=n}else if(f<this._s1&&n>0){for(;n>0&&(this._s1=c[--n])>=f;);0===n&&f<this._s1?this._s1=0:n++,this._s2=c[n],this._si=n}o=1===t?1:(n+(f-this._s1)/(this._s2-this._s1))*this._prec||0}else o=(t-(e=t<0?0:t>=1?h-1:h*t>>0)*(1/h))*h;for(i=1-o,n=this._props.length;--n>-1;)r=this._props[n],a=(o*o*(s=this._beziers[r][e]).da+3*i*(o*s.ca+i*s.ba))*o+s.a,this._mod[r]&&(a=this._mod[r](a,_)),p[r]?_[r](a):_[r]=a;if(this._autoRotate){var m,g,y,x,b,w,T,S=this._autoRotate;for(n=S.length;--n>-1;)r=S[n][2],w=S[n][3]||0,T=!0===S[n][4]?1:d,s=this._beziers[S[n][0]],m=this._beziers[S[n][1]],s&&m&&(s=s[e],m=m[e],g=s.a+(s.b-s.a)*o,g+=((x=s.b+(s.c-s.b)*o)-g)*o,x+=(s.c+(s.d-s.c)*o-x)*o,y=m.a+(m.b-m.a)*o,y+=((b=m.b+(m.c-m.b)*o)-y)*o,b+=(m.c+(m.d-m.c)*o-b)*o,a=v?Math.atan2(b-y,x-g)*T+w:this._initialRotations[n],this._mod[r]&&(a=this._mod[r](a,_)),p[r]?_[r](a):_[r]=a)}}}),k=A.prototype;
/*!
 * VERSION: 1.3.9
 * DATE: 2019-05-17
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/A.bezierThrough=P,A.cubicToQuadratic=w,A._autoCSS=!0,A.quadraticToCubic=function(t,e,i){return new b(t,(2*e+t)/3,(2*e+i)/3,i)},A._cssRegister=function(){var t=x.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,n=e._setPluginRatio,r=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,s,o,a,u){e instanceof Array&&(e={values:e}),u=new A;var l,c,f,h=e.values,p=h.length-1,_=[],d={};if(p<0)return a;for(l=0;l<=p;l++)f=i(t,h[l],o,a,u,p!==l),_[l]=f.end;for(c in e)d[c]=e[c];return d.values=_,(a=new r(t,"bezier",0,0,f.pt,2)).data=f,a.plugin=u,a.setRatio=n,0===d.autoRotate&&(d.autoRotate=!0),!d.autoRotate||d.autoRotate instanceof Array||(l=!0===d.autoRotate?0:Number(d.autoRotate),d.autoRotate=null!=f.end.left?[["left","top","rotation",l,!1]]:null!=f.end.x&&[["x","y","rotation",l,!1]]),d.autoRotate&&(o._transform||o._enableTransforms(!1),f.autoRotate=o._target._gsTransform,f.proxy.rotation=f.autoRotate.rotation||0,o._overwriteProps.push("rotation")),u._onInitTween(f.proxy,d,o._tween),a}})}},k._mod=function(t){for(var e,i=this._overwriteProps,n=i.length;--n>-1;)(e=t[i[n]])&&"function"==typeof e&&(this._mod[i[n]]=e)},k._kill=function(t){var e,i,n=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=n.length;--i>-1;)n[i]===e&&n.splice(i,1);if(n=this._autoRotate)for(i=n.length;--i>-1;)t[n[i][2]]&&n.splice(i,1);return this._super._kill.call(this,t)},
/*!
 * VERSION: 1.16.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
r.e._gsDefine("easing.Back",["easing.Ease"],(function(){var t,e,i,n,s=r.e.GreenSockGlobals||r.e,o=s.com.greensock,a=2*Math.PI,u=Math.PI/2,l=o._class,c=function(t,e){var i=l("easing."+t,(function(){}),!0),n=i.prototype=new r.b;return n.constructor=i,n.getRatio=e,i},f=r.b.register||function(){},h=function(t,e,i,n,r){var s=l("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new n},!0);return f(s,t),s},p=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},_=function(t,e){var i=l("easing."+t,(function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1}),!0),n=i.prototype=new r.b;return n.constructor=i,n.getRatio=e,n.config=function(t){return new i(t)},i},d=h("Back",_("BackOut",(function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1})),_("BackIn",(function(t){return t*t*((this._p1+1)*t-this._p1)})),_("BackInOut",(function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)}))),v=l("easing.SlowMo",(function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=!0===i}),!0),m=v.prototype=new r.b;return m.constructor=v,m.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1===t?0:1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},v.ease=new v(.7,.7),m.config=v.config=function(t,e,i){return new v(t,e,i)},(m=(t=l("easing.SteppedEase",(function(t,e){t=t||1,this._p1=1/t,this._p2=t+(e?0:1),this._p3=e?1:0}),!0)).prototype=new r.b).constructor=t,m.getRatio=function(t){return t<0?t=0:t>=1&&(t=.999999999),((this._p2*t|0)+this._p3)*this._p1},m.config=t.config=function(e,i){return new t(e,i)},(m=(e=l("easing.ExpoScaleEase",(function(t,e,i){this._p1=Math.log(e/t),this._p2=e-t,this._p3=t,this._ease=i}),!0)).prototype=new r.b).constructor=e,m.getRatio=function(t){return this._ease&&(t=this._ease.getRatio(t)),(this._p3*Math.exp(this._p1*t)-this._p3)/this._p2},m.config=e.config=function(t,i,n){return new e(t,i,n)},(m=(i=l("easing.RoughEase",(function(t){for(var e,i,n,s,o,a,u=(t=t||{}).taper||"none",l=[],c=0,f=0|(t.points||20),h=f,_=!1!==t.randomize,d=!0===t.clamp,v=t.template instanceof r.b?t.template:null,m="number"==typeof t.strength?.4*t.strength:.4;--h>-1;)e=_?Math.random():1/f*h,i=v?v.getRatio(e):e,n="none"===u?m:"out"===u?(s=1-e)*s*m:"in"===u?e*e*m:e<.5?(s=2*e)*s*.5*m:(s=2*(1-e))*s*.5*m,_?i+=Math.random()*n-.5*n:h%2?i+=.5*n:i-=.5*n,d&&(i>1?i=1:i<0&&(i=0)),l[c++]={x:e,y:i};for(l.sort((function(t,e){return t.x-e.x})),a=new p(1,1,null),h=f;--h>-1;)o=l[h],a=new p(o.x,o.y,a);this._prev=new p(0,0,0!==a.t?a:a.next)}),!0)).prototype=new r.b).constructor=i,m.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},m.config=function(t){return new i(t)},i.ease=new i,h("Bounce",c("BounceOut",(function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375})),c("BounceIn",(function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)})),c("BounceInOut",(function(t){var e=t<.5;return(t=e?1-2*t:2*t-1)<1/2.75?t*=7.5625*t:t=t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5}))),h("Circ",c("CircOut",(function(t){return Math.sqrt(1-(t-=1)*t)})),c("CircIn",(function(t){return-(Math.sqrt(1-t*t)-1)})),c("CircInOut",(function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)}))),h("Elastic",(n=function(t,e,i){var n=l("easing."+t,(function(t,e){this._p1=t>=1?t:1,this._p2=(e||i)/(t<1?t:1),this._p3=this._p2/a*(Math.asin(1/this._p1)||0),this._p2=a/this._p2}),!0),s=n.prototype=new r.b;return s.constructor=n,s.getRatio=e,s.config=function(t,e){return new n(t,e)},n})("ElasticOut",(function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1}),.3),n("ElasticIn",(function(t){return-this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)}),.3),n("ElasticInOut",(function(t){return(t*=2)<1?this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)*-.5:this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1}),.45)),h("Expo",c("ExpoOut",(function(t){return 1-Math.pow(2,-10*t)})),c("ExpoIn",(function(t){return Math.pow(2,10*(t-1))-.001})),c("ExpoInOut",(function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))}))),h("Sine",c("SineOut",(function(t){return Math.sin(t*u)})),c("SineIn",(function(t){return 1-Math.cos(t*u)})),c("SineInOut",(function(t){return-.5*(Math.cos(Math.PI*t)-1)}))),l("easing.EaseLookup",{find:function(t){return r.b.map[t]}},!0),f(s.SlowMo,"SlowMo","ease,"),f(i,"RoughEase","ease,"),f(t,"SteppedEase","ease,"),d}),!0);var M=r.g.Back,R=r.g.Elastic,E=r.g.Bounce,F=r.g.RoughEase,C=r.g.SlowMo,I=r.g.SteppedEase,D=r.g.Circ,L=r.g.Expo,N=r.g.Sine,j=r.g.ExpoScaleEase,z=s;z._autoActivated=[p,_,o,a,A,u,h,M,R,E,F,C,I,D,L,N,j];var B={initialDelay:.1,delaySpeed:.2,moveDistance:40,zoomScale:1.6,inViewTriggerPercent:.2,speed:1,ease:"Power2.easeOut",textLineDelaySpeed:.1,textLineYOffset:0},X={getAttribute:function(t,e){return t.hasAttribute(e)?t.getAttribute(e):!!t.hasAttribute("data-".concat(e))&&t.getAttribute("data-".concat(e))},hasAttribute:function(t,e){return!(!t.hasAttribute(e)&&!t.hasAttribute("data-".concat(e)))},isInViewport:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;window.innerHeight+window.scrollY>=document.body.offsetHeight&&(e=0);var i=t.getBoundingClientRect();return i.top-e<(window.innerHeight||document.documentElement.clientHeight)},wrapLines:function(t){var e=t.innerText.split(" "),i=[];e.forEach((function(t){if(-1!==t.indexOf("-")){var e=t.split("-");e.forEach((function(t,n){var r=t;n!==e.length-1&&(r+="-"),i.push(r)}))}else i.push(t)}));var n="";i.forEach((function(t){var e=-1!==t.indexOf("-")?"":" ";n+="<span>".concat(t).concat(e,"</span>")})),t.innerHTML=n;n="";var r=null;t.querySelectorAll("span").forEach((function(t){null===r&&(r=t.offsetTop,n='<span class="ani-line"><span class="ani-line-group">'),r<t.offsetTop&&(n+='</span></span><span class="ani-line"><span class="ani-line-group">',r=t.offsetTop);var e=-1!==t.innerText.indexOf("-")?"":" ";n+=t.innerText+e})),n+="</span>",t.innerHTML=n}};function V(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var Y=function(){function t(e,i,n,r){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.el=e,this.index=i,this.completeHandler=r,this.delaySpeed=B.delaySpeed,X.hasAttribute(this.el,"ani-delay-speed")&&(this.delaySpeed=parseFloat(X.getAttribute(this.el,"ani-delay-speed"))),this.movement=B.moveDistance,X.hasAttribute(this.el,"ani-move-distance")&&(this.movement=parseFloat(X.getAttribute(this.el,"ani-move-distance"))),this.zoomScale=B.zoomScale,X.hasAttribute(this.el,"ani-zoom-scale")&&(this.zoomScale=parseFloat(X.getAttribute(this.el,"ani-zoom-scale"))),this.speed=B.speed,X.hasAttribute(this.el,"ani-speed")&&(this.speed=parseFloat(X.getAttribute(this.el,"ani-speed"))),this.ease=window.EaseLookup.find(B.ease),X.hasAttribute(this.el,"ani-ease")){var s=window.EaseLookup.find(X.getAttribute(this.el,"ani-ease"));s&&(this.ease=s)}this.textLineDelaySpeed=B.textLineDelaySpeed,X.hasAttribute(this.el,"ani-text-line-delay-speed")&&(this.textLineDelaySpeed=parseFloat(B.textLineDelaySpeed)),this.textLineYOffset=B.textLineYOffset,X.hasAttribute(this.el,"ani-text-line-y-offset")&&(this.textLineYOffset=parseFloat(B.textLineYOffset)),this.preset=n&&"string"==typeof n&&""!==n?n:"fade",this.el.style.opacity=0}var e,i,n;return e=t,(i=[{key:"appear",value:function(){var t=this;if(clearTimeout(this.appearTimeout),X.isInViewport(this.el)){this.el.style.opacity=null;var e=this.preset.split("-"),i=e.shift(),n=e.join("-");"wipe"===i?this.wipe(n):"zoom"===i?this.zoom(n):"class"===i&&n?this.addClass(n):"text"===i?this.text(n):this.fade(n)}else this.appearTimeout=setTimeout((function(){t.appear()}),250)}},{key:"fade",value:function(t){var e={x:0,y:0,opacity:0};if("string"==typeof t)switch(t){case"left":e.x=this.movement;break;case"right":e.x=-this.movement;break;case"down":e.y=-this.movement;break;case"up":e.y=this.movement;break;default:e.y=0}z.fromTo(this.el,this.speed,e,{opacity:1,y:0,x:0,ease:this.ease,delay:(1+this.index)*this.delaySpeed,onComplete:this.completeHandler,clearProps:"x,y,opacity"})}},{key:"wipe",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"left",e=this.clipPath(100),i=this.clipPath(0);switch(t){case"up":e=this.clipPath(500,0,0,0),i=this.clipPath(0,0,0,0);break;case"down":e=this.clipPath(0,0,500,0),i=this.clipPath(0,0,0,0);break;case"left":e=this.clipPath(0,0,0,500),i=this.clipPath(0,0,0,0);break;case"right":default:e=this.clipPath(0,500,0),i=this.clipPath(0,0,0)}i.delay=(1+this.index)*this.delaySpeed,i.ease=this.ease,i.onComplete=this.completeHandler,z.fromTo(this.el,this.speed,e,i)}},{key:"zoom",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"in",e=this.el.parentElement;e.style.overflow="hidden","inline"===getComputedStyle(this.el,null).display?e.style.display="inline-block":e.style.display=getComputedStyle(this.el,null).display,"out"===t?z.fromTo(this.el,this.speed,{opacity:0,scale:1},{opacity:1,scale:this.zoomScale,delay:(1+this.index)*this.delaySpeed,onComplete:this.completeHandler,ease:this.ease,clearProps:"opacity"}):z.fromTo(this.el,this.speed,{opacity:0,scale:this.zoomScale},{opacity:1,scale:1,delay:(1+this.index)*this.delaySpeed,onComplete:this.completeHandler,ease:this.ease,clearProps:"opacity, scale"})}},{key:"text",value:function(t){var e=this,i=this.el.innerHTML;X.wrapLines(this.el);var n=this.el.querySelectorAll(".ani-line"),r=this.speed/n.length+1,s=(1+this.index)*this.delaySpeed;n.forEach((function(o,a){var u=0,l=o.querySelector(".ani-line-group");o.style.display="block","line-mask"===t&&(o.style.overflow="hidden",u=1),l.style.display="inline-block",z.fromTo(l,r,{y:l.offsetHeight+e.textLineYOffset,opacity:u},{opacity:1,y:0,x:0,ease:e.ease,delay:s+a*e.delaySpeed,onComplete:function(t){t===n.length-1&&(e.el.innerHTML=i,e.completeHandler())},onCompleteParams:[a],clearProps:"all"})}))}},{key:"clipPath",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,r={clipPath:"inset(".concat(t,"% ").concat(e,"% ").concat(i,"% ").concat(n,"%)"),webkitClipPath:"inset(".concat(t,"% ").concat(e,"% ").concat(i,"% ").concat(n,"%)")};return r}},{key:"addClass",value:function(t){var e=this;setTimeout((function(){e.el.classList.add(t),e.completeHandler()}),(1+this.index)*this.delaySpeed)}}])&&V(e.prototype,i),n&&V(e,n),t}(),U={"default-appear":function(t){t.style.opacity=1}};function W(t){return function(t){if(Array.isArray(t)){for(var e=0,i=new Array(t.length);e<t.length;e++)i[e]=t[e];return i}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function G(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}U["basic-appear"]=function(t,e){t.style.opacity=1,t.style.transition="none",t.classList.add("ani-has-appeared"),t.classList.add("ani-start");var i=0,n=0,r=function(){++n===i&&(t.classList.remove("ani-start"),t.classList.add("ani-complete"))};e.forEach((function(t,e){var n="";i++,X.hasAttribute(t,"ani-preset")&&(n=X.getAttribute(t,"ani-preset")),new Y(t,e,n,r).appear()}))};var q=function(){function t(e){var i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.el=e,X.hasAttribute(this.el,"ani-in-view-trigger-percent")?this.offsetPercentage=parseFloat(X.getAttribute(this.el,"ani-in-view-trigger-percent")):this.offsetPercentage=B.inViewTriggerPercent;var n=e.querySelectorAll("img[load-src], img[data-load-src]");this.images=W(n).filter((function(t){return t.closest("[ani], [data-ani]")===i.el})),this.imageLoadedCount=0,this.hasAppeared=!1;var r=W(this.el.querySelectorAll("[ani-child], [data-ani-child]")).filter((function(t){return t.closest("[ani], [data-ani]")===i.el}));this.children=r,this.children.forEach((function(t,e){X.hasAttribute(t,"ani-child-order")?t.order=parseInt(X.getAttribute(t,"ani-child-order")):t.order=i.children.length+e})),this.children.sort((function(t,e){return t.order>e.order?1:-1})),this.onAppear=function(){i.el.classList.add("appear")},X.hasAttribute(e,"ani")&&"function"==typeof U[X.getAttribute(e,"ani")]&&(this.onAppear=U[X.getAttribute(e,"ani")])}var e,i,n;return e=t,(i=[{key:"check",value:function(){X.isInViewport(this.el,window.innerHeight)&&this.loadAssets(),!this.hasAppeared&&this.imageLoadedCount===this.images.length&&X.isInViewport(this.el,window.innerHeight*-this.offsetPercentage)&&this.appear()}},{key:"appear",value:function(){var t=this;this.hasAppeared=!0,setTimeout((function(){t.onAppear(t.el,t.children)}),1e3*B.initialDelay)}},{key:"imageLoadHandler",value:function(){this.imageLoadedCount++,this.check()}},{key:"loadAssets",value:function(){var t=this;this.images.forEach((function(e){if(X.hasAttribute(e,"load-src")){var i=X.getAttribute(e,"load-src");e.removeAttribute("load-src"),e.removeAttribute("data-load-src"),e.addEventListener("load",t.imageLoadHandler.bind(t)),e.addEventListener("error",t.imageLoadHandler.bind(t)),e.setAttribute("src",i)}}))}}])&&G(e.prototype,i),n&&G(e,n),t}();function H(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var Z=function(){function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.groups=[],this.update(),window.addEventListener("scroll",(function(){e.check()})),this.check()}var e,i,n;return e=t,(i=[{key:"check",value:function(){this.groups.forEach((function(t){t.check()}))}},{key:"update",value:function(){var t=this;this.els=document.querySelectorAll("[ani]:not([data-ani-added]), [data-ani]:not([data-ani-added])"),this.els.forEach((function(e){e.setAttribute("data-ani-added",!0),t.groups.push(new q(e))})),this.check()}}])&&H(e.prototype,i),n&&H(e,n),t}();i.d(e,"Ani",(function(){return Z})),i.d(e,"AniConfig",(function(){return B})),i.d(e,"AniElement",(function(){return Y})),i.d(e,"AniGroupActions",(function(){return U})),i.d(e,"AnimationGroup",(function(){return q})),i.d(e,"Helpers",(function(){return X})),"undefined"!=typeof document&&"undefined"!=typeof window&&(window.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=Array.prototype.forEach),n(window))}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmktZnJpZW5kL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9hbmktZnJpZW5kL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvZ3NhcC9Ud2VlbkxpdGUuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctd3MuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3BvbHlmaWxsL25vQ29uZmxpY3QuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcG9seWZpbGwvbGliL25vQ29uZmxpY3QuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2VzNi9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1mcm91bmQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaW11bC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cyLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50YW5oLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ibGluay5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS5ub3cuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9hcnJheS9mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYXR0ZW4taW50by1hcnJheS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3BhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3BhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1zdGFydC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3RyaW0tZW5kLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L2VudHJpZXMuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9wcm9taXNlL2ZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvd2ViL2luZGV4LmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9lbGVtZW50LWNsb3Nlc3QvaW5kZXgubWpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvZ3NhcC9Ud2Vlbk1heEJhc2UuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL25vZGVfbW9kdWxlcy9nc2FwL0NTU1BsdWdpbi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2dzYXAvQXR0clBsdWdpbi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2dzYXAvUm91bmRQcm9wc1BsdWdpbi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2dzYXAvRGlyZWN0aW9uYWxSb3RhdGlvblBsdWdpbi5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2dzYXAvVGltZWxpbmVMaXRlLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvZ3NhcC9UaW1lbGluZU1heC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2dzYXAvQmV6aWVyUGx1Z2luLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9ub2RlX21vZHVsZXMvZ3NhcC9FYXNlUGFjay5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vbm9kZV9tb2R1bGVzL2dzYXAvVHdlZW5NYXguanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL3NyYy9tb2R1bGVzL0FuaUNvbmZpZy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vc3JjL21vZHVsZXMvSGVscGVycy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vc3JjL21vZHVsZXMvQW5pRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vc3JjL21vZHVsZXMvQW5pR3JvdXBBY3Rpb25zLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9zcmMvbW9kdWxlcy9BbmltYXRpb25Hcm91cC5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vc3JjL21vZHVsZXMvQW5pLmpzIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsInRoaXMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX2dzU2NvcGUiLCJ3aW5kb3ciLCJnbG9iYWwiLCJUd2VlbkxpdGUiLCJfZXhwb3J0cyIsIl9kb2MiLCJkb2N1bWVudCIsIl9nbG9iYWxzIiwiR3JlZW5Tb2NrR2xvYmFscyIsImEiLCJfdGlja2VyIiwiX3RpY2tlckFjdGl2ZSIsInRvU3RyaW5nIiwiYXJyYXkiLCJfbmFtZXNwYWNlIiwic3BsaXQiLCJsZW5ndGgiLCJncyIsIl9zbGljZSIsImIiLCJwdXNoIiwiX2VtcHR5RnVuYyIsIl9pc0FycmF5Iiwib2JqIiwiQXJyYXkiLCJfZGVmTG9va3VwIiwiRGVmaW5pdGlvbiIsImRlcGVuZGVuY2llcyIsImZ1bmMiLCJzYyIsImdzQ2xhc3MiLCJfY2xhc3NlcyIsImNoZWNrIiwiaW5pdCIsImN1ciIsImNsIiwibWlzc2luZyIsInBvcCIsImpvaW4iLCJhcHBseSIsIl9nc0RlZmluZSIsIl9jbGFzcyIsImdsb2JhbHMiLCJfYmFzZVBhcmFtcyIsIkVhc2UiLCJleHRyYVBhcmFtcyIsInR5cGUiLCJwb3dlciIsIl9mdW5jIiwiX3R5cGUiLCJfcG93ZXIiLCJfcGFyYW1zIiwiY29uY2F0IiwiX2Vhc2VNYXAiLCJtYXAiLCJfZWFzZVJlZyIsInJlZ2lzdGVyIiwiZWFzZSIsIm5hbWVzIiwidHlwZXMiLCJlIiwiaiIsIm5hIiwidGEiLCJlYXNpbmciLCJnZXRSYXRpbyIsIl9jYWxjRW5kIiwicHciLCJsaW5lYXIiLCJMaW5lYXIiLCJlYXNlSW4iLCJzd2luZyIsIlF1YWQiLCJlYXNlSW5PdXQiLCJFdmVudERpc3BhdGNoZXIiLCJ0YXJnZXQiLCJfbGlzdGVuZXJzIiwiX2V2ZW50VGFyZ2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNhbGxiYWNrIiwic2NvcGUiLCJ1c2VQYXJhbSIsInByaW9yaXR5IiwibGlzdGVuZXIiLCJsaXN0IiwiaW5kZXgiLCJ3YWtlIiwic3BsaWNlIiwicHIiLCJ1cCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50Iiwic2xpY2UiLCJfcmVxQW5pbUZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiX2NhbmNlbEFuaW1GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiX2dldFRpbWUiLCJEYXRlIiwibm93IiwiZ2V0VGltZSIsIl9sYXN0VXBkYXRlIiwiZnBzIiwidXNlUkFGIiwiX2ZwcyIsIl9yZXEiLCJfaWQiLCJfZ2FwIiwiX25leHRUaW1lIiwiX3NlbGYiLCJfc3RhcnRUaW1lIiwiX3VzZVJBRiIsIl9sYWdUaHJlc2hvbGQiLCJfYWRqdXN0ZWRMYWciLCJfdGljayIsIm1hbnVhbCIsIm92ZXJsYXAiLCJkaXNwYXRjaCIsImVsYXBzZWQiLCJ0aW1lIiwiZnJhbWUiLCJ0aWNrIiwibGFnU21vb3RoaW5nIiwidGhyZXNob2xkIiwiYWRqdXN0ZWRMYWciLCJhcmd1bWVudHMiLCJNYXRoIiwibWluIiwic2xlZXAiLCJjbGVhclRpbWVvdXQiLCJzZWFtbGVzcyIsImYiLCJzZXRUaW1lb3V0IiwidmlzaWJpbGl0eVN0YXRlIiwiVGlja2VyIiwiZXZlbnRzIiwiY29uc3RydWN0b3IiLCJBbmltYXRpb24iLCJkdXJhdGlvbiIsInZhcnMiLCJfZHVyYXRpb24iLCJfdG90YWxEdXJhdGlvbiIsIl9kZWxheSIsIk51bWJlciIsImRlbGF5IiwiX3RpbWVTY2FsZSIsIl9hY3RpdmUiLCJpbW1lZGlhdGVSZW5kZXIiLCJkYXRhIiwiX3JldmVyc2VkIiwicmV2ZXJzZWQiLCJfcm9vdFRpbWVsaW5lIiwidGwiLCJ1c2VGcmFtZXMiLCJfcm9vdEZyYW1lc1RpbWVsaW5lIiwiYWRkIiwiX3RpbWUiLCJwYXVzZWQiLCJ0aWNrZXIiLCJfZGlydHkiLCJfZ2MiLCJfaW5pdHRlZCIsIl9wYXVzZWQiLCJfdG90YWxUaW1lIiwiX3Jhd1ByZXZUaW1lIiwiX25leHQiLCJfbGFzdCIsIl9vblVwZGF0ZSIsIl90aW1lbGluZSIsInRpbWVsaW5lIiwiX2NoZWNrVGltZW91dCIsInVucmVmIiwicGxheSIsImZyb20iLCJzdXBwcmVzc0V2ZW50cyIsInNlZWsiLCJwYXVzZSIsImF0VGltZSIsInJlc3VtZSIsInRvdGFsVGltZSIsInJlc3RhcnQiLCJpbmNsdWRlRGVsYXkiLCJyZXZlcnNlIiwidG90YWxEdXJhdGlvbiIsInJlbmRlciIsImZvcmNlIiwiaW52YWxpZGF0ZSIsIl9lbmFibGVkIiwiaXNBY3RpdmUiLCJyYXdUaW1lIiwic3RhcnRUaW1lIiwiZW5hYmxlZCIsImlnbm9yZVRpbWVsaW5lIiwiX3JlbW92ZSIsIl9raWxsIiwia2lsbCIsIl91bmNhY2hlIiwiaW5jbHVkZVNlbGYiLCJ0d2VlbiIsIl9zd2FwU2VsZkluUGFyYW1zIiwicGFyYW1zIiwiY29weSIsIl9jYWxsYmFjayIsInYiLCJjYWxsYmFja1Njb3BlIiwiZXZlbnRDYWxsYmFjayIsInN1YnN0ciIsImluZGV4T2YiLCJzbW9vdGhDaGlsZFRpbWluZyIsInVuY2FwcGVkIiwiX3BhdXNlVGltZSIsIl9sYXp5VHdlZW5zIiwiX2xhenlSZW5kZXIiLCJwcm9ncmVzcyIsInRvdGFsUHJvZ3Jlc3MiLCJyYXRpbyIsIl9zb3J0Q2hpbGRyZW4iLCJlbmRUaW1lIiwiaW5jbHVkZVJlcGVhdHMiLCJ0aW1lU2NhbGUiLCJwYXVzZVRpbWUiLCJyYXciLCJTaW1wbGVUaW1lbGluZSIsImF1dG9SZW1vdmVDaGlsZHJlbiIsIl9maXJzdCIsIl9yZWNlbnQiLCJpbnNlcnQiLCJjaGlsZCIsInBvc2l0aW9uIiwiYWxpZ24iLCJzdGFnZ2VyIiwicHJldlR3ZWVuIiwic3QiLCJfcHJldiIsInNraXBEaXNhYmxlIiwibmV4dCIsInNlbGVjdG9yIiwidGFyZyIsInRhcmdldHMiLCJpc1NlbGVjdG9yIiwianF1ZXJ5Iiwibm9kZVR5cGUiLCJzdHlsZSIsIm92ZXJ3cml0ZSIsIl9vdmVyd3JpdGUiLCJfb3ZlcndyaXRlTG9va3VwIiwiZGVmYXVsdE92ZXJ3cml0ZSIsIl90YXJnZXRzIiwiX3Byb3BMb29rdXAiLCJfc2libGluZ3MiLCJfcmVnaXN0ZXIiLCJfYXBwbHlPdmVyd3JpdGUiLCJfaXNTZWxlY3RvciIsIl9maXJzdFBUIiwiX292ZXJ3cml0dGVuUHJvcHMiLCJfc3RhcnRBdCIsIl9ub3RpZnlQbHVnaW5zT2ZFbmFibGVkIiwiX2xhenkiLCJ2ZXJzaW9uIiwiZGVmYXVsdEVhc2UiLCJfZWFzZSIsImF1dG9TbGVlcCIsIiQiLCJqUXVlcnkiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ2V0RWxlbWVudEJ5SWQiLCJjaGFyQXQiLCJfbGF6eUxvb2t1cCIsIl9udW1iZXJzRXhwIiwiX3JlbEV4cCIsIl9zZXRSYXRpbyIsInZhbCIsInB0IiwiYmxvYiIsImVuZCIsInN0YXJ0IiwiX3R3ZWVuIiwiX3RhcmdldCIsImZwIiwiX2Jsb2JSb3VuZCIsIl9ibG9iRGlmIiwiZmlsdGVyIiwic3RhcnROdW1zIiwiZW5kTnVtcyIsIm51bSIsIm5vbk51bWJlcnMiLCJjdXJyZW50TnVtIiwiY2hhckluZGV4IiwiY29sb3IiLCJtYXRjaCIsIl9hcHBseVBUIiwicGFyc2VGbG9hdCIsInBhcnNlSW50Iiwicm91bmQiLCJzZXRSYXRpbyIsInRlc3QiLCJfYWRkUHJvcFR3ZWVuIiwicHJvcCIsIm92ZXJ3cml0ZVByb3AiLCJtb2QiLCJmdW5jUGFyYW0iLCJzdHJpbmdGaWx0ZXIiLCJnZXR0ZXJOYW1lIiwiaXNSZWxhdGl2ZSIsInBnIiwiaXNOYU4iLCJyZXBsYWNlIiwiZGVmYXVsdFN0cmluZ0ZpbHRlciIsIl9pbnRlcm5hbHMiLCJpc0FycmF5IiwibGF6eVR3ZWVucyIsImJsb2JEaWYiLCJfcGx1Z2lucyIsIl90d2Vlbkxvb2t1cCIsInR3ZWVuTG9va3VwIiwiX3R3ZWVuTG9va3VwTnVtIiwiX3Jlc2VydmVkUHJvcHMiLCJyZXNlcnZlZFByb3BzIiwib25Db21wbGV0ZSIsIm9uQ29tcGxldGVQYXJhbXMiLCJvbkNvbXBsZXRlU2NvcGUiLCJydW5CYWNrd2FyZHMiLCJzdGFydEF0Iiwib25VcGRhdGUiLCJvblVwZGF0ZVBhcmFtcyIsIm9uVXBkYXRlU2NvcGUiLCJvblN0YXJ0Iiwib25TdGFydFBhcmFtcyIsIm9uU3RhcnRTY29wZSIsIm9uUmV2ZXJzZUNvbXBsZXRlIiwib25SZXZlcnNlQ29tcGxldGVQYXJhbXMiLCJvblJldmVyc2VDb21wbGV0ZVNjb3BlIiwib25SZXBlYXQiLCJvblJlcGVhdFBhcmFtcyIsIm9uUmVwZWF0U2NvcGUiLCJlYXNlUGFyYW1zIiwieW95byIsInJlcGVhdCIsInJlcGVhdERlbGF5IiwiYXV0b0NTUyIsImxhenkiLCJvbk92ZXJ3cml0ZSIsImlkIiwieW95b0Vhc2UiLCJub25lIiwiYWxsIiwiYXV0byIsImNvbmN1cnJlbnQiLCJhbGxPblN0YXJ0IiwicHJlZXhpc3RpbmciLCJfbmV4dEdDRnJhbWUiLCJsYXp5UmVuZGVyIiwiX3VwZGF0ZVJvb3QiLCJ0d2VlbnMiLCJzY3J1YiIsIl9nc1R3ZWVuSUQiLCJfb25PdmVyd3JpdGUiLCJvdmVyd3JpdHRlblR3ZWVuIiwib3ZlcndyaXRpbmdUd2VlbiIsImtpbGxlZFByb3BzIiwicjEiLCJyMiIsInByb3BzIiwic2libGluZ3MiLCJjaGFuZ2VkIiwiY3VyVHdlZW4iLCJnbG9iYWxTdGFydCIsIm92ZXJsYXBzIiwib0NvdW50IiwiemVyb0R1ciIsIl9jaGVja092ZXJsYXAiLCJfdGlueU51bSIsInJlZmVyZW5jZSIsInRzIiwiX2luaXQiLCJpbml0UGx1Z2lucyIsInN0YXJ0VmFycyIsIm9wIiwiZHVyIiwiaW1tZWRpYXRlIiwidG8iLCJjb25maWciLCJfZWFzZVR5cGUiLCJfZWFzZVBvd2VyIiwiX2luaXRQcm9wcyIsIl9vblBsdWdpbkV2ZW50IiwicHJvcExvb2t1cCIsIm92ZXJ3cml0dGVuUHJvcHMiLCJwbHVnaW4iLCJjc3MiLCJfYXV0b0NTUyIsIl9vbkluaXRUd2VlbiIsIl9wcmlvcml0eSIsIl9vdmVyd3JpdGVQcm9wcyIsIl9vbkluaXRBbGxQcm9wcyIsIl9vbkRpc2FibGUiLCJfb25FbmFibGUiLCJpc0NvbXBsZXRlIiwicmF3UHJldlRpbWUiLCJwcmV2VGltZSIsInByZXZSYXdQcmV2VGltZSIsInBvdyIsImtpbGxQcm9wcyIsInJlY29yZCIsImtpbGxlZCIsInNpbXVsdGFuZW91c092ZXJ3cml0ZSIsImZpcnN0UFQiLCJfdGVtcEtpbGwiLCJmcm9tVG8iLCJmcm9tVmFycyIsInRvVmFycyIsImRlbGF5ZWRDYWxsIiwic2V0IiwiZ2V0VHdlZW5zT2YiLCJvbmx5QWN0aXZlIiwia2lsbFR3ZWVuc09mIiwia2lsbERlbGF5ZWRDYWxsc1RvIiwiVHdlZW5QbHVnaW4iLCJfcHJvcE5hbWUiLCJfc3VwZXIiLCJBUEkiLCJfYWRkVHdlZW4iLCJsb29rdXAiLCJfbW9kIiwiX3JvdW5kUHJvcHMiLCJwdDIiLCJmaXJzdCIsImxhc3QiLCJhY3RpdmF0ZSIsInBsdWdpbnMiLCJwcm9wTmFtZSIsIm92ZXJ3cml0ZVByb3BzIiwiaW5pdEFsbCIsIlBsdWdpbiIsInRvVXBwZXJDYXNlIiwiX2dzUXVldWUiLCJjb25zb2xlIiwibG9nIiwibm9uR2xvYmFscyIsImNvbSIsImdyZWVuc29jayIsImNvcmUiLCJQb3dlcjEiLCJQb3dlcjIiLCJQb3dlcjMiLCJQb3dlcjQiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0Iiwic291cmNlIiwib3duIiwib3V0IiwiZXhwIiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJTIiwiSVNfUFJPVE8iLCJQIiwiSVNfQklORCIsIkIiLCJleHBQcm90byIsInVuZGVmaW5lZCIsIkZ1bmN0aW9uIiwiVSIsIlciLCJSIiwiX19nIiwiZXhlYyIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJzdG9yZSIsInVpZCIsIlVTRV9TWU1CT0wiLCJ0b0ludGVnZXIiLCJfX2UiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJkUCIsIk8iLCJBdHRyaWJ1dGVzIiwiZGVmaW5lZCIsImhhcyIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsImluc3BlY3RTb3VyY2UiLCJzYWZlIiwiaXNGdW5jdGlvbiIsIlN0cmluZyIsImZhaWxzIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJwMSIsIk5BTUUiLCJ0b0xvd2VyQ2FzZSIsImNyZWF0ZURlc2MiLCJJT2JqZWN0IiwibWV0aG9kIiwiYXJnIiwiYUZ1bmN0aW9uIiwiZm4iLCJ0aGF0IiwiY2VpbCIsImZsb29yIiwicElFIiwidG9JT2JqZWN0IiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIktFWSIsInRvT2JqZWN0IiwidG9MZW5ndGgiLCJhc2MiLCJUWVBFIiwiJGNyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsIiR0aGlzIiwiY2FsbGJhY2tmbiIsInJlcyIsInJlc3VsdCIsIkxJQlJBUlkiLCIkdHlwZWQiLCIkYnVmZmVyIiwiYW5JbnN0YW5jZSIsInByb3BlcnR5RGVzYyIsInJlZGVmaW5lQWxsIiwidG9JbmRleCIsInRvQWJzb2x1dGVJbmRleCIsImNsYXNzb2YiLCJpc0FycmF5SXRlciIsImdldFByb3RvdHlwZU9mIiwiZ09QTiIsImdldEl0ZXJGbiIsIndrcyIsImNyZWF0ZUFycmF5TWV0aG9kIiwiY3JlYXRlQXJyYXlJbmNsdWRlcyIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIkFycmF5SXRlcmF0b3JzIiwiSXRlcmF0b3JzIiwiJGl0ZXJEZXRlY3QiLCJzZXRTcGVjaWVzIiwiYXJyYXlGaWxsIiwiYXJyYXlDb3B5V2l0aGluIiwiJERQIiwiJEdPUEQiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsIkFycmF5UHJvdG8iLCIkQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsIiREYXRhVmlldyIsIkRhdGFWaWV3IiwiYXJyYXlGb3JFYWNoIiwiYXJyYXlGaWx0ZXIiLCJhcnJheVNvbWUiLCJhcnJheUV2ZXJ5IiwiYXJyYXlGaW5kIiwiYXJyYXlGaW5kSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiYXJyYXlJbmRleE9mIiwiYXJyYXlWYWx1ZXMiLCJ2YWx1ZXMiLCJhcnJheUtleXMiLCJrZXlzIiwiYXJyYXlFbnRyaWVzIiwiZW50cmllcyIsImFycmF5TGFzdEluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFycmF5UmVkdWNlIiwicmVkdWNlIiwiYXJyYXlSZWR1Y2VSaWdodCIsInJlZHVjZVJpZ2h0IiwiYXJyYXlKb2luIiwiYXJyYXlTb3J0Iiwic29ydCIsImFycmF5U2xpY2UiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlUb0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiSVRFUkFUT1IiLCJUQUciLCJUWVBFRF9DT05TVFJVQ1RPUiIsIkRFRl9DT05TVFJVQ1RPUiIsIkFMTF9DT05TVFJVQ1RPUlMiLCJDT05TVFIiLCJUWVBFRF9BUlJBWSIsIlRZUEVEIiwiVklFVyIsIiRtYXAiLCJhbGxvY2F0ZSIsIkxJVFRMRV9FTkRJQU4iLCJVaW50MTZBcnJheSIsImJ1ZmZlciIsIkZPUkNFRF9TRVQiLCJ0b09mZnNldCIsIkJZVEVTIiwib2Zmc2V0IiwidmFsaWRhdGUiLCJDIiwic3BlY2llc0Zyb21MaXN0IiwiZnJvbUxpc3QiLCJhZGRHZXR0ZXIiLCJpbnRlcm5hbCIsIl9kIiwiJGZyb20iLCJzdGVwIiwiaXRlcmF0b3IiLCJhTGVuIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlckZuIiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJldmVyeSIsImZpbGwiLCJmaW5kIiwicHJlZGljYXRlIiwiZmluZEluZGV4IiwiZm9yRWFjaCIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsIm1pZGRsZSIsInNvbWUiLCJjb21wYXJlZm4iLCJzdWJhcnJheSIsImJlZ2luIiwiJGJlZ2luIiwiYnl0ZU9mZnNldCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiJHNsaWNlIiwiJHNldCIsImFycmF5TGlrZSIsInNyYyIsImxlbiIsIiRpdGVyYXRvcnMiLCJpc1RBSW5kZXgiLCIkZ2V0RGVzYyIsIiRzZXREZXNjIiwiZGVzYyIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiJFR5cGVkQXJyYXlQcm90b3R5cGUkIiwid3JhcHBlciIsIkNMQU1QRUQiLCJHRVRURVIiLCJTRVRURVIiLCJUeXBlZEFycmF5IiwiQmFzZSIsIlRBQyIsIkZPUkNFRCIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50Iiwic2V0dGVyIiwiJG9mZnNldCIsIiRsZW5ndGgiLCJieXRlTGVuZ3RoIiwia2xhc3MiLCIkbGVuIiwiaXRlciIsIiRuYXRpdmVJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwiJGl0ZXJhdG9yIiwib2YiLCJ2YWx1ZU9mIiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiYml0bWFwIiwicHgiLCJyYW5kb20iLCIka2V5cyIsImVudW1CdWdLZXlzIiwibWF4IiwiZFBzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiUHJvcGVydGllcyIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiT2JqZWN0UHJvdG8iLCJVTlNDT1BBQkxFUyIsIl90IiwiZGVmIiwic3RhdCIsInNwYWNlcyIsInNwYWNlIiwibHRyaW0iLCJSZWdFeHAiLCJydHJpbSIsImV4cG9ydGVyIiwiQUxJQVMiLCJGT1JDRSIsInRyaW0iLCJERVNDUklQVE9SUyIsIlNQRUNJRVMiLCJDb25zdHJ1Y3RvciIsImZvcmJpZGRlbkZpZWxkIiwiY29mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJBUkciLCJUIiwidHJ5R2V0IiwiY2FsbGVlIiwiRCIsImNvcHlyaWdodCIsIklTX0lOQ0xVREVTIiwiZWwiLCJmcm9tSW5kZXgiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwiYXJyIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCJidWlsdGluRXhlYyIsInJlZ2V4cEV4ZWMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsInJlIiwiZ3JvdXBzIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsImZucyIsIm5hdGl2ZU1ldGhvZCIsInJlZ2V4cCIsInN0ciIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmZuIiwicnhmbiIsIkJSRUFLIiwiUkVUVVJOIiwiaXRlcmFibGUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJmb3JPZiIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJjbGVhciIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwiaXMiLCJjcmVhdGVFbGVtZW50Iiwic2hhcmVkIiwiZG9jdW1lbnRFbGVtZW50Iiwic2V0UHJvdG90eXBlT2YiLCJidWdneSIsIl9fcHJvdG9fXyIsImNvdW50IiwiSW5maW5pdHkiLCJzaWduIiwieCIsIiRleHBtMSIsImV4cG0xIiwiVE9fU1RSSU5HIiwicG9zIiwiY2hhckNvZGVBdCIsIiRpdGVyQ3JlYXRlIiwiQlVHR1kiLCJyZXR1cm5UaGlzIiwiREVGQVVMVCIsIklTX1NFVCIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0TWV0aG9kIiwia2luZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiaXNSZWdFeHAiLCJzZWFyY2hTdHJpbmciLCJNQVRDSCIsIiRkZWZpbmVQcm9wZXJ0eSIsImdldEl0ZXJhdG9yTWV0aG9kIiwiZW5kUG9zIiwiYWRkVG9VbnNjb3BhYmxlcyIsIml0ZXJhdGVkIiwiX2kiLCJfayIsIkFyZ3VtZW50cyIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwibmF0aXZlRXhlYyIsIm5hdGl2ZVJlcGxhY2UiLCJwYXRjaGVkRXhlYyIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsIk5QQ0dfSU5DTFVERUQiLCJsYXN0SW5kZXgiLCJyZUNvcHkiLCJhdCIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJpbnZva2UiLCJodG1sIiwiY2VsIiwicHJvY2VzcyIsInNldFRhc2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhclRhc2siLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJydW4iLCJldmVudCIsImFyZ3MiLCJuZXh0VGljayIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJyZW1vdmVDaGlsZCIsIlBST1RPVFlQRSIsIldST05HX0lOREVYIiwiQmFzZUJ1ZmZlciIsImFicyIsIkxOMiIsIiRCVUZGRVIiLCIkTEVOR1RIIiwiJE9GRlNFVCIsInBhY2tJRUVFNzU0IiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJydCIsInVucGFja0lFRUU3NTQiLCJuQml0cyIsIk5hTiIsInVucGFja0kzMiIsImJ5dGVzIiwicGFja0k4IiwicGFja0kxNiIsInBhY2tJMzIiLCJwYWNrRjY0IiwicGFja0YzMiIsInZpZXciLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4IiwiX2IiLCJwYWNrIiwiY29udmVyc2lvbiIsIkFycmF5QnVmZmVyUHJvdG8iLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsIndrc0V4dCIsIiRTeW1ib2wiLCJnZXRLZXlzIiwiZGVmaW5lUHJvcGVydGllcyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJnT1BTIiwiJGFzc2lnbiIsImFzc2lnbiIsIkEiLCJLIiwiayIsImdldFN5bWJvbHMiLCJpc0VudW0iLCJ5IiwiZmFjdG9yaWVzIiwiY29uc3RydWN0IiwicGFydEFyZ3MiLCJib3VuZCIsInVuIiwiJHBhcnNlSW50IiwiJHRyaW0iLCJ3cyIsImhleCIsInJhZGl4IiwiJHBhcnNlRmxvYXQiLCJtc2ciLCJpc0Zpbml0ZSIsImxvZzFwIiwiZGVzY3JpcHRvciIsInJldCIsIm9yaWdpbmFsIiwibWVtbyIsImlzUmlnaHQiLCJpbmMiLCJmb3JjZWQiLCJmbGFncyIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwidGFzayIsIm1pY3JvdGFzayIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInByb21pc2VSZXNvbHZlIiwidmVyc2lvbnMiLCJ2OCIsIiRQcm9taXNlIiwiaXNOb2RlIiwiZW1wdHkiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsIlVTRV9OQVRJVkUiLCJwcm9taXNlIiwicmVzb2x2ZSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwidGhlbiIsImlzVGhlbmFibGUiLCJub3RpZnkiLCJpc1JlamVjdCIsIl9uIiwiY2hhaW4iLCJfYyIsIl92Iiwib2siLCJfcyIsInJlYWN0aW9uIiwiZXhpdGVkIiwiaGFuZGxlciIsImZhaWwiLCJyZWplY3QiLCJkb21haW4iLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwiZW50ZXIiLCJleGl0Iiwib25VbmhhbmRsZWQiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsImVycm9yIiwiX2EiLCJvbnJlamVjdGlvbmhhbmRsZWQiLCIkcmVqZWN0IiwiX3ciLCIkcmVzb2x2ZSIsImV4ZWN1dG9yIiwiZXJyIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiUHJvbWlzZSIsImNhcGFiaWxpdHkiLCIkJHJlamVjdCIsInJlbWFpbmluZyIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCIkJHJlc29sdmUiLCJwcm9taXNlQ2FwYWJpbGl0eSIsIiRpdGVyRGVmaW5lIiwiU0laRSIsImdldEVudHJ5IiwiZW50cnkiLCJfZiIsIl9sIiwicHJldiIsIiRoYXMiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsInVmc3RvcmUiLCJudW1iZXIiLCJSZWZsZWN0Iiwib3duS2V5cyIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJsZWZ0Iiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJpc0VudHJpZXMiLCIkZmFpbHMiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUFMiLCIkSlNPTiIsIkpTT04iLCJfc3RyaW5naWZ5Iiwic3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiUU9iamVjdCIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJ3cmFwIiwic3ltIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsInN5bWJvbHMiLCIkZ2V0UHJvdG90eXBlT2YiLCIkZnJlZXplIiwiJHNlYWwiLCIkcHJldmVudEV4dGVuc2lvbnMiLCIkaXNGcm96ZW4iLCIkaXNTZWFsZWQiLCIkaXNFeHRlbnNpYmxlIiwiRlByb3RvIiwibmFtZVJFIiwiSEFTX0lOU1RBTkNFIiwiRnVuY3Rpb25Qcm90byIsIiROdW1iZXIiLCJCUk9LRU5fQ09GIiwiVFJJTSIsInRvTnVtYmVyIiwiYXJndW1lbnQiLCJ0aGlyZCIsIm1heENvZGUiLCJjb2RlIiwiZGlnaXRzIiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJ4MiIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiRVBTSUxPTiIsIl9pc0Zpbml0ZSIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk1BWF9WQUxVRSIsIiRhc2luaCIsImFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJjYnJ0IiwiY2x6MzIiLCJMT0cyRSIsImNvc2giLCJmcm91bmQiLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiJGFicyIsIiRzaWduIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJsYXJnIiwiJGltdWwiLCJpbXVsIiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwidGFuaCIsInRydW5jIiwiZnJvbUNoYXJDb2RlIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwiY2FsbFNpdGUiLCJ0cGwiLCIkYXQiLCJwb2ludCIsImNvZGVQb2ludEF0IiwiY29udGV4dCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJzZWFyY2giLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJzaXplIiwidXJsIiwidG9KU09OIiwidG9JU09TdHJpbmciLCJwdiIsIiR0b0lTT1N0cmluZyIsImx6IiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiRGF0ZVByb3RvIiwiaGludCIsImNyZWF0ZVByb3BlcnR5IiwidXBUbyIsImNsb25lZCIsIiRzb3J0IiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkZmlsdGVyIiwiJHNvbWUiLCIkZXZlcnkiLCIkcmVkdWNlIiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiJGZpbmQiLCIkZmxhZ3MiLCIkUmVnRXhwIiwiQ09SUkVDVF9ORVciLCJ0aVJFIiwicGlSRSIsImZpVSIsInByb3h5IiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIiRtYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsInJ4IiwiZnVsbFVuaWNvZGUiLCJtYXRjaFN0ciIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsImZ1bmN0aW9uYWxSZXBsYWNlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VyQXJncyIsInJlcGxhY2VtZW50IiwiZ2V0U3Vic3RpdHV0aW9uIiwidGFpbFBvcyIsImNoIiwiY2FwdHVyZSIsInNhbWVWYWx1ZSIsIlNFQVJDSCIsIiRzZWFyY2giLCJwcmV2aW91c0xhc3RJbmRleCIsImNhbGxSZWdFeHBFeGVjIiwiJG1pbiIsIiRwdXNoIiwiU1VQUE9SVFNfWSIsIlNQTElUIiwiJHNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbWl0IiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwibGltIiwicSIsIm1hY3JvdGFzayIsIk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJoZWFkIiwiZmx1c2giLCJwYXJlbnQiLCJzdGFuZGFsb25lIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJzdHJvbmciLCJJbnRlcm5hbE1hcCIsImVhY2giLCJ3ZWFrIiwiTkFUSVZFX1dFQUtfTUFQIiwiSVNfSUUxMSIsIkFjdGl2ZVhPYmplY3QiLCIkV2Vha01hcCIsIiRpc1ZpZXciLCJpc1ZpZXciLCJmaW4iLCJ2aWV3UyIsInZpZXdUIiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwicHJvcGVydHlLZXkiLCJhdHRyaWJ1dGVzIiwiZGVsZXRlUHJvcGVydHkiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCJyZWNlaXZlciIsImdldFByb3RvIiwiViIsImV4aXN0aW5nRGVzY3JpcHRvciIsIm93bkRlc2MiLCJzZXRQcm90byIsIiRpbmNsdWRlcyIsImZsYXRNYXAiLCJmbGF0dGVuSW50b0FycmF5IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwic291cmNlTGVuIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJkZXB0aCIsIm1hcHBlciIsInRoaXNBcmciLCJlbGVtZW50Iiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsInBhZFN0YXJ0IiwiJHBhZCIsIldFQktJVF9CVUciLCJwYWRFbmQiLCJ0cmltTGVmdCIsInRyaW1SaWdodCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiJHZhbHVlcyIsIm9uRmluYWxseSIsIk1TSUUiLCJib3VuZEFyZ3MiLCJzZXRJbnRlcnZhbCIsIiR0YXNrIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsInJ1bnRpbWUiLCJPcCIsImhhc093biIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJFcnJvciIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwidHJ5Q2F0Y2giLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiX19hd2FpdCIsInVud3JhcHBlZCIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmF0b3JNZXRob2QiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJza2lwVGVtcFJlc2V0Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJvcmlnaW5hbE1vZHVsZSIsIndlYnBhY2tQb2x5ZmlsbCIsImNoaWxkcmVuIiwiRWxlbWVudFByb3RvdHlwZSIsIkVsZW1lbnQiLCJtYXRjaGVzIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJlbGVtZW50cyIsIm93bmVyRG9jdW1lbnQiLCJCb29sZWFuIiwiY2xvc2VzdCIsInBhcmVudE5vZGUiLCJfYXBwbHlDeWNsZSIsImFsdCIsImN5Y2xlIiwiX2Rpc3RyaWJ1dGUiLCJiYXNlIiwiY2FjaGUiLCJpc0Zyb21LZXl3b3JkIiwiYXhpcyIsImNlbnRlciIsIm9yaWdpblgiLCJvcmlnaW5ZIiwiZGlzdGFuY2VzIiwiZ3JpZCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImFtb3VudCIsIlR3ZWVuTWF4IiwiX2N5Y2xlIiwiX3lveW8iLCJfcmVwZWF0IiwiX3JlcGVhdERlbGF5IiwiVHdlZW5MaXRlSW50ZXJuYWxzIiwiX2JsYW5rQXJyYXkiLCJkaXN0cmlidXRlIiwiX3lveW9FYXNlIiwidXBkYXRlVG8iLCJyZXNldER1cmF0aW9uIiwiY3VyUmF0aW8iLCJlbmRWYWx1ZSIsImludiIsImN5Y2xlRHVyYXRpb24iLCJ0b3RhbER1ciIsInByZXZUb3RhbFRpbWUiLCJwcmV2Q3ljbGUiLCJzdGFnZ2VyVG8iLCJhbGxUbyIsIm9uQ29tcGxldGVBbGwiLCJvbkNvbXBsZXRlQWxsUGFyYW1zIiwib25Db21wbGV0ZUFsbFNjb3BlIiwic3RhZ2dlckZ1bmMiLCJmcm9tQ3ljbGUiLCJzdGFnZ2VyRnJvbSIsImFsbEZyb20iLCJzdGFnZ2VyRnJvbVRvIiwiYWxsRnJvbVRvIiwiaXNUd2VlbmluZyIsIl9nZXRDaGlsZHJlbk9mIiwiaW5jbHVkZVRpbWVsaW5lcyIsImNudCIsImdldEFsbFR3ZWVucyIsImtpbGxBbGwiLCJkZWxheWVkQ2FsbHMiLCJ0aW1lbGluZXMiLCJpc0RDIiwiYWxsVHJ1ZSIsImtpbGxDaGlsZFR3ZWVuc09mIiwiY3VyUGFyZW50IiwiX2NoYW5nZVBhdXNlIiwicGF1c2VBbGwiLCJyZXN1bWVBbGwiLCJnbG9iYWxUaW1lU2NhbGUiLCJjeWNsZUR1ciIsIl9oYXNQcmlvcml0eSIsIl9zdWZmaXhNYXAiLCJfY3MiLCJDU1NQbHVnaW4iLCJfc3BlY2lhbFByb3BzIiwiZGVmYXVsdFRyYW5zZm9ybVBlcnNwZWN0aXZlIiwiZGVmYXVsdFNrZXdUeXBlIiwiZGVmYXVsdFNtb290aE9yaWdpbiIsInN1ZmZpeE1hcCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwid2lkdGgiLCJoZWlnaHQiLCJmb250U2l6ZSIsInBhZGRpbmciLCJtYXJnaW4iLCJwZXJzcGVjdGl2ZSIsImxpbmVIZWlnaHQiLCJfYXV0b1JvdW5kIiwiX3JlcVNhZmFyaUZpeCIsIl9pc1NhZmFyaSIsIl9pc0ZpcmVmb3giLCJfaXNTYWZhcmlMVDYiLCJfaWVWZXJzIiwiX2luZGV4IiwiX251bUV4cCIsIl9yZWxOdW1FeHAiLCJfdmFsdWVzRXhwIiwiX3ZhbHVlc0V4cFdpdGhDb21tYXMiLCJfTmFORXhwIiwiX3N1ZmZpeEV4cCIsIl9vcGFjaXR5RXhwIiwiX29wYWNpdHlWYWxFeHAiLCJfYWxwaGFGaWx0ZXJFeHAiLCJfcmdiaHNsRXhwIiwiX2NhcHNFeHAiLCJfY2FtZWxFeHAiLCJfdXJsRXhwIiwiX2NhbWVsRnVuYyIsImciLCJfaG9yaXpFeHAiLCJfaWVHZXRNYXRyaXhFeHAiLCJfaWVTZXRNYXRyaXhFeHAiLCJfY29tbWFzT3V0c2lkZVBhcmVuRXhwIiwiX2NvbXBsZXhFeHAiLCJfREVHMlJBRCIsIlBJIiwiX1JBRDJERUciLCJfZm9yY2VQVCIsIl9kdW1teUVsZW1lbnQiLCJfY3JlYXRlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnROUyIsIl90ZW1wRGl2IiwiX3RlbXBJbWciLCJfYWdlbnQiLCJfc3VwcG9ydHNPcGFjaXR5IiwiJDEiLCJjc3NUZXh0Iiwib3BhY2l0eSIsIl9nZXRJRU9wYWNpdHkiLCJjdXJyZW50U3R5bGUiLCJfbG9nIiwiX3ByZWZpeENTUyIsIl9wcmVmaXgiLCJfY2hlY2tQcm9wUHJlZml4IiwiX2NvbXB1dGVkU3R5bGVTY29wZSIsImRlZmF1bHRWaWV3IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIl9nZXRDb21wdXRlZFN0eWxlIiwiX2dldFN0eWxlIiwiZ2V0U3R5bGUiLCJjcyIsImNhbGMiLCJkZmx0IiwicnYiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiX2NvbnZlcnRUb1BpeGVscyIsImNvbnZlcnRUb1BpeGVscyIsInNmeCIsInJlY3Vyc2UiLCJwaXgiLCJob3JpeiIsIm5lZyIsInByZWNpc2UiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImJvZHkiLCJfZ3NDYWNoZSIsImNhY2hlV2lkdGhzIiwiX2NhbGN1bGF0ZU9mZnNldCIsImNhbGN1bGF0ZU9mZnNldCIsImRpbSIsIl9nZXRBbGxTdHlsZXMiLCJ0ciIsIl90cmFuc2Zvcm1Qcm9wQ1NTIiwiX3RyYW5zZm9ybVByb3AiLCJfZ2V0VHJhbnNmb3JtIiwicm90YXRpb24iLCJza2V3WCIsInNjYWxlWCIsInNjYWxlWSIsIl9zdXBwb3J0czNEIiwicm90YXRpb25YIiwicm90YXRpb25ZIiwic2NhbGVaIiwiZmlsdGVycyIsIl9jc3NEaWYiLCJzMSIsInMyIiwiZm9yY2VMb29rdXAiLCJtcHQiLCJkaWZzIiwiTWluaVByb3BUd2VlbiIsImZpcnN0TVBUIiwiX2RpbWVuc2lvbnMiLCJfbWFyZ2lucyIsIl9nZXREaW1lbnNpb24iLCJub2RlTmFtZSIsImdldENUTSIsIl9pc1NWRyIsImdldEJCb3giLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsIl9wYXJzZVBvc2l0aW9uIiwicmVjT2JqIiwib3hwIiwib3lwIiwib3hyIiwib3lyIiwib3giLCJveSIsIl9wYXJzZUNoYW5nZSIsIl9wYXJzZVZhbCIsIl9wYXJzZUFuZ2xlIiwiZGlyZWN0aW9uYWxFbmQiLCJkaWYiLCJjYXAiLCJfY29sb3JMb29rdXAiLCJhcXVhIiwibGltZSIsInNpbHZlciIsImJsYWNrIiwibWFyb29uIiwidGVhbCIsImJsdWUiLCJuYXZ5Iiwid2hpdGUiLCJmdWNoc2lhIiwib2xpdmUiLCJ5ZWxsb3ciLCJvcmFuZ2UiLCJncmF5IiwicHVycGxlIiwiZ3JlZW4iLCJyZWQiLCJwaW5rIiwiY3lhbiIsInRyYW5zcGFyZW50IiwiX2h1ZSIsImgiLCJtMSIsIm0yIiwiX3BhcnNlQ29sb3IiLCJwYXJzZUNvbG9yIiwidG9IU0wiLCJ3YXNIU0wiLCJfZm9ybWF0Q29sb3JzIiwidGVtcCIsImNvbG9ycyIsIl9jb2xvckV4cCIsInBhcnNlZCIsImNvbG9yU3RyaW5nRmlsdGVyIiwiY29tYmluZWQiLCJfZ2V0Rm9ybWF0dGVyIiwiY2xyIiwiY29sbGFwc2libGUiLCJtdWx0aSIsImZvcm1hdHRlciIsImRDb2xvciIsImRWYWxzIiwicGZ4IiwiZGVsaW0iLCJudW1WYWxzIiwiZFNmeCIsInZhbHMiLCJfZ2V0RWRnZVBhcnNlciIsImNzc3AiLCJwYXJzZSIsIl9zZXRQbHVnaW5SYXRpbyIsImF1dG9Sb3RhdGUiLCJ4czAiLCJ4czEiLCJDU1NQcm9wVHdlZW4iLCJfcGFyc2VUb1Byb3h5Iiwic2hhbGxvdyIsInhwIiwiYnB0IiwidHJhbnNmb3JtIiwiX3RyYW5zZm9ybSIsIm9sZEZvcmNlIiwicnhwIiwiX2FkZE5vblR3ZWVuaW5nTnVtZXJpY1BUIiwiX3BhcnNlQ29tcGxleCIsInBhcnNlQ29tcGxleCIsImNscnMiLCJ4aSIsIm5pIiwiYnYiLCJldiIsImJudW1zIiwiZW51bXMiLCJibiIsImhhc0FscGhhIiwiY3YiLCJ1c2VIU0wiLCJiYSIsImVhIiwiYXV0b1JvdW5kIiwiYXBwZW5kWHRyYSIsInhmaXJzdCIsInBhZCIsIlNwZWNpYWxQcm9wIiwib3B0aW9ucyIsInByZWZpeCIsImZvcm1hdCIsImRlZmF1bHRWYWx1ZSIsInBhcnNlciIsImtleXdvcmQiLCJhbGxvd0Z1bmMiLCJfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AiLCJkZWZhdWx0cyIsIl9yZWdpc3RlclBsdWdpblByb3AiLCJwbHVnaW5OYW1lIiwicGx1Z2luQ2xhc3MiLCJfY3NzUmVnaXN0ZXIiLCJiaSIsImVpIiwia3dkIiwicmVnaXN0ZXJTcGVjaWFsUHJvcCIsIm9uSW5pdFR3ZWVuIiwidXNlU1ZHVHJhbnNmb3JtQXR0ciIsIl91c2VTVkdUcmFuc2Zvcm1BdHRyIiwic3ZnIiwicmVjdCIsIl90cmFuc2Zvcm1Qcm9wcyIsIl90cmFuc2Zvcm1PcmlnaW5Qcm9wIiwiVHJhbnNmb3JtIiwiZm9yY2UzRCIsImRlZmF1bHRGb3JjZTNEIiwiX1NWR0VsZW1lbnQiLCJTVkdFbGVtZW50IiwiX2NyZWF0ZVNWRyIsImNvbnRhaW5lciIsInJlZyIsInNldEF0dHJpYnV0ZU5TIiwiX2RvY0VsZW1lbnQiLCJfZm9yY2VTVkdUcmFuc2Zvcm1BdHRyIiwiY2hyb21lIiwiX3BhcnNlU1ZHT3JpZ2luIiwibG9jYWwiLCJkZWNvcmF0ZWUiLCJhYnNvbHV0ZSIsInNtb290aE9yaWdpbiIsInNraXBSZWNvcmQiLCJ4T3JpZ2luIiwieU9yaWdpbiIsInR4IiwidHkiLCJkZXRlcm1pbmFudCIsInhPcmlnaW5PbGQiLCJ5T3JpZ2luT2xkIiwidG0iLCJfZ3NUcmFuc2Zvcm0iLCJfZ2V0TWF0cml4IiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwiX2lkZW50aXR5MkRNYXRyaXgiLCJ4T2Zmc2V0IiwieU9mZnNldCIsInNldEF0dHJpYnV0ZSIsIl9nZXRCQm94SGFjayIsInN3YXBJZlBvc3NpYmxlIiwiYmJveCIsIm93bmVyU1ZHRWxlbWVudCIsIm9sZFBhcmVudCIsIm9sZFNpYmxpbmciLCJuZXh0U2libGluZyIsIm9sZENTUyIsIl9vcmlnaW5hbEdldEJCb3giLCJpbnNlcnRCZWZvcmUiLCJfZ2V0QkJveCIsImZvcmNlMkQiLCJpc0RlZmF1bHQiLCJkZWMiLCJvZmZzZXRQYXJlbnQiLCJfcmVtb3ZlUHJvcCIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsIm1hdHJpeCIsImdldFRyYW5zZm9ybSIsInJlYyIsImludlgiLCJ6T3JpZ2luIiwidDEiLCJ0MiIsInQzIiwiY29zIiwic2luIiwiYTExIiwiYTIxIiwiYTMxIiwiYTQxIiwiYTEyIiwiYTIyIiwiYTMyIiwiYTQyIiwiYTEzIiwiYTIzIiwiYTMzIiwiYTE0IiwiYTI0IiwiYTM0IiwiYTQzIiwiYW5nbGUiLCJhdGFuMiIsInNrZXdUeXBlIiwicmVtb3ZlQXR0cmlidXRlIiwiX3NldElFVHJhbnNmb3JtUmF0aW8iLCJhbmciLCJza2V3IiwiZHgiLCJkeSIsImNsaXAiLCJ4UGVyY2VudCIsInlQZXJjZW50IiwibWFyZyIsIm11bHQiLCJpZU9mZnNldFgiLCJpZU9mZnNldFkiLCJfc2V0VHJhbnNmb3JtUmF0aW8iLCJzZXQzRFRyYW5zZm9ybVJhdGlvIiwic2V0VHJhbnNmb3JtUmF0aW8iLCJzeCIsInN5Iiwic3oiLCJpc1NWRyIsInNrZXdZIiwidGFuIiwicGFyc2luZ1Byb3AiLCJfbGFzdFBhcnNlZFRyYW5zZm9ybSIsInNjYWxlRnVuYyIsInNjYWxlIiwiaGFzM0QiLCJoYXNDaGFuZ2UiLCJkciIsIm9yaWdpbmFsR1NUcmFuc2Zvcm0iLCJlbmRSb3RhdGlvbnMiLCJwYXJzZVRyYW5zZm9ybSIsIm9yaWciLCJyb3RhdGlvbloiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJzdmdPcmlnaW4iLCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZSIsImRpcmVjdGlvbmFsUm90YXRpb24iLCJzaG9ydFJvdGF0aW9uIiwic2hvcnRSb3RhdGlvblgiLCJzaG9ydFJvdGF0aW9uWSIsIl90cmFuc2Zvcm1UeXBlIiwiZWExIiwiZXMyIiwiYnMyIiwiYnMiLCJlcyIsImVuIiwiZXNmeCIsImJzZngiLCJyZWwiLCJobiIsInZuIiwiZW0iLCJwY3QiLCJicCIsImJhY2tncm91bmRQb3NpdGlvblgiLCJiYWNrZ3JvdW5kUG9zaXRpb25ZIiwiY2xpcFRvcCIsImNsaXBSaWdodCIsImNsaXBCb3R0b20iLCJjbGlwTGVmdCIsImJ3IiwiX3NldElFT3BhY2l0eVJhdGlvIiwic2tpcCIsInhuMSIsImlzQXV0b0FscGhhIiwiem9vbSIsInJlbW92ZVByb3BlcnR5IiwiX3NldENsYXNzTmFtZVJhdGlvIiwiX2dzQ2xhc3NQVCIsImRpZkRhdGEiLCJjbnB0IiwiY25wdExvb2t1cCIsIl9jbGFzc05hbWVQVCIsIl9zZXRDbGVhclByb3BzUmF0aW8iLCJjbGVhclRyYW5zZm9ybSIsInRyYW5zZm9ybVBhcnNlIiwiX3ZhcnMiLCJ6SW5kZXgiLCJ0cHQiLCJ0aHJlZUQiLCJfYWRkTGF6eVNldCIsImNsYXNzTmFtZSIsIldlYmtpdEJhY2tmYWNlVmlzaWJpbGl0eSIsIl9saW5rQ1NTUCIsInNwIiwiaXNTdHIiLCJzdHJpY3RVbml0cyIsInhzMiIsInhuMiIsInhzMyIsInhuMyIsInhzNCIsInhuNCIsInhzNSIsIl9lbmFibGVUcmFuc2Zvcm1zIiwibGF6eVNldCIsInJlbW92ZSIsImF1dG9BbHBoYSIsImFscGhhIiwidmlzaWJpbGl0eSIsIl9nZXRDaGlsZFN0eWxlcyIsImNoaWxkTm9kZXMiLCJjYXNjYWRlVG8iLCJBdHRyUGx1Z2luIiwiUm91bmRQcm9wc1BsdWdpbiIsIl9nZXRSb3VuZEZ1bmMiLCJfcm91bmRMaW5rZWRMaXN0IiwicnAiLCJyb3VuZFByb3BzIiwicnB0IiwiX2FkZCIsIkRpcmVjdGlvbmFsUm90YXRpb25QbHVnaW4iLCJmaW5hbHMiLCJ1c2VSYWRpYW5zIiwiVGltZWxpbmVMaXRlIiwiX2xhYmVscyIsIl9jb3B5IiwiX3BhdXNlQ2FsbGJhY2siLCJwYXVzZUNhbGxiYWNrIiwiX2RlZmF1bHRJbW1lZGlhdGVSZW5kZXIiLCJkZWZhdWx0RmFsc2UiLCJpciIsIl9mb3JjaW5nUGxheWhlYWQiLCJfaGFzUGF1c2UiLCJFbmdpbmUiLCJleHBvcnRSb290IiwiaWdub3JlRGVsYXllZENhbGxzIiwiaGFzTmVnYXRpdmVTdGFydCIsImN1clRpbWUiLCJiZWZvcmVSYXdUaW1lIiwiX3BhcnNlVGltZU9yTGFiZWwiLCJhZGRMYWJlbCIsInJlbW92ZUxhYmVsIiwiYXBwZW5kIiwib2Zmc2V0T3JMYWJlbCIsImluc2VydE11bHRpcGxlIiwiYXBwZW5kTXVsdGlwbGUiLCJsYWJlbCIsImFkZFBhdXNlIiwiZ2V0TGFiZWxUaW1lIiwidGltZU9yTGFiZWwiLCJhcHBlbmRJZkFic2VudCIsImlnbm9yZSIsImNsaXBwZWREdXJhdGlvbiIsInJlY2VudCIsImdvdG9BbmRQbGF5IiwiZ290b0FuZFN0b3AiLCJpbnRlcm5hbEZvcmNlIiwicGF1c2VUd2VlbiIsInByZXZTdGFydCIsInByZXZUaW1lU2NhbGUiLCJwcmV2UGF1c2VkIiwiX2hhc1BhdXNlZENoaWxkIiwiZ2V0Q2hpbGRyZW4iLCJuZXN0ZWQiLCJpZ25vcmVCZWZvcmVUaW1lIiwiZGlzYWJsZWQiLCJfY29udGFpbnMiLCJzaGlmdENoaWxkcmVuIiwiYWRqdXN0TGFiZWxzIiwibGFiZWxzIiwiX2NhbGN1bGF0aW5nRHVyYXRpb24iLCJ1c2VzRnJhbWVzIiwid3JhcFJlcGVhdHMiLCJUaW1lbGluZU1heCIsIl9lYXNlTm9uZSIsImFkZENhbGxiYWNrIiwicmVtb3ZlQ2FsbGJhY2siLCJyZW1vdmVQYXVzZSIsInR3ZWVuVG8iLCJpc0Zyb21UbyIsInR3ZWVuRnJvbVRvIiwiZnJvbVBvc2l0aW9uIiwidG9Qb3NpdGlvbiIsIl9sb2NrZWQiLCJiYWNrd2FyZHMiLCJyZWNUb3RhbFRpbWUiLCJyZWNDeWNsZSIsInJlY1Jhd1ByZXZUaW1lIiwicmVjVGltZSIsImdldEFjdGl2ZSIsImdldExhYmVsQWZ0ZXIiLCJnZXRMYWJlbHNBcnJheSIsImdldExhYmVsQmVmb3JlIiwiY3VycmVudExhYmVsIiwiX3IxIiwiX3IyIiwiX3IzIiwiX2NvclByb3BzIiwiU2VnbWVudCIsImRhIiwiY2EiLCJjdWJpY1RvUXVhZHJhdGljIiwicTEiLCJxMiIsInEzIiwicTQiLCJtYWIiLCJtYmMiLCJtY2QiLCJtYWJjIiwibWJjZCIsIm04IiwiX2NhbGN1bGF0ZUNvbnRyb2xQb2ludHMiLCJjdXJ2aW5lc3MiLCJxdWFkIiwiYmFzaWMiLCJjb3JyZWxhdGUiLCJwMiIsInAzIiwic2VnIiwibW0iLCJjcDIiLCJxYiIsImlpIiwiY3AxIiwiX3BhcnNlQW5jaG9ycyIsInByZXBlbmQiLCJ0bXAiLCJiZXppZXJUaHJvdWdoIiwicXVhZHJhdGljIiwidW5zaGlmdCIsIl9hZGRDdWJpY0xlbmd0aHMiLCJzdGVwcyIsInJlc29sdXRpb24iLCJkMSIsImJleiIsIkJlemllclBsdWdpbiIsIl9wcm9wcyIsIl90aW1lUmVzIiwidGltZVJlc29sdXRpb24iLCJpc0Z1bmMiLCJzZWNvbmQiLCJvcmllbnRUb0JlemllciIsIl9hdXRvUm90YXRlIiwiX2JlemllcnMiLCJzb2Z0IiwiX3BhcnNlQmV6aWVyRGF0YSIsIl9zZWdDb3VudCIsImxkIiwibGVuZ3RocyIsInRvdGFsIiwic2VnbWVudHMiLCJjdXJMUyIsIl9wYXJzZUxlbmd0aERhdGEiLCJfbGVuZ3RoIiwiX2xlbmd0aHMiLCJfc2VnbWVudHMiLCJfbDEiLCJfbGkiLCJfczEiLCJfc2kiLCJfbDIiLCJfY3VyU2VnIiwiX3MyIiwiX3ByZWMiLCJfaW5pdGlhbFJvdGF0aW9ucyIsIl9zdGFydFJhdGlvIiwiY3VySW5kZXgiLCJjdXJTZWciLCJ2MSIsIm5vdFN0YXJ0IiwiYjIiLCJ4MSIsInkxIiwieTIiLCJjb252IiwiYXIiLCJxdWFkcmF0aWNUb0N1YmljIiwicGx1Z2luVmFsdWVzIiwiU3RlcHBlZEVhc2UiLCJFeHBvU2NhbGVFYXNlIiwiUm91Z2hFYXNlIiwiX2NyZWF0ZUVsYXN0aWMiLCJfMlBJIiwiX0hBTEZfUEkiLCJfd3JhcCIsIkVhc2VPdXQiLCJFYXNlSW4iLCJFYXNlSW5PdXQiLCJhbGlhc2VzIiwiZWFzZU91dCIsIkVhc2VQb2ludCIsImdhcCIsIl9jcmVhdGVCYWNrIiwib3ZlcnNob290IiwiX3AxIiwiX3AyIiwiQmFjayIsIlNsb3dNbyIsImxpbmVhclJhdGlvIiwieW95b01vZGUiLCJfcCIsIl9wMyIsImltbWVkaWF0ZVN0YXJ0IiwiYnVtcCIsInBudCIsInRhcGVyIiwicG9pbnRzIiwicmFuZG9taXplIiwiY2xhbXAiLCJ0ZW1wbGF0ZSIsInN0cmVuZ3RoIiwiaW52ZXJ0IiwiYW1wbGl0dWRlIiwicGVyaW9kIiwiYXNpbiIsIkVsYXN0aWMiLCJCb3VuY2UiLCJDaXJjIiwiRXhwbyIsIlNpbmUiLCJfYXV0b0FjdGl2YXRlZCIsIkFuaUNvbmZpZyIsImluaXRpYWxEZWxheSIsImRlbGF5U3BlZWQiLCJtb3ZlRGlzdGFuY2UiLCJ6b29tU2NhbGUiLCJpblZpZXdUcmlnZ2VyUGVyY2VudCIsInNwZWVkIiwidGV4dExpbmVEZWxheVNwZWVkIiwidGV4dExpbmVZT2Zmc2V0IiwiSGVscGVycyIsImF0dCIsImlzSW5WaWV3cG9ydCIsImVsZW0iLCJpbm5lckhlaWdodCIsInNjcm9sbFkiLCJib3VuZGluZyIsIndyYXBMaW5lcyIsIiRjb250YWluZXIiLCJ3b3JkcyIsImlubmVyVGV4dCIsInBhcnNlZFdvcmRzIiwid29yZCIsImh5cGhlbmF0ZWRXb3JkcyIsImh3Iiwid29yZFVwZGF0ZWQiLCJzcGFjaW5nIiwiaW5uZXJIVE1MIiwib2Zmc2V0VG9wIiwiQW5pRWxlbWVudCIsInByZXNldCIsImNvbXBsZXRlSGFuZGxlciIsIm1vdmVtZW50IiwiRWFzZUxvb2t1cCIsImFwcGVhclRpbWVvdXQiLCJtb3Rpb25zIiwibW90aW9uTmFtZSIsInNoaWZ0Iiwib3B0aW9uIiwid2lwZSIsImFkZENsYXNzIiwidGV4dCIsImZhZGUiLCJhcHBlYXIiLCJkaXJlY3Rpb24iLCJzdGFydFByb3BzIiwiY2xlYXJQcm9wcyIsImNsaXBQYXRoIiwiZW5kUHJvcHMiLCJwYXJlbnRFbGVtZW50Iiwib3ZlcmZsb3ciLCJvcmlnaW5hbENvbnRlbnQiLCJsaW5lcyIsInN0YXJ0aW5nRGVsYXkiLCJpdGVtIiwic3RhcnRpbmdPcGFjaXR5IiwiJGdyb3VwIiwicXVlcnlTZWxlY3RvciIsInBhdGhzIiwid2Via2l0Q2xpcFBhdGgiLCJjbGFzc0xpc3QiLCJBbmlHcm91cEFjdGlvbnMiLCJ0cmFuc2l0aW9uIiwiY29tcGxldGVDb3VudCIsIkFuaW1hdGlvbkdyb3VwIiwib2Zmc2V0UGVyY2VudGFnZSIsImltYWdlcyIsImltYWdlTG9hZGVkQ291bnQiLCJoYXNBcHBlYXJlZCIsImZpbHRlcmVkQ2hpbGRyZW4iLCJvcmRlciIsIm9uQXBwZWFyIiwibG9hZEFzc2V0cyIsImltZyIsImltYWdlTG9hZEhhbmRsZXIiLCJBbmkiLCJ1cGRhdGUiLCJlbHMiLCJwb2x5ZmlsbCJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFBWEMsT0FDeENBLE9BQU9ELFFBQVVELElBQ1EsbUJBQVhHLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxhQUFjLEdBQUlILEdBQ0MsaUJBQVpDLFFBQ2RBLFFBQVEsY0FBZ0JELElBRXhCRCxFQUFLLGNBQWdCQyxJQVJ2QixDQVNtQixvQkFBVEssS0FBdUJBLEtBQU9DLE1BQU0sV0FDOUMsTyxZQ1RFLElBQUlDLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVSLFFBR25DLElBQUlDLEVBQVNLLEVBQWlCRSxHQUFZLENBQ3pDQyxFQUFHRCxFQUNIRSxHQUFHLEVBQ0hWLFFBQVMsSUFVVixPQU5BVyxFQUFRSCxHQUFVSSxLQUFLWCxFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTTyxHQUcvRE4sRUFBT1MsR0FBSSxFQUdKVCxFQUFPRCxRQTBEZixPQXJEQU8sRUFBb0JNLEVBQUlGLEVBR3hCSixFQUFvQk8sRUFBSVIsRUFHeEJDLEVBQW9CUSxFQUFJLFNBQVNmLEVBQVNnQixFQUFNQyxHQUMzQ1YsRUFBb0JXLEVBQUVsQixFQUFTZ0IsSUFDbENHLE9BQU9DLGVBQWVwQixFQUFTZ0IsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFVixFQUFvQmdCLEVBQUksU0FBU3ZCLEdBQ1gsb0JBQVh3QixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWVwQixFQUFTd0IsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlcEIsRUFBUyxhQUFjLENBQUUwQixPQUFPLEtBUXZEbkIsRUFBb0JvQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUW5CLEVBQW9CbUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkF4QixFQUFvQmdCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPbkIsRUFBb0JRLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ2QixFQUFvQjJCLEVBQUksU0FBU2pDLEdBQ2hDLElBQUlnQixFQUFTaEIsR0FBVUEsRUFBTzRCLFdBQzdCLFdBQXdCLE9BQU81QixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBTSxFQUFvQlEsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlYsRUFBb0JXLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHN0IsRUFBb0JnQyxFQUFJLEdBSWpCaEMsRUFBb0JBLEVBQW9CaUMsRUFBSSxLLGdDQ2xGckQ7Ozs7Ozs7Ozs7OztBQXFCTyxJQUFJQyxFQUErQixvQkFBYixPQUE0QkMsT0FBNEN6QyxFQUFPRCxTQUE4QixvQkFBYixPQUE0QjJDLE9BQWlCLEdBRS9KQyxFQUFZLFNBQVVGLEdBRy9CLElBQUlHLEVBQVcsR0FDZEMsRUFBT0osRUFBT0ssU0FDZEMsRUFBV04sRUFBT08saUJBQW1CUCxFQUFPTyxrQkFBb0JQLEVBQ2pFLEdBQUlNLEVBQVNKLFVBQ1osT0FBT0ksRUFBU0osVUFFakIsSUF5QkNNLEVBQUd6QyxFQUFHOEIsRUFBR1ksRUFBU0MsRUFOYkMsRUFDSEMsRUFwQkNDLEVBQWEsU0FBU3pCLEdBQ3hCLElBQ2VyQixFQURYeUMsRUFBSXBCLEVBQUcwQixNQUFNLEtBQ2hCakIsRUFBSVMsRUFDTCxJQUFLdkMsRUFBSSxFQUFHQSxFQUFJeUMsRUFBRU8sT0FBUWhELElBQ3pCOEIsRUFBRVcsRUFBRXpDLElBQU04QixFQUFJQSxFQUFFVyxFQUFFekMsS0FBTyxHQUUxQixPQUFPOEIsR0FFUm1CLEVBQUtILEVBQVcsaUJBRWhCSSxFQUFTLFNBQVNULEdBQ2pCLElBRUN6QyxFQUZHbUQsRUFBSSxHQUNQbEQsRUFBSXdDLEVBQUVPLE9BRVAsSUFBS2hELEVBQUksRUFBR0EsSUFBTUMsRUFBR2tELEVBQUVDLEtBQUtYLEVBQUV6QyxPQUM5QixPQUFPbUQsR0FFUkUsRUFBYSxhQUNiQyxHQUNLVixFQUFXbEMsT0FBT2tCLFVBQVVnQixTQUMvQkMsRUFBUUQsRUFBU3pDLEtBQUssSUFDaEIsU0FBU29ELEdBQ2YsT0FBYyxNQUFQQSxJQUFnQkEsYUFBZUMsT0FBMEIsaUJBQVYsS0FBd0JELEVBQUlILE1BQVFSLEVBQVN6QyxLQUFLb0QsS0FBU1YsS0FJbkhZLEVBQWEsR0FtQ2JDLEVBQWEsU0FBU3JDLEVBQUlzQyxFQUFjQyxFQUFNMUIsR0FDN0N0QyxLQUFLaUUsR0FBTUosRUFBV3BDLEdBQU9vQyxFQUFXcEMsR0FBSXdDLEdBQUssR0FDakRKLEVBQVdwQyxHQUFNekIsS0FDakJBLEtBQUtrRSxRQUFVLEtBQ2ZsRSxLQUFLZ0UsS0FBT0EsRUFDWixJQUFJRyxFQUFXLEdBQ2ZuRSxLQUFLb0UsTUFBUSxTQUFTQyxHQUlyQixJQUhBLElBRUNDLEVBQUt6QixFQUFHaEIsRUFBRzBDLEVBRlJuRSxFQUFJMkQsRUFBYVgsT0FDcEJvQixFQUFVcEUsSUFFRkEsR0FBSyxJQUNSa0UsRUFBTVQsRUFBV0UsRUFBYTNELEtBQU8sSUFBSTBELEVBQVdDLEVBQWEzRCxHQUFJLEtBQUs4RCxTQUM5RUMsRUFBUy9ELEdBQUtrRSxFQUFJSixRQUNsQk0sS0FDVUgsR0FDVkMsRUFBSUwsR0FBR1QsS0FBS3hELE1BR2QsR0FBZ0IsSUFBWndFLEdBQWlCUixFQXVCcEIsSUFyQkFuQyxHQURBZ0IsR0FBSyxpQkFBbUJwQixHQUFJMEIsTUFBTSxNQUM1QnNCLE1BQ05GLEVBQUtyQixFQUFXTCxFQUFFNkIsS0FBSyxNQUFNN0MsR0FBSzdCLEtBQUtrRSxRQUFVRixFQUFLVyxNQUFNWCxFQUFNRyxHQUc5RDdCLElBQ0hLLEVBQVNkLEdBQUtXLEVBQVNYLEdBQUswQyxHQWdCeEJuRSxFQUFJLEVBQUdBLEVBQUlKLEtBQUtpRSxHQUFHYixPQUFRaEQsSUFDL0JKLEtBQUtpRSxHQUFHN0QsR0FBR2dFLFNBSWRwRSxLQUFLb0UsT0FBTSxJQUlaUSxFQUFZdkMsRUFBT3VDLFVBQVksU0FBU25ELEVBQUlzQyxFQUFjQyxFQUFNMUIsR0FDL0QsT0FBTyxJQUFJd0IsRUFBV3JDLEVBQUlzQyxFQUFjQyxFQUFNMUIsSUFJL0N1QyxFQUFTeEIsRUFBR3dCLE9BQVMsU0FBU3BELEVBQUl1QyxFQUFNMUIsR0FHdkMsT0FGQTBCLEVBQU9BLEdBQVEsYUFDZlksRUFBVW5ELEVBQUksSUFBSSxXQUFZLE9BQU91QyxJQUFTMUIsR0FDdkMwQixHQUdUWSxFQUFVRSxRQUFVbkMsRUFTcEIsSUFBSW9DLEVBQWMsQ0FBQyxFQUFHLEVBQUcsRUFBRyxHQUMzQkMsRUFBT0gsRUFBTyxlQUFlLFNBQVNiLEVBQU1pQixFQUFhQyxFQUFNQyxHQUM5RG5GLEtBQUtvRixNQUFRcEIsRUFDYmhFLEtBQUtxRixNQUFRSCxHQUFRLEVBQ3JCbEYsS0FBS3NGLE9BQVNILEdBQVMsRUFDdkJuRixLQUFLdUYsUUFBVU4sRUFBY0YsRUFBWVMsT0FBT1AsR0FBZUYsS0FDN0QsR0FDSFUsRUFBV1QsRUFBS1UsSUFBTSxHQUN0QkMsRUFBV1gsRUFBS1ksU0FBVyxTQUFTQyxFQUFNQyxFQUFPQyxFQUFPckUsR0FLdkQsSUFKQSxJQUdDc0UsRUFBR3JGLEVBQU1zRixFQUFHZixFQUhUZ0IsRUFBS0osRUFBTTNDLE1BQU0sS0FDcEIvQyxFQUFJOEYsRUFBRzlDLE9BQ1ArQyxHQUFNSixHQUFTLDRCQUE0QjVDLE1BQU0sT0FFekMvQyxHQUFLLEdBSWIsSUFIQU8sRUFBT3VGLEVBQUc5RixHQUNWNEYsRUFBSXRFLEVBQVNtRCxFQUFPLFVBQVVsRSxFQUFNLE1BQU0sR0FBUTBDLEVBQUcrQyxPQUFPekYsSUFBUyxHQUNyRXNGLEVBQUlFLEVBQUcvQyxTQUNFNkMsR0FBSyxHQUNiZixFQUFPaUIsRUFBR0YsR0FDVlIsRUFBUzlFLEVBQU8sSUFBTXVFLEdBQVFPLEVBQVNQLEVBQU92RSxHQUFRcUYsRUFBRWQsR0FBUVcsRUFBS1EsU0FBV1IsRUFBT0EsRUFBS1gsSUFBUyxJQUFJVyxHQThCN0csS0F6QkEzRCxFQUFJOEMsRUFBS2hELFdBQ1BzRSxVQUFXLEVBQ2JwRSxFQUFFbUUsU0FBVyxTQUFTbkUsR0FDckIsR0FBSWxDLEtBQUtvRixNQUVSLE9BREFwRixLQUFLdUYsUUFBUSxHQUFLckQsRUFDWGxDLEtBQUtvRixNQUFNVCxNQUFNLEtBQU0zRSxLQUFLdUYsU0FFcEMsSUFBSWpFLEVBQUl0QixLQUFLcUYsTUFDWmtCLEVBQUt2RyxLQUFLc0YsT0FDVnBFLEVBQVcsSUFBTkksRUFBVyxFQUFJWSxFQUFXLElBQU5aLEVBQVdZLEVBQUtBLEVBQUksR0FBVyxFQUFKQSxFQUFrQixHQUFULEVBQUlBLEdBVWxFLE9BVFcsSUFBUHFFLEVBQ0hyRixHQUFLQSxFQUNZLElBQVBxRixFQUNWckYsR0FBS0EsRUFBSUEsRUFDUSxJQUFQcUYsRUFDVnJGLEdBQUtBLEVBQUlBLEVBQUlBLEVBQ0ksSUFBUHFGLElBQ1ZyRixHQUFLQSxFQUFJQSxFQUFJQSxFQUFJQSxHQUVKLElBQU5JLEVBQVcsRUFBSUosRUFBVyxJQUFOSSxFQUFXSixFQUFLZ0IsRUFBSSxHQUFPaEIsRUFBSSxFQUFJLEVBQUtBLEVBQUksR0FLekVkLEdBREF5QyxFQUFJLENBQUMsU0FBUyxPQUFPLFFBQVEsUUFBUSxpQkFDL0JPLFNBQ0doRCxHQUFLLEdBQ2I4QixFQUFJVyxFQUFFekMsR0FBRyxTQUFTQSxFQUNsQnVGLEVBQVMsSUFBSVgsRUFBSyxLQUFLLEtBQUssRUFBRTVFLEdBQUk4QixFQUFHLFdBQVcsR0FDaER5RCxFQUFTLElBQUlYLEVBQUssS0FBSyxLQUFLLEVBQUU1RSxHQUFJOEIsRUFBRyxVQUFtQixJQUFOOUIsRUFBVyxZQUFjLEtBQzNFdUYsRUFBUyxJQUFJWCxFQUFLLEtBQUssS0FBSyxFQUFFNUUsR0FBSThCLEVBQUcsYUFFdEN1RCxFQUFTZSxPQUFTbkQsRUFBRytDLE9BQU9LLE9BQU9DLE9BQ25DakIsRUFBU2tCLE1BQVF0RCxFQUFHK0MsT0FBT1EsS0FBS0MsVUFRaEMsSUFBSUMsRUFBa0JqQyxFQUFPLDBCQUEwQixTQUFTa0MsR0FDL0QvRyxLQUFLZ0gsV0FBYSxHQUNsQmhILEtBQUtpSCxhQUFlRixHQUFVL0csU0FFL0JrQyxFQUFJNEUsRUFBZ0I5RSxXQUVsQmtGLGlCQUFtQixTQUFTaEMsRUFBTWlDLEVBQVVDLEVBQU9DLEVBQVVDLEdBQzlEQSxFQUFXQSxHQUFZLEVBQ3ZCLElBRUNDLEVBQVVuSCxFQUZQb0gsRUFBT3hILEtBQUtnSCxXQUFXOUIsR0FDMUJ1QyxFQUFRLEVBU1QsSUFQSXpILE9BQVM4QyxHQUFZQyxHQUN4QkQsRUFBUTRFLE9BRUcsTUFBUkYsSUFDSHhILEtBQUtnSCxXQUFXOUIsR0FBUXNDLEVBQU8sSUFFaENwSCxFQUFJb0gsRUFBS3BFLFNBQ0FoRCxHQUFLLElBQ2JtSCxFQUFXQyxFQUFLcEgsSUFDSEssSUFBTTBHLEdBQVlJLEVBQVNwRixJQUFNaUYsRUFDN0NJLEVBQUtHLE9BQU92SCxFQUFHLEdBQ0ssSUFBVnFILEdBQWVGLEVBQVNLLEdBQUtOLElBQ3ZDRyxFQUFRckgsRUFBSSxHQUdkb0gsRUFBS0csT0FBT0YsRUFBTyxFQUFHLENBQUNoSCxFQUFFMEcsRUFBVWhGLEVBQUVpRixFQUFPUyxHQUFHUixFQUFVTyxHQUFHTixLQUc3RHBGLEVBQUU0RixvQkFBc0IsU0FBUzVDLEVBQU1pQyxHQUN0QyxJQUFrQy9HLEVBQTlCb0gsRUFBT3hILEtBQUtnSCxXQUFXOUIsR0FDM0IsR0FBSXNDLEVBRUgsSUFEQXBILEVBQUlvSCxFQUFLcEUsU0FDQWhELEdBQUssR0FDYixHQUFJb0gsRUFBS3BILEdBQUdLLElBQU0wRyxFQUVqQixZQURBSyxFQUFLRyxPQUFPdkgsRUFBRyxJQU9uQjhCLEVBQUU2RixjQUFnQixTQUFTN0MsR0FDMUIsSUFDQzlFLEVBQUdrQixFQUFHaUcsRUFESEMsRUFBT3hILEtBQUtnSCxXQUFXOUIsR0FFM0IsR0FBSXNDLEVBTUgsS0FMQXBILEVBQUlvSCxFQUFLcEUsUUFDRCxJQUNQb0UsRUFBT0EsRUFBS1EsTUFBTSxJQUVuQjFHLEVBQUl0QixLQUFLaUgsZUFDQTdHLEdBQUssSUFDYm1ILEVBQVdDLEVBQUtwSCxNQUVYbUgsRUFBU00sR0FDWk4sRUFBUzlHLEVBQUVGLEtBQUtnSCxFQUFTcEYsR0FBS2IsRUFBRyxDQUFDNEQsS0FBS0EsRUFBTTZCLE9BQU96RixJQUVwRGlHLEVBQVM5RyxFQUFFRixLQUFLZ0gsRUFBU3BGLEdBQUtiLEtBYWxDLElBQUkyRyxFQUFnQjVGLEVBQU82RixzQkFDM0JDLEVBQW1COUYsRUFBTytGLHFCQUMxQkMsRUFBV0MsS0FBS0MsS0FBTyxXQUFZLE9BQU8sSUFBSUQsTUFBT0UsV0FDckRDLEVBQWNKLElBS2YsSUFEQWpJLEdBREF5QyxFQUFJLENBQUMsS0FBSyxNQUFNLFNBQVMsTUFDbkJPLFNBQ0doRCxHQUFLLElBQU02SCxHQUNuQkEsRUFBZ0I1RixFQUFPUSxFQUFFekMsR0FBSyx5QkFDOUIrSCxFQUFtQjlGLEVBQU9RLEVBQUV6QyxHQUFLLHlCQUEyQmlDLEVBQU9RLEVBQUV6QyxHQUFLLCtCQUczRXlFLEVBQU8sVUFBVSxTQUFTNkQsRUFBS0MsR0FDOUIsSUFNQ0MsRUFBTUMsRUFBTUMsRUFBS0MsRUFBTUMsRUFOcEJDLEVBQVFqSixLQUNYa0osRUFBYWIsSUFDYmMsS0FBc0IsSUFBWFIsSUFBb0JWLElBQWlCLE9BQ2hEbUIsRUFBZ0IsSUFDaEJDLEVBQWUsR0FHZkMsRUFBUSxTQUFTQyxHQUNoQixJQUNDQyxFQUFTQyxFQUROQyxFQUFVckIsSUFBYUksRUFFdkJpQixFQUFVTixJQUNiRixHQUFjUSxFQUFVTCxHQUV6QlosR0FBZWlCLEVBQ2ZULEVBQU1VLE1BQVFsQixFQUFjUyxHQUFjLElBQzFDTSxFQUFVUCxFQUFNVSxLQUFPWCxJQUNsQkosR0FBUVksRUFBVSxJQUFnQixJQUFYRCxLQUMzQk4sRUFBTVcsUUFDTlosR0FBYVEsR0FBV0EsR0FBV1QsRUFBTyxLQUFRQSxFQUFPUyxHQUN6REMsR0FBVyxJQUVHLElBQVhGLElBQ0hULEVBQU1ELEVBQUtTLElBRVJHLEdBQ0hSLEVBQU1sQixjQXBCSSxTQXdCYmpCLEVBQWdCdkcsS0FBSzBJLEdBQ3JCQSxFQUFNVSxLQUFPVixFQUFNVyxNQUFRLEVBQzNCWCxFQUFNWSxLQUFPLFdBQ1pQLEdBQU0sSUFHUEwsRUFBTWEsYUFBZSxTQUFTQyxFQUFXQyxHQUN4QyxJQUFLQyxVQUFVN0csT0FDZCxPQUFRZ0csRUFBZ0IsSUFFekJBLEVBQWdCVyxHQUFhLElBQzdCVixFQUFlYSxLQUFLQyxJQUFJSCxFQUFhWixFQUFlLElBR3JESCxFQUFNbUIsTUFBUSxXQUNGLE1BQVB0QixJQUdDSyxHQUFZaEIsRUFHaEJBLEVBQWlCVyxHQUZqQnVCLGFBQWF2QixHQUlkRCxFQUFPcEYsRUFDUHFGLEVBQU0sS0FDRkcsSUFBVW5HLElBQ2JDLEdBQWdCLEtBSWxCa0csRUFBTXZCLEtBQU8sU0FBUzRDLEdBQ1QsT0FBUnhCLEVBQ0hHLEVBQU1tQixRQUNJRSxFQUNWcEIsSUFBZVQsR0FBZUEsRUFBY0osS0FDbENZLEVBQU1XLE1BQVEsS0FDeEJuQixFQUFjSixJQUFhZSxFQUFnQixHQUU1Q1AsRUFBaUIsSUFBVEQsRUFBY25GLEVBQWUwRixHQUFZbEIsRUFBb0dBLEVBQW5GLFNBQVNzQyxHQUFLLE9BQU9DLFdBQVdELEVBQStCLEtBQTFCdkIsRUFBWUMsRUFBTVUsTUFBZSxFQUFLLElBQ3pJVixJQUFVbkcsSUFDYkMsR0FBZ0IsR0FFakJ1RyxFQUFNLElBR1BMLEVBQU1QLElBQU0sU0FBU3JILEdBQ3BCLElBQUs0SSxVQUFVN0csT0FDZCxPQUFPd0YsRUFHUkcsRUFBTyxJQURQSCxFQUFPdkgsSUFDYSxJQUNwQjJILEVBQVloSixLQUFLMkosS0FBT1osRUFDeEJFLEVBQU12QixRQUdQdUIsRUFBTU4sT0FBUyxTQUFTdEgsR0FDdkIsSUFBSzRJLFVBQVU3RyxPQUNkLE9BQU8rRixFQUVSRixFQUFNbUIsUUFDTmpCLEVBQVU5SCxFQUNWNEgsRUFBTVAsSUFBSUUsSUFFWEssRUFBTVAsSUFBSUEsR0FHVjhCLFlBQVcsV0FDTSxTQUFackIsR0FBc0JGLEVBQU1XLE1BQVEsR0FBc0MsWUFBaENuSCxHQUFRLElBQUlnSSxpQkFDekR4QixFQUFNTixRQUFPLEtBRVosVUFHSnpHLEVBQUltQixFQUFHcUgsT0FBTzFJLFVBQVksSUFBSXFCLEVBQUdzSCxPQUFPN0QsaUJBQ3RDOEQsWUFBY3ZILEVBQUdxSCxPQVFuQixJQUFJRyxFQUFZaEcsRUFBTyxrQkFBa0IsU0FBU2lHLEVBQVVDLEdBUzFELEdBUkEvSyxLQUFLK0ssS0FBT0EsRUFBT0EsR0FBUSxHQUMzQi9LLEtBQUtnTCxVQUFZaEwsS0FBS2lMLGVBQWlCSCxHQUFZLEVBQ25EOUssS0FBS2tMLE9BQVNDLE9BQU9KLEVBQUtLLFFBQVUsRUFDcENwTCxLQUFLcUwsV0FBYSxFQUNsQnJMLEtBQUtzTCxVQUFZUCxFQUFLUSxnQkFDdEJ2TCxLQUFLd0wsS0FBT1QsRUFBS1MsS0FDakJ4TCxLQUFLeUwsWUFBY1YsRUFBS1csU0FFbkJDLEVBQUwsQ0FHSzVJLEdBQ0pELEVBQVE0RSxPQUdULElBQUlrRSxFQUFLNUwsS0FBSytLLEtBQUtjLFVBQVlDLEVBQXNCSCxFQUNyREMsRUFBR0csSUFBSS9MLEtBQU00TCxFQUFHSSxPQUVaaE0sS0FBSytLLEtBQUtrQixRQUNiak0sS0FBS2lNLFFBQU8sT0FJZm5KLEVBQVUrSCxFQUFVcUIsT0FBUyxJQUFJN0ksRUFBR3FILFFBQ3BDeEksRUFBSTJJLEVBQVU3SSxXQUNabUssT0FBU2pLLEVBQUVrSyxJQUFNbEssRUFBRW1LLFNBQVduSyxFQUFFb0ssU0FBVSxFQUM1Q3BLLEVBQUVxSyxXQUFhckssRUFBRThKLE1BQVEsRUFDekI5SixFQUFFc0ssY0FBZ0IsRUFDbEJ0SyxFQUFFdUssTUFBUXZLLEVBQUV3SyxNQUFReEssRUFBRXlLLFVBQVl6SyxFQUFFMEssVUFBWTFLLEVBQUUySyxTQUFXLEtBQzdEM0ssRUFBRW9LLFNBQVUsRUFJWixJQUFJUSxFQUFnQixXQUNkL0osR0FBaUJzRixJQUFhSSxFQUFjLE1BQTBDLFlBQWhDaEcsR0FBUSxJQUFJZ0ksa0JBQWlDM0gsRUFBUWdILGlCQUM5R2hILEVBQVE0RSxPQUVULElBQUlwRyxFQUFJa0osV0FBV3NDLEVBQWUsS0FDOUJ4TCxFQUFFeUwsT0FFTHpMLEVBQUV5TCxTQUdMRCxJQUdBNUssRUFBRThLLEtBQU8sU0FBU0MsRUFBTUMsR0FJdkIsT0FIWSxNQUFSRCxHQUNIak4sS0FBS21OLEtBQUtGLEVBQU1DLEdBRVZsTixLQUFLMEwsVUFBUyxHQUFPTyxRQUFPLElBR3BDL0osRUFBRWtMLE1BQVEsU0FBU0MsRUFBUUgsR0FJMUIsT0FIYyxNQUFWRyxHQUNIck4sS0FBS21OLEtBQUtFLEVBQVFILEdBRVpsTixLQUFLaU0sUUFBTyxJQUdwQi9KLEVBQUVvTCxPQUFTLFNBQVNMLEVBQU1DLEdBSXpCLE9BSFksTUFBUkQsR0FDSGpOLEtBQUttTixLQUFLRixFQUFNQyxHQUVWbE4sS0FBS2lNLFFBQU8sSUFHcEIvSixFQUFFaUwsS0FBTyxTQUFTeEQsRUFBTXVELEdBQ3ZCLE9BQU9sTixLQUFLdU4sVUFBVXBDLE9BQU94QixJQUEwQixJQUFuQnVELElBR3JDaEwsRUFBRXNMLFFBQVUsU0FBU0MsRUFBY1AsR0FDbEMsT0FBT2xOLEtBQUswTCxVQUFTLEdBQU9PLFFBQU8sR0FBT3NCLFVBQVVFLEdBQWdCek4sS0FBS2tMLE9BQVMsR0FBdUIsSUFBbkJnQyxHQUEyQixJQUdsSGhMLEVBQUV3TCxRQUFVLFNBQVNULEVBQU1DLEdBSTFCLE9BSFksTUFBUkQsR0FDSGpOLEtBQUttTixLQUFNRixHQUFRak4sS0FBSzJOLGdCQUFrQlQsR0FFcENsTixLQUFLMEwsVUFBUyxHQUFNTyxRQUFPLElBR25DL0osRUFBRTBMLE9BQVMsU0FBU2pFLEVBQU11RCxFQUFnQlcsS0FJMUMzTCxFQUFFNEwsV0FBYSxXQU9kLE9BTkE5TixLQUFLZ00sTUFBUWhNLEtBQUt1TSxXQUFhLEVBQy9Cdk0sS0FBS3FNLFNBQVdyTSxLQUFLb00sS0FBTSxFQUMzQnBNLEtBQUt3TSxjQUFnQixHQUNqQnhNLEtBQUtvTSxLQUFRcE0sS0FBSzZNLFVBQ3JCN00sS0FBSytOLFVBQVMsR0FFUi9OLE1BR1JrQyxFQUFFOEwsU0FBVyxXQUNaLElBRUNDLEVBRkdyQyxFQUFLNUwsS0FBSzRNLFVBQ2JzQixFQUFZbE8sS0FBS2tKLFdBRWxCLE9BQVMwQyxJQUFRNUwsS0FBS29NLE1BQVFwTSxLQUFLc00sU0FBV1YsRUFBR29DLGFBQWVDLEVBQVVyQyxFQUFHcUMsU0FBUSxLQUFVQyxHQUFhRCxFQUFVQyxFQUFZbE8sS0FBSzJOLGdCQUFrQjNOLEtBQUtxTCxXQWxlbkosTUFxZVpuSixFQUFFNkwsU0FBVyxTQUFVSSxFQUFTQyxHQWEvQixPQVpLckwsR0FDSkQsRUFBUTRFLE9BRVQxSCxLQUFLb00sS0FBTytCLEVBQ1puTyxLQUFLc0wsUUFBVXRMLEtBQUtnTyxZQUNHLElBQW5CSSxJQUNDRCxJQUFZbk8sS0FBSzZNLFNBQ3BCN00sS0FBSzRNLFVBQVViLElBQUkvTCxLQUFNQSxLQUFLa0osV0FBYWxKLEtBQUtrTCxTQUNyQ2lELEdBQVduTyxLQUFLNk0sVUFDM0I3TSxLQUFLNE0sVUFBVXlCLFFBQVFyTyxNQUFNLEtBR3hCLEdBSVJrQyxFQUFFb00sTUFBUSxTQUFTdkQsRUFBTWhFLEdBQ3hCLE9BQU8vRyxLQUFLK04sVUFBUyxHQUFPLElBRzdCN0wsRUFBRXFNLEtBQU8sU0FBU3hELEVBQU1oRSxHQUV2QixPQURBL0csS0FBS3NPLE1BQU12RCxFQUFNaEUsR0FDVi9HLE1BR1JrQyxFQUFFc00sU0FBVyxTQUFTQyxHQUVyQixJQURBLElBQUlDLEVBQVFELEVBQWN6TyxLQUFPQSxLQUFLNk0sU0FDL0I2QixHQUNOQSxFQUFNdkMsUUFBUyxFQUNmdUMsRUFBUUEsRUFBTTdCLFNBRWYsT0FBTzdNLE1BR1JrQyxFQUFFeU0sa0JBQW9CLFNBQVNDLEdBRzlCLElBRkEsSUFBSXhPLEVBQUl3TyxFQUFPeEwsT0FDZHlMLEVBQU9ELEVBQU9wSixXQUNOcEYsR0FBSyxHQUNLLFdBQWR3TyxFQUFPeE8sS0FDVnlPLEVBQUt6TyxHQUFLSixNQUdaLE9BQU82TyxHQUdSM00sRUFBRTRNLFVBQVksU0FBUzVKLEdBQ3RCLElBQUk2SixFQUFJL08sS0FBSytLLEtBQ1o1RCxFQUFXNEgsRUFBRTdKLEdBQ2IwSixFQUFTRyxFQUFFN0osRUFBTyxVQUNsQmtDLEVBQVEySCxFQUFFN0osRUFBTyxVQUFZNkosRUFBRUMsZUFBaUJoUCxLQUVqRCxPQURLNE8sRUFBU0EsRUFBT3hMLE9BQVMsR0FFN0IsS0FBSyxFQUFHK0QsRUFBUzVHLEtBQUs2RyxHQUFRLE1BQzlCLEtBQUssRUFBR0QsRUFBUzVHLEtBQUs2RyxFQUFPd0gsRUFBTyxJQUFLLE1BQ3pDLEtBQUssRUFBR3pILEVBQVM1RyxLQUFLNkcsRUFBT3dILEVBQU8sR0FBSUEsRUFBTyxJQUFLLE1BQ3BELFFBQVN6SCxFQUFTeEMsTUFBTXlDLEVBQU93SCxLQU1qQzFNLEVBQUUrTSxjQUFnQixTQUFTL0osRUFBTWlDLEVBQVV5SCxFQUFReEgsR0FDbEQsR0FBaUMsUUFBNUJsQyxHQUFRLElBQUlnSyxPQUFPLEVBQUUsR0FBYSxDQUN0QyxJQUFJSCxFQUFJL08sS0FBSytLLEtBQ2IsR0FBeUIsSUFBckJkLFVBQVU3RyxPQUNiLE9BQU8yTCxFQUFFN0osR0FFTSxNQUFaaUMsU0FDSTRILEVBQUU3SixJQUVUNkosRUFBRTdKLEdBQVFpQyxFQUNWNEgsRUFBRTdKLEVBQU8sVUFBYXhCLEVBQVNrTCxLQUFrRCxJQUF2Q0EsRUFBT2xLLEtBQUssSUFBSXlLLFFBQVEsVUFBb0JuUCxLQUFLMk8sa0JBQWtCQyxHQUFVQSxFQUN2SEcsRUFBRTdKLEVBQU8sU0FBV2tDLEdBRVIsYUFBVGxDLElBQ0hsRixLQUFLMk0sVUFBWXhGLEdBR25CLE9BQU9uSCxNQUdSa0MsRUFBRWtKLE1BQVEsU0FBUy9KLEdBQ2xCLE9BQUs0SSxVQUFVN0csUUFHWHBELEtBQUs0TSxVQUFVd0MsbUJBQ2xCcFAsS0FBS2tPLFVBQVdsTyxLQUFLa0osV0FBYTdILEVBQVFyQixLQUFLa0wsUUFFaERsTCxLQUFLa0wsT0FBUzdKLEVBQ1ByQixNQU5DQSxLQUFLa0wsUUFTZGhKLEVBQUU0SSxTQUFXLFNBQVN6SixHQUNyQixPQUFLNEksVUFBVTdHLFFBSWZwRCxLQUFLZ0wsVUFBWWhMLEtBQUtpTCxlQUFpQjVKLEVBQ3ZDckIsS0FBS3dPLFVBQVMsR0FDVnhPLEtBQUs0TSxVQUFVd0MsbUJBQXVCcFAsS0FBS2dNLE1BQVEsR0FBT2hNLEtBQUtnTSxNQUFRaE0sS0FBS2dMLFdBQXlCLElBQVYzSixHQUM5RnJCLEtBQUt1TixVQUFVdk4sS0FBS3VNLFlBQWNsTCxFQUFRckIsS0FBS2dMLFlBQVksR0FFckRoTCxPQVJOQSxLQUFLbU0sUUFBUyxFQUNQbk0sS0FBS2dMLFlBVWQ5SSxFQUFFeUwsY0FBZ0IsU0FBU3RNLEdBRTFCLE9BREFyQixLQUFLbU0sUUFBUyxFQUNMbEMsVUFBVTdHLE9BQWdDcEQsS0FBSzhLLFNBQVN6SixHQUFwQ3JCLEtBQUtpTCxnQkFHbkMvSSxFQUFFeUgsS0FBTyxTQUFTdEksRUFBTzZMLEdBQ3hCLE9BQUtqRCxVQUFVN0csUUFHWHBELEtBQUttTSxRQUNSbk0sS0FBSzJOLGdCQUVDM04sS0FBS3VOLFVBQVdsTSxFQUFRckIsS0FBS2dMLFVBQWFoTCxLQUFLZ0wsVUFBWTNKLEVBQU82TCxJQUxqRWxOLEtBQUtnTSxPQVFkOUosRUFBRXFMLFVBQVksU0FBUzVELEVBQU11RCxFQUFnQm1DLEdBSTVDLEdBSEt0TSxHQUNKRCxFQUFRNEUsUUFFSnVDLFVBQVU3RyxPQUNkLE9BQU9wRCxLQUFLdU0sV0FFYixHQUFJdk0sS0FBSzRNLFVBQVcsQ0FJbkIsR0FISWpELEVBQU8sSUFBTTBGLElBQ2hCMUYsR0FBUTNKLEtBQUsyTixpQkFFVjNOLEtBQUs0TSxVQUFVd0Msa0JBQW1CLENBQ2pDcFAsS0FBS21NLFFBQ1JuTSxLQUFLMk4sZ0JBRU4sSUFBSUEsRUFBZ0IzTixLQUFLaUwsZUFDeEJXLEVBQUs1TCxLQUFLNE0sVUFTWCxHQVJJakQsRUFBT2dFLElBQWtCMEIsSUFDNUIxRixFQUFPZ0UsR0FFUjNOLEtBQUtrSixZQUFjbEosS0FBS3NNLFFBQVV0TSxLQUFLc1AsV0FBYTFELEVBQUdJLFFBQVloTSxLQUFLeUwsVUFBbUJrQyxFQUFnQmhFLEVBQXZCQSxHQUErQjNKLEtBQUtxTCxXQUNuSE8sRUFBR08sUUFDUG5NLEtBQUt3TyxVQUFTLEdBR1g1QyxFQUFHZ0IsVUFDTixLQUFPaEIsRUFBR2dCLFdBQ0xoQixFQUFHZ0IsVUFBVVosU0FBV0osRUFBRzFDLFdBQWEwQyxFQUFHVyxZQUFjWCxFQUFHUCxZQUMvRE8sRUFBRzJCLFVBQVUzQixFQUFHVyxZQUFZLEdBRTdCWCxFQUFLQSxFQUFHZ0IsVUFJUDVNLEtBQUtvTSxLQUNScE0sS0FBSytOLFVBQVMsR0FBTSxHQUVqQi9OLEtBQUt1TSxhQUFlNUMsR0FBMkIsSUFBbkIzSixLQUFLZ0wsWUFDaEN1RSxFQUFZbk0sUUFDZm9NLElBRUR4UCxLQUFLNE4sT0FBT2pFLEVBQU11RCxHQUFnQixHQUM5QnFDLEVBQVluTSxRQUNmb00sS0FJSCxPQUFPeFAsTUFHUmtDLEVBQUV1TixTQUFXdk4sRUFBRXdOLGNBQWdCLFNBQVNyTyxFQUFPNkwsR0FDOUMsSUFBSXBDLEVBQVc5SyxLQUFLOEssV0FDcEIsT0FBU2IsVUFBVTdHLE9BQTREcEQsS0FBS3VOLFVBQVV6QyxFQUFXekosRUFBTzZMLEdBQWxGcEMsRUFBVzlLLEtBQUtnTSxNQUFRbEIsRUFBVzlLLEtBQUsyUCxPQUd2RXpOLEVBQUVnTSxVQUFZLFNBQVM3TSxHQUN0QixPQUFLNEksVUFBVTdHLFFBR1gvQixJQUFVckIsS0FBS2tKLGFBQ2xCbEosS0FBS2tKLFdBQWE3SCxFQUNkckIsS0FBSzZNLFVBQWM3TSxLQUFLNk0sU0FBUytDLGVBQ3BDNVAsS0FBSzZNLFNBQVNkLElBQUkvTCxLQUFNcUIsRUFBUXJCLEtBQUtrTCxTQUdoQ2xMLE1BUkNBLEtBQUtrSixZQVdkaEgsRUFBRTJOLFFBQVUsU0FBU0MsR0FDcEIsT0FBTzlQLEtBQUtrSixZQUFpQyxHQUFsQjRHLEVBQTJCOVAsS0FBSzJOLGdCQUFrQjNOLEtBQUs4SyxZQUFjOUssS0FBS3FMLFlBR3RHbkosRUFBRTZOLFVBQVksU0FBUzFPLEdBQ3RCLElBQUs0SSxVQUFVN0csT0FDZCxPQUFPcEQsS0FBS3FMLFdBRWIsSUFBSTJFLEVBQVcxTyxFQVNmLElBUkFELEVBQVFBLEdBM3FCRyxLQTRxQlByQixLQUFLNE0sV0FBYTVNLEtBQUs0TSxVQUFVd0Msb0JBRXBDOU4sR0FEQTBPLEVBQVloUSxLQUFLc1AsYUFDZSxJQUFkVSxFQUFtQkEsRUFBWWhRLEtBQUs0TSxVQUFVVyxZQUNoRXZOLEtBQUtrSixXQUFhNUgsR0FBTUEsRUFBSXRCLEtBQUtrSixZQUFjbEosS0FBS3FMLFdBQWFoSyxHQUVsRXJCLEtBQUtxTCxXQUFhaEssRUFDbEJDLEVBQUl0QixLQUFLNk0sU0FDRnZMLEdBQUtBLEVBQUV1TCxVQUNidkwsRUFBRTZLLFFBQVMsRUFDWDdLLEVBQUVxTSxnQkFDRnJNLEVBQUlBLEVBQUV1TCxTQUVQLE9BQU83TSxNQUdSa0MsRUFBRXdKLFNBQVcsU0FBU3JLLEdBQ3JCLE9BQUs0SSxVQUFVN0csUUFHWC9CLEdBQVNyQixLQUFLeUwsWUFDakJ6TCxLQUFLeUwsVUFBWXBLLEVBQ2pCckIsS0FBS3VOLFVBQVl2TixLQUFLNE0sWUFBYzVNLEtBQUs0TSxVQUFVd0Msa0JBQXFCcFAsS0FBSzJOLGdCQUFrQjNOLEtBQUt1TSxXQUFhdk0sS0FBS3VNLFlBQWEsSUFFN0h2TSxNQU5DQSxLQUFLeUwsV0FTZHZKLEVBQUUrSixPQUFTLFNBQVM1SyxHQUNuQixJQUFLNEksVUFBVTdHLE9BQ2QsT0FBT3BELEtBQUtzTSxRQUViLElBQ0MyRCxFQUFLdkcsRUFERmtDLEVBQUs1TCxLQUFLNE0sVUF1QmQsT0FyQkl2TCxHQUFTckIsS0FBS3NNLFNBQWFWLElBQ3pCN0ksR0FBa0IxQixHQUN0QnlCLEVBQVE0RSxPQUdUZ0MsR0FEQXVHLEVBQU1yRSxFQUFHcUMsV0FDT2pPLEtBQUtzUCxZQUNoQmpPLEdBQVN1SyxFQUFHd0Qsb0JBQ2hCcFAsS0FBS2tKLFlBQWNRLEVBQ25CMUosS0FBS3dPLFVBQVMsSUFFZnhPLEtBQUtzUCxXQUFhak8sRUFBUTRPLEVBQU0sS0FDaENqUSxLQUFLc00sUUFBVWpMLEVBQ2ZyQixLQUFLc0wsUUFBVXRMLEtBQUtnTyxZQUNmM00sR0FBcUIsSUFBWnFJLEdBQWlCMUosS0FBS3FNLFVBQVlyTSxLQUFLOEssYUFDcERtRixFQUFNckUsRUFBR3dELGtCQUFvQnBQLEtBQUt1TSxZQUFjMEQsRUFBTWpRLEtBQUtrSixZQUFjbEosS0FBS3FMLFdBQzlFckwsS0FBSzROLE9BQU9xQyxFQUFNQSxJQUFRalEsS0FBS3VNLFlBQWEsS0FHMUN2TSxLQUFLb00sTUFBUS9LLEdBQ2hCckIsS0FBSytOLFVBQVMsR0FBTSxHQUVkL04sTUFTUixJQUFJa1EsRUFBaUJyTCxFQUFPLHVCQUF1QixTQUFTa0csR0FDM0RGLEVBQVV0SyxLQUFLUCxLQUFNLEVBQUcrSyxHQUN4Qi9LLEtBQUttUSxtQkFBcUJuUSxLQUFLb1AsbUJBQW9CLE1BR3BEbE4sRUFBSWdPLEVBQWVsTyxVQUFZLElBQUk2SSxHQUNqQ0QsWUFBY3NGLEVBQ2hCaE8sRUFBRXFNLE9BQU9uQyxLQUFNLEVBQ2ZsSyxFQUFFa08sT0FBU2xPLEVBQUV3SyxNQUFReEssRUFBRW1PLFFBQVUsS0FDakNuTyxFQUFFME4sZUFBZ0IsRUFFbEIxTixFQUFFNkosSUFBTTdKLEVBQUVvTyxPQUFTLFNBQVNDLEVBQU9DLEVBQVVDLEVBQU9DLEdBQ25ELElBQUlDLEVBQVdDLEVBYWYsR0FaQUwsRUFBTXJILFdBQWFpQyxPQUFPcUYsR0FBWSxHQUFLRCxFQUFNckYsT0FDN0NxRixFQUFNakUsU0FBYXRNLE9BQVN1USxFQUFNM0QsWUFDckMyRCxFQUFNakIsV0FBYXRQLEtBQUtpTyxXQUFhc0MsRUFBTTNELFVBQVVxQixVQUFZc0MsRUFBTWpCLGFBRXBFaUIsRUFBTTFELFVBQ1QwRCxFQUFNMUQsU0FBU3dCLFFBQVFrQyxHQUFPLEdBRS9CQSxFQUFNMUQsU0FBVzBELEVBQU0zRCxVQUFZNU0sS0FDL0J1USxFQUFNbkUsS0FDVG1FLEVBQU14QyxVQUFTLEdBQU0sR0FFdEI0QyxFQUFZM1EsS0FBSzBNLE1BQ2IxTSxLQUFLNFAsY0FFUixJQURBZ0IsRUFBS0wsRUFBTXJILFdBQ0p5SCxHQUFhQSxFQUFVekgsV0FBYTBILEdBQzFDRCxFQUFZQSxFQUFVRSxNQW9CeEIsT0FqQklGLEdBQ0hKLEVBQU05RCxNQUFRa0UsRUFBVWxFLE1BQ3hCa0UsRUFBVWxFLE1BQVE4RCxJQUVsQkEsRUFBTTlELE1BQVF6TSxLQUFLb1EsT0FDbkJwUSxLQUFLb1EsT0FBU0csR0FFWEEsRUFBTTlELE1BQ1Q4RCxFQUFNOUQsTUFBTW9FLE1BQVFOLEVBRXBCdlEsS0FBSzBNLE1BQVE2RCxFQUVkQSxFQUFNTSxNQUFRRixFQUNkM1EsS0FBS3FRLFFBQVVFLEVBQ1h2USxLQUFLNE0sV0FDUjVNLEtBQUt3TyxVQUFTLEdBRVJ4TyxNQUdSa0MsRUFBRW1NLFFBQVUsU0FBU0ssRUFBT29DLEdBeUIzQixPQXhCSXBDLEVBQU03QixXQUFhN00sT0FDakI4USxHQUNKcEMsRUFBTVgsVUFBUyxHQUFPLEdBR25CVyxFQUFNbUMsTUFDVG5DLEVBQU1tQyxNQUFNcEUsTUFBUWlDLEVBQU1qQyxNQUNoQnpNLEtBQUtvUSxTQUFXMUIsSUFDMUIxTyxLQUFLb1EsT0FBUzFCLEVBQU1qQyxPQUVqQmlDLEVBQU1qQyxNQUNUaUMsRUFBTWpDLE1BQU1vRSxNQUFRbkMsRUFBTW1DLE1BQ2hCN1EsS0FBSzBNLFFBQVVnQyxJQUN6QjFPLEtBQUswTSxNQUFRZ0MsRUFBTW1DLE9BRXBCbkMsRUFBTWpDLE1BQVFpQyxFQUFNbUMsTUFBUW5DLEVBQU03QixTQUFXLEtBQ3pDNkIsSUFBVTFPLEtBQUtxUSxVQUNsQnJRLEtBQUtxUSxRQUFVclEsS0FBSzBNLE9BR2pCMU0sS0FBSzRNLFdBQ1I1TSxLQUFLd08sVUFBUyxJQUdUeE8sTUFHUmtDLEVBQUUwTCxPQUFTLFNBQVNqRSxFQUFNdUQsRUFBZ0JXLEdBQ3pDLElBQ0NrRCxFQURHckMsRUFBUTFPLEtBQUtvUSxPQUdqQixJQURBcFEsS0FBS3VNLFdBQWF2TSxLQUFLZ00sTUFBUWhNLEtBQUt3TSxhQUFlN0MsRUFDNUMrRSxHQUNOcUMsRUFBT3JDLEVBQU1qQyxPQUNUaUMsRUFBTXBELFNBQVkzQixHQUFRK0UsRUFBTXhGLGFBQWV3RixFQUFNcEMsVUFBWW9DLEVBQU10QyxPQUNyRXNDLEVBQU1qRCxVQUdWaUQsRUFBTWQsUUFBVWMsRUFBTXZDLE9BQWlDdUMsRUFBTWYsZ0JBQTdCZSxFQUFNekQsaUJBQTRDdEIsRUFBTytFLEVBQU14RixZQUFjd0YsRUFBTXJELFdBQWE2QixFQUFnQlcsR0FGaEphLEVBQU1kLFFBQVFqRSxFQUFPK0UsRUFBTXhGLFlBQWN3RixFQUFNckQsV0FBWTZCLEVBQWdCVyxJQUs3RWEsRUFBUXFDLEdBSVY3TyxFQUFFK0wsUUFBVSxXQUlYLE9BSEtsTCxHQUNKRCxFQUFRNEUsT0FFRjFILEtBQUt1TSxZQVFiLElBQUloSyxFQUFZc0MsRUFBTyxhQUFhLFNBQVNrQyxFQUFRK0QsRUFBVUMsR0FJN0QsR0FIQUYsRUFBVXRLLEtBQUtQLEtBQU04SyxFQUFVQyxHQUMvQi9LLEtBQUs0TixPQUFTckwsRUFBVVAsVUFBVTRMLE9BRXBCLE1BQVY3RyxFQUNILEtBQU0sOEJBR1AvRyxLQUFLK0csT0FBU0EsRUFBNkIsaUJBQWIsRUFBeUJBLEVBQVN4RSxFQUFVeU8sU0FBU2pLLElBQVdBLEVBRTlGLElBRUMzRyxFQUFHNlEsRUFBTUMsRUFGTkMsRUFBY3BLLEVBQU9xSyxRQUFXckssRUFBTzNELFFBQVUyRCxJQUFXMUUsR0FBVTBFLEVBQU8sS0FBT0EsRUFBTyxLQUFPMUUsR0FBVzBFLEVBQU8sR0FBR3NLLFVBQVl0SyxFQUFPLEdBQUd1SyxRQUFVdkssRUFBT3NLLFVBQ2pLRSxFQUFZdlIsS0FBSytLLEtBQUt3RyxVQUt2QixHQUZBdlIsS0FBS3dSLFdBQWFELEVBQTBCLE1BQWJBLEVBQXFCRSxFQUFpQmxQLEVBQVVtUCxrQkFBMkMsaUJBQWhCLEVBQTRCSCxHQUFhLEVBQUlFLEVBQWlCRixJQUVuS0osR0FBY3BLLGFBQWtCbkQsT0FBVW1ELEVBQU92RCxNQUFRRSxFQUFTcUQsS0FBbUMsaUJBQWZBLEVBQU8sR0FJakcsSUFIQS9HLEtBQUsyUixTQUFXVCxFQUFVNU4sRUFBT3lELEdBQ2pDL0csS0FBSzRSLFlBQWMsR0FDbkI1UixLQUFLNlIsVUFBWSxHQUNaelIsRUFBSSxFQUFHQSxFQUFJOFEsRUFBUTlOLE9BQVFoRCxLQUMvQjZRLEVBQU9DLEVBQVE5USxJQUlhLGlCQUFYLEVBTU42USxFQUFLN04sUUFBVTZOLElBQVM1TyxHQUFVNE8sRUFBSyxLQUFPQSxFQUFLLEtBQU81TyxHQUFXNE8sRUFBSyxHQUFHSSxVQUFZSixFQUFLLEdBQUdLLFFBQVVMLEVBQUtJLFdBQzFISCxFQUFRdkosT0FBT3ZILElBQUssR0FDcEJKLEtBQUsyUixTQUFXVCxFQUFVQSxFQUFRMUwsT0FBT2xDLEVBQU8yTixNQUdqRGpSLEtBQUs2UixVQUFVelIsR0FBSzBSLEVBQVViLEVBQU1qUixNQUFNLEdBQ3hCLElBQWR1UixHQUFxQnZSLEtBQUs2UixVQUFVelIsR0FBR2dELE9BQVMsR0FDbkQyTyxHQUFnQmQsRUFBTWpSLEtBQU0sS0FBTSxFQUFHQSxLQUFLNlIsVUFBVXpSLEtBWC9CLGlCQURyQjZRLEVBQU9DLEVBQVE5USxLQUFPbUMsRUFBVXlPLFNBQVNDLEtBRXhDQyxFQUFRdkosT0FBT3ZILEVBQUUsRUFBRyxHQUxyQjhRLEVBQVF2SixPQUFPdkgsSUFBSyxRQW9CdEJKLEtBQUs0UixZQUFjLEdBQ25CNVIsS0FBSzZSLFVBQVlDLEVBQVUvSyxFQUFRL0csTUFBTSxHQUN2QixJQUFkdVIsR0FBcUJ2UixLQUFLNlIsVUFBVXpPLE9BQVMsR0FDaEQyTyxHQUFnQmhMLEVBQVEvRyxLQUFNLEtBQU0sRUFBR0EsS0FBSzZSLFlBRzFDN1IsS0FBSytLLEtBQUtRLGlCQUFpQyxJQUFiVCxHQUFrQyxJQUFoQjlLLEtBQUtrTCxTQUE4QyxJQUE5QmxMLEtBQUsrSyxLQUFLUSxtQkFDbEZ2TCxLQUFLZ00sT0F4NEJJLEtBeTRCVGhNLEtBQUs0TixPQUFPMUQsS0FBS0MsSUFBSSxHQUFJbkssS0FBS2tMLGFBRTdCLEdBQ0g4RyxFQUFjLFNBQVNqRCxHQUN0QixPQUFRQSxHQUFLQSxFQUFFM0wsUUFBVTJMLElBQU0xTSxHQUFVME0sRUFBRSxLQUFPQSxFQUFFLEtBQU8xTSxHQUFXME0sRUFBRSxHQUFHc0MsVUFBWXRDLEVBQUUsR0FBR3VDLFFBQVV2QyxFQUFFc0MsWUFjMUduUCxFQUFJSyxFQUFVUCxVQUFZLElBQUk2SSxHQUM1QkQsWUFBY3JJLEVBQ2hCTCxFQUFFcU0sT0FBT25DLEtBQU0sRUFJZmxLLEVBQUV5TixNQUFRLEVBQ1Z6TixFQUFFK1AsU0FBVy9QLEVBQUV5UCxTQUFXelAsRUFBRWdRLGtCQUFvQmhRLEVBQUVpUSxTQUFXLEtBQzdEalEsRUFBRWtRLHdCQUEwQmxRLEVBQUVtUSxPQUFRLEVBRXRDOVAsRUFBVStQLFFBQVUsUUFDcEIvUCxFQUFVZ1EsWUFBY3JRLEVBQUVzUSxNQUFRLElBQUl4TixFQUFLLEtBQU0sS0FBTSxFQUFHLEdBQzFEekMsRUFBVW1QLGlCQUFtQixPQUM3Qm5QLEVBQVUySixPQUFTcEosRUFDbkJQLEVBQVVrUSxVQUFZLElBQ3RCbFEsRUFBVXVILGFBQWUsU0FBU0MsRUFBV0MsR0FDNUNsSCxFQUFRZ0gsYUFBYUMsRUFBV0MsSUFHakN6SCxFQUFVeU8sU0FBVzNPLEVBQU9xUSxHQUFLclEsRUFBT3NRLFFBQVUsU0FBUzNNLEdBQzFELElBQUlnTCxFQUFXM08sRUFBT3FRLEdBQUtyUSxFQUFPc1EsT0FDbEMsT0FBSTNCLEdBQ0h6TyxFQUFVeU8sU0FBV0EsRUFDZEEsRUFBU2hMLEtBRVp2RCxJQUNKQSxFQUFPSixFQUFPSyxVQUVORCxFQUFhQSxFQUFLbVEsaUJBQW1CblEsRUFBS21RLGlCQUFpQjVNLEdBQUt2RCxFQUFLb1EsZUFBZ0MsTUFBaEI3TSxFQUFFOE0sT0FBTyxHQUFjOU0sRUFBRWtKLE9BQU8sR0FBS2xKLEdBQWxIQSxJQUdsQixJQUFJdUosRUFBYyxHQUNqQndELEVBQWMsR0FDZEMsRUFBYyxpREFDZEMsRUFBVSxpQkFFVkMsRUFBWSxTQUFTbkUsR0FJcEIsSUFIQSxJQUVDb0UsRUFGR0MsRUFBS3BULEtBQUtpUyxTQUdQbUIsR0FDTkQsRUFBT0MsRUFBR0MsS0FBZ0MsSUFBTnRFLEdBQXVCLE1BQVovTyxLQUFLc1QsSUFBZXRULEtBQUtzVCxJQUFNdkUsRUFBSS9PLEtBQUswRSxLQUFLLElBQU0xRSxLQUFLdVQsTUFBdEZILEVBQUczUyxFQUFJc08sRUFBSXFFLEVBQUdqUixFQUMzQmlSLEVBQUc1UyxFQUNOMlMsRUFBTUMsRUFBRzVTLEVBQUVELEtBQUtQLEtBQUt3VCxPQUFRTCxFQUFLblQsS0FBS3lULFNBQVdMLEVBQUc5UixFQUFHdEIsS0FBS3dULFFBQ25ETCxFQU5MLE1BTW9CQSxHQU5wQixPQU1tQ0MsRUFBR0MsT0FDM0NGLEVBQU0sR0FFRkMsRUFBRzdJLEVBRUc2SSxFQUFHTSxHQUNiTixFQUFHOVIsRUFBRThSLEVBQUdsUixHQUFHa1IsRUFBR00sR0FBSVAsR0FFbEJDLEVBQUc5UixFQUFFOFIsRUFBR2xSLEdBQUdpUixHQUpYQyxFQUFHOVIsRUFBRThSLEVBQUdsUixHQUFLaVIsRUFNZEMsRUFBS0EsRUFBRzNHLE9BR1ZrSCxFQUFhLFNBQVM1RSxHQUNyQixPQUFjLElBQUpBLEVBQVksR0FBSyxJQUFRLElBR3BDNkUsRUFBVyxTQUFTTCxFQUFPRCxFQUFLTyxFQUFRVCxHQUN2QyxJQUlDVSxFQUFXQyxFQUFTQyxFQUFLNVQsRUFBR0MsRUFBRzRULEVBQVlDLEVBSnhDclIsRUFBSSxHQUNQc1IsRUFBWSxFQUNaaFMsRUFBSSxHQUNKaVMsRUFBUSxFQW9CVCxJQWxCQXZSLEVBQUUwUSxNQUFRQSxFQUNWMVEsRUFBRXlRLElBQU1BLEVBQ1JDLEVBQVExUSxFQUFFLEdBQUswUSxFQUFRLEdBQ3ZCRCxFQUFNelEsRUFBRSxHQUFLeVEsRUFBTSxHQUNmTyxJQUNIQSxFQUFPaFIsR0FDUDBRLEVBQVExUSxFQUFFLEdBQ1Z5USxFQUFNelEsRUFBRSxJQUVUQSxFQUFFTyxPQUFTLEVBQ1gwUSxFQUFZUCxFQUFNYyxNQUFNckIsSUFBZ0IsR0FDeENlLEVBQVVULEVBQUllLE1BQU1yQixJQUFnQixHQUNoQ0ksSUFDSEEsRUFBRzNHLE1BQVEsS0FDWDJHLEVBQUdDLEtBQU8sRUFDVnhRLEVBQUVvUCxTQUFXcFAsRUFBRXlSLFNBQVdsQixHQUUzQi9TLEVBQUkwVCxFQUFRM1EsT0FDUGhELEVBQUksRUFBR0EsRUFBSUMsRUFBR0QsSUFDbEI4VCxFQUFhSCxFQUFRM1QsR0FFckIrQixJQURBOFIsRUFBYVgsRUFBSXBFLE9BQU9pRixFQUFXYixFQUFJbkUsUUFBUStFLEVBQVlDLEdBQVdBLE1BQ2pEL1QsRUFBSzZULEVBQWEsSUFDdkNFLEdBQWFGLEVBQVc3USxPQUNwQmdSLEVBQ0hBLEdBQVNBLEVBQVEsR0FBSyxFQUNjLFVBQTFCSCxFQUFXL0UsUUFBUSxLQUM3QmtGLEVBQVEsR0FFTEYsSUFBZUosRUFBVTFULElBQU0wVCxFQUFVMVEsUUFBVWhELEVBQ3REK0IsR0FBSytSLEdBRUQvUixJQUNIVSxFQUFFVyxLQUFLckIsR0FDUEEsRUFBSSxJQUVMNlIsRUFBTU8sV0FBV1QsRUFBVTFULElBQzNCeUMsRUFBRVcsS0FBS3dRLEdBQ1BuUixFQUFFb1AsU0FBVyxDQUFDeEYsTUFBTzVKLEVBQUVvUCxTQUFVM1EsRUFBRXVCLEVBQUdYLEVBQUdXLEVBQUVPLE9BQU8sRUFBR2pCLEVBQUU2UixFQUFLdlQsR0FBNkIsTUFBekJ5VCxFQUFXcEIsT0FBTyxHQUFjMEIsU0FBU04sRUFBV3BCLE9BQU8sR0FBSyxJQUFLLElBQU15QixXQUFXTCxFQUFXaEYsT0FBTyxJQUFPcUYsV0FBV0wsR0FBY0YsSUFBUyxFQUFHekosRUFBRSxFQUFHL0osRUFBRzRULEdBQVNBLEVBQVEsRUFBS2xLLEtBQUt1SyxNQUFRZCxJQUdoUVEsR0FBYUQsRUFBVzlRLE9BVXpCLE9BUkFqQixHQUFLbVIsRUFBSXBFLE9BQU9pRixLQUVmdFIsRUFBRVcsS0FBS3JCLEdBRVJVLEVBQUU2UixTQUFXeEIsRUFDVEQsRUFBUTBCLEtBQUtyQixLQUNoQnpRLEVBQUV5USxJQUFNLE1BRUZ6USxHQUdSK1IsRUFBZ0IsU0FBUzdOLEVBQVE4TixFQUFNdEIsRUFBT0QsRUFBS3dCLEVBQWVDLEVBQUtDLEVBQVdDLEVBQWN4TixHQUMzRSxtQkFBVixJQUNUNkwsRUFBTUEsRUFBSTdMLEdBQVMsRUFBR1YsSUFFdkIsSUFBSTdCLFNBQWM2QixFQUFPOE4sR0FDeEJLLEVBQXVCLGFBQVRoUSxFQUF1QixHQUFPMlAsRUFBSzFGLFFBQVEsUUFBcUQsbUJBQXBDcEksRUFBTyxNQUFROE4sRUFBSzNGLE9BQU8sSUFBdUIyRixFQUFPLE1BQVFBLEVBQUszRixPQUFPLEdBQ3ZKL00sRUFBZSxRQUFWb1IsRUFBbUJBLEVBQVMyQixFQUE0QkYsRUFBWWpPLEVBQU9tTyxHQUFZRixHQUFhak8sRUFBT21PLEtBQWxFbk8sRUFBTzhOLEdBQ3JETSxFQUE4QixpQkFBVixHQUF3QyxNQUFsQjdCLEVBQUlSLE9BQU8sR0FDckRNLEVBQUssQ0FBQzlSLEVBQUV5RixFQUFRN0UsRUFBRTJTLEVBQU0xUyxFQUFFQSxFQUFHb0ksRUFBWSxhQUFUckYsRUFBc0JrUSxHQUFHLEVBQUd2VCxFQUFFaVQsR0FBaUJELEVBQU1yVSxFQUFJdVUsRUFBMkIsbUJBQVYsRUFBd0JBLEVBQU03SyxLQUFLdUssTUFBOUMsRUFBc0Q3TSxHQUFHLEVBQUduSCxFQUFFMFUsRUFBYVgsU0FBU2xCLEVBQUlSLE9BQU8sR0FBSyxJQUFLLElBQU15QixXQUFXakIsRUFBSXBFLE9BQU8sSUFBT3FGLFdBQVdqQixHQUFPblIsR0FBTSxHQWdCcFEsSUFia0IsaUJBQVIsR0FBcUMsaUJBQVYsSUFBdUJnVCxLQUN2REgsR0FBYUssTUFBTWxULEtBQVFnVCxHQUFjRSxNQUFNL0IsSUFBdUIsa0JBQVIsR0FBcUMsa0JBQVYsR0FFNUZGLEVBQUdNLEdBQUtzQixFQUVSNUIsRUFBSyxDQUFDOVIsRUFEQ3NTLEVBQVN6UixFQUFJZ1QsRUFBY1osV0FBV25CLEVBQUdqUixHQUFLaVIsRUFBRzNTLEdBQU0yUyxFQUFHalIsRUFBSSxJQUFJbVQsUUFBUSxhQUFjLElBQU1oQyxFQUFNMkIsR0FBZ0IxUyxFQUFVZ1Qsb0JBQXFCbkMsR0FDM0lsUixFQUFHLFdBQVlDLEVBQUcsRUFBRzFCLEVBQUcsRUFBRzhKLEVBQUcsRUFBRzZLLEdBQUksRUFBR3ZULEVBQUdpVCxHQUFpQkQsRUFBTWpOLEdBQUksRUFBR3BILEVBQUcsS0FFM0Y0UyxFQUFHalIsRUFBSW9TLFdBQVdwUyxHQUNiZ1QsSUFDSi9CLEVBQUczUyxFQUFLOFQsV0FBV2pCLEdBQU9GLEVBQUdqUixHQUFNLEtBSWxDaVIsRUFBRzNTLEVBS04sT0FKSzJTLEVBQUczRyxNQUFRek0sS0FBS2lTLFlBQ3BCbUIsRUFBRzNHLE1BQU1vRSxNQUFRdUMsR0FFbEJwVCxLQUFLaVMsU0FBV21CLEVBQ1RBLEdBR1RvQyxFQUFhalQsRUFBVWlULFdBQWEsQ0FBQ0MsUUFBUS9SLEVBQVV5TixXQUFXYSxFQUFhMEQsV0FBV25HLEVBQWFvRyxRQUFRL0IsR0FDL0dnQyxFQUFXclQsRUFBVXFULFNBQVcsR0FDaENDLEVBQWVMLEVBQVdNLFlBQWMsR0FDeENDLEVBQWtCLEVBQ2xCQyxFQUFpQlIsRUFBV1MsY0FBZ0IsQ0FBQ3BRLEtBQUssRUFBR3VGLE1BQU0sRUFBR21HLFVBQVUsRUFBRzJFLFdBQVcsRUFBR0MsaUJBQWlCLEVBQUdDLGdCQUFnQixFQUFHdkssVUFBVSxFQUFHd0ssYUFBYSxFQUFHQyxRQUFRLEVBQUdDLFNBQVMsRUFBR0MsZUFBZSxFQUFHQyxjQUFjLEVBQUdDLFFBQVEsRUFBR0MsY0FBYyxFQUFHQyxhQUFhLEVBQUdDLGtCQUFrQixFQUFHQyx3QkFBd0IsRUFBR0MsdUJBQXVCLEVBQUdDLFNBQVMsRUFBR0MsZUFBZSxFQUFHQyxjQUFjLEVBQUdDLFdBQVcsRUFBR0MsS0FBSyxFQUFHN0wsZ0JBQWdCLEVBQUc4TCxPQUFPLEVBQUdDLFlBQVksRUFBRzlMLEtBQUssRUFBR1MsT0FBTyxFQUFHUCxTQUFTLEVBQUc2TCxRQUFRLEVBQUdDLEtBQUssRUFBR0MsWUFBWSxFQUFHekksY0FBYyxFQUFHaUcsYUFBYSxFQUFHeUMsR0FBRyxFQUFHQyxTQUFTLEVBQUdqSCxRQUFRLEdBQ3pqQmUsRUFBbUIsQ0FBQ21HLEtBQUssRUFBR0MsSUFBSSxFQUFHQyxLQUFLLEVBQUdDLFdBQVcsRUFBR0MsV0FBVyxFQUFHQyxZQUFZLEVBQUcsS0FBTyxFQUFHLE1BQVEsR0FDeEduTSxFQUFzQmpCLEVBQVVpQixvQkFBc0IsSUFBSW9FLEVBQzFEdkUsRUFBZ0JkLEVBQVVjLGNBQWdCLElBQUl1RSxFQUM5Q2dJLEVBQWUsR0FDZjFJLEVBQWNnRyxFQUFXMkMsV0FBYSxXQUNyQyxJQUNDL1gsRUFBR3NPLEVBREFyTyxFQUFJa1AsRUFBWW5NLE9BR3BCLElBREEyUCxFQUFjLEdBQ1QzUyxFQUFJLEVBQUdBLEVBQUlDLEVBQUdELEtBQ2xCc08sRUFBUWEsRUFBWW5QLE1BQ1MsSUFBaEJzTyxFQUFNMkQsUUFDbEIzRCxFQUFNZCxPQUFPYyxFQUFNMkQsTUFBTSxHQUFJM0QsRUFBTTJELE1BQU0sSUFBSSxHQUM3QzNELEVBQU0yRCxPQUFRLEdBR2hCOUMsRUFBWW5NLE9BQVMsR0FHdkJ1SSxFQUFjekMsV0FBYXBHLEVBQVE2RyxLQUNuQ21DLEVBQW9CNUMsV0FBYXBHLEVBQVE4RyxNQUN6QytCLEVBQWNMLFFBQVVRLEVBQW9CUixTQUFVLEVBQ3REZCxXQUFXZ0YsRUFBYSxHQUV4QjNFLEVBQVV1TixZQUFjN1YsRUFBVXFMLE9BQVMsV0FDekMsSUFBSXhOLEVBQUd5QyxFQUFHWCxFQVNWLEdBUklxTixFQUFZbk0sUUFDZm9NLElBRUQ3RCxFQUFjaUMsUUFBUTlLLEVBQVE2RyxLQUFPZ0MsRUFBY3pDLFlBQWN5QyxFQUFjTixZQUFZLEdBQU8sR0FDbEdTLEVBQW9COEIsUUFBUTlLLEVBQVE4RyxNQUFRa0MsRUFBb0I1QyxZQUFjNEMsRUFBb0JULFlBQVksR0FBTyxHQUNqSGtFLEVBQVluTSxRQUNmb00sSUFFRzFNLEVBQVE4RyxPQUFTc08sRUFBYyxDQUVsQyxJQUFLaFcsS0FETGdXLEVBQWVwVixFQUFROEcsT0FBUzRLLFNBQVNqUyxFQUFVa1EsVUFBVyxLQUFPLEtBQzNEb0QsRUFBYyxDQUd2QixJQURBelYsR0FEQXlDLEVBQUlnVCxFQUFhM1QsR0FBR21XLFFBQ2RqVixTQUNHaEQsR0FBSyxHQUNUeUMsRUFBRXpDLEdBQUdnTSxLQUNSdkosRUFBRThFLE9BQU92SCxFQUFHLEdBR0csSUFBYnlDLEVBQUVPLGVBQ0V5UyxFQUFhM1QsR0FLdEIsTUFEQUEsRUFBSXlKLEVBQWN5RSxTQUNSbE8sRUFBRW9LLFVBQWEvSixFQUFVa1EsWUFBYzNHLEVBQW9Cc0UsUUFBNkMsSUFBbkN0TixFQUFRa0UsV0FBVzZDLEtBQUt6RyxPQUFjLENBQ3BILEtBQU9sQixHQUFLQSxFQUFFb0ssU0FDYnBLLEVBQUlBLEVBQUV1SyxNQUVGdkssR0FDSlksRUFBUXNILFdBTWJ0SCxFQUFRb0UsaUJBQWlCLE9BQVEyRCxFQUFVdU4sYUFFM0MsSUFBSXRHLEVBQVksU0FBUy9LLEVBQVEySCxFQUFPNEosR0FDdEMsSUFBNEJ6VixFQUFHekMsRUFBM0JzWCxFQUFLM1EsRUFBT3dSLFdBSWhCLEdBSEsxQyxFQUFhNkIsSUFBTzNRLEVBQU93UixXQUFhYixFQUFLLElBQU8zQixRQUN4REYsRUFBYTZCLEdBQU0sQ0FBQzNRLE9BQU9BLEVBQVFzUixPQUFPLEtBRXZDM0osS0FDSDdMLEVBQUlnVCxFQUFhNkIsR0FBSVcsUUFDbEJqWSxFQUFJeUMsRUFBRU8sUUFBV3NMLEVBQ2hCNEosR0FDSCxPQUFTbFksR0FBSyxHQUNUeUMsRUFBRXpDLEtBQU9zTyxHQUNaN0wsRUFBRThFLE9BQU92SCxFQUFHLEdBS2hCLE9BQU95VixFQUFhNkIsR0FBSVcsUUFFekJHLEVBQWUsU0FBU0MsRUFBa0JDLEVBQWtCM1IsRUFBUTRSLEdBQ25FLElBQThDQyxFQUFJQyxFQUE5QzdVLEVBQU95VSxFQUFpQjFOLEtBQUswTSxZQVFqQyxPQVBJelQsSUFDSDRVLEVBQUs1VSxFQUFLeVUsRUFBa0JDLEVBQWtCM1IsRUFBUTRSLEtBRXZEM1UsRUFBT3pCLEVBQVVrVixlQUVoQm9CLEVBQUs3VSxFQUFLeVUsRUFBa0JDLEVBQWtCM1IsRUFBUTRSLEtBRXhDLElBQVBDLElBQXVCLElBQVBDLEdBRXpCOUcsR0FBa0IsU0FBU2hMLEVBQVEySCxFQUFPb0ssRUFBT3ZYLEVBQU13WCxHQUN0RCxJQUFJM1ksRUFBRzRZLEVBQVNDLEVBQVU1WSxFQUMxQixHQUFhLElBQVRrQixHQUFjQSxHQUFRLEVBQUcsQ0FFNUIsSUFEQWxCLEVBQUkwWSxFQUFTM1YsT0FDUmhELEVBQUksRUFBR0EsRUFBSUMsRUFBR0QsSUFDbEIsSUFBSzZZLEVBQVdGLEVBQVMzWSxNQUFRc08sRUFDM0J1SyxFQUFTN00sS0FDVDZNLEVBQVMzSyxNQUFNLEtBQU12SCxFQUFRMkgsS0FDaENzSyxHQUFVLFFBR04sR0FBYSxJQUFUelgsRUFDVixNQUdGLE9BQU95WCxFQUdSLElBSUNFLEVBSkdoTCxFQUFZUSxFQUFNeEYsV0FycUNaLEtBc3FDVGlRLEVBQVcsR0FDWEMsRUFBUyxFQUNUQyxFQUErQixJQUFwQjNLLEVBQU0xRCxVQUdsQixJQURBNUssRUFBSTJZLEVBQVMzVixTQUNKaEQsR0FBSyxJQUNSNlksRUFBV0YsRUFBUzNZLE1BQVFzTyxHQUFTdUssRUFBUzdNLEtBQU82TSxFQUFTM00sVUFFeEQyTSxFQUFTck0sWUFBYzhCLEVBQU05QixXQUN2Q3NNLEVBQWNBLEdBQWVJLEdBQWM1SyxFQUFPLEVBQUcySyxHQUNDLElBQWxEQyxHQUFjTCxFQUFVQyxFQUFhRyxLQUN4Q0YsRUFBU0MsS0FBWUgsSUFFWkEsRUFBUy9QLFlBQWNnRixHQUFlK0ssRUFBUy9QLFdBQWErUCxFQUFTdEwsZ0JBQWtCc0wsRUFBUzVOLFdBQWE2QyxLQUFrQm1MLElBQVlKLEVBQVM1TSxXQUFhNkIsRUFBWStLLEVBQVMvUCxZQUFjcVEsT0FDOU1KLEVBQVNDLEtBQVlILEtBS3ZCLElBREE3WSxFQUFJZ1osSUFDS2haLEdBQUssR0FNYixHQUpBQyxHQURBNFksRUFBV0UsRUFBUy9ZLElBQ1A2UixTQUNBLElBQVQxUSxHQUFnQjBYLEVBQVMzSyxNQUFNd0ssRUFBTy9SLEVBQVEySCxLQUNqRHNLLEdBQVUsR0FFRSxJQUFUelgsSUFBZ0IwWCxFQUFTaEgsVUFBWWdILEVBQVM1TSxVQUFZaE0sRUFBSSxDQUNqRSxHQUFhLElBQVRrQixJQUFlaVgsRUFBYVMsRUFBVXZLLEdBQ3pDLFNBRUd1SyxFQUFTbEwsVUFBUyxHQUFPLEtBQzVCaUwsR0FBVSxHQUliLE9BQU9BLEdBRVJNLEdBQWdCLFNBQVM1SyxFQUFPOEssRUFBV0gsR0FJMUMsSUFIQSxJQUFJek4sRUFBSzhDLEVBQU05QixVQUNkNk0sRUFBSzdOLEVBQUdQLFdBQ1IvSixFQUFJb04sRUFBTXhGLFdBQ0owQyxFQUFHZ0IsV0FBVyxDQUdwQixHQUZBdEwsR0FBS3NLLEVBQUcxQyxXQUNSdVEsR0FBTTdOLEVBQUdQLFdBQ0xPLEVBQUdVLFFBQ04sT0FBUSxJQUVUVixFQUFLQSxFQUFHZ0IsVUFHVCxPQURBdEwsR0FBS21ZLEdBQ09ELEVBQWFsWSxFQUFJa1ksRUFBY0gsR0FBVy9YLElBQU1rWSxJQUFnQjlLLEVBQU1yQyxVQUFZL0ssRUFBSWtZLEVBQVksS0F2dENwRyxNQXV0Q2tJbFksR0FBS29OLEVBQU1mLGdCQUFrQmUsRUFBTXJELFdBQWFvTyxHQUFNRCxFQXZ0Q3hMLEtBdXRDZ04sRUFBSWxZLEVBQUlrWSxFQXZ0Q3hOLE1BNnRDWnRYLEVBQUV3WCxNQUFRLFdBQ1QsSUFNQ3RaLEVBQUd1WixFQUFhdkcsRUFBSWxSLEVBQUcwWCxFQUFXdlosRUFOL0IwTyxFQUFJL08sS0FBSytLLEtBQ1o4TyxFQUFLN1osS0FBS2tTLGtCQUNWNEgsRUFBTTlaLEtBQUtnTCxVQUNYK08sSUFBY2hMLEVBQUV4RCxnQkFDaEIxRixFQUFPa0osRUFBRWxKLEtBQ1R5USxFQUFVdFcsS0FBS21TLFNBRWhCLEdBQUlwRCxFQUFFdUgsUUFBUyxDQU1kLElBQUtwVSxLQUxEb1UsSUFDSEEsRUFBUTFJLFFBQVEsR0FBRyxHQUNuQjBJLEVBQVEvSCxRQUVUcUwsRUFBWSxHQUNGN0ssRUFBRXVILFFBQ1hzRCxFQUFVMVgsR0FBSzZNLEVBQUV1SCxRQUFRcFUsR0FXMUIsR0FUQTBYLEVBQVVwTyxLQUFPLFVBQ2pCb08sRUFBVXJJLFdBQVksRUFDdEJxSSxFQUFVck8saUJBQWtCLEVBQzVCcU8sRUFBVXBDLEtBQVF1QyxJQUF3QixJQUFYaEwsRUFBRXlJLEtBQ2pDb0MsRUFBVXRELFFBQVVzRCxFQUFVeE8sTUFBUSxLQUN0Q3dPLEVBQVVyRCxTQUFXeEgsRUFBRXdILFNBQ3ZCcUQsRUFBVXBELGVBQWlCekgsRUFBRXlILGVBQzdCb0QsRUFBVW5ELGNBQWdCMUgsRUFBRTBILGVBQWlCMUgsRUFBRUMsZUFBaUJoUCxLQUNoRUEsS0FBS21TLFNBQVc1UCxFQUFVeVgsR0FBR2hhLEtBQUsrRyxRQUFVLEdBQUksRUFBRzZTLEdBQy9DRyxFQUNILEdBQUkvWixLQUFLZ00sTUFBUSxFQUNoQmhNLEtBQUttUyxTQUFXLFVBQ1YsR0FBWSxJQUFSMkgsRUFDVixZQUdJLEdBQUkvSyxFQUFFc0gsY0FBd0IsSUFBUnlELEVBRTVCLEdBQUl4RCxFQUNIQSxFQUFRMUksUUFBUSxHQUFHLEdBQ25CMEksRUFBUS9ILE9BQ1J2TyxLQUFLbVMsU0FBVyxTQUNWLENBS04sSUFBS2pRLEtBSmMsSUFBZmxDLEtBQUtnTSxRQUNSK04sR0FBWSxHQUViM0csRUFBSyxHQUNLckUsRUFDSmlILEVBQWU5VCxJQUFZLFlBQU5BLElBQ3pCa1IsRUFBR2xSLEdBQUs2TSxFQUFFN00sSUFRWixHQUxBa1IsRUFBRzdCLFVBQVksRUFDZjZCLEVBQUc1SCxLQUFPLGNBQ1Y0SCxFQUFHb0UsS0FBUXVDLElBQXdCLElBQVhoTCxFQUFFeUksS0FDMUJwRSxFQUFHN0gsZ0JBQWtCd08sRUFDckIvWixLQUFLbVMsU0FBVzVQLEVBQVV5WCxHQUFHaGEsS0FBSytHLE9BQVEsRUFBR3FNLEdBQ3hDMkcsR0FNRSxHQUFtQixJQUFmL1osS0FBS2dNLE1BQ2YsWUFOQWhNLEtBQUttUyxTQUFTdUgsUUFDZDFaLEtBQUttUyxTQUFTcEUsVUFBUyxHQUNuQi9OLEtBQUsrSyxLQUFLUSxrQkFDYnZMLEtBQUttUyxTQUFXLE1BZXBCLEdBUkFuUyxLQUFLd1MsTUFBUTNNLEVBQVNBLEVBQWlDQSxhQUFnQmIsRUFBUWEsRUFBeUIsbUJBQVgsRUFBeUIsSUFBSWIsRUFBS2EsRUFBTWtKLEVBQUVvSSxZQUFjMVIsRUFBU0ksSUFBU3RELEVBQVVnUSxZQUFuSmhRLEVBQVVnUSxZQUNwQ3hELEVBQUVvSSxzQkFBc0J2VCxPQUFTaUMsRUFBS29VLFNBQ3pDamEsS0FBS3dTLE1BQVEzTSxFQUFLb1UsT0FBT3RWLE1BQU1rQixFQUFNa0osRUFBRW9JLGFBRXhDblgsS0FBS2thLFVBQVlsYSxLQUFLd1MsTUFBTW5OLE1BQzVCckYsS0FBS21hLFdBQWFuYSxLQUFLd1MsTUFBTWxOLE9BQzdCdEYsS0FBS2lTLFNBQVcsS0FFWmpTLEtBQUsyUixTQUVSLElBREF0UixFQUFJTCxLQUFLMlIsU0FBU3ZPLE9BQ2JoRCxFQUFJLEVBQUdBLEVBQUlDLEVBQUdELElBQ2JKLEtBQUtvYSxXQUFZcGEsS0FBSzJSLFNBQVN2UixHQUFLSixLQUFLNFIsWUFBWXhSLEdBQUssR0FBS0osS0FBSzZSLFVBQVV6UixHQUFLeVosRUFBS0EsRUFBR3paLEdBQUssS0FBT0EsS0FDM0d1WixHQUFjLFFBSWhCQSxFQUFjM1osS0FBS29hLFdBQVdwYSxLQUFLK0csT0FBUS9HLEtBQUs0UixZQUFhNVIsS0FBSzZSLFVBQVdnSSxFQUFJLEdBU2xGLEdBTklGLEdBQ0hwWCxFQUFVOFgsZUFBZSxrQkFBbUJyYSxNQUV6QzZaLElBQVM3WixLQUFLaVMsVUFBc0MsbUJBQWpCalMsS0FBVyxRQUNqREEsS0FBSytOLFVBQVMsR0FBTyxJQUVsQmdCLEVBQUVzSCxhQUVMLElBREFqRCxFQUFLcFQsS0FBS2lTLFNBQ0htQixHQUNOQSxFQUFHalIsR0FBS2lSLEVBQUczUyxFQUNYMlMsRUFBRzNTLEdBQUsyUyxFQUFHM1MsRUFDWDJTLEVBQUtBLEVBQUczRyxNQUdWek0sS0FBSzJNLFVBQVlvQyxFQUFFd0gsU0FDbkJ2VyxLQUFLcU0sVUFBVyxHQUdqQm5LLEVBQUVrWSxXQUFhLFNBQVNyVCxFQUFRdVQsRUFBWXZCLEVBQVV3QixFQUFrQjlTLEdBQ3ZFLElBQUl2RixFQUFHOUIsRUFBR3VaLEVBQWFhLEVBQVFwSCxFQUFJckUsRUFDbkMsR0FBYyxNQUFWaEksRUFDSCxPQUFPLEVBU1IsSUFBSzdFLEtBUEQ2USxFQUFZaE0sRUFBT3dSLGFBQ3RCL0ksSUFHSXhQLEtBQUsrSyxLQUFLMFAsS0FBUzFULEVBQU91SyxPQUFXdkssSUFBVzFFLEdBQVUwRSxFQUFPc0ssVUFBY3VFLEVBQVM2RSxNQUErQixJQUF0QnphLEtBQUsrSyxLQUFLd00sU0E3YnJHLFNBQVN4TSxFQUFNaEUsR0FDekIsSUFDQzdFLEVBREd1WSxFQUFNLEdBRVYsSUFBS3ZZLEtBQUs2SSxFQUNKaUwsRUFBZTlULElBQVNBLEtBQUs2RSxHQUFpQixjQUFON0UsR0FBMkIsTUFBTkEsR0FBbUIsTUFBTkEsR0FBbUIsVUFBTkEsR0FBdUIsV0FBTkEsR0FBd0IsY0FBTkEsR0FBMkIsV0FBTkEsTUFBcUIwVCxFQUFTMVQsSUFBTzBULEVBQVMxVCxJQUFNMFQsRUFBUzFULEdBQUd3WSxZQUNuTkQsRUFBSXZZLEdBQUs2SSxFQUFLN0ksVUFDUDZJLEVBQUs3SSxJQUdkNkksRUFBSzBQLElBQU1BLEVBcWJYQyxDQUFTMWEsS0FBSytLLEtBQU1oRSxHQUVYL0csS0FBSytLLEtBRWQsR0FEQWdFLEVBQUkvTyxLQUFLK0ssS0FBSzdJLEdBQ1Y4VCxFQUFlOVQsR0FDZDZNLElBQVFBLGFBQWFuTCxPQUFXbUwsRUFBRXZMLE1BQVFFLEVBQVNxTCxNQUEyQyxJQUFsQ0EsRUFBRXJLLEtBQUssSUFBSXlLLFFBQVEsWUFDbEZuUCxLQUFLK0ssS0FBSzdJLEdBQUs2TSxFQUFJL08sS0FBSzJPLGtCQUFrQkksRUFBRy9PLFlBR3hDLEdBQUk0VixFQUFTMVQsS0FBT3NZLEVBQVMsSUFBSTVFLEVBQVMxVCxJQUFNeVksYUFBYTVULEVBQVEvRyxLQUFLK0ssS0FBSzdJLEdBQUlsQyxLQUFNeUgsR0FBUSxDQWF2RyxJQUZBekgsS0FBS2lTLFNBQVdtQixFQUFLLENBQUMzRyxNQUFNek0sS0FBS2lTLFNBQVUzUSxFQUFFa1osRUFBUXRZLEVBQUUsV0FBWUMsRUFBRSxFQUFHMUIsRUFBRSxFQUFHOEosRUFBRSxFQUFHMUksRUFBRUssRUFBR2tULEdBQUcsRUFBR3hOLEdBQUc0UyxFQUFPSSxVQUFXcGEsRUFBRSxHQUNwSEosRUFBSW9hLEVBQU9LLGdCQUFnQnpYLFNBQ2xCaEQsR0FBSyxHQUNia2EsRUFBV0UsRUFBT0ssZ0JBQWdCemEsSUFBTUosS0FBS2lTLFVBRTFDdUksRUFBT0ksV0FBYUosRUFBT00sbUJBQzlCbkIsR0FBYyxJQUVYYSxFQUFPTyxZQUFjUCxFQUFPUSxhQUMvQmhiLEtBQUtvUyx5QkFBMEIsR0FFNUJnQixFQUFHM0csUUFDTjJHLEVBQUczRyxNQUFNb0UsTUFBUXVDLFFBSWxCa0gsRUFBV3BZLEdBQUswUyxFQUFjclUsS0FBS1AsS0FBTStHLEVBQVE3RSxFQUFHLE1BQU82TSxFQUFHN00sRUFBRyxFQUFHLEtBQU1sQyxLQUFLK0ssS0FBS2tLLGFBQWN4TixHQUlwRyxPQUFJOFMsR0FBc0J2YSxLQUFLc08sTUFBTWlNLEVBQWtCeFQsR0FDL0MvRyxLQUFLb2EsV0FBV3JULEVBQVF1VCxFQUFZdkIsRUFBVXdCLEVBQWtCOVMsR0FFcEV6SCxLQUFLd1IsV0FBYSxHQUFPeFIsS0FBS2lTLFVBQWM4RyxFQUFTM1YsT0FBUyxHQUFPMk8sR0FBZ0JoTCxFQUFRL0csS0FBTXNhLEVBQVl0YSxLQUFLd1IsV0FBWXVILElBQ25JL1ksS0FBS3NPLE1BQU1nTSxFQUFZdlQsR0FDaEIvRyxLQUFLb2EsV0FBV3JULEVBQVF1VCxFQUFZdkIsRUFBVXdCLEVBQWtCOVMsS0FFcEV6SCxLQUFLaVMsWUFBa0MsSUFBbkJqUyxLQUFLK0ssS0FBS3lNLE1BQWtCeFgsS0FBS2dMLFdBQWVoTCxLQUFLK0ssS0FBS3lNLE9BQVN4WCxLQUFLZ0wsYUFDL0YrSCxFQUFZaE0sRUFBT3dSLGFBQWMsR0FFM0JvQixJQUdSelgsRUFBRTBMLE9BQVMsU0FBU2pFLEVBQU11RCxFQUFnQlcsR0FDekMsSUFJQ29OLEVBQVk5VCxFQUFVaU0sRUFBSThILEVBSDFCQyxFQURVbmIsS0FDTWdNLE1BQ2hCbEIsRUFGVTlLLEtBRU1nTCxVQUNoQm9RLEVBSFVwYixLQUdhd00sYUFFeEIsR0FBSTdDLEdBQVFtQixFQXg0Q0QsTUF3NEN3Qm5CLEdBQVEsRUFMaEMzSixLQU1MdU0sV0FOS3ZNLEtBTWFnTSxNQUFRbEIsRUFOckI5SyxLQU9MMlAsTUFQSzNQLEtBT1F3UyxNQUFNbE0sU0FQZHRHLEtBTzhCd1MsTUFBTW5NLFNBQVMsR0FBSyxFQVBsRHJHLEtBUUF5TCxZQUNUd1AsR0FBYSxFQUNiOVQsRUFBVyxhQUNYMEcsRUFBU0EsR0FYQTdOLEtBV2M0TSxVQUFVdUQsb0JBRWpCLElBQWJyRixJQWJNOUssS0FhbUJxTSxXQWJuQnJNLEtBYXFDK0ssS0FBS3lNLE1BQVEzSixLQWJsRDdOLEtBY0FrSixhQWRBbEosS0Fjb0I0TSxVQUFVNUIsWUFDdENyQixFQUFPLElBRUp5UixFQUFrQixHQUFNelIsR0FBUSxHQUFLQSxJQXA1Q2hDLGFBbzVDdUR5UixHQUE4QyxZQWpCckdwYixLQWlCNEZ3TCxPQUF5QjRQLElBQW9CelIsSUFDakprRSxHQUFRLEVBQ0p1TixFQXQ1Q0ksT0F1NUNQalUsRUFBVyxzQkFwQkpuSCxLQXVCSndNLGFBQWUwTyxHQUFnQmhPLEdBQWtCdkQsR0FBUXlSLElBQW9CelIsRUFBUUEsRUExNUNqRixXQTY1Q0osR0FBSUEsRUE3NUNBLEtBbTRDQTNKLEtBMkJMdU0sV0EzQkt2TSxLQTJCYWdNLE1BQVEsRUEzQnJCaE0sS0E0QkwyUCxNQTVCSzNQLEtBNEJRd1MsTUFBTWxNLFNBNUJkdEcsS0E0QjhCd1MsTUFBTW5NLFNBQVMsR0FBSyxHQUMzQyxJQUFiOFUsR0FBZ0MsSUFBYnJRLEdBQWtCc1EsRUFBa0IsS0FDMURqVSxFQUFXLG9CQUNYOFQsRUEvQlNqYixLQStCU3lMLFdBRWY5QixHQXA2Q00sS0FxNkNUQSxFQUFPLEVBQ0dBLEVBQU8sSUFuQ1IzSixLQW9DSnNMLFNBQVUsRUFDRSxJQUFiUixJQXJDSzlLLEtBcUNvQnFNLFdBckNwQnJNLEtBcUNzQytLLEtBQUt5TSxNQUFRM0osS0FDdkR1TixHQUFtQixJQXo2Q2YsT0F5NkNzQkEsR0FBOEMsWUF0Q3BFcGIsS0FzQzJEd0wsUUFDbEVxQyxHQUFRLEdBdkNEN04sS0F5Q0h3TSxhQUFlME8sR0FBZ0JoTyxHQUFrQnZELEdBQVF5UixJQUFvQnpSLEVBQVFBLEVBNTZDbEYsU0FtNENBM0osS0E0Q0FxTSxVQTVDQXJNLEtBNENrQm1TLFVBNUNsQm5TLEtBNENtQ21TLFNBQVMxQyxjQUNyRDVCLEdBQVEsUUFLVCxHQWxEVTdOLEtBZ0RMdU0sV0FoREt2TSxLQWdEYWdNLE1BQVFyQyxFQWhEckIzSixLQWtERGthLFVBQVcsQ0FDbkIsSUFBSWhaLEVBQUl5SSxFQUFPbUIsRUFBVTVGLEVBbkRoQmxGLEtBbUQ0QmthLFVBQVdtQixFQW5EdkNyYixLQW1Ea0RtYSxZQUM5QyxJQUFUalYsR0FBd0IsSUFBVEEsR0FBY2hFLEdBQUssTUFDckNBLEVBQUksRUFBSUEsR0FFSSxJQUFUZ0UsSUFDSGhFLEdBQUssR0FFTSxJQUFSbWEsRUFDSG5hLEdBQUtBLEVBQ2EsSUFBUm1hLEVBQ1ZuYSxHQUFLQSxFQUFJQSxFQUNTLElBQVJtYSxFQUNWbmEsR0FBS0EsRUFBSUEsRUFBSUEsRUFDSyxJQUFSbWEsSUFDVm5hLEdBQUtBLEVBQUlBLEVBQUlBLEVBQUlBLEdBakVUbEIsS0FtRUoyUCxNQUFrQixJQUFUekssRUFBYyxFQUFJaEUsRUFBYyxJQUFUZ0UsRUFBY2hFLEVBQUt5SSxFQUFPbUIsRUFBVyxHQUFPNUosRUFBSSxFQUFJLEVBQUtBLEVBQUksT0FuRXpGbEIsS0FxRUoyUCxNQXJFSTNQLEtBcUVTd1MsTUFBTW5NLFNBQVNzRCxFQUFPbUIsR0FJMUMsR0F6RVc5SyxLQXlFRmdNLFFBQVVtUCxHQUFhdE4sRUFBaEMsQ0FFTyxJQTNFSTdOLEtBMkVNcU0sU0FBVSxDQUUxQixHQTdFVXJNLEtBNEVMMFosU0E1RUsxWixLQTZFQXFNLFVBN0VBck0sS0E2RWlCb00sSUFDMUIsT0FDTSxJQUFLeUIsR0EvRUY3TixLQStFZ0JpUyxZQUFpQyxJQS9FakRqUyxLQStFbUMrSyxLQUFLeU0sTUEvRXhDeFgsS0ErRStEZ0wsV0EvRS9EaEwsS0ErRW1GK0ssS0FBS3lNLE9BL0V4RnhYLEtBK0VzR2dMLFdBSy9HLE9BcEZTaEwsS0FnRkpnTSxNQWhGSWhNLEtBZ0ZTdU0sV0FBYTRPLEVBaEZ0Qm5iLEtBaUZKd00sYUFBZTRPLEVBQ3BCN0wsRUFBWS9MLEtBbEZIeEQsZ0JBbUZKcVMsTUFBUSxDQUFDMUksRUFBTXVELElBbkZYbE4sS0F1RkRnTSxRQUFVaVAsRUF2RlRqYixLQXdGSjJQLE1BeEZJM1AsS0F3RlN3UyxNQUFNbk0sU0F4RmZyRyxLQXdGNkJnTSxNQUFRbEIsR0FDcENtUSxHQXpGRGpiLEtBeUZvQndTLE1BQU1sTSxXQXpGMUJ0RyxLQTBGSjJQLE1BMUZJM1AsS0EwRlN3UyxNQUFNbk0sU0FBeUIsSUExRnhDckcsS0EwRjhCZ00sTUFBZSxFQUFJLElBc0I1RCxLQW5CbUIsSUE3RlJoTSxLQTZGRnFTLFFBN0ZFclMsS0E4RkxxUyxPQUFRLEdBOUZIclMsS0FnR0RzTCxVQWhHQ3RMLEtBZ0drQnNNLFNBaEdsQnRNLEtBZ0drQ2dNLFFBQVVtUCxHQUFZeFIsR0FBUSxJQWhHaEUzSixLQWlHTHNMLFNBQVUsR0FFQyxJQUFiNlAsSUFuR09uYixLQW9HRG1TLFdBQ0p4SSxHQUFRLEVBckdIM0osS0FzR0htUyxTQUFTdkUsT0FBT2pFLEdBQU0sRUFBTWtFLEdBQ3RCMUcsSUFDWEEsRUFBVyxhQXhHSG5ILEtBMkdEK0ssS0FBSzJMLFVBQTRCLElBM0doQzFXLEtBMkdzQmdNLE9BQTRCLElBQWJsQixHQUFxQm9DLEdBM0cxRGxOLEtBNEdKOE8sVUFBVSxhQUdqQnNFLEVBL0dXcFQsS0ErR0RpUyxTQUNIbUIsR0FDRkEsRUFBRzdJLEVBQ042SSxFQUFHOVIsRUFBRThSLEVBQUdsUixHQUFHa1IsRUFBRzNTLEVBbEhMVCxLQWtIYzJQLE1BQVF5RCxFQUFHalIsR0FFbENpUixFQUFHOVIsRUFBRThSLEVBQUdsUixHQUFLa1IsRUFBRzNTLEVBcEhQVCxLQW9IZ0IyUCxNQUFReUQsRUFBR2pSLEVBRXJDaVIsRUFBS0EsRUFBRzNHLE1BdEhFek0sS0F5SEYyTSxZQUNKaEQsRUFBTyxHQTFIRDNKLEtBMEhhbVMsV0FBc0IsT0FBVnhJLEdBMUh6QjNKLEtBMkhKbVMsU0FBU3ZFLE9BQU9qRSxHQUFNLEVBQU1rRSxHQUU3QlgsSUE3SEtsTixLQTZIb0JnTSxRQUFVbVAsR0FBWUYsR0FBY3BOLElBN0h4RDdOLEtBOEhKOE8sVUFBVSxhQUdiM0gsSUFqSU9uSCxLQWlJYW9NLE1BQU95QixJQUMxQmxFLEVBQU8sR0FsSUQzSixLQWtJV21TLFdBbElYblMsS0FrSTZCMk0sWUFBdUIsT0FBVmhELEdBbEkxQzNKLEtBbUlKbVMsU0FBU3ZFLE9BQU9qRSxHQUFNLEVBQU1rRSxHQUU5Qm9OLElBcklNamIsS0FzSUE0TSxVQUFVdUQsb0JBdElWblEsS0F1SUgrTixVQUFTLEdBQU8sR0F2SWIvTixLQXlJSnNMLFNBQVUsSUFFWDRCLEdBM0lLbE4sS0EySWtCK0ssS0FBSzVELElBM0l2Qm5ILEtBNElKOE8sVUFBVTNILEdBRUMsSUFBYjJELEdBamhETSxPQW00Q0E5SyxLQThJaUJ3TSxjQWpoRGpCLE9BaWhEOEMwTyxJQTlJOUNsYixLQStJSndNLGFBQWUsT0FLdkJ0SyxFQUFFb00sTUFBUSxTQUFTdkQsRUFBTWhFLEVBQVEyUixHQUloQyxHQUhhLFFBQVQzTixJQUNIQSxFQUFPLE1BRUksTUFBUkEsSUFBNEIsTUFBVmhFLEdBQWtCQSxJQUFXL0csS0FBSytHLFFBRXZELE9BREEvRyxLQUFLcVMsT0FBUSxFQUNOclMsS0FBSytOLFVBQVMsR0FBTyxHQUU3QmhILEVBQTZCLGlCQUFiLEVBQTBCQSxHQUFVL0csS0FBSzJSLFVBQVkzUixLQUFLK0csT0FBVXhFLEVBQVV5TyxTQUFTakssSUFBV0EsRUFDbEgsSUFFQzNHLEVBQUdtYSxFQUFrQnJZLEVBQUdrUixFQUFJa0gsRUFBWXRCLEVBQVNzQyxFQUFXQyxFQUFRQyxFQUZqRUMsRUFBeUIvQyxHQUFvQjFZLEtBQUtnTSxPQUFTME0sRUFBaUJ4UCxhQUFlbEosS0FBS2tKLFlBQWNsSixLQUFLNE0sWUFBYzhMLEVBQWlCOUwsVUFDcko4TyxFQUFVMWIsS0FBS2lTLFNBRWhCLElBQUt2TyxFQUFTcUQsSUFBV2lMLEVBQVlqTCxLQUFrQyxpQkFBZkEsRUFBTyxHQUU5RCxJQURBM0csRUFBSTJHLEVBQU8zRCxTQUNGaEQsR0FBSyxHQUNUSixLQUFLc08sTUFBTXZELEVBQU1oRSxFQUFPM0csR0FBSXNZLEtBQy9CTSxHQUFVLE9BR04sQ0FDTixHQUFJaFosS0FBSzJSLFVBRVIsSUFEQXZSLEVBQUlKLEtBQUsyUixTQUFTdk8sU0FDVGhELEdBQUssR0FDYixHQUFJMkcsSUFBVy9HLEtBQUsyUixTQUFTdlIsR0FBSSxDQUNoQ2thLEVBQWF0YSxLQUFLNFIsWUFBWXhSLElBQU0sR0FDcENKLEtBQUtrUyxrQkFBb0JsUyxLQUFLa1MsbUJBQXFCLEdBQ25EcUksRUFBbUJ2YSxLQUFLa1Msa0JBQWtCOVIsR0FBSzJLLEVBQU8vSyxLQUFLa1Msa0JBQWtCOVIsSUFBTSxHQUFLLE1BQ3hGLFdBR0ksSUFBSTJHLElBQVcvRyxLQUFLK0csT0FDMUIsT0FBTyxFQUVQdVQsRUFBYXRhLEtBQUs0UixZQUNsQjJJLEVBQW1CdmEsS0FBS2tTLGtCQUFvQm5ILEVBQU8vSyxLQUFLa1MsbUJBQXFCLEdBQUssTUFHbkYsR0FBSW9JLEVBQVksQ0FHZixHQUZBZ0IsRUFBWXZRLEdBQVF1UCxFQUNwQmlCLEVBQVV4USxJQUFTd1AsR0FBeUMsUUFBckJBLEdBQThCeFAsSUFBU3VQLElBQWdDLGlCQUFYLElBQXdCdlAsRUFBSzRRLFdBQzVIakQsSUFBcUJuVyxFQUFVa1YsYUFBZXpYLEtBQUsrSyxLQUFLME0sYUFBYyxDQUN6RSxJQUFLdlYsS0FBS29aLEVBQ0xoQixFQUFXcFksS0FDVHNaLElBQ0pBLEVBQVMsSUFFVkEsRUFBT2hZLEtBQUt0QixJQUdkLElBQUtzWixJQUFXelEsS0FBVXlOLEVBQWF4WSxLQUFNMFksRUFBa0IzUixFQUFReVUsR0FDdEUsT0FBTyxFQUlULElBQUt0WixLQUFLb1osR0FDSmxJLEVBQUtrSCxFQUFXcFksTUFDaEJ1WixJQUNDckksRUFBRzdJLEVBQ042SSxFQUFHOVIsRUFBRThSLEVBQUdsUixHQUFHa1IsRUFBR2pSLEdBRWRpUixFQUFHOVIsRUFBRThSLEVBQUdsUixHQUFLa1IsRUFBR2pSLEVBRWpCNlcsR0FBVSxHQUVQNUYsRUFBR2dDLElBQU1oQyxFQUFHOVIsRUFBRWdOLE1BQU1nTixLQUN2QnRDLEdBQVUsR0FFTjVGLEVBQUdnQyxJQUFzQyxJQUFoQ2hDLEVBQUc5UixFQUFFdVosZ0JBQWdCelgsU0FDOUJnUSxFQUFHdkMsTUFDTnVDLEVBQUd2QyxNQUFNcEUsTUFBUTJHLEVBQUczRyxNQUNWMkcsSUFBT3BULEtBQUtpUyxXQUN0QmpTLEtBQUtpUyxTQUFXbUIsRUFBRzNHLE9BRWhCMkcsRUFBRzNHLFFBQ04yRyxFQUFHM0csTUFBTW9FLE1BQVF1QyxFQUFHdkMsT0FFckJ1QyxFQUFHM0csTUFBUTJHLEVBQUd2QyxNQUFRLGFBRWhCeUosRUFBV3BZLElBRWZxWixJQUNIaEIsRUFBaUJyWSxHQUFLLElBR25CbEMsS0FBS2lTLFVBQVlqUyxLQUFLcU0sVUFBWXFQLEdBQ3RDMWIsS0FBSytOLFVBQVMsR0FBTyxJQUl4QixPQUFPaUwsR0FHUjlXLEVBQUU0TCxXQUFhLFdBQ1Y5TixLQUFLb1MseUJBQ1I3UCxFQUFVOFgsZUFBZSxhQUFjcmEsTUFFeEMsSUFBSXNCLEVBQUl0QixLQUFLZ00sTUFTYixPQVJBaE0sS0FBS2lTLFNBQVdqUyxLQUFLa1Msa0JBQW9CbFMsS0FBS21TLFNBQVduUyxLQUFLMk0sVUFBWSxLQUMxRTNNLEtBQUtvUyx3QkFBMEJwUyxLQUFLc0wsUUFBVXRMLEtBQUtxUyxPQUFRLEVBQzNEclMsS0FBSzRSLFlBQWU1UixLQUFhLFNBQUksR0FBSyxHQUMxQzZLLEVBQVU3SSxVQUFVOEwsV0FBV3ZOLEtBQUtQLE1BQ2hDQSxLQUFLK0ssS0FBS1Esa0JBQ2J2TCxLQUFLZ00sT0E3bkRLLEtBOG5EVmhNLEtBQUs0TixPQUFPdE0sR0FBRyxHQUEwQixJQUFuQnRCLEtBQUsrSyxLQUFLeU0sT0FFMUJ4WCxNQUdSa0MsRUFBRTZMLFNBQVcsU0FBU0ksRUFBU0MsR0FJOUIsR0FIS3JMLEdBQ0pELEVBQVE0RSxPQUVMeUcsR0FBV25PLEtBQUtvTSxJQUFLLENBQ3hCLElBQ0NoTSxFQURHOFEsRUFBVWxSLEtBQUsyUixTQUVuQixHQUFJVCxFQUVILElBREE5USxFQUFJOFEsRUFBUTlOLFNBQ0hoRCxHQUFLLEdBQ2JKLEtBQUs2UixVQUFVelIsR0FBSzBSLEVBQVVaLEVBQVE5USxHQUFJSixNQUFNLFFBR2pEQSxLQUFLNlIsVUFBWUMsRUFBVTlSLEtBQUsrRyxPQUFRL0csTUFBTSxHQUloRCxPQURBNkssRUFBVTdJLFVBQVUrTCxTQUFTeE4sS0FBS1AsS0FBTW1PLEVBQVNDLE1BQzdDcE8sS0FBS29TLDBCQUE2QnBTLEtBQUtpUyxXQUNuQzFQLEVBQVU4WCxlQUFnQmxNLEVBQVUsWUFBYyxhQUFlbk8sT0FRMUV1QyxFQUFVeVgsR0FBSyxTQUFTalQsRUFBUStELEVBQVVDLEdBQ3pDLE9BQU8sSUFBSXhJLEVBQVV3RSxFQUFRK0QsRUFBVUMsSUFHeEN4SSxFQUFVMEssS0FBTyxTQUFTbEcsRUFBUStELEVBQVVDLEdBRzNDLE9BRkFBLEVBQUtzTCxjQUFlLEVBQ3BCdEwsRUFBS1EsZ0JBQTJDLEdBQXhCUixFQUFLUSxnQkFDdEIsSUFBSWhKLEVBQVV3RSxFQUFRK0QsRUFBVUMsSUFHeEN4SSxFQUFVcVosT0FBUyxTQUFTN1UsRUFBUStELEVBQVUrUSxFQUFVQyxHQUd2RCxPQUZBQSxFQUFPeEYsUUFBVXVGLEVBQ2pCQyxFQUFPdlEsZ0JBQTZDLEdBQTFCdVEsRUFBT3ZRLGlCQUF3RCxHQUE1QnNRLEVBQVN0USxnQkFDL0QsSUFBSWhKLEVBQVV3RSxFQUFRK0QsRUFBVWdSLElBR3hDdlosRUFBVXdaLFlBQWMsU0FBUzNRLEVBQU9qRSxFQUFVeUgsRUFBUXhILEVBQU95RSxHQUNoRSxPQUFPLElBQUl0SixFQUFVNEUsRUFBVSxFQUFHLENBQUNpRSxNQUFNQSxFQUFPOEssV0FBVy9PLEVBQVVnUCxpQkFBaUJ2SCxFQUFRSSxjQUFjNUgsRUFBT3lQLGtCQUFrQjFQLEVBQVUyUCx3QkFBd0JsSSxFQUFRckQsaUJBQWdCLEVBQU9pTSxNQUFLLEVBQU8zTCxVQUFVQSxFQUFXMEYsVUFBVSxLQUdsUGhQLEVBQVV5WixJQUFNLFNBQVNqVixFQUFRZ0UsR0FDaEMsT0FBTyxJQUFJeEksRUFBVXdFLEVBQVEsRUFBR2dFLElBR2pDeEksRUFBVTBaLFlBQWMsU0FBU2xWLEVBQVFtVixHQUN4QyxHQUFjLE1BQVZuVixFQUFrQixNQUFPLEdBRTdCLElBQUkzRyxFQUFHeUMsRUFBR29ELEVBQUczRSxFQUNiLEdBRkF5RixFQUE2QixpQkFBYixFQUF5QkEsRUFBU3hFLEVBQVV5TyxTQUFTakssSUFBV0EsR0FFM0VyRCxFQUFTcUQsSUFBV2lMLEVBQVlqTCxLQUFrQyxpQkFBZkEsRUFBTyxHQUFrQixDQUdoRixJQUZBM0csRUFBSTJHLEVBQU8zRCxPQUNYUCxFQUFJLEtBQ0t6QyxHQUFLLEdBQ2J5QyxFQUFJQSxFQUFFMkMsT0FBT2pELEVBQVUwWixZQUFZbFYsRUFBTzNHLEdBQUk4YixJQUkvQyxJQUZBOWIsRUFBSXlDLEVBQUVPLFNBRUdoRCxHQUFLLEdBR2IsSUFGQWtCLEVBQUl1QixFQUFFekMsR0FDTjZGLEVBQUk3RixJQUNLNkYsR0FBSyxHQUNUM0UsSUFBTXVCLEVBQUVvRCxJQUNYcEQsRUFBRThFLE9BQU92SCxFQUFHLFFBSVQsR0FBSTJHLEVBQU93UixXQUdqQixJQURBblksR0FEQXlDLEVBQUlpUCxFQUFVL0ssR0FBUXZCLFVBQ2hCcEMsU0FDR2hELEdBQUssSUFDVHlDLEVBQUV6QyxHQUFHZ00sS0FBUThQLElBQWVyWixFQUFFekMsR0FBRzROLGFBQ3BDbkwsRUFBRThFLE9BQU92SCxFQUFHLEdBSWYsT0FBT3lDLEdBQUssSUFHYk4sRUFBVTRaLGFBQWU1WixFQUFVNlosbUJBQXFCLFNBQVNyVixFQUFRbVYsRUFBWW5SLEdBQ3pELGlCQUFqQixJQUNUQSxFQUFPbVIsRUFDUEEsR0FBYSxHQUlkLElBRkEsSUFBSXJaLEVBQUlOLEVBQVUwWixZQUFZbFYsRUFBUW1WLEdBQ3JDOWIsRUFBSXlDLEVBQUVPLFNBQ0VoRCxHQUFLLEdBQ2J5QyxFQUFFekMsR0FBR2tPLE1BQU12RCxFQUFNaEUsSUFXbkIsSUFBSXNWLEdBQWN4WCxFQUFPLHVCQUF1QixTQUFTaVUsRUFBT3hSLEdBQzdEdEgsS0FBSzZhLGlCQUFtQi9CLEdBQVMsSUFBSTNWLE1BQU0sS0FDM0NuRCxLQUFLc2MsVUFBWXRjLEtBQUs2YSxnQkFBZ0IsR0FDdEM3YSxLQUFLNGEsVUFBWXRULEdBQVksRUFDN0J0SCxLQUFLdWMsT0FBU0YsR0FBWXJhLGFBQ3hCLEdBaUlMLEdBL0hBRSxFQUFJbWEsR0FBWXJhLFVBQ2hCcWEsR0FBWS9KLFFBQVUsU0FDdEIrSixHQUFZRyxJQUFNLEVBQ2xCdGEsRUFBRStQLFNBQVcsS0FDYi9QLEVBQUV1YSxVQUFZN0gsRUFDZDFTLEVBQUV3UyxTQUFXeEIsRUFFYmhSLEVBQUVvTSxNQUFRLFNBQVNvTyxHQUNsQixJQUVDdGMsRUFGR3lDLEVBQUk3QyxLQUFLNmEsZ0JBQ1p6SCxFQUFLcFQsS0FBS2lTLFNBRVgsR0FBOEIsTUFBMUJ5SyxFQUFPMWMsS0FBS3NjLFdBQ2Z0YyxLQUFLNmEsZ0JBQWtCLFFBR3ZCLElBREF6YSxFQUFJeUMsRUFBRU8sU0FDR2hELEdBQUssR0FDTyxNQUFoQnNjLEVBQU83WixFQUFFekMsS0FDWnlDLEVBQUU4RSxPQUFPdkgsRUFBRyxHQUlmLEtBQU9nVCxHQUNjLE1BQWhCc0osRUFBT3RKLEVBQUd2UixLQUNUdVIsRUFBRzNHLFFBQ04yRyxFQUFHM0csTUFBTW9FLE1BQVF1QyxFQUFHdkMsT0FFakJ1QyxFQUFHdkMsT0FDTnVDLEVBQUd2QyxNQUFNcEUsTUFBUTJHLEVBQUczRyxNQUNwQjJHLEVBQUd2QyxNQUFRLE1BQ0Q3USxLQUFLaVMsV0FBYW1CLElBQzVCcFQsS0FBS2lTLFNBQVdtQixFQUFHM0csUUFHckIyRyxFQUFLQSxFQUFHM0csTUFFVCxPQUFPLEdBR1J2SyxFQUFFeWEsS0FBT3phLEVBQUUwYSxZQUFjLFNBQVNGLEdBR2pDLElBRkEsSUFDQ3ZKLEVBREdDLEVBQUtwVCxLQUFLaVMsU0FFUG1CLElBQ05ELEVBQU11SixFQUFPMWMsS0FBS3NjLFlBQXVCLE1BQVJsSixFQUFHdlIsR0FBYTZhLEVBQVF0SixFQUFHdlIsRUFBRXNCLE1BQU1uRCxLQUFLc2MsVUFBWSxLQUFLNVgsS0FBSyxPQUNwRSxtQkFBVixJQUNILElBQVQwTyxFQUFHN0ksRUFDTjZJLEVBQUc5UixFQUFFZ1QsU0FBUzlULEVBQUkyUyxFQUVsQkMsRUFBRzVTLEVBQUkyUyxHQUdUQyxFQUFLQSxFQUFHM0csT0FJVmxLLEVBQVU4WCxlQUFpQixTQUFTblYsRUFBTXdKLEdBQ3pDLElBQ0NzSyxFQUFTNkQsRUFBS0MsRUFBT0MsRUFBTWhNLEVBRHhCcUMsRUFBSzFFLEVBQU11RCxTQUVmLEdBQWEsb0JBQVQvTSxFQUE0QixDQUUvQixLQUFPa08sR0FBSSxDQUdWLElBRkFyQyxFQUFPcUMsRUFBRzNHLE1BQ1ZvUSxFQUFNQyxFQUNDRCxHQUFPQSxFQUFJalYsR0FBS3dMLEVBQUd4TCxJQUN6QmlWLEVBQU1BLEVBQUlwUSxPQUVOMkcsRUFBR3ZDLE1BQVFnTSxFQUFNQSxFQUFJaE0sTUFBUWtNLEdBQ2pDM0osRUFBR3ZDLE1BQU1wRSxNQUFRMkcsRUFFakIwSixFQUFRMUosR0FFSkEsRUFBRzNHLE1BQVFvUSxHQUNmQSxFQUFJaE0sTUFBUXVDLEVBRVoySixFQUFPM0osRUFFUkEsRUFBS3JDLEVBRU5xQyxFQUFLMUUsRUFBTXVELFNBQVc2SyxFQUV2QixLQUFPMUosR0FDRkEsRUFBR2dDLElBQStCLG1CQUFoQmhDLEVBQUc5UixFQUFFNEQsSUFBMkJrTyxFQUFHOVIsRUFBRTRELE9BQzFEOFQsR0FBVSxHQUVYNUYsRUFBS0EsRUFBRzNHLE1BRVQsT0FBT3VNLEdBR1JxRCxHQUFZVyxTQUFXLFNBQVNDLEdBRS9CLElBREEsSUFBSTdjLEVBQUk2YyxFQUFRN1osU0FDUGhELEdBQUssR0FDVDZjLEVBQVE3YyxHQUFHb2MsTUFBUUgsR0FBWUcsTUFDbEM1RyxHQUFTLElBQUtxSCxFQUFRN2MsSUFBTWtjLFdBQWFXLEVBQVE3YyxJQUduRCxPQUFPLEdBSVJ3RSxFQUFVNFYsT0FBUyxTQUFTUCxHQUMzQixLQUFLQSxHQUFXQSxFQUFPaUQsVUFBYWpELEVBQU81VixNQUFTNFYsRUFBT3VDLEtBQU8sS0FBTSw2QkFDeEUsSUFVQzNILEVBVkdxSSxFQUFXakQsRUFBT2lELFNBQ3JCNVYsRUFBVzJTLEVBQU8zUyxVQUFZLEVBQzlCNlYsRUFBaUJsRCxFQUFPa0QsZUFDeEJ6WCxFQUFNLENBQUNyQixLQUFLLGVBQWdCMlgsSUFBSSxXQUFZek4sS0FBSyxRQUFTa0csTUFBTSxPQUFRTSxJQUFJLE9BQVFxSSxRQUFRLG1CQUM1RkMsRUFBU3hZLEVBQU8sV0FBYXFZLEVBQVNwSyxPQUFPLEdBQUd3SyxjQUFnQkosRUFBU2hPLE9BQU8sR0FBSyxVQUNwRixXQUNDbU4sR0FBWTliLEtBQUtQLEtBQU1rZCxFQUFVNVYsR0FDakN0SCxLQUFLNmEsZ0JBQWtCc0MsR0FBa0IsTUFDcEIsSUFBbEJsRCxFQUFPM1gsUUFDWkosRUFBSW1iLEVBQU9yYixVQUFZLElBQUlxYSxHQUFZYSxHQUl4QyxJQUFLckksS0FGTDNTLEVBQUUwSSxZQUFjeVMsRUFDaEJBLEVBQU9iLElBQU12QyxFQUFPdUMsSUFDUDlXLEVBQ2lCLG1CQUFsQnVVLEVBQU9wRixLQUNqQjNTLEVBQUV3RCxFQUFJbVAsSUFBU29GLEVBQU9wRixJQUt4QixPQUZBd0ksRUFBTy9LLFFBQVUySCxFQUFPM0gsUUFDeEIrSixHQUFZVyxTQUFTLENBQUNLLElBQ2ZBLEdBS1J4YSxFQUFJUixFQUFPa2IsU0FDSixDQUNOLElBQUtuZCxFQUFJLEVBQUdBLEVBQUl5QyxFQUFFTyxPQUFRaEQsSUFDekJ5QyxFQUFFekMsS0FFSCxJQUFLOEIsS0FBSzJCLEVBQ0pBLEVBQVczQixHQUFHOEIsTUFDbEIzQixFQUFPbWIsUUFBUUMsSUFBSSx3Q0FBMEN2YixHQU9oRSxPQUZBYSxHQUFnQixFQUVUUixFQTk0RGMsQ0FnNURwQkgsR0FFUTBDLEVBQVUxQyxFQUFTUSxpQkFDMUI4YSxFQUFhNVksRUFBUTZZLElBQUlDLFVBRWxCMU4sRUFBaUJ3TixFQUFXRyxLQUFLM04sZUFDakNyRixFQUFZNlMsRUFBV0csS0FBS2hULFVBQzVCN0YsRUFBT0YsRUFBUUUsS0FPZnFYLEdBTlN2WCxFQUFRMkIsT0FFUjNCLEVBQVFnWixPQUNSaFosRUFBUWlaLE9BQ1JqWixFQUFRa1osT0FDUmxaLEVBQVFtWixPQUNIblosRUFBUXVYLGFBQ0pxQixFQUFXL1MsT0FBTzdELGtCLHNDQ3Q3RC9DLElBQUl4RSxFQUFTLEVBQVEsR0FDakJ1YixFQUFPLEVBQVEsR0FDZkssRUFBTyxFQUFRLElBQ2ZDLEVBQVcsRUFBUSxJQUNuQkMsRUFBTSxFQUFRLElBR2RDLEVBQVUsU0FBVW5aLEVBQU12RSxFQUFNMmQsR0FDbEMsSUFRSTNjLEVBQUs0YyxFQUFLQyxFQUFLQyxFQVJmQyxFQUFZeFosRUFBT21aLEVBQVFNLEVBQzNCQyxFQUFZMVosRUFBT21aLEVBQVFRLEVBQzNCQyxFQUFZNVosRUFBT21aLEVBQVFVLEVBQzNCQyxFQUFXOVosRUFBT21aLEVBQVFZLEVBQzFCQyxFQUFVaGEsRUFBT21aLEVBQVFjLEVBQ3pCcFksRUFBUzZYLEVBQVl0YyxFQUFTd2MsRUFBWXhjLEVBQU8zQixLQUFVMkIsRUFBTzNCLEdBQVEsS0FBTzJCLEVBQU8zQixJQUFTLElBQWEsVUFDOUdoQixFQUFVaWYsRUFBWWYsRUFBT0EsRUFBS2xkLEtBQVVrZCxFQUFLbGQsR0FBUSxJQUN6RHllLEVBQVd6ZixFQUFpQixZQUFNQSxFQUFpQixVQUFJLElBRzNELElBQUtnQyxLQUREaWQsSUFBV04sRUFBUzNkLEdBQ1oyZCxFQUlWRSxJQUZBRCxHQUFPRyxHQUFhM1gsUUFBMEJzWSxJQUFoQnRZLEVBQU9wRixJQUV4Qm9GLEVBQVN1WCxHQUFRM2MsR0FFOUI4YyxFQUFNUyxHQUFXWCxFQUFNSCxFQUFJSSxFQUFLbGMsR0FBVTBjLEdBQTBCLG1CQUFQUixFQUFvQkosRUFBSWtCLFNBQVMvZSxLQUFNaWUsR0FBT0EsRUFFdkd6WCxHQUFRb1gsRUFBU3BYLEVBQVFwRixFQUFLNmMsRUFBS3RaLEVBQU9tWixFQUFRa0IsR0FFbEQ1ZixFQUFRZ0MsSUFBUTZjLEdBQUtOLEVBQUt2ZSxFQUFTZ0MsRUFBSzhjLEdBQ3hDTyxHQUFZSSxFQUFTemQsSUFBUTZjLElBQUtZLEVBQVN6ZCxHQUFPNmMsSUFHMURsYyxFQUFPdWIsS0FBT0EsRUFFZFEsRUFBUU0sRUFBSSxFQUNaTixFQUFRUSxFQUFJLEVBQ1pSLEVBQVFVLEVBQUksRUFDWlYsRUFBUVksRUFBSSxFQUNaWixFQUFRYyxFQUFJLEdBQ1pkLEVBQVFtQixFQUFJLEdBQ1puQixFQUFRa0IsRUFBSSxHQUNabEIsRUFBUW9CLEVBQUksSUFDWjdmLEVBQU9ELFFBQVUwZSxHLGNDekNqQixJQUFJL2IsRUFBUzFDLEVBQU9ELFFBQTJCLG9CQUFWMEMsUUFBeUJBLE9BQU82SCxNQUFRQSxLQUN6RTdILE9BQXdCLG9CQUFSdEMsTUFBdUJBLEtBQUttSyxNQUFRQSxLQUFPbkssS0FFM0R1ZixTQUFTLGNBQVRBLEdBQ2MsaUJBQVBJLE1BQWlCQSxJQUFNcGQsSSxjQ0xsQzFDLEVBQU9ELFFBQVUsU0FBVWdnQixHQUN6QixJQUNFLFFBQVNBLElBQ1QsTUFBTzNaLEdBQ1AsT0FBTyxLLGdCQ0pYLElBQUk0WixFQUFXLEVBQVEsR0FDdkJoZ0IsRUFBT0QsUUFBVSxTQUFVa2dCLEdBQ3pCLElBQUtELEVBQVNDLEdBQUssTUFBTUMsVUFBVUQsRUFBSyxzQkFDeEMsT0FBT0EsSSxjQ0hUamdCLEVBQU9ELFFBQVUsU0FBVWtnQixHQUN6QixNQUFxQixpQkFBUEEsRUFBeUIsT0FBUEEsRUFBNEIsbUJBQVBBLEksZ0JDRHZELElBQUlFLEVBQVEsRUFBUSxHQUFSLENBQXFCLE9BQzdCQyxFQUFNLEVBQVEsSUFDZDdlLEVBQVMsRUFBUSxHQUFhQSxPQUM5QjhlLEVBQThCLG1CQUFWOWUsR0FFVHZCLEVBQU9ELFFBQVUsU0FBVWdCLEdBQ3hDLE9BQU9vZixFQUFNcGYsS0FBVW9mLEVBQU1wZixHQUMzQnNmLEdBQWM5ZSxFQUFPUixLQUFVc2YsRUFBYTllLEVBQVM2ZSxHQUFLLFVBQVlyZixNQUdqRW9mLE1BQVFBLEcsZ0JDVGpCLElBQUlHLEVBQVksRUFBUSxJQUNwQi9WLEVBQU1ELEtBQUtDLElBQ2Z2SyxFQUFPRCxRQUFVLFNBQVVrZ0IsR0FDekIsT0FBT0EsRUFBSyxFQUFJMVYsRUFBSStWLEVBQVVMLEdBQUssa0JBQW9CLEksY0NKekQsSUFBSWhDLEVBQU9qZSxFQUFPRCxRQUFVLENBQUUyUyxRQUFTLFNBQ3JCLGlCQUFQNk4sTUFBaUJBLElBQU10QyxJLGdCQ0FsQ2plLEVBQU9ELFNBQVcsRUFBUSxFQUFSLEVBQW9CLFdBQ3BDLE9BQStFLEdBQXhFbUIsT0FBT0MsZUFBZSxHQUFJLElBQUssQ0FBRUUsSUFBSyxXQUFjLE9BQU8sS0FBUTRCLE0sZ0JDRjVFLElBQUl1ZCxFQUFXLEVBQVEsR0FDbkJDLEVBQWlCLEVBQVEsSUFDekJDLEVBQWMsRUFBUSxJQUN0QkMsRUFBS3pmLE9BQU9DLGVBRWhCcEIsRUFBUTRLLEVBQUksRUFBUSxHQUFvQnpKLE9BQU9DLGVBQWlCLFNBQXdCeWYsRUFBR3ZCLEVBQUd3QixHQUk1RixHQUhBTCxFQUFTSSxHQUNUdkIsRUFBSXFCLEVBQVlyQixHQUFHLEdBQ25CbUIsRUFBU0ssR0FDTEosRUFBZ0IsSUFDbEIsT0FBT0UsRUFBR0MsRUFBR3ZCLEVBQUd3QixHQUNoQixNQUFPemEsSUFDVCxHQUFJLFFBQVN5YSxHQUFjLFFBQVNBLEVBQVksTUFBTVgsVUFBVSw0QkFFaEUsTUFESSxVQUFXVyxJQUFZRCxFQUFFdkIsR0FBS3dCLEVBQVdwZixPQUN0Q21mLEksZ0JDYlQsSUFBSUUsRUFBVSxFQUFRLElBQ3RCOWdCLEVBQU9ELFFBQVUsU0FBVWtnQixHQUN6QixPQUFPL2UsT0FBTzRmLEVBQVFiLE0sZ0JDSHhCLElBQUl2ZCxFQUFTLEVBQVEsR0FDakI0YixFQUFPLEVBQVEsSUFDZnlDLEVBQU0sRUFBUSxJQUNkQyxFQUFNLEVBQVEsR0FBUixDQUFrQixPQUN4QkMsRUFBWSxFQUFRLEtBRXBCQyxHQUFPLEdBQUtELEdBQVcxZCxNQURYLFlBR2hCLEVBQVEsR0FBVzRkLGNBQWdCLFNBQVVsQixHQUMzQyxPQUFPZ0IsRUFBVXRnQixLQUFLc2YsS0FHdkJqZ0IsRUFBT0QsUUFBVSxTQUFVNmdCLEVBQUc3ZSxFQUFLd1IsRUFBSzZOLEdBQ3ZDLElBQUlDLEVBQTJCLG1CQUFQOU4sRUFDcEI4TixJQUFZTixFQUFJeE4sRUFBSyxTQUFXK0ssRUFBSy9LLEVBQUssT0FBUXhSLElBQ2xENmUsRUFBRTdlLEtBQVN3UixJQUNYOE4sSUFBWU4sRUFBSXhOLEVBQUt5TixJQUFRMUMsRUFBSy9LLEVBQUt5TixFQUFLSixFQUFFN2UsR0FBTyxHQUFLNmUsRUFBRTdlLEdBQU9tZixFQUFJcGMsS0FBS3djLE9BQU92ZixNQUNuRjZlLElBQU1sZSxFQUNSa2UsRUFBRTdlLEdBQU93UixFQUNDNk4sRUFHRFIsRUFBRTdlLEdBQ1g2ZSxFQUFFN2UsR0FBT3dSLEVBRVQrSyxFQUFLc0MsRUFBRzdlLEVBQUt3UixXQUxOcU4sRUFBRTdlLEdBQ1R1YyxFQUFLc0MsRUFBRzdlLEVBQUt3UixPQU9kbU0sU0FBU3RkLFVBdkJJLFlBdUJrQixXQUNoQyxNQUFzQixtQkFBUmhDLE1BQXNCQSxLQUFLNGdCLElBQVFDLEVBQVV0Z0IsS0FBS1AsVSxnQkM3QmxFLElBQUlxZSxFQUFVLEVBQVEsR0FDbEI4QyxFQUFRLEVBQVEsR0FDaEJULEVBQVUsRUFBUSxJQUNsQlUsRUFBTyxLQUVQQyxFQUFhLFNBQVVDLEVBQVFDLEVBQUtDLEVBQVduZ0IsR0FDakQsSUFBSTBkLEVBQUltQyxPQUFPUixFQUFRWSxJQUNuQkcsRUFBSyxJQUFNRixFQUVmLE1BRGtCLEtBQWRDLElBQWtCQyxHQUFNLElBQU1ELEVBQVksS0FBT04sT0FBTzdmLEdBQU9pVSxRQUFROEwsRUFBTSxVQUFZLEtBQ3RGSyxFQUFLLElBQU0xQyxFQUFJLEtBQU93QyxFQUFNLEtBRXJDM2hCLEVBQU9ELFFBQVUsU0FBVStoQixFQUFNL0IsR0FDL0IsSUFBSWEsRUFBSSxHQUNSQSxFQUFFa0IsR0FBUS9CLEVBQUswQixHQUNmaEQsRUFBUUEsRUFBUVksRUFBSVosRUFBUU0sRUFBSXdDLEdBQU0sV0FDcEMsSUFBSXhNLEVBQU8sR0FBRytNLEdBQU0sS0FDcEIsT0FBTy9NLElBQVNBLEVBQUtnTixlQUFpQmhOLEVBQUt4UixNQUFNLEtBQUtDLE9BQVMsS0FDN0QsU0FBVW9kLEssY0NqQmhCLElBQUl2ZSxFQUFpQixHQUFHQSxlQUN4QnJDLEVBQU9ELFFBQVUsU0FBVWtnQixFQUFJbGUsR0FDN0IsT0FBT00sRUFBZTFCLEtBQUtzZixFQUFJbGUsSyxnQkNGakMsSUFBSTRlLEVBQUssRUFBUSxJQUNicUIsRUFBYSxFQUFRLElBQ3pCaGlCLEVBQU9ELFFBQVUsRUFBUSxHQUFvQixTQUFVbUMsRUFBUUgsRUFBS04sR0FDbEUsT0FBT2tmLEVBQUdoVyxFQUFFekksRUFBUUgsRUFBS2lnQixFQUFXLEVBQUd2Z0IsS0FDckMsU0FBVVMsRUFBUUgsRUFBS04sR0FFekIsT0FEQVMsRUFBT0gsR0FBT04sRUFDUFMsSSxnQkNMVCxJQUFJK2YsRUFBVSxFQUFRLElBQ2xCbkIsRUFBVSxFQUFRLElBQ3RCOWdCLEVBQU9ELFFBQVUsU0FBVWtnQixHQUN6QixPQUFPZ0MsRUFBUW5CLEVBQVFiLE0sNkJDSHpCLElBQUlzQixFQUFRLEVBQVEsR0FFcEJ2aEIsRUFBT0QsUUFBVSxTQUFVbWlCLEVBQVFDLEdBQ2pDLFFBQVNELEdBQVVYLEdBQU0sV0FFdkJZLEVBQU1ELEVBQU92aEIsS0FBSyxNQUFNLGNBQTZCLEdBQUt1aEIsRUFBT3ZoQixLQUFLLFcsZ0JDTDFFLElBQUl5aEIsRUFBWSxFQUFRLElBQ3hCcGlCLEVBQU9ELFFBQVUsU0FBVXNpQixFQUFJQyxFQUFNOWUsR0FFbkMsR0FEQTRlLEVBQVVDLFFBQ0c1QyxJQUFUNkMsRUFBb0IsT0FBT0QsRUFDL0IsT0FBUTdlLEdBQ04sS0FBSyxFQUFHLE9BQU8sU0FBVVAsR0FDdkIsT0FBT29mLEVBQUcxaEIsS0FBSzJoQixFQUFNcmYsSUFFdkIsS0FBSyxFQUFHLE9BQU8sU0FBVUEsRUFBR1UsR0FDMUIsT0FBTzBlLEVBQUcxaEIsS0FBSzJoQixFQUFNcmYsRUFBR1UsSUFFMUIsS0FBSyxFQUFHLE9BQU8sU0FBVVYsRUFBR1UsRUFBRzlDLEdBQzdCLE9BQU93aEIsRUFBRzFoQixLQUFLMmhCLEVBQU1yZixFQUFHVSxFQUFHOUMsSUFHL0IsT0FBTyxXQUNMLE9BQU93aEIsRUFBR3RkLE1BQU11ZCxFQUFNalksYyxjQ2pCMUJySyxFQUFPRCxRQUFVLFNBQVVrZ0IsR0FDekIsR0FBaUIsbUJBQU5BLEVBQWtCLE1BQU1DLFVBQVVELEVBQUssdUJBQ2xELE9BQU9BLEksY0NEVCxJQUFJc0MsRUFBT2pZLEtBQUtpWSxLQUNaQyxFQUFRbFksS0FBS2tZLE1BQ2pCeGlCLEVBQU9ELFFBQVUsU0FBVWtnQixHQUN6QixPQUFPeEssTUFBTXdLLEdBQU1BLEdBQU0sR0FBS0EsRUFBSyxFQUFJdUMsRUFBUUQsR0FBTXRDLEssZ0JDSnZELElBQUl3QyxFQUFNLEVBQVEsSUFDZFQsRUFBYSxFQUFRLElBQ3JCVSxFQUFZLEVBQVEsSUFDcEJoQyxFQUFjLEVBQVEsSUFDdEJLLEVBQU0sRUFBUSxJQUNkTixFQUFpQixFQUFRLElBQ3pCa0MsRUFBT3poQixPQUFPMGhCLHlCQUVsQjdpQixFQUFRNEssRUFBSSxFQUFRLEdBQW9CZ1ksRUFBTyxTQUFrQy9CLEVBQUd2QixHQUdsRixHQUZBdUIsRUFBSThCLEVBQVU5QixHQUNkdkIsRUFBSXFCLEVBQVlyQixHQUFHLEdBQ2ZvQixFQUFnQixJQUNsQixPQUFPa0MsRUFBSy9CLEVBQUd2QixHQUNmLE1BQU9qWixJQUNULEdBQUkyYSxFQUFJSCxFQUFHdkIsR0FBSSxPQUFPMkMsR0FBWVMsRUFBSTlYLEVBQUVoSyxLQUFLaWdCLEVBQUd2QixHQUFJdUIsRUFBRXZCLE0sZ0JDYnhELElBQUlaLEVBQVUsRUFBUSxHQUNsQlIsRUFBTyxFQUFRLEdBQ2ZzRCxFQUFRLEVBQVEsR0FDcEJ2aEIsRUFBT0QsUUFBVSxTQUFVOGlCLEVBQUs5QyxHQUM5QixJQUFJc0MsR0FBTXBFLEVBQUsvYyxRQUFVLElBQUkyaEIsSUFBUTNoQixPQUFPMmhCLEdBQ3hDaEUsRUFBTSxHQUNWQSxFQUFJZ0UsR0FBTzlDLEVBQUtzQyxHQUNoQjVELEVBQVFBLEVBQVFVLEVBQUlWLEVBQVFNLEVBQUl3QyxHQUFNLFdBQWNjLEVBQUcsTUFBUSxTQUFVeEQsSyxnQkNEM0UsSUFBSUwsRUFBTSxFQUFRLElBQ2R5RCxFQUFVLEVBQVEsSUFDbEJhLEVBQVcsRUFBUSxJQUNuQkMsRUFBVyxFQUFRLEdBQ25CQyxFQUFNLEVBQVEsS0FDbEJoakIsRUFBT0QsUUFBVSxTQUFVa2pCLEVBQU1DLEdBQy9CLElBQUlDLEVBQWlCLEdBQVJGLEVBQ1RHLEVBQW9CLEdBQVJILEVBQ1pJLEVBQWtCLEdBQVJKLEVBQ1ZLLEVBQW1CLEdBQVJMLEVBQ1hNLEVBQXdCLEdBQVJOLEVBQ2hCTyxFQUFtQixHQUFSUCxHQUFhTSxFQUN4QnpoQixFQUFTb2hCLEdBQVdGLEVBQ3hCLE9BQU8sU0FBVVMsRUFBT0MsRUFBWXBCLEdBUWxDLElBUEEsSUFNSS9PLEVBQUtvUSxFQU5ML0MsRUFBSWtDLEVBQVNXLEdBQ2J0akIsRUFBTzhoQixFQUFRckIsR0FDZmpXLEVBQUk2VCxFQUFJa0YsRUFBWXBCLEVBQU0sR0FDMUI5ZSxFQUFTdWYsRUFBUzVpQixFQUFLcUQsUUFDdkJxRSxFQUFRLEVBQ1IrYixFQUFTVCxFQUFTcmhCLEVBQU8yaEIsRUFBT2pnQixHQUFVNGYsRUFBWXRoQixFQUFPMmhCLEVBQU8sUUFBS2hFLEVBRXZFamMsRUFBU3FFLEVBQU9BLElBQVMsSUFBSTJiLEdBQVkzYixLQUFTMUgsS0FFdER3akIsRUFBTWhaLEVBRE40SSxFQUFNcFQsRUFBSzBILEdBQ0VBLEVBQU8rWSxHQUNoQnFDLEdBQ0YsR0FBSUUsRUFBUVMsRUFBTy9iLEdBQVM4YixPQUN2QixHQUFJQSxFQUFLLE9BQVFWLEdBQ3BCLEtBQUssRUFBRyxPQUFPLEVBQ2YsS0FBSyxFQUFHLE9BQU8xUCxFQUNmLEtBQUssRUFBRyxPQUFPMUwsRUFDZixLQUFLLEVBQUcrYixFQUFPaGdCLEtBQUsyUCxRQUNmLEdBQUkrUCxFQUFVLE9BQU8sRUFHaEMsT0FBT0MsR0FBaUIsRUFBSUYsR0FBV0MsRUFBV0EsRUFBV00sSyxjQ3pDakUsSUFBSXhnQixFQUFXLEdBQUdBLFNBRWxCcEQsRUFBT0QsUUFBVSxTQUFVa2dCLEdBQ3pCLE9BQU83YyxFQUFTekMsS0FBS3NmLEdBQUk3WCxNQUFNLEdBQUksSyxjQ0ZyQ3BJLEVBQU9ELFFBQVUsU0FBVWtnQixHQUN6QixHQUFVUixNQUFOUSxFQUFpQixNQUFNQyxVQUFVLHlCQUEyQkQsR0FDaEUsT0FBT0EsSSw2QkNGVCxHQUFJLEVBQVEsR0FBbUIsQ0FDN0IsSUFBSTRELEVBQVUsRUFBUSxJQUNsQm5oQixFQUFTLEVBQVEsR0FDakI2ZSxFQUFRLEVBQVEsR0FDaEI5QyxFQUFVLEVBQVEsR0FDbEJxRixFQUFTLEVBQVEsSUFDakJDLEVBQVUsRUFBUSxJQUNsQnZGLEVBQU0sRUFBUSxJQUNkd0YsRUFBYSxFQUFRLElBQ3JCQyxFQUFlLEVBQVEsSUFDdkIzRixFQUFPLEVBQVEsSUFDZjRGLEVBQWMsRUFBUSxJQUN0QjVELEVBQVksRUFBUSxJQUNwQnlDLEVBQVcsRUFBUSxHQUNuQm9CLEVBQVUsRUFBUSxLQUNsQkMsRUFBa0IsRUFBUSxJQUMxQjFELEVBQWMsRUFBUSxJQUN0QkssRUFBTSxFQUFRLElBQ2RzRCxFQUFVLEVBQVEsSUFDbEJyRSxFQUFXLEVBQVEsR0FDbkI4QyxFQUFXLEVBQVEsSUFDbkJ3QixFQUFjLEVBQVEsSUFDdEJ4aUIsRUFBUyxFQUFRLElBQ2pCeWlCLEVBQWlCLEVBQVEsSUFDekJDLEVBQU8sRUFBUSxJQUFrQjdaLEVBQ2pDOFosRUFBWSxFQUFRLElBQ3BCckUsRUFBTSxFQUFRLElBQ2RzRSxFQUFNLEVBQVEsR0FDZEMsRUFBb0IsRUFBUSxJQUM1QkMsRUFBc0IsRUFBUSxJQUM5QkMsRUFBcUIsRUFBUSxJQUM3QkMsRUFBaUIsRUFBUSxJQUN6QkMsRUFBWSxFQUFRLElBQ3BCQyxFQUFjLEVBQVEsSUFDdEJDLEVBQWEsRUFBUSxJQUNyQkMsRUFBWSxFQUFRLElBQ3BCQyxFQUFrQixFQUFRLEtBQzFCQyxFQUFNLEVBQVEsSUFDZEMsRUFBUSxFQUFRLElBQ2hCMUUsRUFBS3lFLEVBQUl6YSxFQUNUZ1ksRUFBTzBDLEVBQU0xYSxFQUNiMmEsRUFBYTVpQixFQUFPNGlCLFdBQ3BCcEYsRUFBWXhkLEVBQU93ZCxVQUNuQnFGLEVBQWE3aUIsRUFBTzZpQixXQUtwQkMsRUFBYXhoQixNQUFlLFVBQzVCeWhCLEVBQWUxQixFQUFRMkIsWUFDdkJDLEVBQVk1QixFQUFRNkIsU0FDcEJDLEVBQWVsQixFQUFrQixHQUNqQ21CLEVBQWNuQixFQUFrQixHQUNoQ29CLEVBQVlwQixFQUFrQixHQUM5QnFCLEVBQWFyQixFQUFrQixHQUMvQnNCLEVBQVl0QixFQUFrQixHQUM5QnVCLEdBQWlCdkIsRUFBa0IsR0FDbkN3QixHQUFnQnZCLEdBQW9CLEdBQ3BDd0IsR0FBZXhCLEdBQW9CLEdBQ25DeUIsR0FBY3ZCLEVBQWV3QixPQUM3QkMsR0FBWXpCLEVBQWUwQixLQUMzQkMsR0FBZTNCLEVBQWU0QixRQUM5QkMsR0FBbUJuQixFQUFXb0IsWUFDOUJDLEdBQWNyQixFQUFXc0IsT0FDekJDLEdBQW1CdkIsRUFBV3dCLFlBQzlCQyxHQUFZekIsRUFBVzFnQixLQUN2Qm9pQixHQUFZMUIsRUFBVzJCLEtBQ3ZCQyxHQUFhNUIsRUFBV3BkLE1BQ3hCaWYsR0FBZ0I3QixFQUFXcGlCLFNBQzNCa2tCLEdBQXNCOUIsRUFBVytCLGVBQ2pDQyxHQUFXOUMsRUFBSSxZQUNmK0MsR0FBTS9DLEVBQUksZUFDVmdELEdBQW9CdEgsRUFBSSxxQkFDeEJ1SCxHQUFrQnZILEVBQUksbUJBQ3RCd0gsR0FBbUI5RCxFQUFPK0QsT0FDMUJDLEdBQWNoRSxFQUFPaUUsTUFDckJDLEdBQU9sRSxFQUFPa0UsS0FHZEMsR0FBT3RELEVBQWtCLEdBQUcsU0FBVS9ELEVBQUdwZCxHQUMzQyxPQUFPMGtCLEdBQVNyRCxFQUFtQmpFLEVBQUdBLEVBQUUrRyxLQUFtQm5rQixNQUd6RDJrQixHQUFnQjVHLEdBQU0sV0FFeEIsT0FBMEQsSUFBbkQsSUFBSWdFLEVBQVcsSUFBSTZDLFlBQVksQ0FBQyxJQUFJQyxRQUFRLE1BR2pEQyxLQUFlL0MsS0FBZ0JBLEVBQW9CLFVBQUVuSixLQUFPbUYsR0FBTSxXQUNwRSxJQUFJZ0UsRUFBVyxHQUFHbkosSUFBSSxPQUdwQm1NLEdBQVcsU0FBVXRJLEVBQUl1SSxHQUMzQixJQUFJQyxFQUFTbkksRUFBVUwsR0FDdkIsR0FBSXdJLEVBQVMsR0FBS0EsRUFBU0QsRUFBTyxNQUFNbEQsRUFBVyxpQkFDbkQsT0FBT21ELEdBR0xDLEdBQVcsU0FBVXpJLEdBQ3ZCLEdBQUlELEVBQVNDLElBQU82SCxNQUFlN0gsRUFBSSxPQUFPQSxFQUM5QyxNQUFNQyxFQUFVRCxFQUFLLDJCQUduQmlJLEdBQVcsU0FBVVMsRUFBR25sQixHQUMxQixLQUFNd2MsRUFBUzJJLElBQU1qQixNQUFxQmlCLEdBQ3hDLE1BQU16SSxFQUFVLHdDQUNoQixPQUFPLElBQUl5SSxFQUFFbmxCLElBR2JvbEIsR0FBa0IsU0FBVWhJLEVBQUdoWixHQUNqQyxPQUFPaWhCLEdBQVNoRSxFQUFtQmpFLEVBQUdBLEVBQUUrRyxLQUFtQi9mLElBR3pEaWhCLEdBQVcsU0FBVUYsRUFBRy9nQixHQUkxQixJQUhBLElBQUlDLEVBQVEsRUFDUnJFLEVBQVNvRSxFQUFLcEUsT0FDZG9nQixFQUFTc0UsR0FBU1MsRUFBR25sQixHQUNsQkEsRUFBU3FFLEdBQU8rYixFQUFPL2IsR0FBU0QsRUFBS0MsS0FDNUMsT0FBTytiLEdBR0xrRixHQUFZLFNBQVU3SSxFQUFJbGUsRUFBS2duQixHQUNqQ3BJLEVBQUdWLEVBQUlsZSxFQUFLLENBQUVWLElBQUssV0FBYyxPQUFPakIsS0FBSzRvQixHQUFHRCxPQUc5Q0UsR0FBUSxTQUFjdkssR0FDeEIsSUFLSWxlLEVBQUdnRCxFQUFROGlCLEVBQVExQyxFQUFRc0YsRUFBTUMsRUFMakN2SSxFQUFJa0MsRUFBU3BFLEdBQ2IwSyxFQUFPL2UsVUFBVTdHLE9BQ2pCNmxCLEVBQVFELEVBQU8sRUFBSS9lLFVBQVUsUUFBS29WLEVBQ2xDNkosT0FBb0I3SixJQUFWNEosRUFDVkUsRUFBUzlFLEVBQVU3RCxHQUV2QixHQUFjbkIsTUFBVjhKLElBQXdCakYsRUFBWWlGLEdBQVMsQ0FDL0MsSUFBS0osRUFBV0ksRUFBTzVvQixLQUFLaWdCLEdBQUkwRixFQUFTLEdBQUk5bEIsRUFBSSxJQUFLMG9CLEVBQU9DLEVBQVNoWSxRQUFRcVksS0FBTWhwQixJQUNsRjhsQixFQUFPMWlCLEtBQUtzbEIsRUFBS3puQixPQUNqQm1mLEVBQUkwRixFQUdSLElBRElnRCxHQUFXRixFQUFPLElBQUdDLEVBQVE3SyxFQUFJNkssRUFBT2hmLFVBQVUsR0FBSSxJQUNyRDdKLEVBQUksRUFBR2dELEVBQVN1ZixFQUFTbkMsRUFBRXBkLFFBQVNvZ0IsRUFBU3NFLEdBQVM5bkIsS0FBTW9ELEdBQVNBLEVBQVNoRCxFQUFHQSxJQUNwRm9qQixFQUFPcGpCLEdBQUs4b0IsRUFBVUQsRUFBTXpJLEVBQUVwZ0IsR0FBSUEsR0FBS29nQixFQUFFcGdCLEdBRTNDLE9BQU9vakIsR0FHTDZGLEdBQU0sV0FJUixJQUhBLElBQUk1aEIsRUFBUSxFQUNSckUsRUFBUzZHLFVBQVU3RyxPQUNuQm9nQixFQUFTc0UsR0FBUzluQixLQUFNb0QsR0FDckJBLEVBQVNxRSxHQUFPK2IsRUFBTy9iLEdBQVN3QyxVQUFVeEMsS0FDakQsT0FBTytiLEdBSUw4RixLQUFrQm5FLEdBQWNoRSxHQUFNLFdBQWMrRixHQUFvQjNtQixLQUFLLElBQUk0a0IsRUFBVyxPQUU1Rm9FLEdBQWtCLFdBQ3BCLE9BQU9yQyxHQUFvQnZpQixNQUFNMmtCLEdBQWdCdEMsR0FBV3ptQixLQUFLK25CLEdBQVN0b0IsT0FBU3NvQixHQUFTdG9CLE1BQU9pSyxZQUdqR3VmLEdBQVEsQ0FDVkMsV0FBWSxTQUFvQjFpQixFQUFRd00sR0FDdEMsT0FBT3dSLEVBQWdCeGtCLEtBQUsrbkIsR0FBU3RvQixNQUFPK0csRUFBUXdNLEVBQU90SixVQUFVN0csT0FBUyxFQUFJNkcsVUFBVSxRQUFLb1YsSUFFbkdxSyxNQUFPLFNBQWVwRyxHQUNwQixPQUFPc0MsRUFBVzBDLEdBQVN0b0IsTUFBT3NqQixFQUFZclosVUFBVTdHLE9BQVMsRUFBSTZHLFVBQVUsUUFBS29WLElBRXRGc0ssS0FBTSxTQUFjdG9CLEdBQ2xCLE9BQU95akIsRUFBVW5nQixNQUFNMmpCLEdBQVN0b0IsTUFBT2lLLFlBRXpDNEosT0FBUSxTQUFnQnlQLEdBQ3RCLE9BQU9rRixHQUFnQnhvQixLQUFNMGxCLEVBQVk0QyxHQUFTdG9CLE1BQU9zakIsRUFDdkRyWixVQUFVN0csT0FBUyxFQUFJNkcsVUFBVSxRQUFLb1YsS0FFMUN1SyxLQUFNLFNBQWNDLEdBQ2xCLE9BQU9oRSxFQUFVeUMsR0FBU3RvQixNQUFPNnBCLEVBQVc1ZixVQUFVN0csT0FBUyxFQUFJNkcsVUFBVSxRQUFLb1YsSUFFcEZ5SyxVQUFXLFNBQW1CRCxHQUM1QixPQUFPL0QsR0FBZXdDLEdBQVN0b0IsTUFBTzZwQixFQUFXNWYsVUFBVTdHLE9BQVMsRUFBSTZHLFVBQVUsUUFBS29WLElBRXpGMEssUUFBUyxTQUFpQnpHLEdBQ3hCbUMsRUFBYTZDLEdBQVN0b0IsTUFBT3NqQixFQUFZclosVUFBVTdHLE9BQVMsRUFBSTZHLFVBQVUsUUFBS29WLElBRWpGbFEsUUFBUyxTQUFpQjZhLEdBQ3hCLE9BQU9oRSxHQUFhc0MsR0FBU3RvQixNQUFPZ3FCLEVBQWUvZixVQUFVN0csT0FBUyxFQUFJNkcsVUFBVSxRQUFLb1YsSUFFM0Y0SyxTQUFVLFNBQWtCRCxHQUMxQixPQUFPakUsR0FBY3VDLEdBQVN0b0IsTUFBT2dxQixFQUFlL2YsVUFBVTdHLE9BQVMsRUFBSTZHLFVBQVUsUUFBS29WLElBRTVGM2EsS0FBTSxTQUFjd2xCLEdBQ2xCLE9BQU9yRCxHQUFVbGlCLE1BQU0yakIsR0FBU3RvQixNQUFPaUssWUFFekN1YyxZQUFhLFNBQXFCd0QsR0FDaEMsT0FBT3pELEdBQWlCNWhCLE1BQU0yakIsR0FBU3RvQixNQUFPaUssWUFFaER2RSxJQUFLLFNBQWF1akIsR0FDaEIsT0FBT3BCLEdBQUtTLEdBQVN0b0IsTUFBT2lwQixFQUFPaGYsVUFBVTdHLE9BQVMsRUFBSTZHLFVBQVUsUUFBS29WLElBRTNFcUgsT0FBUSxTQUFnQnBELEdBQ3RCLE9BQU9tRCxHQUFZOWhCLE1BQU0yakIsR0FBU3RvQixNQUFPaUssWUFFM0MyYyxZQUFhLFNBQXFCdEQsR0FDaEMsT0FBT3FELEdBQWlCaGlCLE1BQU0yakIsR0FBU3RvQixNQUFPaUssWUFFaER5RCxRQUFTLFdBTVAsSUFMQSxJQUlJck0sRUFIQStCLEVBQVNrbEIsR0FERnRvQixNQUNpQm9ELE9BQ3hCK21CLEVBQVNqZ0IsS0FBS2tZLE1BQU1oZixFQUFTLEdBQzdCcUUsRUFBUSxFQUVMQSxFQUFRMGlCLEdBQ2I5b0IsRUFOU3JCLEtBTUl5SCxHQU5KekgsS0FPSnlILEtBUEl6SCxPQU9jb0QsR0FQZHBELEtBUUpvRCxHQUFVL0IsRUFDZixPQVRTckIsTUFXYm9xQixLQUFNLFNBQWM5RyxHQUNsQixPQUFPcUMsRUFBVTJDLEdBQVN0b0IsTUFBT3NqQixFQUFZclosVUFBVTdHLE9BQVMsRUFBSTZHLFVBQVUsUUFBS29WLElBRXJGMEgsS0FBTSxTQUFjc0QsR0FDbEIsT0FBT3ZELEdBQVV2bUIsS0FBSytuQixHQUFTdG9CLE1BQU9xcUIsSUFFeENDLFNBQVUsU0FBa0JDLEVBQU9qWCxHQUNqQyxJQUFJa04sRUFBSThILEdBQVN0b0IsTUFDYm9ELEVBQVNvZCxFQUFFcGQsT0FDWG9uQixFQUFTeEcsRUFBZ0J1RyxFQUFPbm5CLEdBQ3BDLE9BQU8sSUFBS3FoQixFQUFtQmpFLEVBQUdBLEVBQUUrRyxLQUE3QixDQUNML0csRUFBRXlILE9BQ0Z6SCxFQUFFaUssV0FBYUQsRUFBU2hLLEVBQUVrSyxrQkFDMUIvSCxRQUFrQnRELElBQVIvTCxFQUFvQmxRLEVBQVM0Z0IsRUFBZ0IxUSxFQUFLbFEsSUFBV29uQixNQUt6RUcsR0FBUyxTQUFlcFgsRUFBT0QsR0FDakMsT0FBT2tWLEdBQWdCeG9CLEtBQU1nbkIsR0FBV3ptQixLQUFLK25CLEdBQVN0b0IsTUFBT3VULEVBQU9ELEtBR2xFc1gsR0FBTyxTQUFhQyxHQUN0QnZDLEdBQVN0b0IsTUFDVCxJQUFJcW9CLEVBQVNGLEdBQVNsZSxVQUFVLEdBQUksR0FDaEM3RyxFQUFTcEQsS0FBS29ELE9BQ2QwbkIsRUFBTXBJLEVBQVNtSSxHQUNmRSxFQUFNcEksRUFBU21JLEVBQUkxbkIsUUFDbkJxRSxFQUFRLEVBQ1osR0FBSXNqQixFQUFNMUMsRUFBU2psQixFQUFRLE1BQU04aEIsRUF2S2hCLGlCQXdLakIsS0FBT3pkLEVBQVFzakIsR0FBSy9xQixLQUFLcW9CLEVBQVM1Z0IsR0FBU3FqQixFQUFJcmpCLE1BRzdDdWpCLEdBQWEsQ0FDZjFFLFFBQVMsV0FDUCxPQUFPRCxHQUFhOWxCLEtBQUsrbkIsR0FBU3RvQixRQUVwQ29tQixLQUFNLFdBQ0osT0FBT0QsR0FBVTVsQixLQUFLK25CLEdBQVN0b0IsUUFFakNrbUIsT0FBUSxXQUNOLE9BQU9ELEdBQVkxbEIsS0FBSytuQixHQUFTdG9CLFNBSWpDaXJCLEdBQVksU0FBVWxrQixFQUFRcEYsR0FDaEMsT0FBT2llLEVBQVM3WSxJQUNYQSxFQUFPMmdCLEtBQ08saUJBQVAvbEIsR0FDUEEsS0FBT29GLEdBQ1BtYSxRQUFRdmYsSUFBUXVmLE9BQU92ZixJQUUxQnVwQixHQUFXLFNBQWtDbmtCLEVBQVFwRixHQUN2RCxPQUFPc3BCLEdBQVVsa0IsRUFBUXBGLEVBQU0yZSxFQUFZM2UsR0FBSyxJQUM1Q2tpQixFQUFhLEVBQUc5YyxFQUFPcEYsSUFDdkI0Z0IsRUFBS3hiLEVBQVFwRixJQUVmd3BCLEdBQVcsU0FBd0Jwa0IsRUFBUXBGLEVBQUt5cEIsR0FDbEQsUUFBSUgsR0FBVWxrQixFQUFRcEYsRUFBTTJlLEVBQVkzZSxHQUFLLEtBQ3hDaWUsRUFBU3dMLElBQ1R6SyxFQUFJeUssRUFBTSxXQUNUekssRUFBSXlLLEVBQU0sUUFDVnpLLEVBQUl5SyxFQUFNLFFBRVZBLEVBQUtDLGNBQ0oxSyxFQUFJeUssRUFBTSxjQUFlQSxFQUFLRSxVQUM5QjNLLEVBQUl5SyxFQUFNLGdCQUFpQkEsRUFBS3BxQixXQUk5QnVmLEVBQUd4WixFQUFRcEYsRUFBS3lwQixJQUZ2QnJrQixFQUFPcEYsR0FBT3lwQixFQUFLL3BCLE1BQ1owRixJQUlOeWdCLEtBQ0h2QyxFQUFNMWEsRUFBSTJnQixHQUNWbEcsRUFBSXphLEVBQUk0Z0IsSUFHVjlNLEVBQVFBLEVBQVFVLEVBQUlWLEVBQVFNLEdBQUs2SSxHQUFrQixTQUFVLENBQzNEaEYseUJBQTBCMEksR0FDMUJucUIsZUFBZ0JvcUIsS0FHZGhLLEdBQU0sV0FBYzhGLEdBQWMxbUIsS0FBSyxTQUN6QzBtQixHQUFnQkMsR0FBc0IsV0FDcEMsT0FBT0wsR0FBVXRtQixLQUFLUCxRQUkxQixJQUFJdXJCLEdBQXdCekgsRUFBWSxHQUFJMEYsSUFDNUMxRixFQUFZeUgsR0FBdUJQLElBQ25DOU0sRUFBS3FOLEdBQXVCbkUsR0FBVTRELEdBQVc5RSxRQUNqRHBDLEVBQVl5SCxHQUF1QixDQUNqQ3ZqQixNQUFPMmlCLEdBQ1AzTyxJQUFLNE8sR0FDTGhnQixZQUFhLGFBQ2I1SCxTQUFVaWtCLEdBQ1ZFLGVBQWdCb0MsS0FFbEJiLEdBQVU2QyxHQUF1QixTQUFVLEtBQzNDN0MsR0FBVTZDLEdBQXVCLGFBQWMsS0FDL0M3QyxHQUFVNkMsR0FBdUIsYUFBYyxLQUMvQzdDLEdBQVU2QyxHQUF1QixTQUFVLEtBQzNDaEwsRUFBR2dMLEdBQXVCbEUsR0FBSyxDQUM3QnBtQixJQUFLLFdBQWMsT0FBT2pCLEtBQUswbkIsT0FJakM5bkIsRUFBT0QsUUFBVSxTQUFVOGlCLEVBQUsyRixFQUFPb0QsRUFBU0MsR0FFOUMsSUFBSS9KLEVBQU9lLElBRFhnSixJQUFZQSxHQUNnQixVQUFZLElBQU0sUUFDMUNDLEVBQVMsTUFBUWpKLEVBQ2pCa0osRUFBUyxNQUFRbEosRUFDakJtSixFQUFhdHBCLEVBQU9vZixHQUNwQm1LLEVBQU9ELEdBQWMsR0FDckJFLEVBQU1GLEdBQWN6SCxFQUFleUgsR0FDbkNHLEdBQVVILElBQWVsSSxFQUFPc0ksSUFDaEN4TCxFQUFJLEdBQ0p5TCxFQUFzQkwsR0FBY0EsRUFBb0IsVUFVeERNLEVBQWEsU0FBVWhLLEVBQU16YSxHQUMvQjhZLEVBQUcyQixFQUFNemEsRUFBTyxDQUNkeEcsSUFBSyxXQUNILE9BWk8sU0FBVWloQixFQUFNemEsR0FDM0IsSUFBSStELEVBQU8wVyxFQUFLMEcsR0FDaEIsT0FBT3BkLEVBQUt1RCxFQUFFMmMsR0FBUWprQixFQUFRMmdCLEVBQVE1YyxFQUFLM0ssRUFBR2tuQixJQVVuQ25uQixDQUFPWixLQUFNeUgsSUFFdEJ1VSxJQUFLLFNBQVUzYSxHQUNiLE9BWE8sU0FBVTZnQixFQUFNemEsRUFBT3BHLEdBQ2xDLElBQUltSyxFQUFPMFcsRUFBSzBHLEdBQ1o2QyxJQUFTcHFCLEdBQVNBLEVBQVE2SSxLQUFLdUssTUFBTXBULElBQVUsRUFBSSxFQUFJQSxFQUFRLElBQU8sSUFBZSxJQUFSQSxHQUNqRm1LLEVBQUt1RCxFQUFFNGMsR0FBUWxrQixFQUFRMmdCLEVBQVE1YyxFQUFLM0ssRUFBR1EsRUFBTzBtQixJQVFuQ29FLENBQU9uc0IsS0FBTXlILEVBQU9wRyxJQUU3QkwsWUFBWSxLQUdaK3FCLEdBQ0ZILEVBQWFKLEdBQVEsU0FBVXRKLEVBQU0xVyxFQUFNNGdCLEVBQVNDLEdBQ2xEekksRUFBVzFCLEVBQU0wSixFQUFZbEssRUFBTSxNQUNuQyxJQUVJdUcsRUFBUXFFLEVBQVlscEIsRUFBUW1wQixFQUY1QjlrQixFQUFRLEVBQ1I0Z0IsRUFBUyxFQUViLEdBQUt6SSxFQUFTcFUsR0FJUCxNQUFJQSxhQUFnQjZaLEdBaFVkLGdCQWdVK0JrSCxFQUFRdEksRUFBUXpZLEtBL1Q5QyxxQkErVHdFK2dCLEdBYS9FLE9BQUk3RSxNQUFlbGMsRUFDakJpZCxHQUFTbUQsRUFBWXBnQixHQUVyQnFkLEdBQU10b0IsS0FBS3FyQixFQUFZcGdCLEdBZjlCeWMsRUFBU3pjLEVBQ1Q2YyxFQUFTRixHQUFTaUUsRUFBU2hFLEdBQzNCLElBQUlvRSxFQUFPaGhCLEVBQUs4Z0IsV0FDaEIsUUFBZ0JqTixJQUFaZ04sRUFBdUIsQ0FDekIsR0FBSUcsRUFBT3BFLEVBQU8sTUFBTWxELEVBcFNmLGlCQXNTVCxJQURBb0gsRUFBYUUsRUFBT25FLEdBQ0gsRUFBRyxNQUFNbkQsRUF0U2pCLHNCQXlTVCxJQURBb0gsRUFBYTNKLEVBQVMwSixHQUFXakUsR0FDaEJDLEVBQVNtRSxFQUFNLE1BQU10SCxFQXpTN0IsaUJBMlNYOWhCLEVBQVNrcEIsRUFBYWxFLE9BZnRCaGxCLEVBQVMyZ0IsRUFBUXZZLEdBRWpCeWMsRUFBUyxJQUFJNUMsRUFEYmlILEVBQWFscEIsRUFBU2dsQixHQTJCeEIsSUFQQWxLLEVBQUtnRSxFQUFNLEtBQU0sQ0FDZjNlLEVBQUcwa0IsRUFDSHBuQixFQUFHd25CLEVBQ0hob0IsRUFBR2lzQixFQUNIdG1CLEVBQUc1QyxFQUNIMkwsRUFBRyxJQUFJd1csRUFBVTBDLEtBRVp4Z0IsRUFBUXJFLEdBQVE4b0IsRUFBV2hLLEVBQU16YSxRQUUxQ3drQixFQUFzQkwsRUFBb0IsVUFBSWxxQixFQUFPNnBCLElBQ3JEck4sRUFBSytOLEVBQXFCLGNBQWVMLElBQy9CekssR0FBTSxXQUNoQnlLLEVBQVcsT0FDTnpLLEdBQU0sV0FDWCxJQUFJeUssR0FBWSxPQUNYaEgsR0FBWSxTQUFVNkgsR0FDM0IsSUFBSWIsRUFDSixJQUFJQSxFQUFXLE1BQ2YsSUFBSUEsRUFBVyxLQUNmLElBQUlBLEVBQVdhLE1BQ2QsS0FDRGIsRUFBYUosR0FBUSxTQUFVdEosRUFBTTFXLEVBQU00Z0IsRUFBU0MsR0FFbEQsSUFBSUUsRUFHSixPQUpBM0ksRUFBVzFCLEVBQU0wSixFQUFZbEssR0FJeEI5QixFQUFTcFUsR0FDVkEsYUFBZ0I2WixHQTdXUCxnQkE2V3dCa0gsRUFBUXRJLEVBQVF6WSxLQTVXdkMscUJBNFdpRStnQixPQUMxRGxOLElBQVpnTixFQUNILElBQUlSLEVBQUtyZ0IsRUFBTTJjLEdBQVNpRSxFQUFTaEUsR0FBUWlFLFFBQzdCaE4sSUFBWitNLEVBQ0UsSUFBSVAsRUFBS3JnQixFQUFNMmMsR0FBU2lFLEVBQVNoRSxJQUNqQyxJQUFJeUQsRUFBS3JnQixHQUVia2MsTUFBZWxjLEVBQWFpZCxHQUFTbUQsRUFBWXBnQixHQUM5Q3FkLEdBQU10b0IsS0FBS3FyQixFQUFZcGdCLEdBVEYsSUFBSXFnQixFQUFLOUgsRUFBUXZZLE9BVy9DaWEsRUFBYXFHLElBQVF4TSxTQUFTdGQsVUFBWW9pQixFQUFLeUgsR0FBTXJtQixPQUFPNGUsRUFBSzBILElBQVExSCxFQUFLeUgsSUFBTyxTQUFVbHFCLEdBQ3ZGQSxLQUFPaXFCLEdBQWExTixFQUFLME4sRUFBWWpxQixFQUFLa3FCLEVBQUtscUIsT0FFdkRpcUIsRUFBb0IsVUFBSUssRUFDbkJ4SSxJQUFTd0ksRUFBb0JyaEIsWUFBY2doQixJQUVsRCxJQUFJYyxFQUFrQlQsRUFBb0I3RSxJQUN0Q3VGLElBQXNCRCxJQUNJLFVBQXhCQSxFQUFnQi9yQixNQUE0QzBlLE1BQXhCcU4sRUFBZ0IvckIsTUFDdERpc0IsRUFBWTVCLEdBQVc5RSxPQUMzQmhJLEVBQUswTixFQUFZdEUsSUFBbUIsR0FDcENwSixFQUFLK04sRUFBcUJ2RSxHQUFhaEcsR0FDdkN4RCxFQUFLK04sRUFBcUJyRSxJQUFNLEdBQ2hDMUosRUFBSytOLEVBQXFCMUUsR0FBaUJxRSxJQUV2Q0gsRUFBVSxJQUFJRyxFQUFXLEdBQUd2RSxLQUFRM0YsRUFBUzJGLE1BQU80RSxJQUN0RDFMLEVBQUcwTCxFQUFxQjVFLEdBQUssQ0FDM0JwbUIsSUFBSyxXQUFjLE9BQU95Z0IsS0FJOUJsQixFQUFFa0IsR0FBUWtLLEVBRVZ2TixFQUFRQSxFQUFRUSxFQUFJUixFQUFRbUIsRUFBSW5CLEVBQVFNLEdBQUtpTixHQUFjQyxHQUFPckwsR0FFbEVuQyxFQUFRQSxFQUFRVSxFQUFHMkMsRUFBTSxDQUN2QmdKLGtCQUFtQnRDLElBR3JCL0osRUFBUUEsRUFBUVUsRUFBSVYsRUFBUU0sRUFBSXdDLEdBQU0sV0FBYzBLLEVBQUtnQixHQUFHdHNCLEtBQUtxckIsRUFBWSxNQUFRbEssRUFBTSxDQUN6RnpVLEtBQU00YixHQUNOZ0UsR0FBSXhELEtBcFpnQixzQkF1Wks0QyxHQUFzQi9OLEVBQUsrTixFQXZaaEMsb0JBdVp3RTdELEdBRTlGL0osRUFBUUEsRUFBUVksRUFBR3lDLEVBQU04SCxJQUV6QjNFLEVBQVduRCxHQUVYckQsRUFBUUEsRUFBUVksRUFBSVosRUFBUU0sRUFBSXVKLEdBQVl4RyxFQUFNLENBQUUxRixJQUFLNE8sS0FFekR2TSxFQUFRQSxFQUFRWSxFQUFJWixFQUFRTSxHQUFLZ08sRUFBbUJqTCxFQUFNc0osSUFFckR2SCxHQUFXd0ksRUFBb0JqcEIsVUFBWWlrQixLQUFlZ0YsRUFBb0JqcEIsU0FBV2lrQixJQUU5RjVJLEVBQVFBLEVBQVFZLEVBQUlaLEVBQVFNLEVBQUl3QyxHQUFNLFdBQ3BDLElBQUl5SyxFQUFXLEdBQUc1akIsV0FDaEIwWixFQUFNLENBQUUxWixNQUFPMmlCLEtBRW5CdE0sRUFBUUEsRUFBUVksRUFBSVosRUFBUU0sR0FBS3dDLEdBQU0sV0FDckMsTUFBTyxDQUFDLEVBQUcsR0FBR2dHLGtCQUFvQixJQUFJeUUsRUFBVyxDQUFDLEVBQUcsSUFBSXpFLHNCQUNwRGhHLEdBQU0sV0FDWDhLLEVBQW9COUUsZUFBZTVtQixLQUFLLENBQUMsRUFBRyxRQUN6Q21oQixFQUFNLENBQUV5RixlQUFnQm9DLEtBRTdCNUUsRUFBVWpELEdBQVFpTCxFQUFvQkQsRUFBa0JFLEVBQ25EbkosR0FBWWtKLEdBQW1Cek8sRUFBSytOLEVBQXFCN0UsR0FBVXdGLFNBRXJFaHRCLEVBQU9ELFFBQVUsYyxnQkM5ZHhCLElBQUlpZ0IsRUFBVyxFQUFRLEdBR3ZCaGdCLEVBQU9ELFFBQVUsU0FBVWtnQixFQUFJZCxHQUM3QixJQUFLYSxFQUFTQyxHQUFLLE9BQU9BLEVBQzFCLElBQUlvQyxFQUFJOU8sRUFDUixHQUFJNEwsR0FBa0MsbUJBQXJCa0QsRUFBS3BDLEVBQUc3YyxZQUE0QjRjLEVBQVN6TSxFQUFNOE8sRUFBRzFoQixLQUFLc2YsSUFBTSxPQUFPMU0sRUFDekYsR0FBZ0MsbUJBQXBCOE8sRUFBS3BDLEVBQUdpTixXQUEyQmxOLEVBQVN6TSxFQUFNOE8sRUFBRzFoQixLQUFLc2YsSUFBTSxPQUFPMU0sRUFDbkYsSUFBSzRMLEdBQWtDLG1CQUFyQmtELEVBQUtwQyxFQUFHN2MsWUFBNEI0YyxFQUFTek0sRUFBTThPLEVBQUcxaEIsS0FBS3NmLElBQU0sT0FBTzFNLEVBQzFGLE1BQU0yTSxVQUFVLDZDLGdCQ1ZsQixJQUFJaU4sRUFBTyxFQUFRLEdBQVIsQ0FBa0IsUUFDekJuTixFQUFXLEVBQVEsR0FDbkJlLEVBQU0sRUFBUSxJQUNkcU0sRUFBVSxFQUFRLElBQWdCemlCLEVBQ2xDbU4sRUFBSyxFQUNMdVYsRUFBZW5zQixPQUFPbXNCLGNBQWdCLFdBQ3hDLE9BQU8sR0FFTEMsR0FBVSxFQUFRLEVBQVIsRUFBb0IsV0FDaEMsT0FBT0QsRUFBYW5zQixPQUFPcXNCLGtCQUFrQixRQUUzQ0MsRUFBVSxTQUFVdk4sR0FDdEJtTixFQUFRbk4sRUFBSWtOLEVBQU0sQ0FBRTFyQixNQUFPLENBQ3pCakIsRUFBRyxPQUFRc1gsRUFDWDJWLEVBQUcsT0FnQ0hDLEVBQU8xdEIsRUFBT0QsUUFBVSxDQUMxQjhpQixJQUFLc0ssRUFDTFEsTUFBTSxFQUNOQyxRQWhDWSxTQUFVM04sRUFBSW5lLEdBRTFCLElBQUtrZSxFQUFTQyxHQUFLLE1BQW9CLGlCQUFOQSxFQUFpQkEsR0FBbUIsaUJBQU5BLEVBQWlCLElBQU0sS0FBT0EsRUFDN0YsSUFBS2MsRUFBSWQsRUFBSWtOLEdBQU8sQ0FFbEIsSUFBS0UsRUFBYXBOLEdBQUssTUFBTyxJQUU5QixJQUFLbmUsRUFBUSxNQUFPLElBRXBCMHJCLEVBQVF2TixHQUVSLE9BQU9BLEVBQUdrTixHQUFNM3NCLEdBc0JsQnF0QixRQXBCWSxTQUFVNU4sRUFBSW5lLEdBQzFCLElBQUtpZixFQUFJZCxFQUFJa04sR0FBTyxDQUVsQixJQUFLRSxFQUFhcE4sR0FBSyxPQUFPLEVBRTlCLElBQUtuZSxFQUFRLE9BQU8sRUFFcEIwckIsRUFBUXZOLEdBRVIsT0FBT0EsRUFBR2tOLEdBQU1NLEdBWWxCSyxTQVRhLFNBQVU3TixHQUV2QixPQURJcU4sR0FBVUksRUFBS0MsTUFBUU4sRUFBYXBOLEtBQVFjLEVBQUlkLEVBQUlrTixJQUFPSyxFQUFRdk4sR0FDaEVBLEssY0M1Q1RqZ0IsRUFBT0QsUUFBVSxTQUFVZ3VCLEVBQVF0c0IsR0FDakMsTUFBTyxDQUNMTCxhQUF1QixFQUFUMnNCLEdBQ2R0QyxlQUF5QixFQUFUc0MsR0FDaEJyQyxXQUFxQixFQUFUcUMsR0FDWnRzQixNQUFPQSxLLGNDTFgsSUFBSXFXLEVBQUssRUFDTGtXLEVBQUsxakIsS0FBSzJqQixTQUNkanVCLEVBQU9ELFFBQVUsU0FBVWdDLEdBQ3pCLE1BQU8sVUFBVTZELFlBQWU2WixJQUFSMWQsRUFBb0IsR0FBS0EsRUFBSyxRQUFTK1YsRUFBS2tXLEdBQUk1cUIsU0FBUyxPLGNDSG5GcEQsRUFBT0QsU0FBVSxHLGdCQ0NqQixJQUFJbXVCLEVBQVEsRUFBUSxJQUNoQkMsRUFBYyxFQUFRLElBRTFCbnVCLEVBQU9ELFFBQVVtQixPQUFPc2xCLE1BQVEsU0FBYzVGLEdBQzVDLE9BQU9zTixFQUFNdE4sRUFBR3VOLEssZ0JDTGxCLElBQUk3TixFQUFZLEVBQVEsSUFDcEI4TixFQUFNOWpCLEtBQUs4akIsSUFDWDdqQixFQUFNRCxLQUFLQyxJQUNmdkssRUFBT0QsUUFBVSxTQUFVOEgsRUFBT3JFLEdBRWhDLE9BREFxRSxFQUFReVksRUFBVXpZLElBQ0gsRUFBSXVtQixFQUFJdm1CLEVBQVFyRSxFQUFRLEdBQUsrRyxFQUFJMUMsRUFBT3JFLEssZ0JDSnpELElBQUlnZCxFQUFXLEVBQVEsR0FDbkI2TixFQUFNLEVBQVEsSUFDZEYsRUFBYyxFQUFRLElBQ3RCRyxFQUFXLEVBQVEsR0FBUixDQUF5QixZQUNwQ0MsRUFBUSxhQUlSQyxFQUFhLFdBRWYsSUFJSUMsRUFKQUMsRUFBUyxFQUFRLEdBQVIsQ0FBeUIsVUFDbENsdUIsRUFBSTJ0QixFQUFZM3FCLE9BY3BCLElBVkFrckIsRUFBT2hkLE1BQU1pZCxRQUFVLE9BQ3ZCLEVBQVEsSUFBV0MsWUFBWUYsR0FDL0JBLEVBQU94RCxJQUFNLGVBR2J1RCxFQUFpQkMsRUFBT0csY0FBYy9yQixVQUN2QmdzQixPQUNmTCxFQUFlTSxNQUFNQyx1Q0FDckJQLEVBQWVRLFFBQ2ZULEVBQWFDLEVBQWUxUCxFQUNyQnZlLFlBQVlndUIsRUFBb0IsVUFBRUwsRUFBWTN0QixJQUNyRCxPQUFPZ3VCLEtBR1R4dUIsRUFBT0QsUUFBVW1CLE9BQU9ZLFFBQVUsU0FBZ0I4ZSxFQUFHc08sR0FDbkQsSUFBSXRMLEVBUUosT0FQVSxPQUFOaEQsR0FDRjJOLEVBQWUsVUFBSS9OLEVBQVNJLEdBQzVCZ0QsRUFBUyxJQUFJMkssRUFDYkEsRUFBZSxVQUFJLEtBRW5CM0ssRUFBTzBLLEdBQVkxTixHQUNkZ0QsRUFBUzRLLFNBQ00vTyxJQUFmeVAsRUFBMkJ0TCxFQUFTeUssRUFBSXpLLEVBQVFzTCxLLGdCQ3RDekQsSUFBSWhCLEVBQVEsRUFBUSxJQUNoQmlCLEVBQWEsRUFBUSxJQUFvQnZwQixPQUFPLFNBQVUsYUFFOUQ3RixFQUFRNEssRUFBSXpKLE9BQU9rdUIscUJBQXVCLFNBQTZCeE8sR0FDckUsT0FBT3NOLEVBQU10TixFQUFHdU8sSyxnQkNKbEIsSUFBSXBPLEVBQU0sRUFBUSxJQUNkK0IsRUFBVyxFQUFRLElBQ25Cd0wsRUFBVyxFQUFRLEdBQVIsQ0FBeUIsWUFDcENlLEVBQWNudUIsT0FBT2tCLFVBRXpCcEMsRUFBT0QsUUFBVW1CLE9BQU9xakIsZ0JBQWtCLFNBQVUzRCxHQUVsRCxPQURBQSxFQUFJa0MsRUFBU2xDLEdBQ1RHLEVBQUlILEVBQUcwTixHQUFrQjFOLEVBQUUwTixHQUNILG1CQUFqQjFOLEVBQUU1VixhQUE2QjRWLGFBQWFBLEVBQUU1VixZQUNoRDRWLEVBQUU1VixZQUFZNUksVUFDZHdlLGFBQWExZixPQUFTbXVCLEVBQWMsTyxnQkNWL0MsSUFBSUMsRUFBYyxFQUFRLEVBQVIsQ0FBa0IsZUFDaEM5SixFQUFheGhCLE1BQU01QixVQUNRcWQsTUFBM0IrRixFQUFXOEosSUFBMkIsRUFBUSxHQUFSLENBQW1COUosRUFBWThKLEVBQWEsSUFDdEZ0dkIsRUFBT0QsUUFBVSxTQUFVZ0MsR0FDekJ5akIsRUFBVzhKLEdBQWF2dEIsSUFBTyxJLGdCQ0xqQyxJQUFJaWUsRUFBVyxFQUFRLEdBQ3ZCaGdCLEVBQU9ELFFBQVUsU0FBVWtnQixFQUFJZ0QsR0FDN0IsSUFBS2pELEVBQVNDLElBQU9BLEVBQUdzUCxLQUFPdE0sRUFBTSxNQUFNL0MsVUFBVSwwQkFBNEIrQyxFQUFPLGNBQ3hGLE9BQU9oRCxJLGdCQ0hULElBQUl1UCxFQUFNLEVBQVEsSUFBZ0I3a0IsRUFDOUJvVyxFQUFNLEVBQVEsSUFDZDBHLEVBQU0sRUFBUSxFQUFSLENBQWtCLGVBRTVCem5CLEVBQU9ELFFBQVUsU0FBVWtnQixFQUFJMEIsRUFBSzhOLEdBQzlCeFAsSUFBT2MsRUFBSWQsRUFBS3dQLEVBQU94UCxFQUFLQSxFQUFHN2QsVUFBV3FsQixJQUFNK0gsRUFBSXZQLEVBQUl3SCxFQUFLLENBQUVnRSxjQUFjLEVBQU1ocUIsTUFBT2tnQixNLGdCQ0xoRyxJQUFJbEQsRUFBVSxFQUFRLEdBQ2xCcUMsRUFBVSxFQUFRLElBQ2xCUyxFQUFRLEVBQVEsR0FDaEJtTyxFQUFTLEVBQVEsSUFDakJDLEVBQVEsSUFBTUQsRUFBUyxJQUV2QkUsRUFBUUMsT0FBTyxJQUFNRixFQUFRQSxFQUFRLEtBQ3JDRyxFQUFRRCxPQUFPRixFQUFRQSxFQUFRLE1BRS9CSSxFQUFXLFNBQVVsTixFQUFLOUMsRUFBTWlRLEdBQ2xDLElBQUluUixFQUFNLEdBQ05vUixFQUFRMU8sR0FBTSxXQUNoQixRQUFTbU8sRUFBTzdNLE1BUFYsV0FPd0JBLFFBRTVCUixFQUFLeEQsRUFBSWdFLEdBQU9vTixFQUFRbFEsRUFBS21RLEdBQVFSLEVBQU83TSxHQUM1Q21OLElBQU9uUixFQUFJbVIsR0FBUzNOLEdBQ3hCNUQsRUFBUUEsRUFBUVksRUFBSVosRUFBUU0sRUFBSWtSLEVBQU8sU0FBVXBSLElBTS9DcVIsRUFBT0gsRUFBU0csS0FBTyxTQUFVeE8sRUFBUXVCLEdBSTNDLE9BSEF2QixFQUFTSixPQUFPUixFQUFRWSxJQUNiLEVBQVB1QixJQUFVdkIsRUFBU0EsRUFBT2hNLFFBQVFrYSxFQUFPLEtBQ2xDLEVBQVAzTSxJQUFVdkIsRUFBU0EsRUFBT2hNLFFBQVFvYSxFQUFPLEtBQ3RDcE8sR0FHVDFoQixFQUFPRCxRQUFVZ3dCLEcsY0M3QmpCL3ZCLEVBQU9ELFFBQVUsSSw2QkNDakIsSUFBSTJDLEVBQVMsRUFBUSxHQUNqQmllLEVBQUssRUFBUSxJQUNid1AsRUFBYyxFQUFRLEdBQ3RCQyxFQUFVLEVBQVEsRUFBUixDQUFrQixXQUVoQ3B3QixFQUFPRCxRQUFVLFNBQVU4aUIsR0FDekIsSUFBSThGLEVBQUlqbUIsRUFBT21nQixHQUNYc04sR0FBZXhILElBQU1BLEVBQUV5SCxJQUFVelAsRUFBR2hXLEVBQUVnZSxFQUFHeUgsRUFBUyxDQUNwRDNFLGNBQWMsRUFDZHBxQixJQUFLLFdBQWMsT0FBT2pCLFUsY0NWOUJKLEVBQU9ELFFBQVUsU0FBVWtnQixFQUFJb1EsRUFBYXR2QixFQUFNdXZCLEdBQ2hELEtBQU1yUSxhQUFjb1EsU0FBb0M1USxJQUFuQjZRLEdBQWdDQSxLQUFrQnJRLEVBQ3JGLE1BQU1DLFVBQVVuZixFQUFPLDJCQUN2QixPQUFPa2YsSSxnQkNIWCxJQUFJMUIsRUFBVyxFQUFRLElBQ3ZCdmUsRUFBT0QsUUFBVSxTQUFVb0gsRUFBUStqQixFQUFLOUosR0FDdEMsSUFBSyxJQUFJcmYsS0FBT21wQixFQUFLM00sRUFBU3BYLEVBQVFwRixFQUFLbXBCLEVBQUlucEIsR0FBTXFmLEdBQ3JELE9BQU9qYSxJLGdCQ0ZULElBQUlvcEIsRUFBTSxFQUFRLElBRWxCdndCLEVBQU9ELFFBQVVtQixPQUFPLEtBQUtzdkIscUJBQXFCLEdBQUt0dkIsT0FBUyxTQUFVK2UsR0FDeEUsTUFBa0IsVUFBWHNRLEVBQUl0USxHQUFrQkEsRUFBRzFjLE1BQU0sSUFBTXJDLE9BQU8rZSxLLGNDSnJEbGdCLEVBQVE0SyxFQUFJLEdBQUc2bEIsc0IsZ0JDQ2YsSUFBSUQsRUFBTSxFQUFRLElBQ2Q5SSxFQUFNLEVBQVEsRUFBUixDQUFrQixlQUV4QmdKLEVBQWtELGFBQTVDRixFQUFJLFdBQWMsT0FBT2xtQixVQUFyQixJQVNkckssRUFBT0QsUUFBVSxTQUFVa2dCLEdBQ3pCLElBQUlXLEVBQUc4UCxFQUFHblIsRUFDVixZQUFjRSxJQUFQUSxFQUFtQixZQUFxQixPQUFQQSxFQUFjLE9BRU4saUJBQXBDeVEsRUFWRCxTQUFVelEsRUFBSWxlLEdBQ3pCLElBQ0UsT0FBT2tlLEVBQUdsZSxHQUNWLE1BQU9xRSxLQU9PdXFCLENBQU8vUCxFQUFJMWYsT0FBTytlLEdBQUt3SCxJQUFvQmlKLEVBRXZERCxFQUFNRixFQUFJM1AsR0FFTSxXQUFmckIsRUFBSWdSLEVBQUkzUCxLQUFzQyxtQkFBWkEsRUFBRWdRLE9BQXVCLFlBQWNyUixJLGdCQ3BCaEYsSUFBSWlCLEVBQVcsRUFBUSxHQUNuQjRCLEVBQVksRUFBUSxJQUNwQmdPLEVBQVUsRUFBUSxFQUFSLENBQWtCLFdBQ2hDcHdCLEVBQU9ELFFBQVUsU0FBVTZnQixFQUFHaVEsR0FDNUIsSUFDSTFSLEVBREF3SixFQUFJbkksRUFBU0ksR0FBRzVWLFlBRXBCLFlBQWF5VSxJQUFOa0osR0FBaURsSixPQUE3Qk4sRUFBSXFCLEVBQVNtSSxHQUFHeUgsSUFBeUJTLEVBQUl6TyxFQUFVakQsSyxnQkNQcEYsSUFBSWxCLEVBQU8sRUFBUSxHQUNmdmIsRUFBUyxFQUFRLEdBRWpCeWQsRUFBUXpkLEVBREMsd0JBQ2tCQSxFQURsQixzQkFDbUMsS0FFL0MxQyxFQUFPRCxRQUFVLFNBQVVnQyxFQUFLTixHQUMvQixPQUFPMGUsRUFBTXBlLEtBQVNvZSxFQUFNcGUsUUFBaUIwZCxJQUFWaGUsRUFBc0JBLEVBQVEsTUFDaEUsV0FBWSxJQUFJbUMsS0FBSyxDQUN0QjhPLFFBQVN1TCxFQUFLdkwsUUFDZC9RLEtBQU0sRUFBUSxJQUFnQixPQUFTLFNBQ3ZDbXZCLFVBQVcsMEMsZ0JDUmIsSUFBSXBPLEVBQVksRUFBUSxJQUNwQkssRUFBVyxFQUFRLEdBQ25CcUIsRUFBa0IsRUFBUSxJQUM5QnBrQixFQUFPRCxRQUFVLFNBQVVneEIsR0FDekIsT0FBTyxTQUFVdE4sRUFBT3VOLEVBQUlDLEdBQzFCLElBR0l4dkIsRUFIQW1mLEVBQUk4QixFQUFVZSxHQUNkamdCLEVBQVN1ZixFQUFTbkMsRUFBRXBkLFFBQ3BCcUUsRUFBUXVjLEVBQWdCNk0sRUFBV3p0QixHQUl2QyxHQUFJdXRCLEdBQWVDLEdBQU1BLEdBQUksS0FBT3h0QixFQUFTcUUsR0FHM0MsSUFGQXBHLEVBQVFtZixFQUFFL1ksT0FFR3BHLEVBQU8sT0FBTyxPQUV0QixLQUFNK0IsRUFBU3FFLEVBQU9BLElBQVMsSUFBSWtwQixHQUFlbHBCLEtBQVMrWSxJQUM1REEsRUFBRS9ZLEtBQVdtcEIsRUFBSSxPQUFPRCxHQUFlbHBCLEdBQVMsRUFDcEQsT0FBUWtwQixJQUFnQixLLGNDcEI5Qmh4QixFQUFRNEssRUFBSXpKLE9BQU9nd0IsdUIsZ0JDQ25CLElBQUlYLEVBQU0sRUFBUSxJQUNsQnZ3QixFQUFPRCxRQUFVaUUsTUFBTTZSLFNBQVcsU0FBaUJzTSxHQUNqRCxNQUFtQixTQUFab08sRUFBSXBPLEssZ0JDSGIsSUFBSXFGLEVBQVcsRUFBUSxFQUFSLENBQWtCLFlBQzdCMkosR0FBZSxFQUVuQixJQUNFLElBQUlDLEVBQVEsQ0FBQyxHQUFHNUosS0FDaEI0SixFQUFjLE9BQUksV0FBY0QsR0FBZSxHQUUvQ250QixNQUFNcUosS0FBSytqQixHQUFPLFdBQWMsTUFBTSxLQUN0QyxNQUFPaHJCLElBRVRwRyxFQUFPRCxRQUFVLFNBQVVnZ0IsRUFBTXNSLEdBQy9CLElBQUtBLElBQWdCRixFQUFjLE9BQU8sRUFDMUMsSUFBSS9QLEdBQU8sRUFDWCxJQUNFLElBQUlrUSxFQUFNLENBQUMsR0FDUHpFLEVBQU95RSxFQUFJOUosS0FDZnFGLEVBQUsxYixLQUFPLFdBQWMsTUFBTyxDQUFFcVksS0FBTXBJLEdBQU8sSUFDaERrUSxFQUFJOUosR0FBWSxXQUFjLE9BQU9xRixHQUNyQzlNLEVBQUt1UixHQUNMLE1BQU9sckIsSUFDVCxPQUFPZ2IsSSw2QkNsQlQsSUFBSVosRUFBVyxFQUFRLEdBQ3ZCeGdCLEVBQU9ELFFBQVUsV0FDZixJQUFJdWlCLEVBQU85QixFQUFTcGdCLE1BQ2hCd2pCLEVBQVMsR0FNYixPQUxJdEIsRUFBSzVmLFNBQVFraEIsR0FBVSxLQUN2QnRCLEVBQUtpUCxhQUFZM04sR0FBVSxLQUMzQnRCLEVBQUtrUCxZQUFXNU4sR0FBVSxLQUMxQnRCLEVBQUttUCxVQUFTN04sR0FBVSxLQUN4QnRCLEVBQUtvUCxTQUFROU4sR0FBVSxLQUNwQkEsSSw2QkNUVCxJQUFJUyxFQUFVLEVBQVEsSUFDbEJzTixFQUFjOUIsT0FBT3p0QixVQUFVMmQsS0FJbkMvZixFQUFPRCxRQUFVLFNBQVU4ZixFQUFHVixHQUM1QixJQUFJWSxFQUFPRixFQUFFRSxLQUNiLEdBQW9CLG1CQUFUQSxFQUFxQixDQUM5QixJQUFJNkQsRUFBUzdELEVBQUtwZixLQUFLa2YsRUFBR1YsR0FDMUIsR0FBc0IsaUJBQVh5RSxFQUNULE1BQU0sSUFBSTFELFVBQVUsc0VBRXRCLE9BQU8wRCxFQUVULEdBQW1CLFdBQWZTLEVBQVF4RSxHQUNWLE1BQU0sSUFBSUssVUFBVSwrQ0FFdEIsT0FBT3lSLEVBQVloeEIsS0FBS2tmLEVBQUdWLEssNkJDbEI3QixFQUFRLEtBQ1IsSUFBSVosRUFBVyxFQUFRLElBQ25CRCxFQUFPLEVBQVEsSUFDZmlELEVBQVEsRUFBUSxHQUNoQlQsRUFBVSxFQUFRLElBQ2xCNEQsRUFBTSxFQUFRLEdBQ2RrTixFQUFhLEVBQVEsSUFFckJ4QixFQUFVMUwsRUFBSSxXQUVkbU4sR0FBaUN0USxHQUFNLFdBSXpDLElBQUl1USxFQUFLLElBTVQsT0FMQUEsRUFBRy9SLEtBQU8sV0FDUixJQUFJNkQsRUFBUyxHQUViLE9BREFBLEVBQU9tTyxPQUFTLENBQUU5dUIsRUFBRyxLQUNkMmdCLEdBRXlCLE1BQTNCLEdBQUdsTyxRQUFRb2MsRUFBSSxXQUdwQkUsRUFBb0MsV0FFdEMsSUFBSUYsRUFBSyxPQUNMRyxFQUFlSCxFQUFHL1IsS0FDdEIrUixFQUFHL1IsS0FBTyxXQUFjLE9BQU9rUyxFQUFhbHRCLE1BQU0zRSxLQUFNaUssWUFDeEQsSUFBSXVaLEVBQVMsS0FBS3JnQixNQUFNdXVCLEdBQ3hCLE9BQXlCLElBQWxCbE8sRUFBT3BnQixRQUE4QixNQUFkb2dCLEVBQU8sSUFBNEIsTUFBZEEsRUFBTyxHQU5wQixHQVN4QzVqQixFQUFPRCxRQUFVLFNBQVU4aUIsRUFBS3JmLEVBQVF1YyxHQUN0QyxJQUFJbVMsRUFBU3hOLEVBQUk3QixHQUVic1AsR0FBdUI1USxHQUFNLFdBRS9CLElBQUlYLEVBQUksR0FFUixPQURBQSxFQUFFc1IsR0FBVSxXQUFjLE9BQU8sR0FDWixHQUFkLEdBQUdyUCxHQUFLakMsTUFHYndSLEVBQW9CRCxHQUF1QjVRLEdBQU0sV0FFbkQsSUFBSThRLEdBQWEsRUFDYlAsRUFBSyxJQVNULE9BUkFBLEVBQUcvUixLQUFPLFdBQWlDLE9BQW5Cc1MsR0FBYSxFQUFhLE1BQ3RDLFVBQVJ4UCxJQUdGaVAsRUFBRzltQixZQUFjLEdBQ2pCOG1CLEVBQUc5bUIsWUFBWW9sQixHQUFXLFdBQWMsT0FBTzBCLElBRWpEQSxFQUFHSSxHQUFRLEtBQ0hHLFVBQ0w1UyxFQUVMLElBQ0cwUyxJQUNBQyxHQUNRLFlBQVJ2UCxJQUFzQmdQLEdBQ2QsVUFBUmhQLElBQW9CbVAsRUFDckIsQ0FDQSxJQUFJTSxFQUFxQixJQUFJSixHQUN6QkssRUFBTXhTLEVBQ1JlLEVBQ0FvUixFQUNBLEdBQUdyUCxJQUNILFNBQXlCMlAsRUFBY0MsRUFBUUMsRUFBS0MsRUFBTUMsR0FDeEQsT0FBSUgsRUFBTzFTLE9BQVM2UixFQUNkTyxJQUF3QlMsRUFJbkIsQ0FBRXBKLE1BQU0sRUFBTS9uQixNQUFPNndCLEVBQW1CM3hCLEtBQUs4eEIsRUFBUUMsRUFBS0MsSUFFNUQsQ0FBRW5KLE1BQU0sRUFBTS9uQixNQUFPK3dCLEVBQWE3eEIsS0FBSyt4QixFQUFLRCxFQUFRRSxJQUV0RCxDQUFFbkosTUFBTSxNQUdmcUosRUFBUU4sRUFBSSxHQUNaTyxFQUFPUCxFQUFJLEdBRWZoVSxFQUFTK0MsT0FBT2xmLFVBQVd5Z0IsRUFBS2dRLEdBQ2hDdlUsRUFBS3VSLE9BQU96dEIsVUFBVzh2QixFQUFrQixHQUFWMXVCLEVBRzNCLFNBQVVrZSxFQUFRUyxHQUFPLE9BQU8yUSxFQUFLbnlCLEtBQUsrZ0IsRUFBUXRoQixLQUFNK2hCLElBR3hELFNBQVVULEdBQVUsT0FBT29SLEVBQUtueUIsS0FBSytnQixFQUFRdGhCLFcsZ0JDNUZyRCxJQUFJb2UsRUFBTSxFQUFRLElBQ2Q3ZCxFQUFPLEVBQVEsS0FDZjJqQixFQUFjLEVBQVEsSUFDdEI5RCxFQUFXLEVBQVEsR0FDbkJ1QyxFQUFXLEVBQVEsR0FDbkIwQixFQUFZLEVBQVEsSUFDcEJzTyxFQUFRLEdBQ1JDLEVBQVMsSUFDVGp6QixFQUFVQyxFQUFPRCxRQUFVLFNBQVVrekIsRUFBVXZNLEVBQVNyRSxFQUFJQyxFQUFNa0YsR0FDcEUsSUFHSWhrQixFQUFRMGxCLEVBQU1DLEVBQVV2RixFQUh4QjJGLEVBQVMvQixFQUFXLFdBQWMsT0FBT3lMLEdBQWN4TyxFQUFVd08sR0FDakV0b0IsRUFBSTZULEVBQUk2RCxFQUFJQyxFQUFNb0UsRUFBVSxFQUFJLEdBQ2hDN2UsRUFBUSxFQUVaLEdBQXFCLG1CQUFWMGhCLEVBQXNCLE1BQU1ySixVQUFVK1MsRUFBVyxxQkFFNUQsR0FBSTNPLEVBQVlpRixJQUFTLElBQUsvbEIsRUFBU3VmLEVBQVNrUSxFQUFTenZCLFFBQVNBLEVBQVNxRSxFQUFPQSxJQUVoRixJQURBK2IsRUFBUzhDLEVBQVUvYixFQUFFNlYsRUFBUzBJLEVBQU8rSixFQUFTcHJCLElBQVEsR0FBSXFoQixFQUFLLElBQU12ZSxFQUFFc29CLEVBQVNwckIsT0FDakVrckIsR0FBU25QLElBQVdvUCxFQUFRLE9BQU9wUCxPQUM3QyxJQUFLdUYsRUFBV0ksRUFBTzVvQixLQUFLc3lCLEtBQWEvSixFQUFPQyxFQUFTaFksUUFBUXFZLE1BRXRFLElBREE1RixFQUFTampCLEVBQUt3b0IsRUFBVXhlLEVBQUd1ZSxFQUFLem5CLE1BQU9pbEIsTUFDeEJxTSxHQUFTblAsSUFBV29QLEVBQVEsT0FBT3BQLElBRzlDbVAsTUFBUUEsRUFDaEJoekIsRUFBUWl6QixPQUFTQSxHLGdCQ3hCakIsSUFDSUUsRUFEUyxFQUFRLEdBQ0VBLFVBRXZCbHpCLEVBQU9ELFFBQVVtekIsR0FBYUEsRUFBVUMsV0FBYSxJLDZCQ0ZyRCxJQUFJendCLEVBQVMsRUFBUSxHQUNqQitiLEVBQVUsRUFBUSxHQUNsQkYsRUFBVyxFQUFRLElBQ25CMkYsRUFBYyxFQUFRLElBQ3RCd0osRUFBTyxFQUFRLElBQ2YwRixFQUFRLEVBQVEsSUFDaEJwUCxFQUFhLEVBQVEsSUFDckJoRSxFQUFXLEVBQVEsR0FDbkJ1QixFQUFRLEVBQVEsR0FDaEJ5RCxFQUFjLEVBQVEsSUFDdEJxTyxFQUFpQixFQUFRLElBQ3pCQyxFQUFvQixFQUFRLElBRWhDdHpCLEVBQU9ELFFBQVUsU0FBVStoQixFQUFNOEosRUFBUzJILEVBQVNDLEVBQVFyUSxFQUFRc1EsR0FDakUsSUFBSXhILEVBQU92cEIsRUFBT29mLEdBQ2Q2RyxFQUFJc0QsRUFDSnlILEVBQVF2USxFQUFTLE1BQVEsTUFDekJ5RyxFQUFRakIsR0FBS0EsRUFBRXZtQixVQUNmd2UsRUFBSSxHQUNKK1MsRUFBWSxTQUFVOVEsR0FDeEIsSUFBSVIsRUFBS3VILEVBQU0vRyxHQUNmdEUsRUFBU3FMLEVBQU8vRyxFQUNQLFVBQVBBLEVBQWtCLFNBQVU1ZixHQUMxQixRQUFPd3dCLElBQVl6VCxFQUFTL2MsS0FBYW9mLEVBQUcxaEIsS0FBS1AsS0FBWSxJQUFONkMsRUFBVSxFQUFJQSxJQUM1RCxPQUFQNGYsRUFBZSxTQUFhNWYsR0FDOUIsUUFBT3d3QixJQUFZelQsRUFBUy9jLEtBQWFvZixFQUFHMWhCLEtBQUtQLEtBQVksSUFBTjZDLEVBQVUsRUFBSUEsSUFDNUQsT0FBUDRmLEVBQWUsU0FBYTVmLEdBQzlCLE9BQU93d0IsSUFBWXpULEVBQVMvYyxRQUFLd2MsRUFBWTRDLEVBQUcxaEIsS0FBS1AsS0FBWSxJQUFONkMsRUFBVSxFQUFJQSxJQUNoRSxPQUFQNGYsRUFBZSxTQUFhNWYsR0FBcUMsT0FBaENvZixFQUFHMWhCLEtBQUtQLEtBQVksSUFBTjZDLEVBQVUsRUFBSUEsR0FBVzdDLE1BQ3hFLFNBQWE2QyxFQUFHVSxHQUF3QyxPQUFuQzBlLEVBQUcxaEIsS0FBS1AsS0FBWSxJQUFONkMsRUFBVSxFQUFJQSxFQUFHVSxHQUFXdkQsUUFHdkUsR0FBZ0IsbUJBQUx1b0IsSUFBcUI4SyxHQUFXN0osRUFBTU8sVUFBWTVJLEdBQU0sWUFDakUsSUFBSW9ILEdBQUlqQyxVQUFVdlYsV0FNYixDQUNMLElBQUl5aUIsRUFBVyxJQUFJakwsRUFFZmtMLEVBQWlCRCxFQUFTRixHQUFPRCxFQUFVLElBQU0sRUFBRyxJQUFNRyxFQUUxREUsRUFBdUJ2UyxHQUFNLFdBQWNxUyxFQUFTN1MsSUFBSSxNQUV4RGdULEVBQW1CL08sR0FBWSxTQUFVNkgsR0FBUSxJQUFJbEUsRUFBRWtFLE1BRXZEbUgsR0FBY1AsR0FBV2xTLEdBQU0sV0FJakMsSUFGQSxJQUFJMFMsRUFBWSxJQUFJdEwsRUFDaEI5Z0IsRUFBUSxFQUNMQSxLQUFTb3NCLEVBQVVQLEdBQU83ckIsRUFBT0EsR0FDeEMsT0FBUW9zQixFQUFVbFQsS0FBSyxNQUVwQmdULEtBQ0hwTCxFQUFJaUQsR0FBUSxTQUFVemtCLEVBQVE4ckIsR0FDNUJqUCxFQUFXN2MsRUFBUXdoQixFQUFHN0csR0FDdEIsSUFBSVEsRUFBT2dSLEVBQWtCLElBQUlySCxFQUFROWtCLEVBQVF3aEIsR0FFakQsT0FEZ0JsSixNQUFad1QsR0FBdUJHLEVBQU1ILEVBQVU5UCxFQUFRYixFQUFLb1IsR0FBUXBSLEdBQ3pEQSxNQUVQbGdCLFVBQVl3bkIsRUFDZEEsRUFBTTVlLFlBQWMyZCxJQUVsQm1MLEdBQXdCRSxLQUMxQkwsRUFBVSxVQUNWQSxFQUFVLE9BQ1Z4USxHQUFVd1EsRUFBVSxTQUVsQkssR0FBY0gsSUFBZ0JGLEVBQVVELEdBRXhDRCxHQUFXN0osRUFBTXNLLGNBQWN0SyxFQUFNc0ssV0FwQ3pDdkwsRUFBSTZLLEVBQU9XLGVBQWV2SSxFQUFTOUosRUFBTXFCLEVBQVF1USxHQUNqRHhQLEVBQVl5RSxFQUFFdm1CLFVBQVdteEIsR0FDekI3RixFQUFLQyxNQUFPLEVBNENkLE9BUEEwRixFQUFlMUssRUFBRzdHLEdBRWxCbEIsRUFBRWtCLEdBQVE2RyxFQUNWbEssRUFBUUEsRUFBUVEsRUFBSVIsRUFBUW1CLEVBQUluQixFQUFRTSxHQUFLNEosR0FBS3NELEdBQU9yTCxHQUVwRDZTLEdBQVNELEVBQU9ZLFVBQVV6TCxFQUFHN0csRUFBTXFCLEdBRWpDd0YsSSxnQkNwRVQsSUFmQSxJQVNJMEwsRUFUQTN4QixFQUFTLEVBQVEsR0FDakI0YixFQUFPLEVBQVEsSUFDZjhCLEVBQU0sRUFBUSxJQUNkMkgsRUFBUTNILEVBQUksZUFDWjRILEVBQU81SCxFQUFJLFFBQ1hnTSxLQUFTMXBCLEVBQU9nakIsY0FBZWhqQixFQUFPa2pCLFVBQ3RDaUMsRUFBU3VFLEVBQ1Q1ckIsRUFBSSxFQUlKOHpCLEVBQXlCLGlIQUUzQi93QixNQUFNLEtBRUQvQyxFQVBDLElBUUY2ekIsRUFBUTN4QixFQUFPNHhCLEVBQXVCOXpCLFFBQ3hDOGQsRUFBSytWLEVBQU1qeUIsVUFBVzJsQixHQUFPLEdBQzdCekosRUFBSytWLEVBQU1qeUIsVUFBVzRsQixHQUFNLElBQ3ZCSCxHQUFTLEVBR2xCN25CLEVBQU9ELFFBQVUsQ0FDZnFzQixJQUFLQSxFQUNMdkUsT0FBUUEsRUFDUkUsTUFBT0EsRUFDUEMsS0FBTUEsSSxnQkMxQlIsSUFBSWhJLEVBQVcsRUFBUSxHQUNuQmxkLEVBQVcsRUFBUSxHQUFhQSxTQUVoQ3l4QixFQUFLdlUsRUFBU2xkLElBQWFrZCxFQUFTbGQsRUFBUzB4QixlQUNqRHgwQixFQUFPRCxRQUFVLFNBQVVrZ0IsR0FDekIsT0FBT3NVLEVBQUt6eEIsRUFBUzB4QixjQUFjdlUsR0FBTSxLLGdCQ0wzQ2xnQixFQUFRNEssRUFBSSxFQUFRLEksZ0JDQXBCLElBQUk4cEIsRUFBUyxFQUFRLEdBQVIsQ0FBcUIsUUFDOUJyVSxFQUFNLEVBQVEsSUFDbEJwZ0IsRUFBT0QsUUFBVSxTQUFVZ0MsR0FDekIsT0FBTzB5QixFQUFPMXlCLEtBQVMweUIsRUFBTzF5QixHQUFPcWUsRUFBSXJlLE0sY0NGM0MvQixFQUFPRCxRQUFVLGdHQUVmd0QsTUFBTSxNLGdCQ0hSLElBQUlULEVBQVcsRUFBUSxHQUFhQSxTQUNwQzlDLEVBQU9ELFFBQVUrQyxHQUFZQSxFQUFTNHhCLGlCLGdCQ0N0QyxJQUFJMVUsRUFBVyxFQUFRLEdBQ25CUSxFQUFXLEVBQVEsR0FDbkJoYyxFQUFRLFNBQVVvYyxFQUFHZ0osR0FFdkIsR0FEQXBKLEVBQVNJLElBQ0paLEVBQVM0SixJQUFvQixPQUFWQSxFQUFnQixNQUFNMUosVUFBVTBKLEVBQVEsOEJBRWxFNXBCLEVBQU9ELFFBQVUsQ0FDZnFjLElBQUtsYixPQUFPeXpCLGlCQUFtQixhQUFlLEdBQzVDLFNBQVU1ZixFQUFNNmYsRUFBT3hZLEdBQ3JCLEtBQ0VBLEVBQU0sRUFBUSxHQUFSLENBQWtCc0QsU0FBUy9lLEtBQU0sRUFBUSxJQUFrQmdLLEVBQUV6SixPQUFPa0IsVUFBVyxhQUFhZ2EsSUFBSyxJQUNuR3JILEVBQU0sSUFDVjZmLElBQVU3ZixhQUFnQi9RLE9BQzFCLE1BQU9vQyxHQUFLd3VCLEdBQVEsRUFDdEIsT0FBTyxTQUF3QmhVLEVBQUdnSixHQUloQyxPQUhBcGxCLEVBQU1vYyxFQUFHZ0osR0FDTGdMLEVBQU9oVSxFQUFFaVUsVUFBWWpMLEVBQ3BCeE4sRUFBSXdFLEVBQUdnSixHQUNMaEosR0FWWCxDQVlFLElBQUksUUFBU25CLEdBQ2pCamIsTUFBT0EsSSxjQ3ZCVHhFLEVBQU9ELFFBQVUsa0QsZ0JDQWpCLElBQUlpZ0IsRUFBVyxFQUFRLEdBQ25CMlUsRUFBaUIsRUFBUSxJQUFnQnZZLElBQzdDcGMsRUFBT0QsUUFBVSxTQUFVdWlCLEVBQU1uYixFQUFRd2hCLEdBQ3ZDLElBQ0l0SixFQURBRixFQUFJaFksRUFBTzZELFlBSWIsT0FGRW1VLElBQU13SixHQUFpQixtQkFBTHhKLElBQW9CRSxFQUFJRixFQUFFL2MsYUFBZXVtQixFQUFFdm1CLFdBQWE0ZCxFQUFTWCxJQUFNc1YsR0FDM0ZBLEVBQWVyUyxFQUFNakQsR0FDZGlELEksNkJDTlgsSUFBSWhDLEVBQVksRUFBUSxJQUNwQlEsRUFBVSxFQUFRLElBRXRCOWdCLEVBQU9ELFFBQVUsU0FBZ0IrMEIsR0FDL0IsSUFBSXBDLEVBQU1wUixPQUFPUixFQUFRMWdCLE9BQ3JCdWpCLEVBQU0sR0FDTjFoQixFQUFJcWUsRUFBVXdVLEdBQ2xCLEdBQUk3eUIsRUFBSSxHQUFLQSxHQUFLOHlCLElBQVUsTUFBTXpQLFdBQVcsMkJBQzdDLEtBQU1yakIsRUFBSSxHQUFJQSxLQUFPLEtBQU95d0IsR0FBT0EsR0FBYyxFQUFKendCLElBQU8waEIsR0FBTytPLEdBQzNELE9BQU8vTyxJLGNDVFQzakIsRUFBT0QsUUFBVXVLLEtBQUswcUIsTUFBUSxTQUFjQyxHQUUxQyxPQUFtQixJQUFYQSxHQUFLQSxJQUFXQSxHQUFLQSxFQUFJQSxFQUFJQSxFQUFJLEdBQUssRUFBSSxJLGNDRnBELElBQUlDLEVBQVM1cUIsS0FBSzZxQixNQUNsQm4xQixFQUFPRCxTQUFZbTFCLEdBRWRBLEVBQU8sSUFBTSxvQkFBc0JBLEVBQU8sSUFBTSxxQkFFN0IsT0FBbkJBLEdBQVEsT0FDVCxTQUFlRCxHQUNqQixPQUFtQixJQUFYQSxHQUFLQSxHQUFVQSxFQUFJQSxHQUFLLE1BQVFBLEVBQUksS0FBT0EsRUFBSUEsRUFBSUEsRUFBSSxFQUFJM3FCLEtBQUt1VSxJQUFJb1csR0FBSyxHQUMvRUMsRyxnQkNUSixJQUFJNVUsRUFBWSxFQUFRLElBQ3BCUSxFQUFVLEVBQVEsSUFHdEI5Z0IsRUFBT0QsUUFBVSxTQUFVcTFCLEdBQ3pCLE9BQU8sU0FBVTlTLEVBQU0rUyxHQUNyQixJQUdJcHlCLEVBQUdVLEVBSEhwQixFQUFJK2UsT0FBT1IsRUFBUXdCLElBQ25COWhCLEVBQUk4ZixFQUFVK1UsR0FDZDUwQixFQUFJOEIsRUFBRWlCLE9BRVYsT0FBSWhELEVBQUksR0FBS0EsR0FBS0MsRUFBVTIwQixFQUFZLFFBQUszVixHQUM3Q3hjLEVBQUlWLEVBQUUreUIsV0FBVzkwQixJQUNOLE9BQVV5QyxFQUFJLE9BQVV6QyxFQUFJLElBQU1DLElBQU1rRCxFQUFJcEIsRUFBRSt5QixXQUFXOTBCLEVBQUksSUFBTSxPQUFVbUQsRUFBSSxNQUN4Rnl4QixFQUFZN3lCLEVBQUUyUSxPQUFPMVMsR0FBS3lDLEVBQzFCbXlCLEVBQVk3eUIsRUFBRTZGLE1BQU01SCxFQUFHQSxFQUFJLEdBQTJCbUQsRUFBSSxPQUF6QlYsRUFBSSxPQUFVLElBQXFCLFMsNkJDYjVFLElBQUk0Z0IsRUFBVSxFQUFRLElBQ2xCcEYsRUFBVSxFQUFRLEdBQ2xCRixFQUFXLEVBQVEsSUFDbkJELEVBQU8sRUFBUSxJQUNmeUcsRUFBWSxFQUFRLElBQ3BCd1EsRUFBYyxFQUFRLEtBQ3RCbEMsRUFBaUIsRUFBUSxJQUN6QjlPLEVBQWlCLEVBQVEsSUFDekJpRCxFQUFXLEVBQVEsRUFBUixDQUFrQixZQUM3QmdPLElBQVUsR0FBR2hQLE1BQVEsUUFBVSxHQUFHQSxRQUtsQ2lQLEVBQWEsV0FBYyxPQUFPcjFCLE1BRXRDSixFQUFPRCxRQUFVLFNBQVVrc0IsRUFBTW5LLEVBQU11TyxFQUFhbGYsRUFBTXVrQixFQUFTQyxFQUFReEosR0FDekVvSixFQUFZbEYsRUFBYXZPLEVBQU0zUSxHQUMvQixJQWVJb2lCLEVBQVN4eEIsRUFBSzZ6QixFQWZkQyxFQUFZLFNBQVVDLEdBQ3hCLElBQUtOLEdBQVNNLEtBQVFsTSxFQUFPLE9BQU9BLEVBQU1rTSxHQUMxQyxPQUFRQSxHQUNOLElBVkssT0FXTCxJQVZPLFNBVU0sT0FBTyxXQUFvQixPQUFPLElBQUl6RixFQUFZandCLEtBQU0wMUIsSUFDckUsT0FBTyxXQUFxQixPQUFPLElBQUl6RixFQUFZandCLEtBQU0wMUIsS0FFekRyTyxFQUFNM0YsRUFBTyxZQUNiaVUsRUFkTyxVQWNNTCxFQUNiTSxHQUFhLEVBQ2JwTSxFQUFRcUMsRUFBSzdwQixVQUNiNnpCLEVBQVVyTSxFQUFNcEMsSUFBYW9DLEVBbkJqQixlQW1CdUM4TCxHQUFXOUwsRUFBTThMLEdBQ3BFUSxFQUFXRCxHQUFXSixFQUFVSCxHQUNoQ1MsRUFBV1QsRUFBV0ssRUFBd0JGLEVBQVUsV0FBckJLLE9BQWtDelcsRUFDckUyVyxFQUFxQixTQUFSdFUsR0FBa0I4SCxFQUFNbEQsU0FBcUJ1UCxFQXdCOUQsR0FyQklHLElBQ0ZSLEVBQW9CclIsRUFBZTZSLEVBQVd6MUIsS0FBSyxJQUFJc3JCLE9BQzdCL3FCLE9BQU9rQixXQUFhd3pCLEVBQWtCemtCLE9BRTlEa2lCLEVBQWV1QyxFQUFtQm5PLEdBQUssR0FFbEM1RCxHQUFpRCxtQkFBL0IrUixFQUFrQnBPLElBQXlCbEosRUFBS3NYLEVBQW1CcE8sRUFBVWlPLElBSXBHTSxHQUFjRSxHQWpDUCxXQWlDa0JBLEVBQVFsMUIsT0FDbkNpMUIsR0FBYSxFQUNiRSxFQUFXLFdBQW9CLE9BQU9ELEVBQVF0MUIsS0FBS1AsUUFHL0N5akIsSUFBV3NJLElBQVlxSixJQUFTUSxHQUFlcE0sRUFBTXBDLElBQ3pEbEosRUFBS3NMLEVBQU9wQyxFQUFVME8sR0FHeEJuUixFQUFVakQsR0FBUW9VLEVBQ2xCblIsRUFBVTBDLEdBQU9nTyxFQUNiQyxFQU1GLEdBTEFuQyxFQUFVLENBQ1JqTixPQUFReVAsRUFBYUcsRUFBV0wsRUE5Q3pCLFVBK0NQclAsS0FBTW1QLEVBQVNPLEVBQVdMLEVBaERyQixRQWlETG5QLFFBQVN5UCxHQUVQaEssRUFBUSxJQUFLcHFCLEtBQU93eEIsRUFDaEJ4eEIsS0FBTzZuQixHQUFRckwsRUFBU3FMLEVBQU83bkIsRUFBS3d4QixFQUFReHhCLFNBQzdDMGMsRUFBUUEsRUFBUVksRUFBSVosRUFBUU0sR0FBS3lXLEdBQVNRLEdBQWFsVSxFQUFNeVIsR0FFdEUsT0FBT0EsSSxnQkNsRVQsSUFBSThDLEVBQVcsRUFBUSxJQUNuQnZWLEVBQVUsRUFBUSxJQUV0QjlnQixFQUFPRCxRQUFVLFNBQVV1aUIsRUFBTWdVLEVBQWN4VSxHQUM3QyxHQUFJdVUsRUFBU0MsR0FBZSxNQUFNcFcsVUFBVSxVQUFZNEIsRUFBTywwQkFDL0QsT0FBT1IsT0FBT1IsRUFBUXdCLE0sZ0JDTHhCLElBQUl0QyxFQUFXLEVBQVEsR0FDbkJ1USxFQUFNLEVBQVEsSUFDZGdHLEVBQVEsRUFBUSxFQUFSLENBQWtCLFNBQzlCdjJCLEVBQU9ELFFBQVUsU0FBVWtnQixHQUN6QixJQUFJb1csRUFDSixPQUFPclcsRUFBU0MsVUFBbUNSLEtBQTFCNFcsRUFBV3BXLEVBQUdzVyxNQUEwQkYsRUFBc0IsVUFBWDlGLEVBQUl0USxNLGdCQ05sRixJQUFJc1csRUFBUSxFQUFRLEVBQVIsQ0FBa0IsU0FDOUJ2MkIsRUFBT0QsUUFBVSxTQUFVOGlCLEdBQ3pCLElBQUlpUCxFQUFLLElBQ1QsSUFDRSxNQUFNalAsR0FBS2lQLEdBQ1gsTUFBTzFyQixHQUNQLElBRUUsT0FEQTByQixFQUFHeUUsSUFBUyxHQUNKLE1BQU0xVCxHQUFLaVAsR0FDbkIsTUFBT25uQixLQUNULE9BQU8sSSxnQkNUWCxJQUFJb2EsRUFBWSxFQUFRLElBQ3BCeUMsRUFBVyxFQUFRLEVBQVIsQ0FBa0IsWUFDN0JoQyxFQUFheGhCLE1BQU01QixVQUV2QnBDLEVBQU9ELFFBQVUsU0FBVWtnQixHQUN6QixZQUFjUixJQUFQUSxJQUFxQjhFLEVBQVUvZ0IsUUFBVWljLEdBQU11RixFQUFXZ0MsS0FBY3ZILEssNkJDTGpGLElBQUl1VyxFQUFrQixFQUFRLElBQzFCeFUsRUFBYSxFQUFRLElBRXpCaGlCLEVBQU9ELFFBQVUsU0FBVW1DLEVBQVEyRixFQUFPcEcsR0FDcENvRyxLQUFTM0YsRUFBUXMwQixFQUFnQjdyQixFQUFFekksRUFBUTJGLEVBQU9tYSxFQUFXLEVBQUd2Z0IsSUFDL0RTLEVBQU8yRixHQUFTcEcsSSxnQkNOdkIsSUFBSTRpQixFQUFVLEVBQVEsSUFDbEJtRCxFQUFXLEVBQVEsRUFBUixDQUFrQixZQUM3QnpDLEVBQVksRUFBUSxJQUN4Qi9rQixFQUFPRCxRQUFVLEVBQVEsR0FBVzAyQixrQkFBb0IsU0FBVXhXLEdBQ2hFLEdBQVVSLE1BQU5RLEVBQWlCLE9BQU9BLEVBQUd1SCxJQUMxQnZILEVBQUcsZUFDSDhFLEVBQVVWLEVBQVFwRSxNLDZCQ0p6QixJQUFJNkMsRUFBVyxFQUFRLElBQ25Cc0IsRUFBa0IsRUFBUSxJQUMxQnJCLEVBQVcsRUFBUSxHQUN2Qi9pQixFQUFPRCxRQUFVLFNBQWMwQixHQU83QixJQU5BLElBQUltZixFQUFJa0MsRUFBUzFpQixNQUNib0QsRUFBU3VmLEVBQVNuQyxFQUFFcGQsUUFDcEI0bEIsRUFBTy9lLFVBQVU3RyxPQUNqQnFFLEVBQVF1YyxFQUFnQmdGLEVBQU8sRUFBSS9lLFVBQVUsUUFBS29WLEVBQVdqYyxHQUM3RGtRLEVBQU0wVixFQUFPLEVBQUkvZSxVQUFVLFFBQUtvVixFQUNoQ2lYLE9BQWlCalgsSUFBUi9MLEVBQW9CbFEsRUFBUzRnQixFQUFnQjFRLEVBQUtsUSxHQUN4RGt6QixFQUFTN3VCLEdBQU8rWSxFQUFFL1ksS0FBV3BHLEVBQ3BDLE9BQU9tZixJLDZCQ1pULElBQUkrVixFQUFtQixFQUFRLElBQzNCek4sRUFBTyxFQUFRLEtBQ2ZuRSxFQUFZLEVBQVEsSUFDcEJyQyxFQUFZLEVBQVEsSUFNeEIxaUIsRUFBT0QsUUFBVSxFQUFRLEdBQVIsQ0FBMEJpRSxNQUFPLFNBQVMsU0FBVTR5QixFQUFVZCxHQUM3RTExQixLQUFLbXZCLEdBQUs3TSxFQUFVa1UsR0FDcEJ4MkIsS0FBS3kyQixHQUFLLEVBQ1Z6MkIsS0FBSzAyQixHQUFLaEIsS0FFVCxXQUNELElBQUlsVixFQUFJeGdCLEtBQUttdkIsR0FDVHVHLEVBQU8xMUIsS0FBSzAyQixHQUNaanZCLEVBQVF6SCxLQUFLeTJCLEtBQ2pCLE9BQUtqVyxHQUFLL1ksR0FBUytZLEVBQUVwZCxRQUNuQnBELEtBQUttdkIsUUFBSzlQLEVBQ0h5SixFQUFLLElBRWFBLEVBQUssRUFBcEIsUUFBUjRNLEVBQStCanVCLEVBQ3ZCLFVBQVJpdUIsRUFBaUNsVixFQUFFL1ksR0FDeEIsQ0FBQ0EsRUFBTytZLEVBQUUvWSxPQUN4QixVQUdIa2QsRUFBVWdTLFVBQVloUyxFQUFVL2dCLE1BRWhDMnlCLEVBQWlCLFFBQ2pCQSxFQUFpQixVQUNqQkEsRUFBaUIsWSw2QkMvQmpCLElBYU1LLEVBQ0FDLEVBZEZDLEVBQWMsRUFBUSxJQUV0QkMsRUFBYXRILE9BQU96dEIsVUFBVTJkLEtBSTlCcVgsRUFBZ0I5VixPQUFPbGYsVUFBVXNULFFBRWpDMmhCLEVBQWNGLEVBSWRHLEdBQ0VOLEVBQU0sSUFDTkMsRUFBTSxNQUNWRSxFQUFXeDJCLEtBQUtxMkIsRUFBSyxLQUNyQkcsRUFBV3gyQixLQUFLczJCLEVBQUssS0FDTSxJQUFwQkQsRUFBYyxXQUErQixJQUFwQkMsRUFBYyxXQUk1Q00sT0FBdUM5WCxJQUF2QixPQUFPTSxLQUFLLElBQUksSUFFeEJ1WCxHQUE0QkMsS0FHdENGLEVBQWMsU0FBYzNFLEdBQzFCLElBQ0k4RSxFQUFXQyxFQUFRaGpCLEVBQU9qVSxFQUQxQnN4QixFQUFLMXhCLEtBd0JULE9BckJJbTNCLElBQ0ZFLEVBQVMsSUFBSTVILE9BQU8sSUFBTWlDLEVBQUdwVCxPQUFTLFdBQVl3WSxFQUFZdjJCLEtBQUtteEIsS0FFakV3RixJQUEwQkUsRUFBWTFGLEVBQWEsV0FFdkRyZCxFQUFRMGlCLEVBQVd4MkIsS0FBS214QixFQUFJWSxHQUV4QjRFLEdBQTRCN2lCLElBQzlCcWQsRUFBYSxVQUFJQSxFQUFHcHZCLE9BQVMrUixFQUFNNU0sTUFBUTRNLEVBQU0sR0FBR2pSLE9BQVNnMEIsR0FFM0RELEdBQWlCOWlCLEdBQVNBLEVBQU1qUixPQUFTLEdBSTNDNHpCLEVBQWN6MkIsS0FBSzhULEVBQU0sR0FBSWdqQixHQUFRLFdBQ25DLElBQUtqM0IsRUFBSSxFQUFHQSxFQUFJNkosVUFBVTdHLE9BQVMsRUFBR2hELFNBQ2ZpZixJQUFqQnBWLFVBQVU3SixLQUFrQmlVLEVBQU1qVSxRQUFLaWYsTUFLMUNoTCxJQUlYelUsRUFBT0QsUUFBVXMzQixHLDZCQ3hEakIsSUFBSUssRUFBSyxFQUFRLEdBQVIsRUFBd0IsR0FJakMxM0IsRUFBT0QsUUFBVSxTQUFVb2YsRUFBR3RYLEVBQU80cEIsR0FDbkMsT0FBTzVwQixHQUFTNHBCLEVBQVVpRyxFQUFHdlksRUFBR3RYLEdBQU9yRSxPQUFTLEssZ0JDTmxELElBYUltMEIsRUFBT0MsRUFBU0MsRUFiaEJyWixFQUFNLEVBQVEsSUFDZHNaLEVBQVMsRUFBUSxJQUNqQkMsRUFBTyxFQUFRLElBQ2ZDLEVBQU0sRUFBUSxJQUNkdDFCLEVBQVMsRUFBUSxHQUNqQnUxQixFQUFVdjFCLEVBQU91MUIsUUFDakJDLEVBQVV4MUIsRUFBT3kxQixhQUNqQkMsRUFBWTExQixFQUFPMjFCLGVBQ25CQyxFQUFpQjUxQixFQUFPNDFCLGVBQ3hCQyxFQUFXNzFCLEVBQU82MUIsU0FDbEJDLEVBQVUsRUFDVkMsRUFBUSxHQUdSQyxFQUFNLFdBQ1IsSUFBSTVnQixHQUFNMVgsS0FFVixHQUFJcTRCLEVBQU1wMkIsZUFBZXlWLEdBQUssQ0FDNUIsSUFBSXVLLEVBQUtvVyxFQUFNM2dCLFVBQ1IyZ0IsRUFBTTNnQixHQUNidUssTUFHQTFhLEVBQVcsU0FBVWd4QixHQUN2QkQsRUFBSS8zQixLQUFLZzRCLEVBQU0vc0IsT0FHWnNzQixHQUFZRSxJQUNmRixFQUFVLFNBQXNCN1YsR0FHOUIsSUFGQSxJQUFJdVcsRUFBTyxHQUNQcDRCLEVBQUksRUFDRDZKLFVBQVU3RyxPQUFTaEQsR0FBR280QixFQUFLaDFCLEtBQUt5RyxVQUFVN0osTUFNakQsT0FMQWk0QixJQUFRRCxHQUFXLFdBRWpCVixFQUFvQixtQkFBTnpWLEVBQW1CQSxFQUFLM0MsU0FBUzJDLEdBQUt1VyxJQUV0RGpCLEVBQU1hLEdBQ0NBLEdBRVRKLEVBQVksU0FBd0J0Z0IsVUFDM0IyZ0IsRUFBTTNnQixJQUdtQixXQUE5QixFQUFRLEdBQVIsQ0FBa0JtZ0IsR0FDcEJOLEVBQVEsU0FBVTdmLEdBQ2hCbWdCLEVBQVFZLFNBQVNyYSxFQUFJa2EsRUFBSzVnQixFQUFJLEtBR3ZCeWdCLEdBQVlBLEVBQVM1dkIsSUFDOUJndkIsRUFBUSxTQUFVN2YsR0FDaEJ5Z0IsRUFBUzV2QixJQUFJNlYsRUFBSWthLEVBQUs1Z0IsRUFBSSxLQUduQndnQixHQUVUVCxHQURBRCxFQUFVLElBQUlVLEdBQ0NRLE1BQ2ZsQixFQUFRbUIsTUFBTUMsVUFBWXJ4QixFQUMxQmd3QixFQUFRblosRUFBSXFaLEVBQUtvQixZQUFhcEIsRUFBTSxJQUczQm4xQixFQUFPNEUsa0JBQTBDLG1CQUFmMnhCLGNBQThCdjJCLEVBQU93MkIsZUFDaEZ2QixFQUFRLFNBQVU3ZixHQUNoQnBWLEVBQU91MkIsWUFBWW5oQixFQUFLLEdBQUksTUFFOUJwVixFQUFPNEUsaUJBQWlCLFVBQVdLLEdBQVUsSUFHN0Nnd0IsRUF2RHFCLHVCQXNEVUssRUFBSSxVQUMzQixTQUFVbGdCLEdBQ2hCaWdCLEVBQUtuSixZQUFZb0osRUFBSSxXQUE2QixtQkFBSSxXQUNwREQsRUFBS29CLFlBQVkvNEIsTUFDakJzNEIsRUFBSS8zQixLQUFLbVgsS0FLTCxTQUFVQSxHQUNoQmxOLFdBQVc0VCxFQUFJa2EsRUFBSzVnQixFQUFJLEdBQUksS0FJbEM5WCxFQUFPRCxRQUFVLENBQ2ZxYyxJQUFLOGIsRUFDTGhFLE1BQU9rRSxJLDZCQ2pGVCxJQUFJMTFCLEVBQVMsRUFBUSxHQUNqQnl0QixFQUFjLEVBQVEsR0FDdEJ0TSxFQUFVLEVBQVEsSUFDbEJDLEVBQVMsRUFBUSxJQUNqQnhGLEVBQU8sRUFBUSxJQUNmNEYsRUFBYyxFQUFRLElBQ3RCM0MsRUFBUSxFQUFRLEdBQ2hCeUMsRUFBYSxFQUFRLElBQ3JCMUQsRUFBWSxFQUFRLElBQ3BCeUMsRUFBVyxFQUFRLEdBQ25Cb0IsRUFBVSxFQUFRLEtBQ2xCSyxFQUFPLEVBQVEsSUFBa0I3WixFQUNqQ2dXLEVBQUssRUFBUSxJQUFnQmhXLEVBQzdCdWEsRUFBWSxFQUFRLElBQ3BCbU8sRUFBaUIsRUFBUSxJQUd6QitGLEVBQVksWUFFWkMsRUFBYyxlQUNkNVQsRUFBZS9pQixFQUFtQixZQUNsQ2lqQixFQUFZampCLEVBQWdCLFNBQzVCNEgsRUFBTzVILEVBQU80SCxLQUNkZ2IsRUFBYTVpQixFQUFPNGlCLFdBRXBCeVAsRUFBV3J5QixFQUFPcXlCLFNBQ2xCdUUsRUFBYTdULEVBQ2I4VCxFQUFNanZCLEVBQUtpdkIsSUFDWDlkLEVBQU1uUixFQUFLbVIsSUFDWCtHLEVBQVFsWSxFQUFLa1ksTUFDYjNFLEVBQU12VCxFQUFLdVQsSUFDWDJiLEVBQU1sdkIsRUFBS2t2QixJQUlYQyxFQUFVdEosRUFBYyxLQUhmLFNBSVR1SixFQUFVdkosRUFBYyxLQUhWLGFBSWR3SixFQUFVeEosRUFBYyxLQUhWLGFBTWxCLFNBQVN5SixFQUFZbjRCLEVBQU9vNEIsRUFBTUMsR0FDaEMsSUFPSTF6QixFQUFHeEYsRUFBR0MsRUFQTnduQixFQUFTLElBQUlya0IsTUFBTTgxQixHQUNuQkMsRUFBZ0IsRUFBVEQsRUFBYUQsRUFBTyxFQUMzQkcsR0FBUSxHQUFLRCxHQUFRLEVBQ3JCRSxFQUFRRCxHQUFRLEVBQ2hCRSxFQUFjLEtBQVRMLEVBQWNwZSxFQUFJLEdBQUksSUFBTUEsRUFBSSxHQUFJLElBQU0sRUFDL0NqYixFQUFJLEVBQ0orQixFQUFJZCxFQUFRLEdBQWUsSUFBVkEsR0FBZSxFQUFJQSxFQUFRLEVBQUksRUFBSSxFQWtDeEQsS0FoQ0FBLEVBQVE4M0IsRUFBSTkzQixLQUVDQSxHQUFTQSxJQUFVc3pCLEdBRTlCbjBCLEVBQUlhLEdBQVNBLEVBQVEsRUFBSSxFQUN6QjJFLEVBQUk0ekIsSUFFSjV6QixFQUFJb2MsRUFBTTNFLEVBQUlwYyxHQUFTKzNCLEdBQ25CLzNCLEdBQVNaLEVBQUk0YSxFQUFJLEdBQUlyVixJQUFNLElBQzdCQSxJQUNBdkYsR0FBSyxJQUdMWSxHQURFMkUsRUFBSTZ6QixHQUFTLEVBQ05DLEVBQUtyNUIsRUFFTHE1QixFQUFLemUsRUFBSSxFQUFHLEVBQUl3ZSxJQUVmcDVCLEdBQUssSUFDZnVGLElBQ0F2RixHQUFLLEdBRUh1RixFQUFJNnpCLEdBQVNELEdBQ2ZwNUIsRUFBSSxFQUNKd0YsRUFBSTR6QixHQUNLNXpCLEVBQUk2ekIsR0FBUyxHQUN0QnI1QixHQUFLYSxFQUFRWixFQUFJLEdBQUs0YSxFQUFJLEVBQUdvZSxHQUM3Qnp6QixHQUFRNnpCLElBRVJyNUIsRUFBSWEsRUFBUWdhLEVBQUksRUFBR3dlLEVBQVEsR0FBS3hlLEVBQUksRUFBR29lLEdBQ3ZDenpCLEVBQUksSUFHRHl6QixHQUFRLEVBQUd4UixFQUFPN25CLEtBQVcsSUFBSkksRUFBU0EsR0FBSyxJQUFLaTVCLEdBQVEsR0FHM0QsSUFGQXp6QixFQUFJQSxHQUFLeXpCLEVBQU9qNUIsRUFDaEJtNUIsR0FBUUYsRUFDREUsRUFBTyxFQUFHMVIsRUFBTzduQixLQUFXLElBQUo0RixFQUFTQSxHQUFLLElBQUsyekIsR0FBUSxHQUUxRCxPQURBMVIsSUFBUzduQixJQUFVLElBQUorQixFQUNSOGxCLEVBRVQsU0FBUzhSLEVBQWM5UixFQUFRd1IsRUFBTUMsR0FDbkMsSUFPSWw1QixFQVBBbTVCLEVBQWdCLEVBQVRELEVBQWFELEVBQU8sRUFDM0JHLEdBQVEsR0FBS0QsR0FBUSxFQUNyQkUsRUFBUUQsR0FBUSxFQUNoQkksRUFBUUwsRUFBTyxFQUNmdjVCLEVBQUlzNUIsRUFBUyxFQUNidjNCLEVBQUk4bEIsRUFBTzduQixLQUNYNEYsRUFBUSxJQUFKN0QsRUFHUixJQURBQSxJQUFNLEVBQ0M2M0IsRUFBUSxFQUFHaDBCLEVBQVEsSUFBSkEsRUFBVWlpQixFQUFPN25CLEdBQUlBLElBQUs0NUIsR0FBUyxHQUl6RCxJQUhBeDVCLEVBQUl3RixHQUFLLElBQU1nMEIsR0FBUyxFQUN4QmgwQixLQUFPZzBCLEVBQ1BBLEdBQVNQLEVBQ0ZPLEVBQVEsRUFBR3g1QixFQUFRLElBQUpBLEVBQVV5bkIsRUFBTzduQixHQUFJQSxJQUFLNDVCLEdBQVMsR0FDekQsR0FBVSxJQUFOaDBCLEVBQ0ZBLEVBQUksRUFBSTZ6QixNQUNILElBQUk3ekIsSUFBTTR6QixFQUNmLE9BQU9wNUIsRUFBSXk1QixJQUFNOTNCLEdBQUt3eUIsRUFBV0EsRUFFakNuMEIsR0FBUTZhLEVBQUksRUFBR29lLEdBQ2Z6ekIsR0FBUTZ6QixFQUNSLE9BQVExM0IsR0FBSyxFQUFJLEdBQUszQixFQUFJNmEsRUFBSSxFQUFHclYsRUFBSXl6QixHQUd6QyxTQUFTUyxFQUFVQyxHQUNqQixPQUFPQSxFQUFNLElBQU0sR0FBS0EsRUFBTSxJQUFNLEdBQUtBLEVBQU0sSUFBTSxFQUFJQSxFQUFNLEdBRWpFLFNBQVNDLEVBQU92YSxHQUNkLE1BQU8sQ0FBTSxJQUFMQSxHQUVWLFNBQVN3YSxFQUFReGEsR0FDZixNQUFPLENBQU0sSUFBTEEsRUFBV0EsR0FBTSxFQUFJLEtBRS9CLFNBQVN5YSxFQUFRemEsR0FDZixNQUFPLENBQU0sSUFBTEEsRUFBV0EsR0FBTSxFQUFJLElBQU1BLEdBQU0sR0FBSyxJQUFNQSxHQUFNLEdBQUssS0FFakUsU0FBUzBhLEVBQVExYSxHQUNmLE9BQU8yWixFQUFZM1osRUFBSSxHQUFJLEdBRTdCLFNBQVMyYSxFQUFRM2EsR0FDZixPQUFPMlosRUFBWTNaLEVBQUksR0FBSSxHQUc3QixTQUFTNkksRUFBVUgsRUFBRzVtQixFQUFLZ25CLEdBQ3pCcEksRUFBR2dJLEVBQUV5USxHQUFZcjNCLEVBQUssQ0FBRVYsSUFBSyxXQUFjLE9BQU9qQixLQUFLMm9CLE1BR3pELFNBQVMxbkIsRUFBSXc1QixFQUFNTixFQUFPMXlCLEVBQU9pekIsR0FDL0IsSUFDSUMsRUFBVzVXLEdBREN0YyxHQUVoQixHQUFJa3pCLEVBQVdSLEVBQVFNLEVBQUtuQixHQUFVLE1BQU1wVSxFQUFXK1QsR0FDdkQsSUFBSWxaLEVBQVEwYSxFQUFLcEIsR0FBU3VCLEdBQ3RCcm5CLEVBQVFvbkIsRUFBV0YsRUFBS2xCLEdBQ3hCc0IsRUFBTzlhLEVBQU0vWCxNQUFNdUwsRUFBT0EsRUFBUTRtQixHQUN0QyxPQUFPTyxFQUFpQkcsRUFBT0EsRUFBS250QixVQUV0QyxTQUFTc08sRUFBSXllLEVBQU1OLEVBQU8xeUIsRUFBT3F6QixFQUFZejVCLEVBQU9xNUIsR0FDbEQsSUFDSUMsRUFBVzVXLEdBREN0YyxHQUVoQixHQUFJa3pCLEVBQVdSLEVBQVFNLEVBQUtuQixHQUFVLE1BQU1wVSxFQUFXK1QsR0FJdkQsSUFIQSxJQUFJbFosRUFBUTBhLEVBQUtwQixHQUFTdUIsR0FDdEJybkIsRUFBUW9uQixFQUFXRixFQUFLbEIsR0FDeEJzQixFQUFPQyxHQUFZejVCLEdBQ2RqQixFQUFJLEVBQUdBLEVBQUkrNUIsRUFBTy81QixJQUFLMmYsRUFBTXhNLEVBQVFuVCxHQUFLeTZCLEVBQUtILEVBQWlCdDZCLEVBQUkrNUIsRUFBUS81QixFQUFJLEdBRzNGLEdBQUtzakIsRUFBT3NJLElBZ0ZMLENBQ0wsSUFBSzdLLEdBQU0sV0FDVGtFLEVBQWEsUUFDUmxFLEdBQU0sV0FDWCxJQUFJa0UsR0FBYyxPQUNkbEUsR0FBTSxXQUlWLE9BSEEsSUFBSWtFLEVBQ0osSUFBSUEsRUFBYSxLQUNqQixJQUFJQSxFQUFhNFUsS0FwT0YsZUFxT1I1VSxFQUFhMWtCLFFBQ2xCLENBTUYsSUFEQSxJQUN5Q2dCLEVBRHJDbzVCLEdBSkoxVixFQUFlLFNBQXFCamlCLEdBRWxDLE9BREF3Z0IsRUFBVzVqQixLQUFNcWxCLEdBQ1YsSUFBSTZULEVBQVduVixFQUFRM2dCLE1BRUk0MUIsR0FBYUUsRUFBV0YsR0FDbkQ1UyxFQUFPaEMsRUFBSzhVLEdBQWFqekIsRUFBSSxFQUFRbWdCLEVBQUtoakIsT0FBUzZDLElBQ25EdEUsRUFBTXlrQixFQUFLbmdCLFFBQVNvZixHQUFlbkgsRUFBS21ILEVBQWMxakIsRUFBS3UzQixFQUFXdjNCLElBRTFFOGhCLElBQVNzWCxFQUFpQm53QixZQUFjeWEsR0FHL0MsSUFBSW9WLEVBQU8sSUFBSWxWLEVBQVUsSUFBSUYsRUFBYSxJQUN0QzJWLEVBQVd6VixFQUFVeVQsR0FBV2lDLFFBQ3BDUixFQUFLUSxRQUFRLEVBQUcsWUFDaEJSLEVBQUtRLFFBQVEsRUFBRyxhQUNaUixFQUFLUyxRQUFRLElBQU9ULEVBQUtTLFFBQVEsSUFBSXBYLEVBQVl5QixFQUFVeVQsR0FBWSxDQUN6RWlDLFFBQVMsU0FBaUJ4USxFQUFZcHBCLEdBQ3BDMjVCLEVBQVN6NkIsS0FBS1AsS0FBTXlxQixFQUFZcHBCLEdBQVMsSUFBTSxLQUVqRDg1QixTQUFVLFNBQWtCMVEsRUFBWXBwQixHQUN0QzI1QixFQUFTejZCLEtBQUtQLEtBQU15cUIsRUFBWXBwQixHQUFTLElBQU0sT0FFaEQsUUFoSEhna0IsRUFBZSxTQUFxQmppQixHQUNsQ3dnQixFQUFXNWpCLEtBQU1xbEIsRUE5SUYsZUErSWYsSUFBSWlILEVBQWF2SSxFQUFRM2dCLEdBQ3pCcEQsS0FBSzQ2QixHQUFLOVYsRUFBVXZrQixLQUFLLElBQUlxRCxNQUFNMG9CLEdBQWEsR0FDaER0c0IsS0FBS3M1QixHQUFXaE4sR0FHbEIvRyxFQUFZLFNBQWtCMEMsRUFBUXdDLEVBQVk2QixHQUNoRDFJLEVBQVc1akIsS0FBTXVsQixFQXBKTCxZQXFKWjNCLEVBQVdxRSxFQUFRNUMsRUFySlAsWUFzSlosSUFBSStWLEVBQWVuVCxFQUFPcVIsR0FDdEJqUixFQUFTbkksRUFBVXVLLEdBQ3ZCLEdBQUlwQyxFQUFTLEdBQUtBLEVBQVMrUyxFQUFjLE1BQU1sVyxFQUFXLGlCQUUxRCxHQUFJbUQsR0FESmlFLE9BQTRCak4sSUFBZmlOLEVBQTJCOE8sRUFBZS9TLEVBQVMxRixFQUFTMkosSUFDL0M4TyxFQUFjLE1BQU1sVyxFQXhKL0IsaUJBeUpmbGxCLEtBQUtxNUIsR0FBV3BSLEVBQ2hCam9CLEtBQUt1NUIsR0FBV2xSLEVBQ2hCcm9CLEtBQUtzNUIsR0FBV2hOLEdBR2R5RCxJQUNGckgsRUFBVXJELEVBaEpJLGFBZ0p1QixNQUNyQ3FELEVBQVVuRCxFQWxKRCxTQWtKb0IsTUFDN0JtRCxFQUFVbkQsRUFsSkksYUFrSm9CLE1BQ2xDbUQsRUFBVW5ELEVBbEpJLGFBa0pvQixPQUdwQ3pCLEVBQVl5QixFQUFVeVQsR0FBWSxDQUNoQ2tDLFFBQVMsU0FBaUJ6USxHQUN4QixPQUFPeHBCLEVBQUlqQixLQUFNLEVBQUd5cUIsR0FBWSxJQUFNLElBQU0sSUFFOUM0USxTQUFVLFNBQWtCNVEsR0FDMUIsT0FBT3hwQixFQUFJakIsS0FBTSxFQUFHeXFCLEdBQVksSUFFbEM2USxTQUFVLFNBQWtCN1EsR0FDMUIsSUFBSTBQLEVBQVFsNUIsRUFBSWpCLEtBQU0sRUFBR3lxQixFQUFZeGdCLFVBQVUsSUFDL0MsT0FBUWt3QixFQUFNLElBQU0sRUFBSUEsRUFBTSxLQUFPLElBQU0sSUFFN0NvQixVQUFXLFNBQW1COVEsR0FDNUIsSUFBSTBQLEVBQVFsNUIsRUFBSWpCLEtBQU0sRUFBR3lxQixFQUFZeGdCLFVBQVUsSUFDL0MsT0FBT2t3QixFQUFNLElBQU0sRUFBSUEsRUFBTSxJQUUvQnFCLFNBQVUsU0FBa0IvUSxHQUMxQixPQUFPeVAsRUFBVWo1QixFQUFJakIsS0FBTSxFQUFHeXFCLEVBQVl4Z0IsVUFBVSxNQUV0RHd4QixVQUFXLFNBQW1CaFIsR0FDNUIsT0FBT3lQLEVBQVVqNUIsRUFBSWpCLEtBQU0sRUFBR3lxQixFQUFZeGdCLFVBQVUsT0FBUyxHQUUvRHl4QixXQUFZLFNBQW9CalIsR0FDOUIsT0FBT3NQLEVBQWM5NEIsRUFBSWpCLEtBQU0sRUFBR3lxQixFQUFZeGdCLFVBQVUsSUFBSyxHQUFJLElBRW5FMHhCLFdBQVksU0FBb0JsUixHQUM5QixPQUFPc1AsRUFBYzk0QixFQUFJakIsS0FBTSxFQUFHeXFCLEVBQVl4Z0IsVUFBVSxJQUFLLEdBQUksSUFFbkVneEIsUUFBUyxTQUFpQnhRLEVBQVlwcEIsR0FDcEMyYSxFQUFJaGMsS0FBTSxFQUFHeXFCLEVBQVkyUCxFQUFRLzRCLElBRW5DODVCLFNBQVUsU0FBa0IxUSxFQUFZcHBCLEdBQ3RDMmEsRUFBSWhjLEtBQU0sRUFBR3lxQixFQUFZMlAsRUFBUS80QixJQUVuQ3U2QixTQUFVLFNBQWtCblIsRUFBWXBwQixHQUN0QzJhLEVBQUloYyxLQUFNLEVBQUd5cUIsRUFBWTRQLEVBQVNoNUIsRUFBTzRJLFVBQVUsS0FFckQ0eEIsVUFBVyxTQUFtQnBSLEVBQVlwcEIsR0FDeEMyYSxFQUFJaGMsS0FBTSxFQUFHeXFCLEVBQVk0UCxFQUFTaDVCLEVBQU80SSxVQUFVLEtBRXJENnhCLFNBQVUsU0FBa0JyUixFQUFZcHBCLEdBQ3RDMmEsRUFBSWhjLEtBQU0sRUFBR3lxQixFQUFZNlAsRUFBU2o1QixFQUFPNEksVUFBVSxLQUVyRDh4QixVQUFXLFNBQW1CdFIsRUFBWXBwQixHQUN4QzJhLEVBQUloYyxLQUFNLEVBQUd5cUIsRUFBWTZQLEVBQVNqNUIsRUFBTzRJLFVBQVUsS0FFckQreEIsV0FBWSxTQUFvQnZSLEVBQVlwcEIsR0FDMUMyYSxFQUFJaGMsS0FBTSxFQUFHeXFCLEVBQVkrUCxFQUFTbjVCLEVBQU80SSxVQUFVLEtBRXJEZ3lCLFdBQVksU0FBb0J4UixFQUFZcHBCLEdBQzFDMmEsRUFBSWhjLEtBQU0sRUFBR3lxQixFQUFZOFAsRUFBU2w1QixFQUFPNEksVUFBVSxPQXNDekRncEIsRUFBZTVOLEVBL1BJLGVBZ1FuQjROLEVBQWUxTixFQS9QQyxZQWdRaEJySCxFQUFLcUgsRUFBVXlULEdBQVl0VixFQUFPa0UsTUFBTSxHQUN4Q2pvQixFQUFvQixZQUFJMGxCLEVBQ3hCMWxCLEVBQWlCLFNBQUk0bEIsRyxnQkNuUnJCM2xCLEVBQU9ELFNBQVcsRUFBUSxLQUFzQixFQUFRLEVBQVIsRUFBb0IsV0FDbEUsT0FBNEcsR0FBckdtQixPQUFPQyxlQUFlLEVBQVEsR0FBUixDQUF5QixPQUFRLElBQUssQ0FBRUUsSUFBSyxXQUFjLE9BQU8sS0FBUTRCLE0sZ0JDRHpHLElBQUlQLEVBQVMsRUFBUSxHQUNqQnViLEVBQU8sRUFBUSxHQUNmNEYsRUFBVSxFQUFRLElBQ2xCeVksRUFBUyxFQUFRLElBQ2pCbjdCLEVBQWlCLEVBQVEsSUFBZ0J3SixFQUM3QzNLLEVBQU9ELFFBQVUsU0FBVWdCLEdBQ3pCLElBQUl3N0IsRUFBVXRlLEVBQUsxYyxTQUFXMGMsRUFBSzFjLE9BQVNzaUIsRUFBVSxHQUFLbmhCLEVBQU9uQixRQUFVLElBQ3RELEtBQWxCUixFQUFLbVMsT0FBTyxJQUFlblMsS0FBUXc3QixHQUFVcDdCLEVBQWVvN0IsRUFBU3g3QixFQUFNLENBQUVVLE1BQU82NkIsRUFBTzN4QixFQUFFNUosTyxnQkNQbkcsSUFBSWdnQixFQUFNLEVBQVEsSUFDZDJCLEVBQVksRUFBUSxJQUNwQjBELEVBQWUsRUFBUSxHQUFSLEVBQTZCLEdBQzVDa0ksRUFBVyxFQUFRLEdBQVIsQ0FBeUIsWUFFeEN0dUIsRUFBT0QsUUFBVSxTQUFVbUMsRUFBUWdFLEdBQ2pDLElBR0luRSxFQUhBNmUsRUFBSThCLEVBQVV4Z0IsR0FDZDFCLEVBQUksRUFDSm9qQixFQUFTLEdBRWIsSUFBSzdoQixLQUFPNmUsRUFBTzdlLEdBQU91c0IsR0FBVXZOLEVBQUlILEVBQUc3ZSxJQUFRNmhCLEVBQU9oZ0IsS0FBSzdCLEdBRS9ELEtBQU9tRSxFQUFNMUMsT0FBU2hELEdBQU91Z0IsRUFBSUgsRUFBRzdlLEVBQU1tRSxFQUFNMUYsU0FDN0M0bEIsRUFBYXhDLEVBQVE3aEIsSUFBUTZoQixFQUFPaGdCLEtBQUs3QixJQUU1QyxPQUFPNmhCLEksZ0JDZlQsSUFBSWpELEVBQUssRUFBUSxJQUNiSCxFQUFXLEVBQVEsR0FDbkJnYyxFQUFVLEVBQVEsSUFFdEJ4OEIsRUFBT0QsUUFBVSxFQUFRLEdBQW9CbUIsT0FBT3U3QixpQkFBbUIsU0FBMEI3YixFQUFHc08sR0FDbEcxTyxFQUFTSSxHQUtULElBSkEsSUFHSXZCLEVBSEFtSCxFQUFPZ1csRUFBUXROLEdBQ2YxckIsRUFBU2dqQixFQUFLaGpCLE9BQ2RoRCxFQUFJLEVBRURnRCxFQUFTaEQsR0FBR21nQixFQUFHaFcsRUFBRWlXLEVBQUd2QixFQUFJbUgsRUFBS2htQixLQUFNMHVCLEVBQVc3UCxJQUNyRCxPQUFPdUIsSSxnQkNWVCxJQUFJOEIsRUFBWSxFQUFRLElBQ3BCOEIsRUFBTyxFQUFRLElBQWtCN1osRUFDakN2SCxFQUFXLEdBQUdBLFNBRWRzNUIsRUFBK0IsaUJBQVZqNkIsUUFBc0JBLFFBQVV2QixPQUFPa3VCLG9CQUM1RGx1QixPQUFPa3VCLG9CQUFvQjNzQixRQUFVLEdBVXpDekMsRUFBT0QsUUFBUTRLLEVBQUksU0FBNkJzVixHQUM5QyxPQUFPeWMsR0FBb0MsbUJBQXJCdDVCLEVBQVN6QyxLQUFLc2YsR0FUakIsU0FBVUEsR0FDN0IsSUFDRSxPQUFPdUUsRUFBS3ZFLEdBQ1osTUFBTzdaLEdBQ1AsT0FBT3MyQixFQUFZdDBCLFNBSzBDdTBCLENBQWUxYyxHQUFNdUUsRUFBSzlCLEVBQVV6QyxNLDZCQ2ZyRyxJQUFJa1EsRUFBYyxFQUFRLEdBQ3RCcU0sRUFBVSxFQUFRLElBQ2xCSSxFQUFPLEVBQVEsSUFDZm5hLEVBQU0sRUFBUSxJQUNkSyxFQUFXLEVBQVEsSUFDbkJiLEVBQVUsRUFBUSxJQUNsQjRhLEVBQVUzN0IsT0FBTzQ3QixPQUdyQjk4QixFQUFPRCxTQUFXODhCLEdBQVcsRUFBUSxFQUFSLEVBQW9CLFdBQy9DLElBQUlFLEVBQUksR0FDSnhkLEVBQUksR0FFSkosRUFBSTVkLFNBQ0p5N0IsRUFBSSx1QkFHUixPQUZBRCxFQUFFNWQsR0FBSyxFQUNQNmQsRUFBRXo1QixNQUFNLElBQUk0bUIsU0FBUSxTQUFVOFMsR0FBSzFkLEVBQUUwZCxHQUFLQSxLQUNkLEdBQXJCSixFQUFRLEdBQUlFLEdBQUc1ZCxJQUFXamUsT0FBT3NsQixLQUFLcVcsRUFBUSxHQUFJdGQsSUFBSXphLEtBQUssS0FBT2s0QixLQUN0RSxTQUFnQjcxQixFQUFRdVgsR0FNM0IsSUFMQSxJQUFJZ1MsRUFBSTVOLEVBQVMzYixHQUNiaWlCLEVBQU8vZSxVQUFVN0csT0FDakJxRSxFQUFRLEVBQ1JxMUIsRUFBYU4sRUFBS2p5QixFQUNsQnd5QixFQUFTMWEsRUFBSTlYLEVBQ1Z5ZSxFQUFPdmhCLEdBTVosSUFMQSxJQUlJOUYsRUFKQW9kLEVBQUk4QyxFQUFRNVgsVUFBVXhDLE1BQ3RCMmUsRUFBTzBXLEVBQWFWLEVBQVFyZCxHQUFHdlosT0FBT3MzQixFQUFXL2QsSUFBTXFkLEVBQVFyZCxHQUMvRDNiLEVBQVNnakIsRUFBS2hqQixPQUNkNkMsRUFBSSxFQUVEN0MsRUFBUzZDLEdBQ2R0RSxFQUFNeWtCLEVBQUtuZ0IsS0FDTjhwQixJQUFlZ04sRUFBT3g4QixLQUFLd2UsRUFBR3BkLEtBQU0ydUIsRUFBRTN1QixHQUFPb2QsRUFBRXBkLElBRXRELE9BQU8ydUIsR0FDUG1NLEcsY0NwQ0o3OEIsRUFBT0QsUUFBVW1CLE9BQU9xekIsSUFBTSxTQUFZVSxFQUFHbUksR0FFM0MsT0FBT25JLElBQU1tSSxFQUFVLElBQU5uSSxHQUFXLEVBQUlBLEdBQU0sRUFBSW1JLEVBQUluSSxHQUFLQSxHQUFLbUksR0FBS0EsSSw2QkNGL0QsSUFBSWhiLEVBQVksRUFBUSxJQUNwQnBDLEVBQVcsRUFBUSxHQUNuQjhYLEVBQVMsRUFBUSxJQUNqQjFRLEVBQWEsR0FBR2hmLE1BQ2hCaTFCLEVBQVksR0FFWkMsRUFBWSxTQUFVdmUsRUFBR29NLEVBQUt5TixHQUNoQyxLQUFNek4sS0FBT2tTLEdBQVksQ0FDdkIsSUFBSyxJQUFJcDdCLEVBQUksR0FBSXpCLEVBQUksRUFBR0EsRUFBSTJxQixFQUFLM3FCLElBQUt5QixFQUFFekIsR0FBSyxLQUFPQSxFQUFJLElBRXhENjhCLEVBQVVsUyxHQUFPekwsU0FBUyxNQUFPLGdCQUFrQnpkLEVBQUU2QyxLQUFLLEtBQU8sS0FDakUsT0FBT3U0QixFQUFVbFMsR0FBS3BNLEVBQUc2WixJQUc3QjU0QixFQUFPRCxRQUFVMmYsU0FBUzFkLE1BQVEsU0FBY3NnQixHQUM5QyxJQUFJRCxFQUFLRCxFQUFVaGlCLE1BQ2ZtOUIsRUFBV25XLEVBQVd6bUIsS0FBSzBKLFVBQVcsR0FDdENtekIsRUFBUSxXQUNWLElBQUk1RSxFQUFPMkUsRUFBUzMzQixPQUFPd2hCLEVBQVd6bUIsS0FBSzBKLFlBQzNDLE9BQU9qSyxnQkFBZ0JvOUIsRUFBUUYsRUFBVWpiLEVBQUl1VyxFQUFLcDFCLE9BQVFvMUIsR0FBUWQsRUFBT3pWLEVBQUl1VyxFQUFNdFcsSUFHckYsT0FESXRDLEVBQVNxQyxFQUFHamdCLGFBQVlvN0IsRUFBTXA3QixVQUFZaWdCLEVBQUdqZ0IsV0FDMUNvN0IsSSxjQ3RCVHg5QixFQUFPRCxRQUFVLFNBQVVzaUIsRUFBSXVXLEVBQU10VyxHQUNuQyxJQUFJbWIsT0FBY2hlLElBQVQ2QyxFQUNULE9BQVFzVyxFQUFLcDFCLFFBQ1gsS0FBSyxFQUFHLE9BQU9pNkIsRUFBS3BiLElBQ0FBLEVBQUcxaEIsS0FBSzJoQixHQUM1QixLQUFLLEVBQUcsT0FBT21iLEVBQUtwYixFQUFHdVcsRUFBSyxJQUNSdlcsRUFBRzFoQixLQUFLMmhCLEVBQU1zVyxFQUFLLElBQ3ZDLEtBQUssRUFBRyxPQUFPNkUsRUFBS3BiLEVBQUd1VyxFQUFLLEdBQUlBLEVBQUssSUFDakJ2VyxFQUFHMWhCLEtBQUsyaEIsRUFBTXNXLEVBQUssR0FBSUEsRUFBSyxJQUNoRCxLQUFLLEVBQUcsT0FBTzZFLEVBQUtwYixFQUFHdVcsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssSUFDMUJ2VyxFQUFHMWhCLEtBQUsyaEIsRUFBTXNXLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLElBQ3pELEtBQUssRUFBRyxPQUFPNkUsRUFBS3BiLEVBQUd1VyxFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLElBQ25DdlcsRUFBRzFoQixLQUFLMmhCLEVBQU1zVyxFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLElBQ2xFLE9BQU92VyxFQUFHdGQsTUFBTXVkLEVBQU1zVyxLLGdCQ2QxQixJQUFJOEUsRUFBWSxFQUFRLEdBQWE5b0IsU0FDakMrb0IsRUFBUSxFQUFRLElBQWtCek4sS0FDbEMwTixFQUFLLEVBQVEsSUFDYkMsRUFBTSxjQUVWNzlCLEVBQU9ELFFBQW1DLElBQXpCMjlCLEVBQVVFLEVBQUssT0FBMEMsS0FBM0JGLEVBQVVFLEVBQUssUUFBaUIsU0FBa0JsTCxFQUFLb0wsR0FDcEcsSUFBSXBjLEVBQVNpYyxFQUFNcmMsT0FBT29SLEdBQU0sR0FDaEMsT0FBT2dMLEVBQVVoYyxFQUFTb2MsSUFBVSxJQUFPRCxFQUFJOW9CLEtBQUsyTSxHQUFVLEdBQUssTUFDakVnYyxHLGdCQ1JKLElBQUlLLEVBQWMsRUFBUSxHQUFhcHBCLFdBQ25DZ3BCLEVBQVEsRUFBUSxJQUFrQnpOLEtBRXRDbHdCLEVBQU9ELFFBQVUsRUFBSWcrQixFQUFZLEVBQVEsSUFBa0IsUUFBV2hKLElBQVcsU0FBb0JyQyxHQUNuRyxJQUFJaFIsRUFBU2ljLEVBQU1yYyxPQUFPb1IsR0FBTSxHQUM1QjlPLEVBQVNtYSxFQUFZcmMsR0FDekIsT0FBa0IsSUFBWGtDLEdBQW9DLEtBQXBCbEMsRUFBT3hPLE9BQU8sSUFBYSxFQUFJMFEsR0FDcERtYSxHLGdCQ1BKLElBQUl4TixFQUFNLEVBQVEsSUFDbEJ2d0IsRUFBT0QsUUFBVSxTQUFVa2dCLEVBQUkrZCxHQUM3QixHQUFpQixpQkFBTi9kLEdBQTZCLFVBQVhzUSxFQUFJdFEsR0FBaUIsTUFBTUMsVUFBVThkLEdBQ2xFLE9BQVEvZCxJLGdCQ0ZWLElBQUlELEVBQVcsRUFBUSxHQUNuQndDLEVBQVFsWSxLQUFLa1ksTUFDakJ4aUIsRUFBT0QsUUFBVSxTQUFtQmtnQixHQUNsQyxPQUFRRCxFQUFTQyxJQUFPZ2UsU0FBU2hlLElBQU91QyxFQUFNdkMsS0FBUUEsSSxjQ0h4RGpnQixFQUFPRCxRQUFVdUssS0FBSzR6QixPQUFTLFNBQWVqSixHQUM1QyxPQUFRQSxHQUFLQSxJQUFNLE1BQVFBLEVBQUksS0FBT0EsRUFBSUEsRUFBSUEsRUFBSSxFQUFJM3FCLEtBQUt1VCxJQUFJLEVBQUlvWCxLLDZCQ0RyRSxJQUFJbnpCLEVBQVMsRUFBUSxJQUNqQnE4QixFQUFhLEVBQVEsSUFDckI5SyxFQUFpQixFQUFRLElBQ3pCdUMsRUFBb0IsR0FHeEIsRUFBUSxHQUFSLENBQW1CQSxFQUFtQixFQUFRLEVBQVIsQ0FBa0IsYUFBYSxXQUFjLE9BQU94MUIsUUFFMUZKLEVBQU9ELFFBQVUsU0FBVXN3QixFQUFhdk8sRUFBTTNRLEdBQzVDa2YsRUFBWWp1QixVQUFZTixFQUFPOHpCLEVBQW1CLENBQUV6a0IsS0FBTWd0QixFQUFXLEVBQUdodEIsS0FDeEVraUIsRUFBZWhELEVBQWF2TyxFQUFPLGUsZ0JDVnJDLElBQUl0QixFQUFXLEVBQVEsR0FDdkJ4Z0IsRUFBT0QsUUFBVSxTQUFVb3BCLEVBQVU5RyxFQUFJNWdCLEVBQU9pbEIsR0FDOUMsSUFDRSxPQUFPQSxFQUFVckUsRUFBRzdCLEVBQVMvZSxHQUFPLEdBQUlBLEVBQU0sSUFBTTRnQixFQUFHNWdCLEdBRXZELE1BQU8yRSxHQUNQLElBQUlnNEIsRUFBTWpWLEVBQWlCLE9BRTNCLFdBRFkxSixJQUFSMmUsR0FBbUI1ZCxFQUFTNGQsRUFBSXo5QixLQUFLd29CLElBQ25DL2lCLEssZ0JDUlYsSUFBSXllLEVBQXFCLEVBQVEsS0FFakM3a0IsRUFBT0QsUUFBVSxTQUFVcytCLEVBQVU3NkIsR0FDbkMsT0FBTyxJQUFLcWhCLEVBQW1Cd1osR0FBeEIsQ0FBbUM3NkIsSyxnQkNKNUMsSUFBSTRlLEVBQVksRUFBUSxJQUNwQlUsRUFBVyxFQUFRLElBQ25CYixFQUFVLEVBQVEsSUFDbEJjLEVBQVcsRUFBUSxHQUV2Qi9pQixFQUFPRCxRQUFVLFNBQVV1aUIsRUFBTW9CLEVBQVkwRixFQUFNa1YsRUFBTUMsR0FDdkRuYyxFQUFVc0IsR0FDVixJQUFJOUMsRUFBSWtDLEVBQVNSLEdBQ2JuaUIsRUFBTzhoQixFQUFRckIsR0FDZnBkLEVBQVN1ZixFQUFTbkMsRUFBRXBkLFFBQ3BCcUUsRUFBUTAyQixFQUFVLzZCLEVBQVMsRUFBSSxFQUMvQmhELEVBQUkrOUIsR0FBVyxFQUFJLEVBQ3ZCLEdBQUluVixFQUFPLEVBQUcsT0FBUyxDQUNyQixHQUFJdmhCLEtBQVMxSCxFQUFNLENBQ2pCbStCLEVBQU9uK0IsRUFBSzBILEdBQ1pBLEdBQVNySCxFQUNULE1BR0YsR0FEQXFILEdBQVNySCxFQUNMKzlCLEVBQVUxMkIsRUFBUSxFQUFJckUsR0FBVXFFLEVBQ2xDLE1BQU1xWSxVQUFVLCtDQUdwQixLQUFNcWUsRUFBVTEyQixHQUFTLEVBQUlyRSxFQUFTcUUsRUFBT0EsR0FBU3JILEVBQU9xSCxLQUFTMUgsSUFDcEVtK0IsRUFBTzVhLEVBQVc0YSxFQUFNbitCLEVBQUswSCxHQUFRQSxFQUFPK1ksSUFFOUMsT0FBTzBkLEksNkJDeEJULElBQUl4YixFQUFXLEVBQVEsSUFDbkJzQixFQUFrQixFQUFRLElBQzFCckIsRUFBVyxFQUFRLEdBRXZCL2lCLEVBQU9ELFFBQVUsR0FBRzhwQixZQUFjLFNBQW9CMWlCLEVBQWtCd00sR0FDdEUsSUFBSWlOLEVBQUlrQyxFQUFTMWlCLE1BQ2IrcUIsRUFBTXBJLEVBQVNuQyxFQUFFcGQsUUFDakI0VyxFQUFLZ0ssRUFBZ0JqZCxFQUFRZ2tCLEdBQzdCOWQsRUFBTytXLEVBQWdCelEsRUFBT3dYLEdBQzlCelgsRUFBTXJKLFVBQVU3RyxPQUFTLEVBQUk2RyxVQUFVLFFBQUtvVixFQUM1Q3FWLEVBQVF4cUIsS0FBS0MsVUFBYWtWLElBQVIvTCxFQUFvQnlYLEVBQU0vRyxFQUFnQjFRLEVBQUt5WCxJQUFROWQsRUFBTThkLEVBQU0vUSxHQUNyRm9rQixFQUFNLEVBTVYsSUFMSW54QixFQUFPK00sR0FBTUEsRUFBSy9NLEVBQU95bkIsSUFDM0IwSixHQUFPLEVBQ1BueEIsR0FBUXluQixFQUFRLEVBQ2hCMWEsR0FBTTBhLEVBQVEsR0FFVEEsS0FBVSxHQUNYem5CLEtBQVF1VCxFQUFHQSxFQUFFeEcsR0FBTXdHLEVBQUV2VCxVQUNidVQsRUFBRXhHLEdBQ2RBLEdBQU1va0IsRUFDTm54QixHQUFRbXhCLEVBQ1IsT0FBTzVkLEksY0N4Qlg1Z0IsRUFBT0QsUUFBVSxTQUFVeXBCLEVBQU0vbkIsR0FDL0IsTUFBTyxDQUFFQSxNQUFPQSxFQUFPK25CLE9BQVFBLEssNkJDQWpDLElBQUlvSSxFQUFhLEVBQVEsSUFDekIsRUFBUSxFQUFSLENBQXFCLENBQ25CenFCLE9BQVEsU0FDUnlpQixPQUFPLEVBQ1A2VSxPQUFRN00sSUFBZSxJQUFJN1IsTUFDMUIsQ0FDREEsS0FBTTZSLEssZ0JDTkosRUFBUSxJQUFtQyxLQUFkLEtBQUs4TSxPQUFjLEVBQVEsSUFBZ0IvekIsRUFBRWtsQixPQUFPenRCLFVBQVcsUUFBUyxDQUN2R3FwQixjQUFjLEVBQ2RwcUIsSUFBSyxFQUFRLE8sNkJDRmYsSUF3QklzOUIsRUFBVUMsRUFBNkJDLEVBQXNCQyxFQXhCN0RqYixFQUFVLEVBQVEsSUFDbEJuaEIsRUFBUyxFQUFRLEdBQ2pCOGIsRUFBTSxFQUFRLElBQ2Q2RixFQUFVLEVBQVEsSUFDbEI1RixFQUFVLEVBQVEsR0FDbEJ1QixFQUFXLEVBQVEsR0FDbkJvQyxFQUFZLEVBQVEsSUFDcEI0QixFQUFhLEVBQVEsSUFDckJvUCxFQUFRLEVBQVEsSUFDaEJ2TyxFQUFxQixFQUFRLElBQzdCa2EsRUFBTyxFQUFRLElBQVczaUIsSUFDMUI0aUIsRUFBWSxFQUFRLElBQVIsR0FDWkMsRUFBNkIsRUFBUSxLQUNyQ0MsRUFBVSxFQUFRLEtBQ2xCL0wsRUFBWSxFQUFRLElBQ3BCZ00sRUFBaUIsRUFBUSxLQUV6QmpmLEVBQVl4ZCxFQUFPd2QsVUFDbkIrWCxFQUFVdjFCLEVBQU91MUIsUUFDakJtSCxFQUFXbkgsR0FBV0EsRUFBUW1ILFNBQzlCQyxFQUFLRCxHQUFZQSxFQUFTQyxJQUFNLEdBQ2hDQyxFQUFXNThCLEVBQWMsUUFDekI2OEIsRUFBNkIsV0FBcEJsYixFQUFRNFQsR0FDakJ1SCxFQUFRLGFBRVJDLEVBQXVCYixFQUE4QkssRUFBMkJ0MEIsRUFFaEYrMEIsSUFBZSxXQUNqQixJQUVFLElBQUlDLEVBQVVMLEVBQVNNLFFBQVEsR0FDM0JDLEdBQWVGLEVBQVEzMEIsWUFBYyxJQUFJLEVBQVEsRUFBUixDQUFrQixZQUFjLFNBQVUrVSxHQUNyRkEsRUFBS3lmLEVBQU9BLElBR2QsT0FBUUQsR0FBMEMsbUJBQXpCTyx3QkFDcEJILEVBQVFJLEtBQUtQLGFBQWtCSyxHQUlULElBQXRCUixFQUFHOXZCLFFBQVEsU0FDeUIsSUFBcEM0akIsRUFBVTVqQixRQUFRLGFBQ3ZCLE1BQU9uSixLQWZRLEdBbUJmNDVCLEVBQWEsU0FBVS9mLEdBQ3pCLElBQUk4ZixFQUNKLFNBQU8vZixFQUFTQyxJQUFrQyxtQkFBbkI4ZixFQUFPOWYsRUFBRzhmLFFBQXNCQSxHQUU3REUsRUFBUyxTQUFVTixFQUFTTyxHQUM5QixJQUFJUCxFQUFRUSxHQUFaLENBQ0FSLEVBQVFRLElBQUssRUFDYixJQUFJQyxFQUFRVCxFQUFRVSxHQUNwQnJCLEdBQVUsV0FvQ1IsSUFuQ0EsSUFBSXY5QixFQUFRaytCLEVBQVFXLEdBQ2hCQyxFQUFtQixHQUFkWixFQUFRYSxHQUNiaGdDLEVBQUksRUFDSms0QixFQUFNLFNBQVUrSCxHQUNsQixJQUlJN2MsRUFBUW1jLEVBQU1XLEVBSmRDLEVBQVVKLEVBQUtFLEVBQVNGLEdBQUtFLEVBQVNHLEtBQ3RDaEIsRUFBVWEsRUFBU2IsUUFDbkJpQixFQUFTSixFQUFTSSxPQUNsQkMsRUFBU0wsRUFBU0ssT0FFdEIsSUFDTUgsR0FDR0osSUFDZSxHQUFkWixFQUFRb0IsSUFBU0MsRUFBa0JyQixHQUN2Q0EsRUFBUW9CLEdBQUssSUFFQyxJQUFaSixFQUFrQi9jLEVBQVNuaUIsR0FFekJxL0IsR0FBUUEsRUFBT0csUUFDbkJyZCxFQUFTK2MsRUFBUWwvQixHQUNicS9CLElBQ0ZBLEVBQU9JLE9BQ1BSLEdBQVMsSUFHVDljLElBQVc2YyxFQUFTZCxRQUN0QmtCLEVBQU8zZ0IsRUFBVSx5QkFDUjZmLEVBQU9DLEVBQVdwYyxJQUMzQm1jLEVBQUtwL0IsS0FBS2lqQixFQUFRZ2MsRUFBU2lCLEdBQ3RCakIsRUFBUWhjLElBQ1ZpZCxFQUFPcC9CLEdBQ2QsTUFBTzJFLEdBQ0gwNkIsSUFBV0osR0FBUUksRUFBT0ksT0FDOUJMLEVBQU96NkIsS0FHSmc2QixFQUFNNThCLE9BQVNoRCxHQUFHazRCLEVBQUkwSCxFQUFNNS9CLE1BQ25DbS9CLEVBQVFVLEdBQUssR0FDYlYsRUFBUVEsSUFBSyxFQUNURCxJQUFhUCxFQUFRb0IsSUFBSUksRUFBWXhCLFFBR3pDd0IsRUFBYyxTQUFVeEIsR0FDMUJaLEVBQUtwK0IsS0FBSytCLEdBQVEsV0FDaEIsSUFFSWtoQixFQUFRK2MsRUFBUy9pQixFQUZqQm5jLEVBQVFrK0IsRUFBUVcsR0FDaEJjLEVBQVlDLEVBQVkxQixHQWU1QixHQWJJeUIsSUFDRnhkLEVBQVNzYixHQUFRLFdBQ1hLLEVBQ0Z0SCxFQUFRcUosS0FBSyxxQkFBc0I3L0IsRUFBT2srQixJQUNqQ2dCLEVBQVVqK0IsRUFBTzYrQixzQkFDMUJaLEVBQVEsQ0FBRWhCLFFBQVNBLEVBQVM2QixPQUFRLy9CLEtBQzFCbWMsRUFBVWxiLEVBQU9rYixVQUFZQSxFQUFRNmpCLE9BQy9DN2pCLEVBQVE2akIsTUFBTSw4QkFBK0JoZ0MsTUFJakRrK0IsRUFBUW9CLEdBQUt4QixHQUFVOEIsRUFBWTFCLEdBQVcsRUFBSSxHQUNsREEsRUFBUStCLFFBQUtqaUIsRUFDWDJoQixHQUFheGQsRUFBT3hkLEVBQUcsTUFBTXdkLEVBQU96VSxNQUd4Q2t5QixFQUFjLFNBQVUxQixHQUMxQixPQUFzQixJQUFmQSxFQUFRb0IsSUFBa0QsS0FBckNwQixFQUFRK0IsSUFBTS9CLEVBQVFVLElBQUk3OEIsUUFFcER3OUIsRUFBb0IsU0FBVXJCLEdBQ2hDWixFQUFLcCtCLEtBQUsrQixHQUFRLFdBQ2hCLElBQUlpK0IsRUFDQXBCLEVBQ0Z0SCxFQUFRcUosS0FBSyxtQkFBb0IzQixJQUN4QmdCLEVBQVVqK0IsRUFBT2kvQixxQkFDMUJoQixFQUFRLENBQUVoQixRQUFTQSxFQUFTNkIsT0FBUTdCLEVBQVFXLFNBSTlDc0IsRUFBVSxTQUFVbmdDLEdBQ3RCLElBQUlrK0IsRUFBVXYvQixLQUNWdS9CLEVBQVEzVyxLQUNaMlcsRUFBUTNXLElBQUssR0FDYjJXLEVBQVVBLEVBQVFrQyxJQUFNbEMsR0FDaEJXLEdBQUs3K0IsRUFDYmsrQixFQUFRYSxHQUFLLEVBQ1JiLEVBQVErQixLQUFJL0IsRUFBUStCLEdBQUsvQixFQUFRVSxHQUFHajRCLFNBQ3pDNjNCLEVBQU9OLEdBQVMsS0FFZG1DLEVBQVcsU0FBVXJnQyxHQUN2QixJQUNJcytCLEVBREFKLEVBQVV2L0IsS0FFZCxJQUFJdS9CLEVBQVEzVyxHQUFaLENBQ0EyVyxFQUFRM1csSUFBSyxFQUNiMlcsRUFBVUEsRUFBUWtDLElBQU1sQyxFQUN4QixJQUNFLEdBQUlBLElBQVlsK0IsRUFBTyxNQUFNeWUsRUFBVSxxQ0FDbkM2ZixFQUFPQyxFQUFXditCLElBQ3BCdTlCLEdBQVUsV0FDUixJQUFJcFQsRUFBVSxDQUFFaVcsR0FBSWxDLEVBQVMzVyxJQUFJLEdBQ2pDLElBQ0UrVyxFQUFLcC9CLEtBQUtjLEVBQU8rYyxFQUFJc2pCLEVBQVVsVyxFQUFTLEdBQUlwTixFQUFJb2pCLEVBQVNoVyxFQUFTLElBQ2xFLE1BQU94bEIsR0FDUHc3QixFQUFRamhDLEtBQUtpckIsRUFBU3hsQixRQUkxQnU1QixFQUFRVyxHQUFLNytCLEVBQ2JrK0IsRUFBUWEsR0FBSyxFQUNiUCxFQUFPTixHQUFTLElBRWxCLE1BQU92NUIsR0FDUHc3QixFQUFRamhDLEtBQUssQ0FBRWtoQyxHQUFJbEMsRUFBUzNXLElBQUksR0FBUzVpQixNQUt4Q3M1QixJQUVISixFQUFXLFNBQWlCeUMsR0FDMUIvZCxFQUFXNWpCLEtBQU1rL0IsRUEzSlAsVUEySjBCLE1BQ3BDbGQsRUFBVTJmLEdBQ1ZwRCxFQUFTaCtCLEtBQUtQLE1BQ2QsSUFDRTJoQyxFQUFTdmpCLEVBQUlzakIsRUFBVTFoQyxLQUFNLEdBQUlvZSxFQUFJb2pCLEVBQVN4aEMsS0FBTSxJQUNwRCxNQUFPNGhDLEdBQ1BKLEVBQVFqaEMsS0FBS1AsS0FBTTRoQyxNQUl2QnJELEVBQVcsU0FBaUJvRCxHQUMxQjNoQyxLQUFLaWdDLEdBQUssR0FDVmpnQyxLQUFLc2hDLFFBQUtqaUIsRUFDVnJmLEtBQUtvZ0MsR0FBSyxFQUNWcGdDLEtBQUs0b0IsSUFBSyxFQUNWNW9CLEtBQUtrZ0MsUUFBSzdnQixFQUNWcmYsS0FBSzJnQyxHQUFLLEVBQ1YzZ0MsS0FBSysvQixJQUFLLElBRUgvOUIsVUFBWSxFQUFRLEdBQVIsQ0FBMkJrOUIsRUFBU2w5QixVQUFXLENBRWxFMjlCLEtBQU0sU0FBY2tDLEVBQWFDLEdBQy9CLElBQUl6QixFQUFXaEIsRUFBcUI1YSxFQUFtQnprQixLQUFNay9CLElBTzdELE9BTkFtQixFQUFTRixHQUEyQixtQkFBZjBCLEdBQTRCQSxFQUNqRHhCLEVBQVNHLEtBQTRCLG1CQUFkc0IsR0FBNEJBLEVBQ25EekIsRUFBU0ssT0FBU3ZCLEVBQVN0SCxFQUFRNkksWUFBU3JoQixFQUM1Q3JmLEtBQUtpZ0MsR0FBR3o4QixLQUFLNjhCLEdBQ1RyZ0MsS0FBS3NoQyxJQUFJdGhDLEtBQUtzaEMsR0FBRzk5QixLQUFLNjhCLEdBQ3RCcmdDLEtBQUtvZ0MsSUFBSVAsRUFBTzcvQixNQUFNLEdBQ25CcWdDLEVBQVNkLFNBR2xCLE1BQVMsU0FBVXVDLEdBQ2pCLE9BQU85aEMsS0FBSzIvQixVQUFLdGdCLEVBQVd5aUIsTUFHaENyRCxFQUF1QixXQUNyQixJQUFJYyxFQUFVLElBQUloQixFQUNsQnYrQixLQUFLdS9CLFFBQVVBLEVBQ2Z2L0IsS0FBS3cvQixRQUFVcGhCLEVBQUlzakIsRUFBVW5DLEVBQVMsR0FDdEN2L0IsS0FBS3lnQyxPQUFTcmlCLEVBQUlvakIsRUFBU2pDLEVBQVMsSUFFdENWLEVBQTJCdDBCLEVBQUk4MEIsRUFBdUIsU0FBVTlXLEdBQzlELE9BQU9BLElBQU0yVyxHQUFZM1csSUFBTW1XLEVBQzNCLElBQUlELEVBQXFCbFcsR0FDekJpVyxFQUE0QmpXLEtBSXBDbEssRUFBUUEsRUFBUVEsRUFBSVIsRUFBUW1CLEVBQUluQixFQUFRTSxHQUFLMmdCLEVBQVksQ0FBRXlDLFFBQVM3QyxJQUNwRSxFQUFRLEdBQVIsQ0FBZ0NBLEVBN01sQixXQThNZCxFQUFRLEdBQVIsQ0E5TWMsV0ErTWRSLEVBQVUsRUFBUSxHQUFrQixRQUdwQ3JnQixFQUFRQSxFQUFRVSxFQUFJVixFQUFRTSxHQUFLMmdCLEVBbE5uQixVQWtOd0MsQ0FFcERtQixPQUFRLFNBQWdCdi9CLEdBQ3RCLElBQUk4Z0MsRUFBYTNDLEVBQXFCci9CLE1BR3RDLE9BREFpaUMsRUFEZUQsRUFBV3ZCLFFBQ2pCdi9CLEdBQ0Y4Z0MsRUFBV3pDLFdBR3RCbGhCLEVBQVFBLEVBQVFVLEVBQUlWLEVBQVFNLEdBQUs4RSxJQUFZNmIsR0EzTi9CLFVBMk5xRCxDQUVqRUUsUUFBUyxTQUFpQjNLLEdBQ3hCLE9BQU9rSyxFQUFldGIsR0FBV3pqQixPQUFTMCtCLEVBQVVRLEVBQVdsL0IsS0FBTTYwQixNQUd6RXhXLEVBQVFBLEVBQVFVLEVBQUlWLEVBQVFNLElBQU0yZ0IsR0FBYyxFQUFRLEdBQVIsRUFBMEIsU0FBVTdTLEdBQ2xGeVMsRUFBU3JuQixJQUFJNFUsR0FBYSxNQUFFMlMsT0FsT2hCLFVBbU9BLENBRVp2bkIsSUFBSyxTQUFhZ2IsR0FDaEIsSUFBSXRLLEVBQUl2b0IsS0FDSmdpQyxFQUFhM0MsRUFBcUI5VyxHQUNsQ2lYLEVBQVV3QyxFQUFXeEMsUUFDckJpQixFQUFTdUIsRUFBV3ZCLE9BQ3BCamQsRUFBU3NiLEdBQVEsV0FDbkIsSUFBSTVZLEVBQVMsR0FDVHplLEVBQVEsRUFDUnk2QixFQUFZLEVBQ2hCbFAsRUFBTUgsR0FBVSxHQUFPLFNBQVUwTSxHQUMvQixJQUFJNEMsRUFBUzE2QixJQUNUMjZCLEdBQWdCLEVBQ3BCbGMsRUFBTzFpQixVQUFLNmIsR0FDWjZpQixJQUNBM1osRUFBRWlYLFFBQVFELEdBQVNJLE1BQUssU0FBVXQrQixHQUM1QitnQyxJQUNKQSxHQUFnQixFQUNoQmxjLEVBQU9pYyxHQUFVOWdDLElBQ2Y2Z0MsR0FBYTFDLEVBQVF0WixNQUN0QnVhLFFBRUh5QixHQUFhMUMsRUFBUXRaLE1BR3pCLE9BREkxQyxFQUFPeGQsR0FBR3k2QixFQUFPamQsRUFBT3pVLEdBQ3JCaXpCLEVBQVd6QyxTQUdwQjhDLEtBQU0sU0FBY3hQLEdBQ2xCLElBQUl0SyxFQUFJdm9CLEtBQ0pnaUMsRUFBYTNDLEVBQXFCOVcsR0FDbENrWSxFQUFTdUIsRUFBV3ZCLE9BQ3BCamQsRUFBU3NiLEdBQVEsV0FDbkI5TCxFQUFNSCxHQUFVLEdBQU8sU0FBVTBNLEdBQy9CaFgsRUFBRWlYLFFBQVFELEdBQVNJLEtBQUtxQyxFQUFXeEMsUUFBU2lCLFNBSWhELE9BRElqZCxFQUFPeGQsR0FBR3k2QixFQUFPamQsRUFBT3pVLEdBQ3JCaXpCLEVBQVd6QyxZLDZCQ3pSdEIsSUFBSXZkLEVBQVksRUFBUSxJQUV4QixTQUFTc2dCLEVBQWtCL1osR0FDekIsSUFBSWlYLEVBQVNpQixFQUNiemdDLEtBQUt1L0IsUUFBVSxJQUFJaFgsR0FBRSxTQUFVZ2EsRUFBV04sR0FDeEMsUUFBZ0I1aUIsSUFBWm1nQixRQUFvQ25nQixJQUFYb2hCLEVBQXNCLE1BQU0zZ0IsVUFBVSwyQkFDbkUwZixFQUFVK0MsRUFDVjlCLEVBQVN3QixLQUVYamlDLEtBQUt3L0IsUUFBVXhkLEVBQVV3ZCxHQUN6QngvQixLQUFLeWdDLE9BQVN6ZSxFQUFVeWUsR0FHMUI3Z0MsRUFBT0QsUUFBUTRLLEVBQUksU0FBVWdlLEdBQzNCLE9BQU8sSUFBSStaLEVBQWtCL1osSyxnQkNoQi9CLElBQUluSSxFQUFXLEVBQVEsR0FDbkJSLEVBQVcsRUFBUSxHQUNuQnlmLEVBQXVCLEVBQVEsS0FFbkN6L0IsRUFBT0QsUUFBVSxTQUFVNG9CLEVBQUdzTSxHQUU1QixHQURBelUsRUFBU21JLEdBQ0wzSSxFQUFTaVYsSUFBTUEsRUFBRWpxQixjQUFnQjJkLEVBQUcsT0FBT3NNLEVBQy9DLElBQUkyTixFQUFvQm5ELEVBQXFCOTBCLEVBQUVnZSxHQUcvQyxPQURBaVgsRUFEY2dELEVBQWtCaEQsU0FDeEIzSyxHQUNEMk4sRUFBa0JqRCxVLDZCQ1QzQixJQUFJaGYsRUFBSyxFQUFRLElBQWdCaFcsRUFDN0I3SSxFQUFTLEVBQVEsSUFDakJvaUIsRUFBYyxFQUFRLElBQ3RCMUYsRUFBTSxFQUFRLElBQ2R3RixFQUFhLEVBQVEsSUFDckJvUCxFQUFRLEVBQVEsSUFDaEJ5UCxFQUFjLEVBQVEsSUFDdEIzWixFQUFPLEVBQVEsS0FDZmpFLEVBQWEsRUFBUSxJQUNyQmtMLEVBQWMsRUFBUSxHQUN0QnZDLEVBQVUsRUFBUSxJQUFXQSxRQUM3QmxGLEVBQVcsRUFBUSxJQUNuQm9hLEVBQU8zUyxFQUFjLEtBQU8sT0FFNUI0UyxFQUFXLFNBQVV6Z0IsRUFBTXZnQixHQUU3QixJQUNJaWhDLEVBREFuN0IsRUFBUStsQixFQUFRN3JCLEdBRXBCLEdBQWMsTUFBVjhGLEVBQWUsT0FBT3lhLEVBQUt1VSxHQUFHaHZCLEdBRWxDLElBQUttN0IsRUFBUTFnQixFQUFLMmdCLEdBQUlELEVBQU9BLEVBQVFBLEVBQU0vZ0MsRUFDekMsR0FBSStnQyxFQUFNL0YsR0FBS2w3QixFQUFLLE9BQU9paEMsR0FJL0JoakMsRUFBT0QsUUFBVSxDQUNmbzBCLGVBQWdCLFNBQVV2SSxFQUFTOUosRUFBTXFCLEVBQVF1USxHQUMvQyxJQUFJL0ssRUFBSWlELEdBQVEsU0FBVXRKLEVBQU0yUSxHQUM5QmpQLEVBQVcxQixFQUFNcUcsRUFBRzdHLEVBQU0sTUFDMUJRLEVBQUtpTixHQUFLek4sRUFDVlEsRUFBS3VVLEdBQUsvMEIsRUFBTyxNQUNqQndnQixFQUFLMmdCLFFBQUt4akIsRUFDVjZDLEVBQUs0Z0IsUUFBS3pqQixFQUNWNkMsRUFBS3dnQixHQUFRLEVBQ0dyakIsTUFBWndULEdBQXVCRyxFQUFNSCxFQUFVOVAsRUFBUWIsRUFBS29SLEdBQVFwUixNQXNEbEUsT0FwREE0QixFQUFZeUUsRUFBRXZtQixVQUFXLENBR3ZCOHhCLE1BQU8sV0FDTCxJQUFLLElBQUk1UixFQUFPb0csRUFBU3RvQixLQUFNMGhCLEdBQU9sVyxFQUFPMFcsRUFBS3VVLEdBQUltTSxFQUFRMWdCLEVBQUsyZ0IsR0FBSUQsRUFBT0EsRUFBUUEsRUFBTS9nQyxFQUMxRitnQyxFQUFNMWhDLEdBQUksRUFDTjBoQyxFQUFNMWdDLElBQUcwZ0MsRUFBTTFnQyxFQUFJMGdDLEVBQU0xZ0MsRUFBRUwsT0FBSXdkLFVBQzVCN1QsRUFBS28zQixFQUFNeGlDLEdBRXBCOGhCLEVBQUsyZ0IsR0FBSzNnQixFQUFLNGdCLFFBQUt6akIsRUFDcEI2QyxFQUFLd2dCLEdBQVEsR0FJZixPQUFVLFNBQVUvZ0MsR0FDbEIsSUFBSXVnQixFQUFPb0csRUFBU3RvQixLQUFNMGhCLEdBQ3RCa2hCLEVBQVFELEVBQVN6Z0IsRUFBTXZnQixHQUMzQixHQUFJaWhDLEVBQU8sQ0FDVCxJQUFJN3hCLEVBQU82eEIsRUFBTS9nQyxFQUNia2hDLEVBQU9ILEVBQU0xZ0MsU0FDVmdnQixFQUFLdVUsR0FBR21NLEVBQU14aUMsR0FDckJ3aUMsRUFBTTFoQyxHQUFJLEVBQ042aEMsSUFBTUEsRUFBS2xoQyxFQUFJa1AsR0FDZkEsSUFBTUEsRUFBSzdPLEVBQUk2Z0MsR0FDZjdnQixFQUFLMmdCLElBQU1ELElBQU8xZ0IsRUFBSzJnQixHQUFLOXhCLEdBQzVCbVIsRUFBSzRnQixJQUFNRixJQUFPMWdCLEVBQUs0Z0IsR0FBS0MsR0FDaEM3Z0IsRUFBS3dnQixLQUNMLFFBQVNFLEdBSWI3WSxRQUFTLFNBQWlCekcsR0FDeEJnRixFQUFTdG9CLEtBQU0waEIsR0FHZixJQUZBLElBQ0lraEIsRUFEQXI0QixFQUFJNlQsRUFBSWtGLEVBQVlyWixVQUFVN0csT0FBUyxFQUFJNkcsVUFBVSxRQUFLb1YsRUFBVyxHQUVsRXVqQixFQUFRQSxFQUFRQSxFQUFNL2dDLEVBQUk3QixLQUFLNmlDLElBR3BDLElBRkF0NEIsRUFBRXE0QixFQUFNN3pCLEVBQUc2ekIsRUFBTS9GLEVBQUc3OEIsTUFFYjRpQyxHQUFTQSxFQUFNMWhDLEdBQUcwaEMsRUFBUUEsRUFBTTFnQyxHQUszQ3llLElBQUssU0FBYWhmLEdBQ2hCLFFBQVNnaEMsRUFBU3JhLEVBQVN0b0IsS0FBTTBoQixHQUFPL2YsTUFHeENvdUIsR0FBYXhQLEVBQUdnSSxFQUFFdm1CLFVBQVcsT0FBUSxDQUN2Q2YsSUFBSyxXQUNILE9BQU9xbkIsRUFBU3RvQixLQUFNMGhCLEdBQU1naEIsTUFHekJuYSxHQUVUNkcsSUFBSyxTQUFVbE4sRUFBTXZnQixFQUFLTixHQUN4QixJQUNJMGhDLEVBQU10N0IsRUFETm03QixFQUFRRCxFQUFTemdCLEVBQU12Z0IsR0FvQnpCLE9BakJFaWhDLEVBQ0ZBLEVBQU03ekIsRUFBSTFOLEdBR1Y2Z0IsRUFBSzRnQixHQUFLRixFQUFRLENBQ2hCeGlDLEVBQUdxSCxFQUFRK2xCLEVBQVE3ckIsR0FBSyxHQUN4Qms3QixFQUFHbDdCLEVBQ0hvTixFQUFHMU4sRUFDSGEsRUFBRzZnQyxFQUFPN2dCLEVBQUs0Z0IsR0FDZmpoQyxPQUFHd2QsRUFDSG5lLEdBQUcsR0FFQWdoQixFQUFLMmdCLEtBQUkzZ0IsRUFBSzJnQixHQUFLRCxHQUNwQkcsSUFBTUEsRUFBS2xoQyxFQUFJK2dDLEdBQ25CMWdCLEVBQUt3Z0IsS0FFUyxNQUFWajdCLElBQWV5YSxFQUFLdVUsR0FBR2h2QixHQUFTbTdCLElBQzdCMWdCLEdBRVh5Z0IsU0FBVUEsRUFDVjNPLFVBQVcsU0FBVXpMLEVBQUc3RyxFQUFNcUIsR0FHNUIwZixFQUFZbGEsRUFBRzdHLEdBQU0sU0FBVThVLEVBQVVkLEdBQ3ZDMTFCLEtBQUttdkIsR0FBSzdHLEVBQVNrTyxFQUFVOVUsR0FDN0IxaEIsS0FBSzAyQixHQUFLaEIsRUFDVjExQixLQUFLOGlDLFFBQUt6akIsS0FDVCxXQUtELElBSkEsSUFDSXFXLEVBRE8xMUIsS0FDSzAyQixHQUNaa00sRUFGTzVpQyxLQUVNOGlDLEdBRVZGLEdBQVNBLEVBQU0xaEMsR0FBRzBoQyxFQUFRQSxFQUFNMWdDLEVBRXZDLE9BTldsQyxLQU1EbXZCLEtBTkNudkIsS0FNWThpQyxHQUFLRixFQUFRQSxFQUFRQSxFQUFNL2dDLEVBTnZDN0IsS0FNZ0RtdkIsR0FBRzBULElBTW5DL1osRUFBSyxFQUFwQixRQUFSNE0sRUFBK0JrTixFQUFNL0YsRUFDN0IsVUFBUm5ILEVBQWlDa04sRUFBTTd6QixFQUM1QixDQUFDNnpCLEVBQU0vRixFQUFHK0YsRUFBTTd6QixLQWRwQi9PLEtBUUptdkIsUUFBSzlQLEVBQ0h5SixFQUFLLE1BTWIvRixFQUFTLFVBQVksVUFBV0EsR0FBUSxHQUczQzhCLEVBQVduRCxNLDZCQzVJZixJQUFJb0MsRUFBYyxFQUFRLElBQ3RCMkosRUFBVSxFQUFRLElBQVdBLFFBQzdCck4sRUFBVyxFQUFRLEdBQ25CUixFQUFXLEVBQVEsR0FDbkJnRSxFQUFhLEVBQVEsSUFDckJvUCxFQUFRLEVBQVEsSUFDaEJ6TyxFQUFvQixFQUFRLElBQzVCeWUsRUFBTyxFQUFRLElBQ2YxYSxFQUFXLEVBQVEsSUFDbkJ6QyxFQUFZdEIsRUFBa0IsR0FDOUJ1QixFQUFpQnZCLEVBQWtCLEdBQ25DN00sRUFBSyxFQUdMdXJCLEVBQXNCLFNBQVUvZ0IsR0FDbEMsT0FBT0EsRUFBSzRnQixLQUFPNWdCLEVBQUs0Z0IsR0FBSyxJQUFJSSxJQUUvQkEsRUFBc0IsV0FDeEJsakMsS0FBSzZDLEVBQUksSUFFUHNnQyxFQUFxQixTQUFVcGpCLEVBQU9wZSxHQUN4QyxPQUFPa2tCLEVBQVU5RixFQUFNbGQsR0FBRyxTQUFVZ2QsR0FDbEMsT0FBT0EsRUFBRyxLQUFPbGUsTUFHckJ1aEMsRUFBb0JsaEMsVUFBWSxDQUM5QmYsSUFBSyxTQUFVVSxHQUNiLElBQUlpaEMsRUFBUU8sRUFBbUJuakMsS0FBTTJCLEdBQ3JDLEdBQUlpaEMsRUFBTyxPQUFPQSxFQUFNLElBRTFCamlCLElBQUssU0FBVWhmLEdBQ2IsUUFBU3doQyxFQUFtQm5qQyxLQUFNMkIsSUFFcENxYSxJQUFLLFNBQVVyYSxFQUFLTixHQUNsQixJQUFJdWhDLEVBQVFPLEVBQW1CbmpDLEtBQU0yQixHQUNqQ2loQyxFQUFPQSxFQUFNLEdBQUt2aEMsRUFDakJyQixLQUFLNkMsRUFBRVcsS0FBSyxDQUFDN0IsRUFBS04sS0FFekIsT0FBVSxTQUFVTSxHQUNsQixJQUFJOEYsRUFBUXFlLEVBQWU5bEIsS0FBSzZDLEdBQUcsU0FBVWdkLEdBQzNDLE9BQU9BLEVBQUcsS0FBT2xlLEtBR25CLE9BREs4RixHQUFPekgsS0FBSzZDLEVBQUU4RSxPQUFPRixFQUFPLE1BQ3ZCQSxJQUlkN0gsRUFBT0QsUUFBVSxDQUNmbzBCLGVBQWdCLFNBQVV2SSxFQUFTOUosRUFBTXFCLEVBQVF1USxHQUMvQyxJQUFJL0ssRUFBSWlELEdBQVEsU0FBVXRKLEVBQU0yUSxHQUM5QmpQLEVBQVcxQixFQUFNcUcsRUFBRzdHLEVBQU0sTUFDMUJRLEVBQUtpTixHQUFLek4sRUFDVlEsRUFBS3VVLEdBQUsvZSxJQUNWd0ssRUFBSzRnQixRQUFLempCLEVBQ01BLE1BQVp3VCxHQUF1QkcsRUFBTUgsRUFBVTlQLEVBQVFiLEVBQUtvUixHQUFRcFIsTUFvQmxFLE9BbEJBNEIsRUFBWXlFLEVBQUV2bUIsVUFBVyxDQUd2QixPQUFVLFNBQVVMLEdBQ2xCLElBQUtpZSxFQUFTamUsR0FBTSxPQUFPLEVBQzNCLElBQUk2SixFQUFPaWlCLEVBQVE5ckIsR0FDbkIsT0FBYSxJQUFUNkosRUFBc0J5M0IsRUFBb0IzYSxFQUFTdG9CLEtBQU0waEIsSUFBZSxPQUFFL2YsR0FDdkU2SixHQUFRdzNCLEVBQUt4M0IsRUFBTXhMLEtBQUt5MkIsWUFBY2pyQixFQUFLeEwsS0FBS3kyQixLQUl6RDlWLElBQUssU0FBYWhmLEdBQ2hCLElBQUtpZSxFQUFTamUsR0FBTSxPQUFPLEVBQzNCLElBQUk2SixFQUFPaWlCLEVBQVE5ckIsR0FDbkIsT0FBYSxJQUFUNkosRUFBc0J5M0IsRUFBb0IzYSxFQUFTdG9CLEtBQU0waEIsSUFBT2YsSUFBSWhmLEdBQ2pFNkosR0FBUXczQixFQUFLeDNCLEVBQU14TCxLQUFLeTJCLE9BRzVCbE8sR0FFVDZHLElBQUssU0FBVWxOLEVBQU12Z0IsRUFBS04sR0FDeEIsSUFBSW1LLEVBQU9paUIsRUFBUXJOLEVBQVN6ZSxJQUFNLEdBR2xDLE9BRmEsSUFBVDZKLEVBQWV5M0IsRUFBb0IvZ0IsR0FBTWxHLElBQUlyYSxFQUFLTixHQUNqRG1LLEVBQUswVyxFQUFLdVUsSUFBTXAxQixFQUNkNmdCLEdBRVRraEIsUUFBU0gsSSxnQkNsRlgsSUFBSS9pQixFQUFZLEVBQVEsSUFDcEJ5QyxFQUFXLEVBQVEsR0FDdkIvaUIsRUFBT0QsUUFBVSxTQUFVa2dCLEdBQ3pCLFFBQVdSLElBQVBRLEVBQWtCLE9BQU8sRUFDN0IsSUFBSXdqQixFQUFTbmpCLEVBQVVMLEdBQ25CemMsRUFBU3VmLEVBQVMwZ0IsR0FDdEIsR0FBSUEsSUFBV2pnQyxFQUFRLE1BQU04aEIsV0FBVyxpQkFDeEMsT0FBTzloQixJLGdCQ1BULElBQUlnaEIsRUFBTyxFQUFRLElBQ2ZvWSxFQUFPLEVBQVEsSUFDZnBjLEVBQVcsRUFBUSxHQUNuQmtqQixFQUFVLEVBQVEsR0FBYUEsUUFDbkMxakMsRUFBT0QsUUFBVTJqQyxHQUFXQSxFQUFRQyxTQUFXLFNBQWlCMWpCLEdBQzlELElBQUl1RyxFQUFPaEMsRUFBSzdaLEVBQUU2VixFQUFTUCxJQUN2QmlkLEVBQWFOLEVBQUtqeUIsRUFDdEIsT0FBT3V5QixFQUFhMVcsRUFBSzVnQixPQUFPczNCLEVBQVdqZCxJQUFPdUcsSSxnQkNQcEQsSUFBSXpELEVBQVcsRUFBUSxHQUNuQnRMLEVBQVMsRUFBUSxJQUNqQnFKLEVBQVUsRUFBUSxJQUV0QjlnQixFQUFPRCxRQUFVLFNBQVV1aUIsRUFBTXNoQixFQUFXQyxFQUFZQyxHQUN0RCxJQUFJM2tCLEVBQUltQyxPQUFPUixFQUFRd0IsSUFDbkJ5aEIsRUFBZTVrQixFQUFFM2IsT0FDakJ3Z0MsT0FBeUJ2a0IsSUFBZm9rQixFQUEyQixJQUFNdmlCLE9BQU91aUIsR0FDbERJLEVBQWVsaEIsRUFBUzZnQixHQUM1QixHQUFJSyxHQUFnQkYsR0FBMkIsSUFBWEMsRUFBZSxPQUFPN2tCLEVBQzFELElBQUkra0IsRUFBVUQsRUFBZUYsRUFDekJJLEVBQWUxc0IsRUFBTzlXLEtBQUtxakMsRUFBUzE1QixLQUFLaVksS0FBSzJoQixFQUFVRixFQUFReGdDLFNBRXBFLE9BREkyZ0MsRUFBYTNnQyxPQUFTMGdDLElBQVNDLEVBQWVBLEVBQWEvN0IsTUFBTSxFQUFHODdCLElBQ2pFSixFQUFPSyxFQUFlaGxCLEVBQUlBLEVBQUlnbEIsSSxnQkNkdkMsSUFBSWhVLEVBQWMsRUFBUSxHQUN0QnFNLEVBQVUsRUFBUSxJQUNsQjlaLEVBQVksRUFBUSxJQUNwQnlhLEVBQVMsRUFBUSxJQUFpQnh5QixFQUN0QzNLLEVBQU9ELFFBQVUsU0FBVXFrQyxHQUN6QixPQUFPLFNBQVVua0IsR0FPZixJQU5BLElBS0lsZSxFQUxBNmUsRUFBSThCLEVBQVV6QyxHQUNkdUcsRUFBT2dXLEVBQVE1YixHQUNmcGQsRUFBU2dqQixFQUFLaGpCLE9BQ2RoRCxFQUFJLEVBQ0pvakIsRUFBUyxHQUVOcGdCLEVBQVNoRCxHQUNkdUIsRUFBTXlrQixFQUFLaG1CLEtBQ04ydkIsSUFBZWdOLEVBQU94OEIsS0FBS2lnQixFQUFHN2UsSUFDakM2aEIsRUFBT2hnQixLQUFLd2dDLEVBQVksQ0FBQ3JpQyxFQUFLNmUsRUFBRTdlLElBQVE2ZSxFQUFFN2UsSUFHOUMsT0FBTzZoQixLLGdCQ2xCWCxFQUFRLE0sNkJDRVIsRUFBUSxLQUVSLEVBQVEsS0FFUixFQUFRLEtBRVIsRUFBUSxLQUVSLEVBQVEsS0FFUixFQUFRLEtBRVIsRUFBUSxLQUVSLEVBQVEsS0FFUixFQUFRLEtBRVIsRUFBUSxLQUVSLEVBQVEsS0FFUixFQUFRLEtBRVIsRUFBUSxLQUVSLEVBQVEsTSxnQkM1QlIsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxJQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1I1akIsRUFBT0QsUUFBVSxFQUFRLEksNkJDeEl6QixJQUFJMkMsRUFBUyxFQUFRLEdBQ2pCcWUsRUFBTSxFQUFRLElBQ2RvUCxFQUFjLEVBQVEsR0FDdEIxUixFQUFVLEVBQVEsR0FDbEJGLEVBQVcsRUFBUSxJQUNuQjRPLEVBQU8sRUFBUSxJQUFXdEssSUFDMUJ3aEIsRUFBUyxFQUFRLEdBQ2pCNVAsRUFBUyxFQUFRLElBQ2pCcEIsRUFBaUIsRUFBUSxJQUN6QmpULEVBQU0sRUFBUSxJQUNkc0UsRUFBTSxFQUFRLEdBQ2Q0WCxFQUFTLEVBQVEsSUFDakJnSSxFQUFZLEVBQVEsSUFDcEJDLEVBQVcsRUFBUSxLQUNuQjF1QixFQUFVLEVBQVEsSUFDbEIySyxFQUFXLEVBQVEsR0FDbkJSLEVBQVcsRUFBUSxHQUNuQjhDLEVBQVcsRUFBUSxJQUNuQkosRUFBWSxFQUFRLElBQ3BCaEMsRUFBYyxFQUFRLElBQ3RCc0IsRUFBYSxFQUFRLElBQ3JCd2lCLEVBQVUsRUFBUSxJQUNsQkMsRUFBVSxFQUFRLElBQ2xCcGYsRUFBUSxFQUFRLElBQ2hCcWYsRUFBUSxFQUFRLElBQ2hCdGYsRUFBTSxFQUFRLElBQ2Q4SSxFQUFRLEVBQVEsSUFDaEJ2TCxFQUFPMEMsRUFBTTFhLEVBQ2JnVyxFQUFLeUUsRUFBSXphLEVBQ1Q2WixFQUFPaWdCLEVBQVE5NUIsRUFDZjR4QixFQUFVNzVCLEVBQU9uQixPQUNqQm9qQyxFQUFRamlDLEVBQU9raUMsS0FDZkMsRUFBYUYsR0FBU0EsRUFBTUcsVUFFNUJDLEVBQVNyZ0IsRUFBSSxXQUNic2dCLEVBQWV0Z0IsRUFBSSxlQUNuQnlZLEVBQVMsR0FBRzNNLHFCQUNaeVUsRUFBaUJ4USxFQUFPLG1CQUN4QnlRLEVBQWF6USxFQUFPLFdBQ3BCMFEsRUFBWTFRLEVBQU8sY0FDbkJwRixFQUFjbnVCLE9BQWdCLFVBQzlCdytCLEVBQStCLG1CQUFYbkQsS0FBMkJtSSxFQUFNLzVCLEVBQ3JEeTZCLEVBQVUxaUMsRUFBTzBpQyxRQUVqQjdZLEdBQVU2WSxJQUFZQSxFQUFpQixZQUFNQSxFQUFpQixVQUFFQyxVQUdoRUMsRUFBZ0JuVixHQUFla1UsR0FBTyxXQUN4QyxPQUVTLEdBRkZHLEVBQVE3akIsRUFBRyxHQUFJLElBQUssQ0FDekJ0ZixJQUFLLFdBQWMsT0FBT3NmLEVBQUd2Z0IsS0FBTSxJQUFLLENBQUVxQixNQUFPLElBQUt3QixNQUNwREEsS0FDRCxTQUFVZ2QsRUFBSWxlLEVBQUs4dUIsR0FDdEIsSUFBSTBVLEVBQVk1aUIsRUFBSzBNLEVBQWF0dEIsR0FDOUJ3akMsVUFBa0JsVyxFQUFZdHRCLEdBQ2xDNGUsRUFBR1YsRUFBSWxlLEVBQUs4dUIsR0FDUjBVLEdBQWF0bEIsSUFBT29QLEdBQWExTyxFQUFHME8sRUFBYXR0QixFQUFLd2pDLElBQ3hENWtCLEVBRUE2a0IsRUFBTyxTQUFVN2pCLEdBQ25CLElBQUk4akIsRUFBTVAsRUFBV3ZqQixHQUFPNmlCLEVBQVFqSSxFQUFpQixXQUVyRCxPQURBa0osRUFBSTNPLEdBQUtuVixFQUNGOGpCLEdBR0xDLEVBQVdoRyxHQUF5QyxpQkFBcEJuRCxFQUFRcFQsU0FBdUIsU0FBVWxKLEdBQzNFLE1BQW9CLGlCQUFOQSxHQUNaLFNBQVVBLEdBQ1osT0FBT0EsYUFBY3NjLEdBR25CL0YsRUFBa0IsU0FBd0J2VyxFQUFJbGUsRUFBSzh1QixHQUtyRCxPQUpJNVEsSUFBT29QLEdBQWFtSCxFQUFnQjJPLEVBQVdwakMsRUFBSzh1QixHQUN4RHJRLEVBQVNQLEdBQ1RsZSxFQUFNMmUsRUFBWTNlLEdBQUssR0FDdkJ5ZSxFQUFTcVEsR0FDTDlQLEVBQUlta0IsRUFBWW5qQyxJQUNiOHVCLEVBQUV6dkIsWUFJRDJmLEVBQUlkLEVBQUk4a0IsSUFBVzlrQixFQUFHOGtCLEdBQVFoakMsS0FBTWtlLEVBQUc4a0IsR0FBUWhqQyxJQUFPLEdBQzFEOHVCLEVBQUkyVCxFQUFRM1QsRUFBRyxDQUFFenZCLFdBQVk0Z0IsRUFBVyxHQUFHLE9BSnRDakIsRUFBSWQsRUFBSThrQixJQUFTcGtCLEVBQUdWLEVBQUk4a0IsRUFBUS9pQixFQUFXLEVBQUcsS0FDbkQvQixFQUFHOGtCLEdBQVFoakMsSUFBTyxHQUlYdWpDLEVBQWNybEIsRUFBSWxlLEVBQUs4dUIsSUFDekJsUSxFQUFHVixFQUFJbGUsRUFBSzh1QixJQUVuQjhVLEVBQW9CLFNBQTBCMWxCLEVBQUlaLEdBQ3BEbUIsRUFBU1AsR0FLVCxJQUpBLElBR0lsZSxFQUhBeWtCLEVBQU8rZCxFQUFTbGxCLEVBQUlxRCxFQUFVckQsSUFDOUI3ZSxFQUFJLEVBQ0pDLEVBQUkrbEIsRUFBS2hqQixPQUVOL0MsRUFBSUQsR0FBR2cyQixFQUFnQnZXLEVBQUlsZSxFQUFNeWtCLEVBQUtobUIsS0FBTTZlLEVBQUV0ZCxJQUNyRCxPQUFPa2UsR0FLTDJsQixFQUF3QixTQUE4QjdqQyxHQUN4RCxJQUFJOGpDLEVBQUkxSSxFQUFPeDhCLEtBQUtQLEtBQU0yQixFQUFNMmUsRUFBWTNlLEdBQUssSUFDakQsUUFBSTNCLE9BQVNpdkIsR0FBZXRPLEVBQUlta0IsRUFBWW5qQyxLQUFTZ2YsRUFBSW9rQixFQUFXcGpDLFFBQzdEOGpDLElBQU05a0IsRUFBSTNnQixLQUFNMkIsS0FBU2dmLEVBQUlta0IsRUFBWW5qQyxJQUFRZ2YsRUFBSTNnQixLQUFNMmtDLElBQVcza0MsS0FBSzJrQyxHQUFRaGpDLEtBQU84akMsSUFFL0ZDLEVBQTRCLFNBQWtDN2xCLEVBQUlsZSxHQUdwRSxHQUZBa2UsRUFBS3lDLEVBQVV6QyxHQUNmbGUsRUFBTTJlLEVBQVkzZSxHQUFLLEdBQ25Ca2UsSUFBT29QLElBQWV0TyxFQUFJbWtCLEVBQVluakMsSUFBU2dmLEVBQUlva0IsRUFBV3BqQyxHQUFsRSxDQUNBLElBQUk4dUIsRUFBSWxPLEVBQUsxQyxFQUFJbGUsR0FFakIsT0FESTh1QixJQUFLOVAsRUFBSW1rQixFQUFZbmpDLElBQVVnZixFQUFJZCxFQUFJOGtCLElBQVc5a0IsRUFBRzhrQixHQUFRaGpDLEtBQU84dUIsRUFBRXp2QixZQUFhLEdBQ2hGeXZCLElBRUxrVixFQUF1QixTQUE2QjlsQixHQUt0RCxJQUpBLElBR0lsZSxFQUhBbUUsRUFBUXNlLEVBQUs5QixFQUFVekMsSUFDdkIyRCxFQUFTLEdBQ1RwakIsRUFBSSxFQUVEMEYsRUFBTTFDLE9BQVNoRCxHQUNmdWdCLEVBQUlta0IsRUFBWW5qQyxFQUFNbUUsRUFBTTFGLE9BQVN1QixHQUFPZ2pDLEdBQVVoakMsR0FBT29yQixHQUFNdkosRUFBT2hnQixLQUFLN0IsR0FDcEYsT0FBTzZoQixHQUVQb2lCLEdBQXlCLFNBQStCL2xCLEdBTTFELElBTEEsSUFJSWxlLEVBSkFra0MsRUFBUWhtQixJQUFPb1AsRUFDZm5wQixFQUFRc2UsRUFBS3loQixFQUFRZCxFQUFZemlCLEVBQVV6QyxJQUMzQzJELEVBQVMsR0FDVHBqQixFQUFJLEVBRUQwRixFQUFNMUMsT0FBU2hELElBQ2hCdWdCLEVBQUlta0IsRUFBWW5qQyxFQUFNbUUsRUFBTTFGLE9BQVV5bEMsSUFBUWxsQixFQUFJc08sRUFBYXR0QixJQUFjNmhCLEVBQU9oZ0IsS0FBS3NoQyxFQUFXbmpDLElBQ3hHLE9BQU82aEIsR0FJTjhiLElBWUhuaEIsR0FYQWdlLEVBQVUsV0FDUixHQUFJbjhCLGdCQUFnQm04QixFQUFTLE1BQU1yYyxVQUFVLGdDQUM3QyxJQUFJeUIsRUFBTXZCLEVBQUkvVixVQUFVN0csT0FBUyxFQUFJNkcsVUFBVSxRQUFLb1YsR0FDaER1TCxFQUFPLFNBQVV2cEIsR0FDZnJCLE9BQVNpdkIsR0FBYXJFLEVBQUtycUIsS0FBS3drQyxFQUFXMWpDLEdBQzNDc2YsRUFBSTNnQixLQUFNMmtDLElBQVdoa0IsRUFBSTNnQixLQUFLMmtDLEdBQVNwakIsS0FBTXZoQixLQUFLMmtDLEdBQVFwakIsSUFBTyxHQUNyRTJqQixFQUFjbGxDLEtBQU11aEIsRUFBS0ssRUFBVyxFQUFHdmdCLEtBR3pDLE9BREkwdUIsR0FBZTVELEdBQVErWSxFQUFjalcsRUFBYTFOLEVBQUssQ0FBRThKLGNBQWMsRUFBTXJQLElBQUs0TyxJQUMvRXdhLEVBQUs3akIsS0FFWSxVQUFHLFlBQVksV0FDdkMsT0FBT3ZoQixLQUFLMDJCLE1BR2R6UixFQUFNMWEsRUFBSW03QixFQUNWMWdCLEVBQUl6YSxFQUFJNnJCLEVBQ1IsRUFBUSxJQUFrQjdyQixFQUFJODVCLEVBQVE5NUIsRUFBSW83QixFQUMxQyxFQUFRLElBQWlCcDdCLEVBQUlpN0IsRUFDN0JsQixFQUFNLzVCLEVBQUlxN0IsR0FFTjdWLElBQWdCLEVBQVEsS0FDMUI1UixFQUFTOFEsRUFBYSx1QkFBd0J1VyxHQUF1QixHQUd2RXRKLEVBQU8zeEIsRUFBSSxTQUFVNUosR0FDbkIsT0FBT3lrQyxFQUFLOWdCLEVBQUkzakIsTUFJcEIwZCxFQUFRQSxFQUFRUSxFQUFJUixFQUFRbUIsRUFBSW5CLEVBQVFNLEdBQUsyZ0IsRUFBWSxDQUFFbitCLE9BQVFnN0IsSUFFbkUsSUFBSyxJQUFJMkosR0FBYSxpSEFHcEIzaUMsTUFBTSxLQUFNOEMsR0FBSSxFQUFHNi9CLEdBQVcxaUMsT0FBUzZDLElBQUdxZSxFQUFJd2hCLEdBQVc3L0IsT0FFM0QsSUFBSyxJQUFJOC9CLEdBQW1CalksRUFBTXhKLEVBQUl2RSxPQUFROGMsR0FBSSxFQUFHa0osR0FBaUIzaUMsT0FBU3k1QixJQUFJcUgsRUFBVTZCLEdBQWlCbEosT0FFOUd4ZSxFQUFRQSxFQUFRVSxFQUFJVixFQUFRTSxHQUFLMmdCLEVBQVksU0FBVSxDQUVyRCxJQUFPLFNBQVUzOUIsR0FDZixPQUFPZ2YsRUFBSWtrQixFQUFnQmxqQyxHQUFPLElBQzlCa2pDLEVBQWVsakMsR0FDZmtqQyxFQUFlbGpDLEdBQU93NkIsRUFBUXg2QixJQUdwQ3FrQyxPQUFRLFNBQWdCWCxHQUN0QixJQUFLQyxFQUFTRCxHQUFNLE1BQU12bEIsVUFBVXVsQixFQUFNLHFCQUMxQyxJQUFLLElBQUkxakMsS0FBT2tqQyxFQUFnQixHQUFJQSxFQUFlbGpDLEtBQVMwakMsRUFBSyxPQUFPMWpDLEdBRTFFc2tDLFVBQVcsV0FBYzlaLEdBQVMsR0FDbEMrWixVQUFXLFdBQWMvWixHQUFTLEtBR3BDOU4sRUFBUUEsRUFBUVUsRUFBSVYsRUFBUU0sR0FBSzJnQixFQUFZLFNBQVUsQ0FFckQ1OUIsT0EvRlksU0FBZ0JtZSxFQUFJWixHQUNoQyxZQUFhSSxJQUFOSixFQUFrQm1sQixFQUFRdmtCLEdBQU0wbEIsRUFBa0JuQixFQUFRdmtCLEdBQUtaLElBZ0d0RWxlLGVBQWdCcTFCLEVBRWhCaUcsaUJBQWtCa0osRUFFbEIvaUIseUJBQTBCa2pCLEVBRTFCMVcsb0JBQXFCMlcsRUFFckI3VSxzQkFBdUI4VSxLQUt6QixJQUFJTyxHQUFzQmxDLEdBQU8sV0FBY0ssRUFBTS81QixFQUFFLE1BRXZEOFQsRUFBUUEsRUFBUVUsRUFBSVYsRUFBUU0sRUFBSXduQixHQUFxQixTQUFVLENBQzdEclYsc0JBQXVCLFNBQStCalIsR0FDcEQsT0FBT3lrQixFQUFNLzVCLEVBQUVtWSxFQUFTN0MsT0FLNUIwa0IsR0FBU2xtQixFQUFRQSxFQUFRVSxFQUFJVixFQUFRTSxJQUFNMmdCLEdBQWMyRSxHQUFPLFdBQzlELElBQUlsbEIsRUFBSW9kLElBSVIsTUFBMEIsVUFBbkJzSSxFQUFXLENBQUMxbEIsS0FBMkMsTUFBeEIwbEIsRUFBVyxDQUFFNWhDLEVBQUdrYyxLQUF5QyxNQUF6QjBsQixFQUFXM2pDLE9BQU9pZSxRQUNyRixPQUFRLENBQ1gybEIsVUFBVyxTQUFtQjdrQixHQUk1QixJQUhBLElBRUl1bUIsRUFBVUMsRUFGVjdOLEVBQU8sQ0FBQzNZLEdBQ1J6ZixFQUFJLEVBRUQ2SixVQUFVN0csT0FBU2hELEdBQUdvNEIsRUFBS2gxQixLQUFLeUcsVUFBVTdKLE1BRWpELEdBREFpbUMsRUFBWUQsRUFBVzVOLEVBQUssSUFDdkI1WSxFQUFTd21CLFNBQW9CL21CLElBQVBRLEtBQW9CeWxCLEVBQVN6bEIsR0FNeEQsT0FMS3BLLEVBQVEyd0IsS0FBV0EsRUFBVyxTQUFVemtDLEVBQUtOLEdBRWhELEdBRHdCLG1CQUFiZ2xDLElBQXlCaGxDLEVBQVFnbEMsRUFBVTlsQyxLQUFLUCxLQUFNMkIsRUFBS04sS0FDakVpa0MsRUFBU2prQyxHQUFRLE9BQU9BLElBRS9CbTNCLEVBQUssR0FBSzROLEVBQ0gzQixFQUFXOS9CLE1BQU00L0IsRUFBTy9MLE1BS25DMkQsRUFBaUIsVUFBRXlJLElBQWlCLEVBQVEsR0FBUixDQUFtQnpJLEVBQWlCLFVBQUd5SSxFQUFjekksRUFBaUIsVUFBRXJQLFNBRTVHbUcsRUFBZWtKLEVBQVMsVUFFeEJsSixFQUFlL29CLEtBQU0sUUFBUSxHQUU3QitvQixFQUFlM3dCLEVBQU9raUMsS0FBTSxRQUFRLEksZ0JDclBwQzVrQyxFQUFPRCxRQUFVLEVBQVEsR0FBUixDQUFxQiw0QkFBNkIyZixTQUFTdGMsVyxnQkNDNUUsSUFBSW81QixFQUFVLEVBQVEsSUFDbEJJLEVBQU8sRUFBUSxJQUNmbmEsRUFBTSxFQUFRLElBQ2xCemlCLEVBQU9ELFFBQVUsU0FBVWtnQixHQUN6QixJQUFJMkQsRUFBUzRZLEVBQVF2YyxHQUNqQmlkLEVBQWFOLEVBQUtqeUIsRUFDdEIsR0FBSXV5QixFQUtGLElBSkEsSUFHSW43QixFQUhBMmtDLEVBQVV4SixFQUFXamQsR0FDckJrZCxFQUFTMWEsRUFBSTlYLEVBQ2JuSyxFQUFJLEVBRURrbUMsRUFBUWxqQyxPQUFTaEQsR0FBTzI4QixFQUFPeDhCLEtBQUtzZixFQUFJbGUsRUFBTTJrQyxFQUFRbG1DLE9BQU9vakIsRUFBT2hnQixLQUFLN0IsR0FDaEYsT0FBTzZoQixJLGdCQ2JYLElBQUluRixFQUFVLEVBQVEsR0FFdEJBLEVBQVFBLEVBQVFVLEVBQUcsU0FBVSxDQUFFcmQsT0FBUSxFQUFRLE8sZ0JDRi9DLElBQUkyYyxFQUFVLEVBQVEsR0FFdEJBLEVBQVFBLEVBQVFVLEVBQUlWLEVBQVFNLEdBQUssRUFBUSxHQUFtQixTQUFVLENBQUU1ZCxlQUFnQixFQUFRLElBQWdCd0osSyxnQkNGaEgsSUFBSThULEVBQVUsRUFBUSxHQUV0QkEsRUFBUUEsRUFBUVUsRUFBSVYsRUFBUU0sR0FBSyxFQUFRLEdBQW1CLFNBQVUsQ0FBRTBkLGlCQUFrQixFQUFRLE8sZ0JDRGxHLElBQUkvWixFQUFZLEVBQVEsSUFDcEJvakIsRUFBNEIsRUFBUSxJQUFrQm43QixFQUUxRCxFQUFRLEdBQVIsQ0FBeUIsNEJBQTRCLFdBQ25ELE9BQU8sU0FBa0NzVixFQUFJbGUsR0FDM0MsT0FBTytqQyxFQUEwQnBqQixFQUFVekMsR0FBS2xlLFEsZ0JDTHBELElBQUkrZ0IsRUFBVyxFQUFRLElBQ25CNmpCLEVBQWtCLEVBQVEsSUFFOUIsRUFBUSxHQUFSLENBQXlCLGtCQUFrQixXQUN6QyxPQUFPLFNBQXdCMW1CLEdBQzdCLE9BQU8wbUIsRUFBZ0I3akIsRUFBUzdDLFMsZ0JDTHBDLElBQUk2QyxFQUFXLEVBQVEsSUFDbkJvTCxFQUFRLEVBQVEsSUFFcEIsRUFBUSxHQUFSLENBQXlCLFFBQVEsV0FDL0IsT0FBTyxTQUFjak8sR0FDbkIsT0FBT2lPLEVBQU1wTCxFQUFTN0MsUyxnQkNMMUIsRUFBUSxHQUFSLENBQXlCLHVCQUF1QixXQUM5QyxPQUFPLEVBQVEsSUFBc0J0VixNLGdCQ0R2QyxJQUFJcVYsRUFBVyxFQUFRLEdBQ25CME4sRUFBTyxFQUFRLElBQVdJLFNBRTlCLEVBQVEsR0FBUixDQUF5QixVQUFVLFNBQVU4WSxHQUMzQyxPQUFPLFNBQWdCM21CLEdBQ3JCLE9BQU8ybUIsR0FBVzVtQixFQUFTQyxHQUFNMm1CLEVBQVFsWixFQUFLek4sSUFBT0EsTyxnQkNMekQsSUFBSUQsRUFBVyxFQUFRLEdBQ25CME4sRUFBTyxFQUFRLElBQVdJLFNBRTlCLEVBQVEsR0FBUixDQUF5QixRQUFRLFNBQVUrWSxHQUN6QyxPQUFPLFNBQWM1bUIsR0FDbkIsT0FBTzRtQixHQUFTN21CLEVBQVNDLEdBQU00bUIsRUFBTW5aLEVBQUt6TixJQUFPQSxPLGdCQ0xyRCxJQUFJRCxFQUFXLEVBQVEsR0FDbkIwTixFQUFPLEVBQVEsSUFBV0ksU0FFOUIsRUFBUSxHQUFSLENBQXlCLHFCQUFxQixTQUFVZ1osR0FDdEQsT0FBTyxTQUEyQjdtQixHQUNoQyxPQUFPNm1CLEdBQXNCOW1CLEVBQVNDLEdBQU02bUIsRUFBbUJwWixFQUFLek4sSUFBT0EsTyxnQkNML0UsSUFBSUQsRUFBVyxFQUFRLEdBRXZCLEVBQVEsR0FBUixDQUF5QixZQUFZLFNBQVUrbUIsR0FDN0MsT0FBTyxTQUFrQjltQixHQUN2QixPQUFPRCxFQUFTQyxNQUFNOG1CLEdBQVlBLEVBQVU5bUIsUSxnQkNKaEQsSUFBSUQsRUFBVyxFQUFRLEdBRXZCLEVBQVEsR0FBUixDQUF5QixZQUFZLFNBQVVnbkIsR0FDN0MsT0FBTyxTQUFrQi9tQixHQUN2QixPQUFPRCxFQUFTQyxNQUFNK21CLEdBQVlBLEVBQVUvbUIsUSxnQkNKaEQsSUFBSUQsRUFBVyxFQUFRLEdBRXZCLEVBQVEsR0FBUixDQUF5QixnQkFBZ0IsU0FBVWluQixHQUNqRCxPQUFPLFNBQXNCaG5CLEdBQzNCLFFBQU9ELEVBQVNDLE1BQU1nbkIsR0FBZ0JBLEVBQWNobkIsUyxnQkNKeEQsSUFBSXhCLEVBQVUsRUFBUSxHQUV0QkEsRUFBUUEsRUFBUVUsRUFBSVYsRUFBUU0sRUFBRyxTQUFVLENBQUUrZCxPQUFRLEVBQVEsTyxnQkNGM0QsSUFBSXJlLEVBQVUsRUFBUSxHQUN0QkEsRUFBUUEsRUFBUVUsRUFBRyxTQUFVLENBQUVvVixHQUFJLEVBQVEsTyxnQkNEM0MsSUFBSTlWLEVBQVUsRUFBUSxHQUN0QkEsRUFBUUEsRUFBUVUsRUFBRyxTQUFVLENBQUV3VixlQUFnQixFQUFRLElBQWdCdlksTyw2QkNBdkUsSUFBSWlJLEVBQVUsRUFBUSxJQUNsQnRQLEVBQU8sR0FDWEEsRUFBSyxFQUFRLEVBQVIsQ0FBa0IsZ0JBQWtCLElBQ3JDQSxFQUFPLElBQU0sY0FDZixFQUFRLEdBQVIsQ0FBdUI3VCxPQUFPa0IsVUFBVyxZQUFZLFdBQ25ELE1BQU8sV0FBYWlpQixFQUFRamtCLE1BQVEsT0FDbkMsSSxnQkNQTCxJQUFJcWUsRUFBVSxFQUFRLEdBRXRCQSxFQUFRQSxFQUFRWSxFQUFHLFdBQVksQ0FBRXJkLEtBQU0sRUFBUSxPLGdCQ0gvQyxJQUFJMmUsRUFBSyxFQUFRLElBQWdCaFcsRUFDN0J1OEIsRUFBU3huQixTQUFTdGQsVUFDbEIra0MsRUFBUyx3QkFDRixTQUdIRCxHQUFVLEVBQVEsSUFBcUJ2bUIsRUFBR3VtQixFQUh2QyxPQUdxRCxDQUM5RHpiLGNBQWMsRUFDZHBxQixJQUFLLFdBQ0gsSUFDRSxPQUFRLEdBQUtqQixNQUFNcVUsTUFBTTB5QixHQUFRLEdBQ2pDLE1BQU8vZ0MsR0FDUCxNQUFPLFEsNkJDWGIsSUFBSTRaLEVBQVcsRUFBUSxHQUNuQnVFLEVBQWlCLEVBQVEsSUFDekI2aUIsRUFBZSxFQUFRLEVBQVIsQ0FBa0IsZUFDakNDLEVBQWdCM25CLFNBQVN0ZCxVQUV2QmdsQyxLQUFnQkMsR0FBZ0IsRUFBUSxJQUFnQjE4QixFQUFFMDhCLEVBQWVELEVBQWMsQ0FBRTNsQyxNQUFPLFNBQVVtZixHQUM5RyxHQUFtQixtQkFBUnhnQixPQUF1QjRmLEVBQVNZLEdBQUksT0FBTyxFQUN0RCxJQUFLWixFQUFTNWYsS0FBS2dDLFdBQVksT0FBT3dlLGFBQWF4Z0IsS0FFbkQsS0FBT3dnQixFQUFJMkQsRUFBZTNELElBQUksR0FBSXhnQixLQUFLZ0MsWUFBY3dlLEVBQUcsT0FBTyxFQUMvRCxPQUFPLE0sZ0JDWFQsSUFBSW5DLEVBQVUsRUFBUSxHQUNsQmlmLEVBQVksRUFBUSxJQUV4QmpmLEVBQVFBLEVBQVFRLEVBQUlSLEVBQVFNLEdBQUtuSyxVQUFZOG9CLEdBQVksQ0FBRTlvQixTQUFVOG9CLEssZ0JDSHJFLElBQUlqZixFQUFVLEVBQVEsR0FDbEJzZixFQUFjLEVBQVEsSUFFMUJ0ZixFQUFRQSxFQUFRUSxFQUFJUixFQUFRTSxHQUFLcEssWUFBY29wQixHQUFjLENBQUVwcEIsV0FBWW9wQixLLDZCQ0YzRSxJQUFJcjdCLEVBQVMsRUFBUSxHQUNqQnFlLEVBQU0sRUFBUSxJQUNkd1AsRUFBTSxFQUFRLElBQ2QrQyxFQUFvQixFQUFRLElBQzVCNVMsRUFBYyxFQUFRLElBQ3RCYSxFQUFRLEVBQVEsR0FDaEJpRCxFQUFPLEVBQVEsSUFBa0I3WixFQUNqQ2dZLEVBQU8sRUFBUSxJQUFrQmhZLEVBQ2pDZ1csRUFBSyxFQUFRLElBQWdCaFcsRUFDN0JnekIsRUFBUSxFQUFRLElBQWtCek4sS0FFbENvWCxFQUFVNWtDLEVBQWEsT0FDdkJ1cEIsRUFBT3FiLEVBQ1AxZCxFQUFRMGQsRUFBUWxsQyxVQUVoQm1sQyxFQUxTLFVBS0loWCxFQUFJLEVBQVEsR0FBUixDQUE0QjNHLElBQzdDNGQsRUFBTyxTQUFVbG1CLE9BQU9sZixVQUd4QnFsQyxFQUFXLFNBQVVDLEdBQ3ZCLElBQUl6bkIsRUFBS1MsRUFBWWduQixHQUFVLEdBQy9CLEdBQWlCLGlCQUFOem5CLEdBQWtCQSxFQUFHemMsT0FBUyxFQUFHLENBRTFDLElBQ0lta0MsRUFBTzdKLEVBQU84SixFQURkMXFCLEdBREorQyxFQUFLdW5CLEVBQU92bkIsRUFBR2lRLE9BQVN5TixFQUFNMWQsRUFBSSxJQUNuQnFWLFdBQVcsR0FFMUIsR0FBYyxLQUFWcFksR0FBMEIsS0FBVkEsR0FFbEIsR0FBYyxNQURkeXFCLEVBQVExbkIsRUFBR3FWLFdBQVcsS0FDUSxNQUFWcVMsRUFBZSxPQUFPdE4sU0FDckMsR0FBYyxLQUFWbmQsRUFBYyxDQUN2QixPQUFRK0MsRUFBR3FWLFdBQVcsSUFDcEIsS0FBSyxHQUFJLEtBQUssR0FBSXdJLEVBQVEsRUFBRzhKLEVBQVUsR0FBSSxNQUMzQyxLQUFLLEdBQUksS0FBSyxJQUFLOUosRUFBUSxFQUFHOEosRUFBVSxHQUFJLE1BQzVDLFFBQVMsT0FBUTNuQixFQUVuQixJQUFLLElBQW9ENG5CLEVBQWhEQyxFQUFTN25CLEVBQUc3WCxNQUFNLEdBQUk1SCxFQUFJLEVBQUdDLEVBQUlxbkMsRUFBT3RrQyxPQUFjaEQsRUFBSUMsRUFBR0QsSUFJcEUsSUFIQXFuQyxFQUFPQyxFQUFPeFMsV0FBVzkwQixJQUdkLElBQU1xbkMsRUFBT0QsRUFBUyxPQUFPdk4sSUFDeEMsT0FBT3psQixTQUFTa3pCLEVBQVFoSyxJQUU1QixPQUFRN2QsR0FHWixJQUFLcW5CLEVBQVEsVUFBWUEsRUFBUSxRQUFVQSxFQUFRLFFBQVMsQ0FDMURBLEVBQVUsU0FBZ0I3bEMsR0FDeEIsSUFBSXdlLEVBQUs1VixVQUFVN0csT0FBUyxFQUFJLEVBQUkvQixFQUNoQzZnQixFQUFPbGlCLEtBQ1gsT0FBT2tpQixhQUFnQmdsQixJQUVqQkMsRUFBYWhtQixHQUFNLFdBQWNxSSxFQUFNc0QsUUFBUXZzQixLQUFLMmhCLE1BeENqRCxVQXdDNkRpTyxFQUFJak8sSUFDcEVnUixFQUFrQixJQUFJckgsRUFBS3diLEVBQVN4bkIsSUFBTXFDLEVBQU1nbEIsR0FBV0csRUFBU3huQixJQUU1RSxJQUFLLElBTWdCbGUsRUFOWnlrQixFQUFPLEVBQVEsR0FBb0JoQyxFQUFLeUgsR0FBUSw2S0FNdkQxb0IsTUFBTSxLQUFNOEMsRUFBSSxFQUFRbWdCLEVBQUtoakIsT0FBUzZDLEVBQUdBLElBQ3JDMGEsRUFBSWtMLEVBQU1scUIsRUFBTXlrQixFQUFLbmdCLE1BQVEwYSxFQUFJdW1CLEVBQVN2bEMsSUFDNUM0ZSxFQUFHMm1CLEVBQVN2bEMsRUFBSzRnQixFQUFLc0osRUFBTWxxQixJQUdoQ3VsQyxFQUFRbGxDLFVBQVl3bkIsRUFDcEJBLEVBQU01ZSxZQUFjczhCLEVBQ3BCLEVBQVEsR0FBUixDQUF1QjVrQyxFQXhEWixTQXdENEI0a0MsSyw2QkNsRXpDLElBQUk3b0IsRUFBVSxFQUFRLEdBQ2xCNkIsRUFBWSxFQUFRLElBQ3BCeW5CLEVBQWUsRUFBUSxJQUN2QnR3QixFQUFTLEVBQVEsSUFDakJ1d0IsRUFBVyxHQUFJQyxRQUNmemxCLEVBQVFsWSxLQUFLa1ksTUFDYjVXLEVBQU8sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdkJzOEIsRUFBUSx3Q0FHUkMsRUFBVyxTQUFVbG1DLEVBQUdwQixHQUcxQixJQUZBLElBQUlMLEdBQUssRUFDTDRuQyxFQUFLdm5DLElBQ0FMLEVBQUksR0FDWDRuQyxHQUFNbm1DLEVBQUkySixFQUFLcEwsR0FDZm9MLEVBQUtwTCxHQUFLNG5DLEVBQUssSUFDZkEsRUFBSzVsQixFQUFNNGxCLEVBQUssTUFHaEJDLEVBQVMsU0FBVXBtQyxHQUdyQixJQUZBLElBQUl6QixFQUFJLEVBQ0pLLEVBQUksSUFDQ0wsR0FBSyxHQUNaSyxHQUFLK0ssRUFBS3BMLEdBQ1ZvTCxFQUFLcEwsR0FBS2dpQixFQUFNM2hCLEVBQUlvQixHQUNwQnBCLEVBQUtBLEVBQUlvQixFQUFLLEtBR2RxbUMsRUFBYyxXQUdoQixJQUZBLElBQUk5bkMsRUFBSSxFQUNKK0IsRUFBSSxLQUNDL0IsR0FBSyxHQUNaLEdBQVUsS0FBTitCLEdBQWtCLElBQU4vQixHQUF1QixJQUFab0wsRUFBS3BMLEdBQVUsQ0FDeEMsSUFBSWtCLEVBQUk0ZixPQUFPMVYsRUFBS3BMLElBQ3BCK0IsRUFBVSxLQUFOQSxFQUFXYixFQUFJYSxFQUFJa1YsRUFBTzlXLEtBMUJ6QixJQTBCb0MsRUFBSWUsRUFBRThCLFFBQVU5QixFQUUzRCxPQUFPYSxHQUVQa1osRUFBTSxTQUFVd1osRUFBR2h6QixFQUFHc21DLEdBQ3hCLE9BQWEsSUFBTnRtQyxFQUFVc21DLEVBQU10bUMsRUFBSSxHQUFNLEVBQUl3WixFQUFJd1osRUFBR2h6QixFQUFJLEVBQUdzbUMsRUFBTXRULEdBQUt4WixFQUFJd1osRUFBSUEsRUFBR2h6QixFQUFJLEVBQUdzbUMsSUFlbEY5cEIsRUFBUUEsRUFBUVksRUFBSVosRUFBUU0sS0FBT2lwQixJQUNWLFVBQXZCLEtBQVFDLFFBQVEsSUFDRyxNQUFuQixHQUFJQSxRQUFRLElBQ1MsU0FBckIsTUFBTUEsUUFBUSxJQUN1Qix5QkFBckMsbUJBQXNCQSxRQUFRLE1BQzFCLEVBQVEsRUFBUixFQUFvQixXQUV4QkQsRUFBU3JuQyxLQUFLLFFBQ1gsU0FBVSxDQUNic25DLFFBQVMsU0FBaUJPLEdBQ3hCLElBSUlwaUMsRUFBR3FpQyxFQUFHcGlDLEVBQUc0MkIsRUFKVGhJLEVBQUk4UyxFQUFhM25DLEtBQU04bkMsR0FDdkJ2OUIsRUFBSTJWLEVBQVVrb0IsR0FDZGptQyxFQUFJLEdBQ0ozQixFQTNERyxJQTZEUCxHQUFJK0osRUFBSSxHQUFLQSxFQUFJLEdBQUksTUFBTTJhLFdBQVc0aUIsR0FFdEMsR0FBSWpULEdBQUtBLEVBQUcsTUFBTyxNQUNuQixHQUFJQSxJQUFNLE1BQVFBLEdBQUssS0FBTSxPQUFPM1QsT0FBTzJULEdBSzNDLEdBSklBLEVBQUksSUFDTjF5QixFQUFJLElBQ0oweUIsR0FBS0EsR0FFSEEsRUFBSSxNQUtOLEdBSEF3VCxHQURBcmlDLEVBckNJLFNBQVU2dUIsR0FHbEIsSUFGQSxJQUFJaHpCLEVBQUksRUFDSnltQyxFQUFLelQsRUFDRnlULEdBQU0sTUFDWHptQyxHQUFLLEdBQ0x5bUMsR0FBTSxLQUVSLEtBQU9BLEdBQU0sR0FDWHptQyxHQUFLLEVBQ0x5bUMsR0FBTSxFQUNOLE9BQU96bUMsRUEyQkQ0YixDQUFJb1gsRUFBSXhaLEVBQUksRUFBRyxHQUFJLElBQU0sSUFDckIsRUFBSXdaLEVBQUl4WixFQUFJLEdBQUlyVixFQUFHLEdBQUs2dUIsRUFBSXhaLEVBQUksRUFBR3JWLEVBQUcsR0FDOUNxaUMsR0FBSyxrQkFDTHJpQyxFQUFJLEdBQUtBLEdBQ0QsRUFBRyxDQUdULElBRkEraEMsRUFBUyxFQUFHTSxHQUNacGlDLEVBQUlzRSxFQUNHdEUsR0FBSyxHQUNWOGhDLEVBQVMsSUFBSyxHQUNkOWhDLEdBQUssRUFJUCxJQUZBOGhDLEVBQVMxc0IsRUFBSSxHQUFJcFYsRUFBRyxHQUFJLEdBQ3hCQSxFQUFJRCxFQUFJLEVBQ0RDLEdBQUssSUFDVmdpQyxFQUFPLEdBQUssSUFDWmhpQyxHQUFLLEdBRVBnaUMsRUFBTyxHQUFLaGlDLEdBQ1o4aEMsRUFBUyxFQUFHLEdBQ1pFLEVBQU8sR0FDUHpuQyxFQUFJMG5DLFNBRUpILEVBQVMsRUFBR00sR0FDWk4sRUFBUyxJQUFNL2hDLEVBQUcsR0FDbEJ4RixFQUFJMG5DLElBQWdCN3dCLEVBQU85VyxLQTlGeEIsSUE4Rm1DZ0ssR0FReEMsT0FIQS9KLEVBRkUrSixFQUFJLEVBRUZwSSxJQURKMDZCLEVBQUlyOEIsRUFBRTRDLFNBQ1FtSCxFQUFJLEtBQU84TSxFQUFPOVcsS0FuRzNCLElBbUdzQ2dLLEVBQUlzeUIsR0FBS3I4QixFQUFJQSxFQUFFd0gsTUFBTSxFQUFHNjBCLEVBQUl0eUIsR0FBSyxJQUFNL0osRUFBRXdILE1BQU02MEIsRUFBSXR5QixJQUUxRnBJLEVBQUkzQixNLDZCQzdHZCxJQUFJNmQsRUFBVSxFQUFRLEdBQ2xCNGxCLEVBQVMsRUFBUSxHQUNqQjBELEVBQWUsRUFBUSxJQUN2QlksRUFBZSxHQUFJQyxZQUV2Qm5xQixFQUFRQSxFQUFRWSxFQUFJWixFQUFRTSxHQUFLc2xCLEdBQU8sV0FFdEMsTUFBMkMsTUFBcENzRSxFQUFhaG9DLEtBQUssT0FBRzhlLFFBQ3ZCNGtCLEdBQU8sV0FFWnNFLEVBQWFob0MsS0FBSyxRQUNmLFNBQVUsQ0FDYmlvQyxZQUFhLFNBQXFCQyxHQUNoQyxJQUFJdm1CLEVBQU95bEIsRUFBYTNuQyxLQUFNLDZDQUM5QixZQUFxQnFmLElBQWRvcEIsRUFBMEJGLEVBQWFob0MsS0FBSzJoQixHQUFRcW1CLEVBQWFob0MsS0FBSzJoQixFQUFNdW1CLE8sZ0JDZHZGLElBQUlwcUIsRUFBVSxFQUFRLEdBRXRCQSxFQUFRQSxFQUFRVSxFQUFHLFNBQVUsQ0FBRTJwQixRQUFTeCtCLEtBQUttUixJQUFJLEdBQUksTyxnQkNGckQsSUFBSWdELEVBQVUsRUFBUSxHQUNsQnNxQixFQUFZLEVBQVEsR0FBYTlLLFNBRXJDeGYsRUFBUUEsRUFBUVUsRUFBRyxTQUFVLENBQzNCOGUsU0FBVSxTQUFrQmhlLEdBQzFCLE1BQW9CLGlCQUFOQSxHQUFrQjhvQixFQUFVOW9CLE8sZ0JDTDlDLElBQUl4QixFQUFVLEVBQVEsR0FFdEJBLEVBQVFBLEVBQVFVLEVBQUcsU0FBVSxDQUFFNnBCLFVBQVcsRUFBUSxPLGdCQ0ZsRCxJQUFJdnFCLEVBQVUsRUFBUSxHQUV0QkEsRUFBUUEsRUFBUVUsRUFBRyxTQUFVLENBQzNCMUosTUFBTyxTQUFlZ3VCLEdBRXBCLE9BQU9BLEdBQVVBLE0sZ0JDTHJCLElBQUlobEIsRUFBVSxFQUFRLEdBQ2xCdXFCLEVBQVksRUFBUSxJQUNwQnpQLEVBQU1qdkIsS0FBS2l2QixJQUVmOWEsRUFBUUEsRUFBUVUsRUFBRyxTQUFVLENBQzNCOHBCLGNBQWUsU0FBdUJ4RixHQUNwQyxPQUFPdUYsRUFBVXZGLElBQVdsSyxFQUFJa0ssSUFBVyxxQixnQkNOL0MsSUFBSWhsQixFQUFVLEVBQVEsR0FFdEJBLEVBQVFBLEVBQVFVLEVBQUcsU0FBVSxDQUFFK3BCLGlCQUFrQixvQixnQkNGakQsSUFBSXpxQixFQUFVLEVBQVEsR0FFdEJBLEVBQVFBLEVBQVFVLEVBQUcsU0FBVSxDQUFFZ3FCLGtCQUFtQixvQixnQkNIbEQsSUFBSTFxQixFQUFVLEVBQVEsR0FDbEJzZixFQUFjLEVBQVEsSUFFMUJ0ZixFQUFRQSxFQUFRVSxFQUFJVixFQUFRTSxHQUFLeFQsT0FBT29KLFlBQWNvcEIsR0FBYyxTQUFVLENBQUVwcEIsV0FBWW9wQixLLGdCQ0g1RixJQUFJdGYsRUFBVSxFQUFRLEdBQ2xCaWYsRUFBWSxFQUFRLElBRXhCamYsRUFBUUEsRUFBUVUsRUFBSVYsRUFBUU0sR0FBS3hULE9BQU9xSixVQUFZOG9CLEdBQVksU0FBVSxDQUFFOW9CLFNBQVU4b0IsSyxnQkNGdEYsSUFBSWpmLEVBQVUsRUFBUSxHQUNsQnlmLEVBQVEsRUFBUSxJQUNoQmtMLEVBQU85K0IsS0FBSzgrQixLQUNaQyxFQUFTLytCLEtBQUtnL0IsTUFFbEI3cUIsRUFBUUEsRUFBUVUsRUFBSVYsRUFBUU0sSUFBTXNxQixHQUVXLEtBQXhDLytCLEtBQUtrWSxNQUFNNm1CLEVBQU85OUIsT0FBT2crQixhQUV6QkYsRUFBT3RVLE1BQWFBLEtBQ3RCLE9BQVEsQ0FDVHVVLE1BQU8sU0FBZXJVLEdBQ3BCLE9BQVFBLEdBQUtBLEdBQUssRUFBSW9GLElBQU1wRixFQUFJLGtCQUM1QjNxQixLQUFLdVQsSUFBSW9YLEdBQUszcUIsS0FBS2t2QixJQUNuQjBFLEVBQU1qSixFQUFJLEVBQUltVSxFQUFLblUsRUFBSSxHQUFLbVUsRUFBS25VLEVBQUksUSxnQkNkN0MsSUFBSXhXLEVBQVUsRUFBUSxHQUNsQitxQixFQUFTbC9CLEtBQUttL0IsTUFPbEJockIsRUFBUUEsRUFBUVUsRUFBSVYsRUFBUU0sSUFBTXlxQixHQUFVLEVBQUlBLEVBQU8sR0FBSyxHQUFJLE9BQVEsQ0FBRUMsTUFMMUUsU0FBU0EsRUFBTXhVLEdBQ2IsT0FBUWdKLFNBQVNoSixHQUFLQSxJQUFXLEdBQUxBLEVBQWFBLEVBQUksR0FBS3dVLEdBQU94VSxHQUFLM3FCLEtBQUt1VCxJQUFJb1gsRUFBSTNxQixLQUFLOCtCLEtBQUtuVSxFQUFJQSxFQUFJLElBQXhEQSxNLGdCQ0p2QyxJQUFJeFcsRUFBVSxFQUFRLEdBQ2xCaXJCLEVBQVNwL0IsS0FBS3EvQixNQUdsQmxyQixFQUFRQSxFQUFRVSxFQUFJVixFQUFRTSxJQUFNMnFCLEdBQVUsRUFBSUEsR0FBUSxHQUFLLEdBQUksT0FBUSxDQUN2RUMsTUFBTyxTQUFlMVUsR0FDcEIsT0FBbUIsSUFBWEEsR0FBS0EsR0FBVUEsRUFBSTNxQixLQUFLdVQsS0FBSyxFQUFJb1gsSUFBTSxFQUFJQSxJQUFNLE0sZ0JDTjdELElBQUl4VyxFQUFVLEVBQVEsR0FDbEJ1VyxFQUFPLEVBQVEsSUFFbkJ2VyxFQUFRQSxFQUFRVSxFQUFHLE9BQVEsQ0FDekJ5cUIsS0FBTSxTQUFjM1UsR0FDbEIsT0FBT0QsRUFBS0MsR0FBS0EsR0FBSzNxQixLQUFLbVIsSUFBSW5SLEtBQUtpdkIsSUFBSXRFLEdBQUksRUFBSSxPLGdCQ0xwRCxJQUFJeFcsRUFBVSxFQUFRLEdBRXRCQSxFQUFRQSxFQUFRVSxFQUFHLE9BQVEsQ0FDekIwcUIsTUFBTyxTQUFlNVUsR0FDcEIsT0FBUUEsS0FBTyxHQUFLLEdBQUszcUIsS0FBS2tZLE1BQU1sWSxLQUFLdVQsSUFBSW9YLEVBQUksSUFBTzNxQixLQUFLdy9CLE9BQVMsTyxnQkNKMUUsSUFBSXJyQixFQUFVLEVBQVEsR0FDbEJJLEVBQU12VSxLQUFLdVUsSUFFZkosRUFBUUEsRUFBUVUsRUFBRyxPQUFRLENBQ3pCNHFCLEtBQU0sU0FBYzlVLEdBQ2xCLE9BQVFwVyxFQUFJb1csR0FBS0EsR0FBS3BXLEdBQUtvVyxJQUFNLE0sZ0JDTHJDLElBQUl4VyxFQUFVLEVBQVEsR0FDbEJ5VyxFQUFTLEVBQVEsSUFFckJ6VyxFQUFRQSxFQUFRVSxFQUFJVixFQUFRTSxHQUFLbVcsR0FBVTVxQixLQUFLNnFCLE9BQVEsT0FBUSxDQUFFQSxNQUFPRCxLLGdCQ0h6RSxJQUFJelcsRUFBVSxFQUFRLEdBRXRCQSxFQUFRQSxFQUFRVSxFQUFHLE9BQVEsQ0FBRTZxQixPQUFRLEVBQVEsUSxnQkNGN0MsSUFBSWhWLEVBQU8sRUFBUSxJQUNmdlosRUFBTW5SLEtBQUttUixJQUNYcXRCLEVBQVVydEIsRUFBSSxHQUFJLElBQ2xCd3VCLEVBQVl4dUIsRUFBSSxHQUFJLElBQ3BCeXVCLEVBQVF6dUIsRUFBSSxFQUFHLE1BQVEsRUFBSXd1QixHQUMzQkUsRUFBUTF1QixFQUFJLEdBQUksS0FNcEJ6YixFQUFPRCxRQUFVdUssS0FBSzAvQixRQUFVLFNBQWdCL1UsR0FDOUMsSUFFSWh5QixFQUFHMmdCLEVBRkh3bUIsRUFBTzkvQixLQUFLaXZCLElBQUl0RSxHQUNoQm9WLEVBQVFyVixFQUFLQyxHQUVqQixPQUFJbVYsRUFBT0QsRUFBY0UsR0FBd0JELEVBQU9ELEVBQVFGLEVBUHJELEVBQUluQixFQUFVLEVBQUlBLEdBT2dEcUIsRUFBUUYsR0FFckZybUIsR0FEQTNnQixHQUFLLEVBQUlnbkMsRUFBWW5CLEdBQVdzQixJQUNsQm5uQyxFQUFJbW5DLElBRUxGLEdBQVN0bUIsR0FBVUEsRUFBZXltQixHQUFRdFYsS0FDaERzVixFQUFRem1CLEksZ0JDcEJqQixJQUFJbkYsRUFBVSxFQUFRLEdBQ2xCOGEsRUFBTWp2QixLQUFLaXZCLElBRWY5YSxFQUFRQSxFQUFRVSxFQUFHLE9BQVEsQ0FDekJtckIsTUFBTyxTQUFlQyxFQUFRQyxHQU01QixJQUxBLElBSUlyb0IsRUFBS3NvQixFQUpMQyxFQUFNLEVBQ05scUMsRUFBSSxFQUNKNG9CLEVBQU8vZSxVQUFVN0csT0FDakJtbkMsRUFBTyxFQUVKbnFDLEVBQUk0b0IsR0FFTHVoQixHQURKeG9CLEVBQU1vWCxFQUFJbHZCLFVBQVU3SixRQUdsQmtxQyxFQUFNQSxHQURORCxFQUFNRSxFQUFPeG9CLEdBQ0tzb0IsRUFBTSxFQUN4QkUsRUFBT3hvQixHQUdQdW9CLEdBRlN2b0IsRUFBTSxHQUNmc29CLEVBQU10b0IsRUFBTXdvQixHQUNDRixFQUNEdG9CLEVBRWhCLE9BQU93b0IsSUFBUzVWLElBQVdBLElBQVc0VixFQUFPcmdDLEtBQUs4K0IsS0FBS3NCLE8sZ0JDckIzRCxJQUFJanNCLEVBQVUsRUFBUSxHQUNsQm1zQixFQUFRdGdDLEtBQUt1Z0MsS0FHakJwc0IsRUFBUUEsRUFBUVUsRUFBSVYsRUFBUU0sRUFBSSxFQUFRLEVBQVIsRUFBb0IsV0FDbEQsT0FBZ0MsR0FBekI2ckIsRUFBTSxXQUFZLElBQTRCLEdBQWhCQSxFQUFNcG5DLFVBQ3pDLE9BQVEsQ0FDVnFuQyxLQUFNLFNBQWM1VixFQUFHbUksR0FDckIsSUFDSTBOLEdBQU03VixFQUNOOFYsR0FBTTNOLEVBQ040TixFQUhTLE1BR0tGLEVBQ2RHLEVBSlMsTUFJS0YsRUFDbEIsT0FBTyxFQUFJQyxFQUFLQyxJQUxILE1BS21CSCxJQUFPLElBQU1HLEVBQUtELEdBTHJDLE1BS29ERCxJQUFPLEtBQU8sS0FBTyxPLGdCQ2IxRixJQUFJdHNCLEVBQVUsRUFBUSxHQUV0QkEsRUFBUUEsRUFBUVUsRUFBRyxPQUFRLENBQ3pCK3JCLE1BQU8sU0FBZWpXLEdBQ3BCLE9BQU8zcUIsS0FBS3VULElBQUlvWCxHQUFLM3FCLEtBQUs2Z0MsVyxnQkNKOUIsSUFBSTFzQixFQUFVLEVBQVEsR0FFdEJBLEVBQVFBLEVBQVFVLEVBQUcsT0FBUSxDQUFFK2UsTUFBTyxFQUFRLE8sZ0JDRjVDLElBQUl6ZixFQUFVLEVBQVEsR0FFdEJBLEVBQVFBLEVBQVFVLEVBQUcsT0FBUSxDQUN6QmlzQixLQUFNLFNBQWNuVyxHQUNsQixPQUFPM3FCLEtBQUt1VCxJQUFJb1gsR0FBSzNxQixLQUFLa3ZCLFEsZ0JDSjlCLElBQUkvYSxFQUFVLEVBQVEsR0FFdEJBLEVBQVFBLEVBQVFVLEVBQUcsT0FBUSxDQUFFNlYsS0FBTSxFQUFRLE8sZ0JDRjNDLElBQUl2VyxFQUFVLEVBQVEsR0FDbEIwVyxFQUFRLEVBQVEsSUFDaEJ0VyxFQUFNdlUsS0FBS3VVLElBR2ZKLEVBQVFBLEVBQVFVLEVBQUlWLEVBQVFNLEVBQUksRUFBUSxFQUFSLEVBQW9CLFdBQ2xELE9BQThCLFFBQXRCelUsS0FBSytnQyxNQUFNLFVBQ2pCLE9BQVEsQ0FDVkEsS0FBTSxTQUFjcFcsR0FDbEIsT0FBTzNxQixLQUFLaXZCLElBQUl0RSxHQUFLQSxHQUFLLEdBQ3JCRSxFQUFNRixHQUFLRSxHQUFPRixJQUFNLEdBQ3hCcFcsRUFBSW9XLEVBQUksR0FBS3BXLEdBQUtvVyxFQUFJLEtBQU8zcUIsS0FBS3U3QixFQUFJLE8sZ0JDWC9DLElBQUlwbkIsRUFBVSxFQUFRLEdBQ2xCMFcsRUFBUSxFQUFRLElBQ2hCdFcsRUFBTXZVLEtBQUt1VSxJQUVmSixFQUFRQSxFQUFRVSxFQUFHLE9BQVEsQ0FDekJtc0IsS0FBTSxTQUFjclcsR0FDbEIsSUFBSWh5QixFQUFJa3lCLEVBQU1GLEdBQUtBLEdBQ2Z0eEIsRUFBSXd4QixHQUFPRixHQUNmLE9BQU9oeUIsR0FBSzh4QixJQUFXLEVBQUlweEIsR0FBS294QixLQUFZLEdBQUs5eEIsRUFBSVUsSUFBTWtiLEVBQUlvVyxHQUFLcFcsR0FBS29XLFEsZ0JDUjdFLElBQUl4VyxFQUFVLEVBQVEsR0FFdEJBLEVBQVFBLEVBQVFVLEVBQUcsT0FBUSxDQUN6Qm9zQixNQUFPLFNBQWV0ckIsR0FDcEIsT0FBUUEsRUFBSyxFQUFJM1YsS0FBS2tZLE1BQVFsWSxLQUFLaVksTUFBTXRDLE8sZ0JDTDdDLElBQUl4QixFQUFVLEVBQVEsR0FDbEIyRixFQUFrQixFQUFRLElBQzFCb25CLEVBQWVscUIsT0FBT2txQixhQUN0QkMsRUFBaUJucUIsT0FBT29xQixjQUc1Qmp0QixFQUFRQSxFQUFRVSxFQUFJVixFQUFRTSxLQUFPMHNCLEdBQTJDLEdBQXpCQSxFQUFlam9DLFFBQWMsU0FBVSxDQUUxRmtvQyxjQUFlLFNBQXVCelcsR0FLcEMsSUFKQSxJQUdJNFMsRUFIQWxrQixFQUFNLEdBQ055RixFQUFPL2UsVUFBVTdHLE9BQ2pCaEQsRUFBSSxFQUVENG9CLEVBQU81b0IsR0FBRyxDQUVmLEdBREFxbkMsR0FBUXg5QixVQUFVN0osS0FDZDRqQixFQUFnQnlqQixFQUFNLFdBQWNBLEVBQU0sTUFBTXZpQixXQUFXdWlCLEVBQU8sOEJBQ3RFbGtCLEVBQUkvZixLQUFLaWtDLEVBQU8sTUFDWjJELEVBQWEzRCxHQUNiMkQsRUFBeUMsUUFBMUIzRCxHQUFRLFFBQVksSUFBY0EsRUFBTyxLQUFRLFFBRXBFLE9BQU9sa0IsRUFBSTdlLEtBQUssUSxnQkNwQnRCLElBQUkyWixFQUFVLEVBQVEsR0FDbEJpRSxFQUFZLEVBQVEsSUFDcEJLLEVBQVcsRUFBUSxHQUV2QnRFLEVBQVFBLEVBQVFVLEVBQUcsU0FBVSxDQUUzQjlPLElBQUssU0FBYXM3QixHQU1oQixJQUxBLElBQUlDLEVBQU1scEIsRUFBVWlwQixFQUFTdDdCLEtBQ3pCOGEsRUFBTXBJLEVBQVM2b0IsRUFBSXBvQyxRQUNuQjRsQixFQUFPL2UsVUFBVTdHLE9BQ2pCbWdCLEVBQU0sR0FDTm5qQixFQUFJLEVBQ0QycUIsRUFBTTNxQixHQUNYbWpCLEVBQUkvZixLQUFLMGQsT0FBT3NxQixFQUFJcHJDLE9BQ2hCQSxFQUFJNG9CLEdBQU16RixFQUFJL2YsS0FBSzBkLE9BQU9qWCxVQUFVN0osS0FDeEMsT0FBT21qQixFQUFJN2UsS0FBSyxRLDZCQ2J0QixFQUFRLEdBQVIsQ0FBMEIsUUFBUSxTQUFVNjRCLEdBQzFDLE9BQU8sV0FDTCxPQUFPQSxFQUFNdjlCLEtBQU0sUSw2QkNIdkIsSUFBSXlyQyxFQUFNLEVBQVEsR0FBUixFQUF3QixHQUdsQyxFQUFRLEdBQVIsQ0FBMEJ2cUIsT0FBUSxVQUFVLFNBQVVzVixHQUNwRHgyQixLQUFLbXZCLEdBQUtqTyxPQUFPc1YsR0FDakJ4MkIsS0FBS3kyQixHQUFLLEtBRVQsV0FDRCxJQUVJaVYsRUFGQWxyQixFQUFJeGdCLEtBQUttdkIsR0FDVDFuQixFQUFRekgsS0FBS3kyQixHQUVqQixPQUFJaHZCLEdBQVMrWSxFQUFFcGQsT0FBZSxDQUFFL0IsV0FBT2dlLEVBQVcrSixNQUFNLElBQ3hEc2lCLEVBQVFELEVBQUlqckIsRUFBRy9ZLEdBQ2Z6SCxLQUFLeTJCLElBQU1pVixFQUFNdG9DLE9BQ1YsQ0FBRS9CLE1BQU9xcUMsRUFBT3RpQixNQUFNLFEsNkJDZC9CLElBQUkvSyxFQUFVLEVBQVEsR0FDbEJvdEIsRUFBTSxFQUFRLEdBQVIsRUFBd0IsR0FDbENwdEIsRUFBUUEsRUFBUVksRUFBRyxTQUFVLENBRTNCMHNCLFlBQWEsU0FBcUIxVyxHQUNoQyxPQUFPd1csRUFBSXpyQyxLQUFNaTFCLE8sNkJDSnJCLElBQUk1VyxFQUFVLEVBQVEsR0FDbEJzRSxFQUFXLEVBQVEsR0FDbkJpcEIsRUFBVSxFQUFRLElBRWxCQyxFQUFZLEdBQVksU0FFNUJ4dEIsRUFBUUEsRUFBUVksRUFBSVosRUFBUU0sRUFBSSxFQUFRLEdBQVIsQ0FIaEIsWUFHMEQsU0FBVSxDQUNsRm10QixTQUFVLFNBQWtCNVYsR0FDMUIsSUFBSWhVLEVBQU8wcEIsRUFBUTVyQyxLQUFNazJCLEVBTGIsWUFNUjZWLEVBQWM5aEMsVUFBVTdHLE9BQVMsRUFBSTZHLFVBQVUsUUFBS29WLEVBQ3BEMEwsRUFBTXBJLEVBQVNULEVBQUs5ZSxRQUNwQmtRLE9BQXNCK0wsSUFBaEIwc0IsRUFBNEJoaEIsRUFBTTdnQixLQUFLQyxJQUFJd1ksRUFBU29wQixHQUFjaGhCLEdBQ3hFaWhCLEVBQVM5cUIsT0FBT2dWLEdBQ3BCLE9BQU8yVixFQUNIQSxFQUFVdHJDLEtBQUsyaEIsRUFBTThwQixFQUFRMTRCLEdBQzdCNE8sRUFBS2xhLE1BQU1zTCxFQUFNMDRCLEVBQU81b0MsT0FBUWtRLEtBQVMwNEIsTSw2QkNmakQsSUFBSTN0QixFQUFVLEVBQVEsR0FDbEJ1dEIsRUFBVSxFQUFRLElBR3RCdnRCLEVBQVFBLEVBQVFZLEVBQUlaLEVBQVFNLEVBQUksRUFBUSxHQUFSLENBRmpCLFlBRTBELFNBQVUsQ0FDakZzTCxTQUFVLFNBQWtCaU0sR0FDMUIsU0FBVTBWLEVBQVE1ckMsS0FBTWsyQixFQUpiLFlBS1IvbUIsUUFBUSttQixFQUFjanNCLFVBQVU3RyxPQUFTLEVBQUk2RyxVQUFVLFFBQUtvVixPLGdCQ1RuRSxJQUFJaEIsRUFBVSxFQUFRLEdBRXRCQSxFQUFRQSxFQUFRWSxFQUFHLFNBQVUsQ0FFM0I1SCxPQUFRLEVBQVEsTyw2QkNGbEIsSUFBSWdILEVBQVUsRUFBUSxHQUNsQnNFLEVBQVcsRUFBUSxHQUNuQmlwQixFQUFVLEVBQVEsSUFFbEJLLEVBQWMsR0FBYyxXQUVoQzV0QixFQUFRQSxFQUFRWSxFQUFJWixFQUFRTSxFQUFJLEVBQVEsR0FBUixDQUhkLGNBRzBELFNBQVUsQ0FDcEZ1dEIsV0FBWSxTQUFvQmhXLEdBQzlCLElBQUloVSxFQUFPMHBCLEVBQVE1ckMsS0FBTWsyQixFQUxYLGNBTVZ6dUIsRUFBUWtiLEVBQVN6WSxLQUFLQyxJQUFJRixVQUFVN0csT0FBUyxFQUFJNkcsVUFBVSxRQUFLb1YsRUFBVzZDLEVBQUs5ZSxTQUNoRjRvQyxFQUFTOXFCLE9BQU9nVixHQUNwQixPQUFPK1YsRUFDSEEsRUFBWTFyQyxLQUFLMmhCLEVBQU04cEIsRUFBUXZrQyxHQUMvQnlhLEVBQUtsYSxNQUFNUCxFQUFPQSxFQUFRdWtDLEVBQU81b0MsVUFBWTRvQyxNLDZCQ2JyRCxFQUFRLEdBQVIsQ0FBMEIsVUFBVSxTQUFVM3FCLEdBQzVDLE9BQU8sU0FBZ0IxZ0IsR0FDckIsT0FBTzBnQixFQUFXcmhCLEtBQU0sSUFBSyxPQUFRVyxRLDZCQ0Z6QyxFQUFRLEdBQVIsQ0FBMEIsT0FBTyxTQUFVMGdCLEdBQ3pDLE9BQU8sV0FDTCxPQUFPQSxFQUFXcmhCLEtBQU0sTUFBTyxHQUFJLFMsNkJDRnZDLEVBQVEsR0FBUixDQUEwQixTQUFTLFNBQVVxaEIsR0FDM0MsT0FBTyxXQUNMLE9BQU9BLEVBQVdyaEIsS0FBTSxRQUFTLEdBQUksUyw2QkNGekMsRUFBUSxHQUFSLENBQTBCLFFBQVEsU0FBVXFoQixHQUMxQyxPQUFPLFdBQ0wsT0FBT0EsRUFBV3JoQixLQUFNLElBQUssR0FBSSxTLDZCQ0ZyQyxFQUFRLEdBQVIsQ0FBMEIsU0FBUyxTQUFVcWhCLEdBQzNDLE9BQU8sV0FDTCxPQUFPQSxFQUFXcmhCLEtBQU0sS0FBTSxHQUFJLFMsNkJDRnRDLEVBQVEsR0FBUixDQUEwQixhQUFhLFNBQVVxaEIsR0FDL0MsT0FBTyxTQUFtQmpOLEdBQ3hCLE9BQU9pTixFQUFXcmhCLEtBQU0sT0FBUSxRQUFTb1UsUSw2QkNGN0MsRUFBUSxHQUFSLENBQTBCLFlBQVksU0FBVWlOLEdBQzlDLE9BQU8sU0FBa0I4cUIsR0FDdkIsT0FBTzlxQixFQUFXcmhCLEtBQU0sT0FBUSxPQUFRbXNDLFEsNkJDRjVDLEVBQVEsR0FBUixDQUEwQixXQUFXLFNBQVU5cUIsR0FDN0MsT0FBTyxXQUNMLE9BQU9BLEVBQVdyaEIsS0FBTSxJQUFLLEdBQUksUyw2QkNGckMsRUFBUSxHQUFSLENBQTBCLFFBQVEsU0FBVXFoQixHQUMxQyxPQUFPLFNBQWMrcUIsR0FDbkIsT0FBTy9xQixFQUFXcmhCLEtBQU0sSUFBSyxPQUFRb3NDLFEsNkJDRnpDLEVBQVEsR0FBUixDQUEwQixTQUFTLFNBQVUvcUIsR0FDM0MsT0FBTyxXQUNMLE9BQU9BLEVBQVdyaEIsS0FBTSxRQUFTLEdBQUksUyw2QkNGekMsRUFBUSxHQUFSLENBQTBCLFVBQVUsU0FBVXFoQixHQUM1QyxPQUFPLFdBQ0wsT0FBT0EsRUFBV3JoQixLQUFNLFNBQVUsR0FBSSxTLDZCQ0YxQyxFQUFRLEdBQVIsQ0FBMEIsT0FBTyxTQUFVcWhCLEdBQ3pDLE9BQU8sV0FDTCxPQUFPQSxFQUFXcmhCLEtBQU0sTUFBTyxHQUFJLFMsNkJDRnZDLEVBQVEsR0FBUixDQUEwQixPQUFPLFNBQVVxaEIsR0FDekMsT0FBTyxXQUNMLE9BQU9BLEVBQVdyaEIsS0FBTSxNQUFPLEdBQUksUyxnQkNIdkMsSUFBSXFlLEVBQVUsRUFBUSxHQUV0QkEsRUFBUUEsRUFBUVUsRUFBRyxPQUFRLENBQUV4VyxJQUFLLFdBQWMsT0FBTyxJQUFJRCxNQUFPRSxjLDZCQ0ZsRSxJQUFJNlYsRUFBVSxFQUFRLEdBQ2xCcUUsRUFBVyxFQUFRLElBQ25CcEMsRUFBYyxFQUFRLElBRTFCakMsRUFBUUEsRUFBUVksRUFBSVosRUFBUU0sRUFBSSxFQUFRLEVBQVIsRUFBb0IsV0FDbEQsT0FBa0MsT0FBM0IsSUFBSXJXLEtBQUsyeEIsS0FBS29TLFVBQzJELElBQTNFL2pDLEtBQUt0RyxVQUFVcXFDLE9BQU85ckMsS0FBSyxDQUFFK3JDLFlBQWEsV0FBYyxPQUFPLFFBQ2xFLE9BQVEsQ0FFVkQsT0FBUSxTQUFnQjFxQyxHQUN0QixJQUFJNmUsRUFBSWtDLEVBQVMxaUIsTUFDYnVzQyxFQUFLanNCLEVBQVlFLEdBQ3JCLE1BQW9CLGlCQUFOK3JCLEdBQW1CMU8sU0FBUzBPLEdBQWEvckIsRUFBRThyQixjQUFULFMsZ0JDWnBELElBQUlqdUIsRUFBVSxFQUFRLEdBQ2xCaXVCLEVBQWMsRUFBUSxLQUcxQmp1QixFQUFRQSxFQUFRWSxFQUFJWixFQUFRTSxHQUFLclcsS0FBS3RHLFVBQVVzcUMsY0FBZ0JBLEdBQWMsT0FBUSxDQUNwRkEsWUFBYUEsSyw2QkNKZixJQUFJbnJCLEVBQVEsRUFBUSxHQUNoQjNZLEVBQVVGLEtBQUt0RyxVQUFVd0csUUFDekJna0MsRUFBZWxrQyxLQUFLdEcsVUFBVXNxQyxZQUU5QkcsRUFBSyxTQUFVejRCLEdBQ2pCLE9BQU9BLEVBQU0sRUFBSUEsRUFBTSxJQUFNQSxHQUkvQnBVLEVBQU9ELFFBQVd3aEIsR0FBTSxXQUN0QixNQUFpRCw0QkFBMUNxckIsRUFBYWpzQyxLQUFLLElBQUkrSCxNQUFNLEtBQU8sU0FDckM2WSxHQUFNLFdBQ1hxckIsRUFBYWpzQyxLQUFLLElBQUkrSCxLQUFLMnhCLFNBQ3ZCLFdBQ0osSUFBSzRELFNBQVNyMUIsRUFBUWpJLEtBQUtQLE9BQVEsTUFBTWtsQixXQUFXLHNCQUNwRCxJQUFJeGtCLEVBQUlWLEtBQ0pnOUIsRUFBSXQ4QixFQUFFZ3NDLGlCQUNObHNDLEVBQUlFLEVBQUVpc0MscUJBQ054cUMsRUFBSTY2QixFQUFJLEVBQUksSUFBTUEsRUFBSSxLQUFPLElBQU0sR0FDdkMsT0FBTzc2QixHQUFLLFFBQVUrSCxLQUFLaXZCLElBQUk2RCxJQUFJaDFCLE1BQU03RixHQUFLLEdBQUssR0FDakQsSUFBTXNxQyxFQUFHL3JDLEVBQUVrc0MsY0FBZ0IsR0FBSyxJQUFNSCxFQUFHL3JDLEVBQUVtc0MsY0FDM0MsSUFBTUosRUFBRy9yQyxFQUFFb3NDLGVBQWlCLElBQU1MLEVBQUcvckMsRUFBRXFzQyxpQkFDdkMsSUFBTU4sRUFBRy9yQyxFQUFFc3NDLGlCQUFtQixLQUFPeHNDLEVBQUksR0FBS0EsRUFBSSxJQUFNaXNDLEVBQUdqc0MsSUFBTSxLQUNqRWdzQyxHLGdCQ3pCSixJQUFJUyxFQUFZM2tDLEtBQUt0RyxVQUdqQjZlLEVBQVlvc0IsRUFBbUIsU0FDL0J6a0MsRUFBVXlrQyxFQUFVemtDLFFBQ3BCLElBQUlGLEtBQUsyeEIsS0FBTyxJQUpELGdCQUtqQixFQUFRLEdBQVIsQ0FBdUJnVCxFQUpULFlBSStCLFdBQzNDLElBQUk1ckMsRUFBUW1ILEVBQVFqSSxLQUFLUCxNQUV6QixPQUFPcUIsR0FBVUEsRUFBUXdmLEVBQVV0Z0IsS0FBS1AsTUFSekIsbUIsZ0JDRG5CLElBQUk0a0MsRUFBZSxFQUFRLEVBQVIsQ0FBa0IsZUFDakNwYixFQUFRbGhCLEtBQUt0RyxVQUVYNGlDLEtBQWdCcGIsR0FBUSxFQUFRLEdBQVIsQ0FBbUJBLEVBQU9vYixFQUFjLEVBQVEsTyw2QkNGOUUsSUFBSXhrQixFQUFXLEVBQVEsR0FDbkJFLEVBQWMsRUFBUSxJQUcxQjFnQixFQUFPRCxRQUFVLFNBQVV1dEMsR0FDekIsR0FBYSxXQUFUQSxHQUhPLFdBR2NBLEdBQTRCLFlBQVRBLEVBQW9CLE1BQU1wdEIsVUFBVSxrQkFDaEYsT0FBT1EsRUFBWUYsRUFBU3BnQixNQUpqQixVQUl3Qmt0QyxLLGdCQ05yQyxJQUFJN3VCLEVBQVUsRUFBUSxHQUV0QkEsRUFBUUEsRUFBUVUsRUFBRyxRQUFTLENBQUV0SixRQUFTLEVBQVEsTyw2QkNGL0MsSUFBSTJJLEVBQU0sRUFBUSxJQUNkQyxFQUFVLEVBQVEsR0FDbEJxRSxFQUFXLEVBQVEsSUFDbkJuaUIsRUFBTyxFQUFRLEtBQ2YyakIsRUFBYyxFQUFRLElBQ3RCdkIsRUFBVyxFQUFRLEdBQ25Cd3FCLEVBQWlCLEVBQVEsSUFDekI5b0IsRUFBWSxFQUFRLElBRXhCaEcsRUFBUUEsRUFBUVUsRUFBSVYsRUFBUU0sR0FBSyxFQUFRLEdBQVIsRUFBMEIsU0FBVThOLEdBQVE3b0IsTUFBTXFKLEtBQUt3ZixNQUFXLFFBQVMsQ0FFMUd4ZixLQUFNLFNBQWM0ZCxHQUNsQixJQU9Jem5CLEVBQVFvZ0IsRUFBUXNGLEVBQU1DLEVBUHRCdkksRUFBSWtDLEVBQVNtSSxHQUNidEMsRUFBbUIsbUJBQVJ2b0IsS0FBcUJBLEtBQU80RCxNQUN2Q29sQixFQUFPL2UsVUFBVTdHLE9BQ2pCNmxCLEVBQVFELEVBQU8sRUFBSS9lLFVBQVUsUUFBS29WLEVBQ2xDNkosT0FBb0I3SixJQUFWNEosRUFDVnhoQixFQUFRLEVBQ1IwaEIsRUFBUzlFLEVBQVU3RCxHQUl2QixHQUZJMEksSUFBU0QsRUFBUTdLLEVBQUk2SyxFQUFPRCxFQUFPLEVBQUkvZSxVQUFVLFFBQUtvVixFQUFXLElBRXZEQSxNQUFWOEosR0FBeUJaLEdBQUsza0IsT0FBU3NnQixFQUFZaUYsR0FNckQsSUFBSzNGLEVBQVMsSUFBSStFLEVBRGxCbmxCLEVBQVN1ZixFQUFTbkMsRUFBRXBkLFNBQ1NBLEVBQVNxRSxFQUFPQSxJQUMzQzBsQyxFQUFlM3BCLEVBQVEvYixFQUFPeWhCLEVBQVVELEVBQU16SSxFQUFFL1ksR0FBUUEsR0FBUytZLEVBQUUvWSxTQU5yRSxJQUFLc2hCLEVBQVdJLEVBQU81b0IsS0FBS2lnQixHQUFJZ0QsRUFBUyxJQUFJK0UsSUFBT08sRUFBT0MsRUFBU2hZLFFBQVFxWSxLQUFNM2hCLElBQ2hGMGxDLEVBQWUzcEIsRUFBUS9iLEVBQU95aEIsRUFBVTNvQixFQUFLd29CLEVBQVVFLEVBQU8sQ0FBQ0gsRUFBS3puQixNQUFPb0csSUFBUSxHQUFRcWhCLEVBQUt6bkIsT0FTcEcsT0FEQW1pQixFQUFPcGdCLE9BQVNxRSxFQUNUK2IsTSw2QkNqQ1gsSUFBSW5GLEVBQVUsRUFBUSxHQUNsQjh1QixFQUFpQixFQUFRLElBRzdCOXVCLEVBQVFBLEVBQVFVLEVBQUlWLEVBQVFNLEVBQUksRUFBUSxFQUFSLEVBQW9CLFdBQ2xELFNBQVNBLEtBQ1QsUUFBUy9hLE1BQU1pcEIsR0FBR3RzQixLQUFLb2UsYUFBY0EsTUFDbkMsUUFBUyxDQUVYa08sR0FBSSxXQUlGLElBSEEsSUFBSXBsQixFQUFRLEVBQ1J1aEIsRUFBTy9lLFVBQVU3RyxPQUNqQm9nQixFQUFTLElBQW9CLG1CQUFSeGpCLEtBQXFCQSxLQUFPNEQsT0FBT29sQixHQUNyREEsRUFBT3ZoQixHQUFPMGxDLEVBQWUzcEIsRUFBUS9iLEVBQU93QyxVQUFVeEMsTUFFN0QsT0FEQStiLEVBQU9wZ0IsT0FBUzRsQixFQUNUeEYsTSw2QkNkWCxJQUFJbkYsRUFBVSxFQUFRLEdBQ2xCaUUsRUFBWSxFQUFRLElBQ3BCdUUsRUFBWSxHQUFHbmlCLEtBR25CMlosRUFBUUEsRUFBUVksRUFBSVosRUFBUU0sR0FBSyxFQUFRLEtBQWlCN2QsU0FBVyxFQUFRLEdBQVIsQ0FBNEIrbEIsSUFBYSxRQUFTLENBQ3JIbmlCLEtBQU0sU0FBY3dsQixHQUNsQixPQUFPckQsRUFBVXRtQixLQUFLK2hCLEVBQVV0aUIsV0FBcUJxZixJQUFkNkssRUFBMEIsSUFBTUEsTyw2QkNSM0UsSUFBSTdMLEVBQVUsRUFBUSxHQUNsQnNaLEVBQU8sRUFBUSxJQUNmeEgsRUFBTSxFQUFRLElBQ2RuTSxFQUFrQixFQUFRLElBQzFCckIsRUFBVyxFQUFRLEdBQ25CcUUsRUFBYSxHQUFHaGYsTUFHcEJxVyxFQUFRQSxFQUFRWSxFQUFJWixFQUFRTSxFQUFJLEVBQVEsRUFBUixFQUFvQixXQUM5Q2daLEdBQU0zUSxFQUFXem1CLEtBQUtvM0IsTUFDeEIsUUFBUyxDQUNYM3ZCLE1BQU8sU0FBZXVpQixFQUFPalgsR0FDM0IsSUFBSXlYLEVBQU1wSSxFQUFTM2lCLEtBQUtvRCxRQUNwQm1wQixFQUFRNEQsRUFBSW53QixNQUVoQixHQURBc1QsT0FBYytMLElBQVIvTCxFQUFvQnlYLEVBQU16WCxFQUNuQixTQUFUaVosRUFBa0IsT0FBT3ZGLEVBQVd6bUIsS0FBS1AsS0FBTXVxQixFQUFPalgsR0FNMUQsSUFMQSxJQUFJQyxFQUFReVEsRUFBZ0J1RyxFQUFPUSxHQUMvQnFpQixFQUFPcHBCLEVBQWdCMVEsRUFBS3lYLEdBQzVCb2hCLEVBQU94cEIsRUFBU3lxQixFQUFPNzVCLEdBQ3ZCODVCLEVBQVMsSUFBSXpwQyxNQUFNdW9DLEdBQ25CL3JDLEVBQUksRUFDREEsRUFBSStyQyxFQUFNL3JDLElBQUtpdEMsRUFBT2p0QyxHQUFjLFVBQVRtc0IsRUFDOUJ2c0IsS0FBSzhTLE9BQU9TLEVBQVFuVCxHQUNwQkosS0FBS3VULEVBQVFuVCxHQUNqQixPQUFPaXRDLE0sNkJDeEJYLElBQUlodkIsRUFBVSxFQUFRLEdBQ2xCMkQsRUFBWSxFQUFRLElBQ3BCVSxFQUFXLEVBQVEsSUFDbkJ2QixFQUFRLEVBQVEsR0FDaEJtc0IsRUFBUSxHQUFHdm1CLEtBQ1hwUyxFQUFPLENBQUMsRUFBRyxFQUFHLEdBRWxCMEosRUFBUUEsRUFBUVksRUFBSVosRUFBUU0sR0FBS3dDLEdBQU0sV0FFckN4TSxFQUFLb1MsVUFBSzFILFFBQ0w4QixHQUFNLFdBRVh4TSxFQUFLb1MsS0FBSyxXQUVMLEVBQVEsR0FBUixDQUE0QnVtQixJQUFTLFFBQVMsQ0FFbkR2bUIsS0FBTSxTQUFjc0QsR0FDbEIsWUFBcUJoTCxJQUFkZ0wsRUFDSGlqQixFQUFNL3NDLEtBQUttaUIsRUFBUzFpQixPQUNwQnN0QyxFQUFNL3NDLEtBQUttaUIsRUFBUzFpQixNQUFPZ2lCLEVBQVVxSSxRLDZCQ25CN0MsSUFBSWhNLEVBQVUsRUFBUSxHQUNsQmt2QixFQUFXLEVBQVEsR0FBUixDQUE0QixHQUN2Q0MsRUFBUyxFQUFRLEdBQVIsQ0FBNEIsR0FBR3pqQixTQUFTLEdBRXJEMUwsRUFBUUEsRUFBUVksRUFBSVosRUFBUU0sR0FBSzZ1QixFQUFRLFFBQVMsQ0FFaER6akIsUUFBUyxTQUFpQnpHLEdBQ3hCLE9BQU9pcUIsRUFBU3Z0QyxLQUFNc2pCLEVBQVlyWixVQUFVLFEsZ0JDUmhELElBQUkyVixFQUFXLEVBQVEsR0FDbkJuSyxFQUFVLEVBQVEsSUFDbEJ1YSxFQUFVLEVBQVEsRUFBUixDQUFrQixXQUVoQ3B3QixFQUFPRCxRQUFVLFNBQVVzK0IsR0FDekIsSUFBSTFWLEVBU0YsT0FSRTlTLEVBQVF3b0IsS0FHTSxtQkFGaEIxVixFQUFJMFYsRUFBU3J6QixjQUVrQjJkLElBQU0za0IsUUFBUzZSLEVBQVE4UyxFQUFFdm1CLGFBQWF1bUIsT0FBSWxKLEdBQ3JFTyxFQUFTMkksSUFFRCxRQURWQSxFQUFJQSxFQUFFeUgsTUFDVXpILE9BQUlsSixTQUVUQSxJQUFOa0osRUFBa0Iza0IsTUFBUTJrQixJLDZCQ2JyQyxJQUFJbEssRUFBVSxFQUFRLEdBQ2xCd0osRUFBTyxFQUFRLEdBQVIsQ0FBNEIsR0FFdkN4SixFQUFRQSxFQUFRWSxFQUFJWixFQUFRTSxHQUFLLEVBQVEsR0FBUixDQUE0QixHQUFHalosS0FBSyxHQUFPLFFBQVMsQ0FFbkZBLElBQUssU0FBYTRkLEdBQ2hCLE9BQU91RSxFQUFLN25CLEtBQU1zakIsRUFBWXJaLFVBQVUsUSw2QkNONUMsSUFBSW9VLEVBQVUsRUFBUSxHQUNsQm92QixFQUFVLEVBQVEsR0FBUixDQUE0QixHQUUxQ3B2QixFQUFRQSxFQUFRWSxFQUFJWixFQUFRTSxHQUFLLEVBQVEsR0FBUixDQUE0QixHQUFHOUssUUFBUSxHQUFPLFFBQVMsQ0FFdEZBLE9BQVEsU0FBZ0J5UCxHQUN0QixPQUFPbXFCLEVBQVF6dEMsS0FBTXNqQixFQUFZclosVUFBVSxRLDZCQ04vQyxJQUFJb1UsRUFBVSxFQUFRLEdBQ2xCcXZCLEVBQVEsRUFBUSxHQUFSLENBQTRCLEdBRXhDcnZCLEVBQVFBLEVBQVFZLEVBQUlaLEVBQVFNLEdBQUssRUFBUSxHQUFSLENBQTRCLEdBQUd5TCxNQUFNLEdBQU8sUUFBUyxDQUVwRkEsS0FBTSxTQUFjOUcsR0FDbEIsT0FBT29xQixFQUFNMXRDLEtBQU1zakIsRUFBWXJaLFVBQVUsUSw2QkNON0MsSUFBSW9VLEVBQVUsRUFBUSxHQUNsQnN2QixFQUFTLEVBQVEsR0FBUixDQUE0QixHQUV6Q3R2QixFQUFRQSxFQUFRWSxFQUFJWixFQUFRTSxHQUFLLEVBQVEsR0FBUixDQUE0QixHQUFHK0ssT0FBTyxHQUFPLFFBQVMsQ0FFckZBLE1BQU8sU0FBZXBHLEdBQ3BCLE9BQU9xcUIsRUFBTzN0QyxLQUFNc2pCLEVBQVlyWixVQUFVLFEsNkJDTjlDLElBQUlvVSxFQUFVLEVBQVEsR0FDbEJ1dkIsRUFBVSxFQUFRLEtBRXRCdnZCLEVBQVFBLEVBQVFZLEVBQUlaLEVBQVFNLEdBQUssRUFBUSxHQUFSLENBQTRCLEdBQUcrSCxRQUFRLEdBQU8sUUFBUyxDQUV0RkEsT0FBUSxTQUFnQnBELEdBQ3RCLE9BQU9zcUIsRUFBUTV0QyxLQUFNc2pCLEVBQVlyWixVQUFVN0csT0FBUTZHLFVBQVUsSUFBSSxPLDZCQ05yRSxJQUFJb1UsRUFBVSxFQUFRLEdBQ2xCdXZCLEVBQVUsRUFBUSxLQUV0QnZ2QixFQUFRQSxFQUFRWSxFQUFJWixFQUFRTSxHQUFLLEVBQVEsR0FBUixDQUE0QixHQUFHaUksYUFBYSxHQUFPLFFBQVMsQ0FFM0ZBLFlBQWEsU0FBcUJ0RCxHQUNoQyxPQUFPc3FCLEVBQVE1dEMsS0FBTXNqQixFQUFZclosVUFBVTdHLE9BQVE2RyxVQUFVLElBQUksTyw2QkNOckUsSUFBSW9VLEVBQVUsRUFBUSxHQUNsQnd2QixFQUFXLEVBQVEsR0FBUixFQUE2QixHQUN4Q2hZLEVBQVUsR0FBRzFtQixRQUNiMitCLElBQWtCalksR0FBVyxFQUFJLENBQUMsR0FBRzFtQixRQUFRLEdBQUksR0FBSyxFQUUxRGtQLEVBQVFBLEVBQVFZLEVBQUlaLEVBQVFNLEdBQUttdkIsSUFBa0IsRUFBUSxHQUFSLENBQTRCalksSUFBVyxRQUFTLENBRWpHMW1CLFFBQVMsU0FBaUI2YSxHQUN4QixPQUFPOGpCLEVBRUhqWSxFQUFRbHhCLE1BQU0zRSxLQUFNaUssWUFBYyxFQUNsQzRqQyxFQUFTN3RDLEtBQU1ncUIsRUFBZS9mLFVBQVUsUSw2QkNYaEQsSUFBSW9VLEVBQVUsRUFBUSxHQUNsQmlFLEVBQVksRUFBUSxJQUNwQnBDLEVBQVksRUFBUSxJQUNwQnlDLEVBQVcsRUFBUSxHQUNuQmtULEVBQVUsR0FBR3JQLFlBQ2JzbkIsSUFBa0JqWSxHQUFXLEVBQUksQ0FBQyxHQUFHclAsWUFBWSxHQUFJLEdBQUssRUFFOURuSSxFQUFRQSxFQUFRWSxFQUFJWixFQUFRTSxHQUFLbXZCLElBQWtCLEVBQVEsR0FBUixDQUE0QmpZLElBQVcsUUFBUyxDQUVqR3JQLFlBQWEsU0FBcUJ3RCxHQUVoQyxHQUFJOGpCLEVBQWUsT0FBT2pZLEVBQVFseEIsTUFBTTNFLEtBQU1pSyxZQUFjLEVBQzVELElBQUl1VyxFQUFJOEIsRUFBVXRpQixNQUNkb0QsRUFBU3VmLEVBQVNuQyxFQUFFcGQsUUFDcEJxRSxFQUFRckUsRUFBUyxFQUdyQixJQUZJNkcsVUFBVTdHLE9BQVMsSUFBR3FFLEVBQVF5QyxLQUFLQyxJQUFJMUMsRUFBT3lZLEVBQVVqVyxVQUFVLE1BQ2xFeEMsRUFBUSxJQUFHQSxFQUFRckUsRUFBU3FFLEdBQzFCQSxHQUFTLEVBQUdBLElBQVMsR0FBSUEsS0FBUytZLEdBQU9BLEVBQUUvWSxLQUFXdWlCLEVBQWUsT0FBT3ZpQixHQUFTLEVBQzNGLE9BQVEsTSxnQkNsQlosSUFBSTRXLEVBQVUsRUFBUSxHQUV0QkEsRUFBUUEsRUFBUVksRUFBRyxRQUFTLENBQUV3SyxXQUFZLEVBQVEsT0FFbEQsRUFBUSxHQUFSLENBQWlDLGUsZ0JDSmpDLElBQUlwTCxFQUFVLEVBQVEsR0FFdEJBLEVBQVFBLEVBQVFZLEVBQUcsUUFBUyxDQUFFMEssS0FBTSxFQUFRLE1BRTVDLEVBQVEsR0FBUixDQUFpQyxTLDZCQ0hqQyxJQUFJdEwsRUFBVSxFQUFRLEdBQ2xCMHZCLEVBQVEsRUFBUSxHQUFSLENBQTRCLEdBRXBDMVAsR0FBUyxFQURILFFBR0MsSUFBSXo2QixNQUFNLEdBQU0sTUFBRSxXQUFjeTZCLEdBQVMsS0FDcERoZ0IsRUFBUUEsRUFBUVksRUFBSVosRUFBUU0sRUFBSTBmLEVBQVEsUUFBUyxDQUMvQ3pVLEtBQU0sU0FBY3RHLEdBQ2xCLE9BQU95cUIsRUFBTS90QyxLQUFNc2pCLEVBQVlyWixVQUFVN0csT0FBUyxFQUFJNkcsVUFBVSxRQUFLb1YsTUFHekUsRUFBUSxHQUFSLENBVFUsUyw2QkNGVixJQUFJaEIsRUFBVSxFQUFRLEdBQ2xCMHZCLEVBQVEsRUFBUSxHQUFSLENBQTRCLEdBQ3BDdHJCLEVBQU0sWUFDTjRiLEdBQVMsRUFFVDViLElBQU8sSUFBSTdlLE1BQU0sR0FBRzZlLElBQUssV0FBYzRiLEdBQVMsS0FDcERoZ0IsRUFBUUEsRUFBUVksRUFBSVosRUFBUU0sRUFBSTBmLEVBQVEsUUFBUyxDQUMvQ3ZVLFVBQVcsU0FBbUJ4RyxHQUM1QixPQUFPeXFCLEVBQU0vdEMsS0FBTXNqQixFQUFZclosVUFBVTdHLE9BQVMsRUFBSTZHLFVBQVUsUUFBS29WLE1BR3pFLEVBQVEsR0FBUixDQUFpQ29ELEksZ0JDYmpDLEVBQVEsR0FBUixDQUEwQixVLGdCQ0ExQixJQUFJbmdCLEVBQVMsRUFBUSxHQUNqQjR3QixFQUFvQixFQUFRLElBQzVCM1MsRUFBSyxFQUFRLElBQWdCaFcsRUFDN0I2WixFQUFPLEVBQVEsSUFBa0I3WixFQUNqQzByQixFQUFXLEVBQVEsSUFDbkIrWCxFQUFTLEVBQVEsSUFDakJDLEVBQVUzckMsRUFBT210QixPQUNqQjVELEVBQU9vaUIsRUFDUHprQixFQUFReWtCLEVBQVFqc0MsVUFDaEI0MEIsRUFBTSxLQUNOQyxFQUFNLEtBRU5xWCxFQUFjLElBQUlELEVBQVFyWCxLQUFTQSxFQUV2QyxHQUFJLEVBQVEsTUFBdUJzWCxHQUFlLEVBQVEsRUFBUixFQUFvQixXQUdwRSxPQUZBclgsRUFBSSxFQUFRLEVBQVIsQ0FBa0IsV0FBWSxFQUUzQm9YLEVBQVFyWCxJQUFRQSxHQUFPcVgsRUFBUXBYLElBQVFBLEdBQTRCLFFBQXJCb1gsRUFBUXJYLEVBQUssU0FDL0QsQ0FDSHFYLEVBQVUsU0FBZ0IvckMsRUFBR3FJLEdBQzNCLElBQUk0akMsRUFBT251QyxnQkFBZ0JpdUMsRUFDdkJHLEVBQU9uWSxFQUFTL3pCLEdBQ2hCbXNDLE9BQVlodkIsSUFBTjlVLEVBQ1YsT0FBUTRqQyxHQUFRQyxHQUFRbHNDLEVBQUUwSSxjQUFnQnFqQyxHQUFXSSxFQUFNbnNDLEVBQ3ZEZ3hCLEVBQWtCZ2IsRUFDaEIsSUFBSXJpQixFQUFLdWlCLElBQVNDLEVBQU1uc0MsRUFBRW9jLE9BQVNwYyxFQUFHcUksR0FDdENzaEIsR0FBTXVpQixFQUFPbHNDLGFBQWErckMsR0FBVy9yQyxFQUFFb2MsT0FBU3BjLEVBQUdrc0MsR0FBUUMsRUFBTUwsRUFBT3p0QyxLQUFLMkIsR0FBS3FJLEdBQ3BGNGpDLEVBQU9udUMsS0FBT3dwQixFQUFPeWtCLElBUzNCLElBUEEsSUFBSUssRUFBUSxTQUFVM3NDLEdBQ3BCQSxLQUFPc3NDLEdBQVcxdEIsRUFBRzB0QixFQUFTdHNDLEVBQUssQ0FDakMwcEIsY0FBYyxFQUNkcHFCLElBQUssV0FBYyxPQUFPNHFCLEVBQUtscUIsSUFDL0JxYSxJQUFLLFNBQVU2RCxHQUFNZ00sRUFBS2xxQixHQUFPa2UsTUFHNUJ1RyxFQUFPaEMsRUFBS3lILEdBQU96ckIsRUFBSSxFQUFHZ21CLEVBQUtoakIsT0FBU2hELEdBQUlrdUMsRUFBTWxvQixFQUFLaG1CLE1BQ2hFb3BCLEVBQU01ZSxZQUFjcWpDLEVBQ3BCQSxFQUFRanNDLFVBQVl3bkIsRUFDcEIsRUFBUSxHQUFSLENBQXVCbG5CLEVBQVEsU0FBVTJyQyxHQUczQyxFQUFRLEdBQVIsQ0FBMEIsVyw2QkN6QzFCLEVBQVEsS0FDUixJQUFJN3RCLEVBQVcsRUFBUSxHQUNuQjR0QixFQUFTLEVBQVEsSUFDakJqZSxFQUFjLEVBQVEsR0FFdEJsUCxFQUFZLElBQWEsU0FFekJoaEIsRUFBUyxTQUFVb2lCLEdBQ3JCLEVBQVEsR0FBUixDQUF1QndOLE9BQU96dEIsVUFKaEIsV0FJc0NpZ0IsR0FBSSxJQUl0RCxFQUFRLEVBQVIsRUFBb0IsV0FBYyxNQUFzRCxRQUEvQ3BCLEVBQVV0Z0IsS0FBSyxDQUFFK2QsT0FBUSxJQUFLZ2dCLE1BQU8sU0FDaEZ6K0IsR0FBTyxXQUNMLElBQUk0ZixFQUFJVyxFQUFTcGdCLE1BQ2pCLE1BQU8sSUFBSXdGLE9BQU9pYSxFQUFFbkIsT0FBUSxJQUMxQixVQUFXbUIsRUFBSUEsRUFBRTZlLE9BQVN2TyxHQUFldFEsYUFBYWdRLE9BQVN1ZSxFQUFPenRDLEtBQUtrZixRQUFLSixNQVp0RSxZQWVMd0IsRUFBVWxnQixNQUNuQmQsR0FBTyxXQUNMLE9BQU9naEIsRUFBVXRnQixLQUFLUCxVLDZCQ3BCMUIsSUFBSW9nQixFQUFXLEVBQVEsR0FDbkJ1QyxFQUFXLEVBQVEsR0FDbkI0ckIsRUFBcUIsRUFBUSxJQUM3QkMsRUFBYSxFQUFRLElBR3pCLEVBQVEsR0FBUixDQUF5QixRQUFTLEdBQUcsU0FBVTl0QixFQUFTeVYsRUFBT3NZLEVBQVFDLEdBQ3JFLE1BQU8sQ0FHTCxTQUFlcmMsR0FDYixJQUFJN1IsRUFBSUUsRUFBUTFnQixNQUNaaWlCLEVBQWU1QyxNQUFWZ1QsT0FBc0JoVCxFQUFZZ1QsRUFBTzhELEdBQ2xELFlBQWM5VyxJQUFQNEMsRUFBbUJBLEVBQUcxaEIsS0FBSzh4QixFQUFRN1IsR0FBSyxJQUFJaVAsT0FBTzRDLEdBQVE4RCxHQUFPalYsT0FBT1YsS0FJbEYsU0FBVTZSLEdBQ1IsSUFBSTlPLEVBQU1tckIsRUFBZ0JELEVBQVFwYyxFQUFRcnlCLE1BQzFDLEdBQUl1akIsRUFBSTZGLEtBQU0sT0FBTzdGLEVBQUlsaUIsTUFDekIsSUFBSXN0QyxFQUFLdnVCLEVBQVNpUyxHQUNkdFQsRUFBSW1DLE9BQU9saEIsTUFDZixJQUFLMnVDLEVBQUdyc0MsT0FBUSxPQUFPa3NDLEVBQVdHLEVBQUk1dkIsR0FDdEMsSUFBSTZ2QixFQUFjRCxFQUFHdGQsUUFDckJzZCxFQUFHdlgsVUFBWSxFQUlmLElBSEEsSUFFSTVULEVBRkFtWixFQUFJLEdBQ0o5NkIsRUFBSSxFQUVnQyxRQUFoQzJoQixFQUFTZ3JCLEVBQVdHLEVBQUk1dkIsS0FBYyxDQUM1QyxJQUFJOHZCLEVBQVczdEIsT0FBT3NDLEVBQU8sSUFDN0JtWixFQUFFOTZCLEdBQUtndEMsRUFDVSxLQUFiQSxJQUFpQkYsRUFBR3ZYLFVBQVltWCxFQUFtQnh2QixFQUFHNEQsRUFBU2dzQixFQUFHdlgsV0FBWXdYLElBQ2xGL3NDLElBRUYsT0FBYSxJQUFOQSxFQUFVLEtBQU84NkIsUSw2QkNsQzlCLElBQUl2YyxFQUFXLEVBQVEsR0FDbkJzQyxFQUFXLEVBQVEsSUFDbkJDLEVBQVcsRUFBUSxHQUNuQnpDLEVBQVksRUFBUSxJQUNwQnF1QixFQUFxQixFQUFRLElBQzdCQyxFQUFhLEVBQVEsSUFDckJ4Z0IsRUFBTTlqQixLQUFLOGpCLElBQ1g3akIsRUFBTUQsS0FBS0MsSUFDWGlZLEVBQVFsWSxLQUFLa1ksTUFDYjBzQixFQUF1Qiw0QkFDdkJDLEVBQWdDLG9CQU9wQyxFQUFRLEdBQVIsQ0FBeUIsVUFBVyxHQUFHLFNBQVVydUIsRUFBU3N1QixFQUFTQyxFQUFVUCxHQUMzRSxNQUFPLENBR0wsU0FBaUJRLEVBQWFDLEdBQzVCLElBQUkzdUIsRUFBSUUsRUFBUTFnQixNQUNaaWlCLEVBQW9CNUMsTUFBZjZ2QixPQUEyQjd2QixFQUFZNnZCLEVBQVlGLEdBQzVELFlBQWMzdkIsSUFBUDRDLEVBQ0hBLEVBQUcxaEIsS0FBSzJ1QyxFQUFhMXVCLEVBQUcydUIsR0FDeEJGLEVBQVMxdUMsS0FBSzJnQixPQUFPVixHQUFJMHVCLEVBQWFDLElBSTVDLFNBQVU5YyxFQUFROGMsR0FDaEIsSUFBSTVyQixFQUFNbXJCLEVBQWdCTyxFQUFVNWMsRUFBUXJ5QixLQUFNbXZDLEdBQ2xELEdBQUk1ckIsRUFBSTZGLEtBQU0sT0FBTzdGLEVBQUlsaUIsTUFFekIsSUFBSXN0QyxFQUFLdnVCLEVBQVNpUyxHQUNkdFQsRUFBSW1DLE9BQU9saEIsTUFDWG92QyxFQUE0QyxtQkFBakJELEVBQzFCQyxJQUFtQkQsRUFBZWp1QixPQUFPaXVCLElBQzlDLElBQUk3c0MsRUFBU3FzQyxFQUFHcnNDLE9BQ2hCLEdBQUlBLEVBQVEsQ0FDVixJQUFJc3NDLEVBQWNELEVBQUd0ZCxRQUNyQnNkLEVBQUd2WCxVQUFZLEVBR2pCLElBREEsSUFBSWlZLEVBQVUsS0FDRCxDQUNYLElBQUk3ckIsRUFBU2dyQixFQUFXRyxFQUFJNXZCLEdBQzVCLEdBQWUsT0FBWHlFLEVBQWlCLE1BRXJCLEdBREE2ckIsRUFBUTdyQyxLQUFLZ2dCLElBQ1JsaEIsRUFBUSxNQUVJLEtBREY0ZSxPQUFPc0MsRUFBTyxNQUNSbXJCLEVBQUd2WCxVQUFZbVgsRUFBbUJ4dkIsRUFBRzRELEVBQVNnc0IsRUFBR3ZYLFdBQVl3WCxJQUlwRixJQUZBLElBeEN3Qi91QixFQXdDcEJ5dkIsRUFBb0IsR0FDcEJDLEVBQXFCLEVBQ2hCbnZDLEVBQUksRUFBR0EsRUFBSWl2QyxFQUFRanNDLE9BQVFoRCxJQUFLLENBQ3ZDb2pCLEVBQVM2ckIsRUFBUWp2QyxHQVNqQixJQVJBLElBQUlvdkMsRUFBVXR1QixPQUFPc0MsRUFBTyxJQUN4QmhULEVBQVd3ZCxFQUFJN2pCLEVBQUkrVixFQUFVc0QsRUFBTy9iLE9BQVFzWCxFQUFFM2IsUUFBUyxHQUN2RHFzQyxFQUFXLEdBTU54cEMsRUFBSSxFQUFHQSxFQUFJdWQsRUFBT3BnQixPQUFRNkMsSUFBS3dwQyxFQUFTanNDLFVBbkR6QzZiLEtBRGNRLEVBb0Q4QzJELEVBQU92ZCxJQW5EdkQ0WixFQUFLcUIsT0FBT3JCLElBb0RoQyxJQUFJNnZCLEVBQWdCbHNCLEVBQU9tTyxPQUMzQixHQUFJeWQsRUFBbUIsQ0FDckIsSUFBSU8sRUFBZSxDQUFDSCxHQUFTaHFDLE9BQU9pcUMsRUFBVWovQixFQUFVdU8sUUFDbENNLElBQWxCcXdCLEdBQTZCQyxFQUFhbnNDLEtBQUtrc0MsR0FDbkQsSUFBSUUsRUFBYzF1QixPQUFPaXVCLEVBQWF4cUMsV0FBTTBhLEVBQVdzd0IsU0FFdkRDLEVBQWNDLEVBQWdCTCxFQUFTendCLEVBQUd2TyxFQUFVaS9CLEVBQVVDLEVBQWVQLEdBRTNFMytCLEdBQVkrK0IsSUFDZEQsR0FBcUJ2d0IsRUFBRS9XLE1BQU11bkMsRUFBb0IvK0IsR0FBWW8vQixFQUM3REwsRUFBcUIvK0IsRUFBV2cvQixFQUFRcHNDLFFBRzVDLE9BQU9rc0MsRUFBb0J2d0IsRUFBRS9XLE1BQU11bkMsS0FLdkMsU0FBU00sRUFBZ0JMLEVBQVNsZCxFQUFLOWhCLEVBQVVpL0IsRUFBVUMsRUFBZUUsR0FDeEUsSUFBSUUsRUFBVXQvQixFQUFXZy9CLEVBQVFwc0MsT0FDN0I1QyxFQUFJaXZDLEVBQVNyc0MsT0FDYmtqQyxFQUFVeUksRUFLZCxZQUpzQjF2QixJQUFsQnF3QixJQUNGQSxFQUFnQmh0QixFQUFTZ3RCLEdBQ3pCcEosRUFBVXdJLEdBRUxHLEVBQVMxdUMsS0FBS3F2QyxFQUFhdEosR0FBUyxTQUFVanlCLEVBQU8wN0IsR0FDMUQsSUFBSUMsRUFDSixPQUFRRCxFQUFHajlCLE9BQU8sSUFDaEIsSUFBSyxJQUFLLE1BQU8sSUFDakIsSUFBSyxJQUFLLE9BQU8wOEIsRUFDakIsSUFBSyxJQUFLLE9BQU9sZCxFQUFJdHFCLE1BQU0sRUFBR3dJLEdBQzlCLElBQUssSUFBSyxPQUFPOGhCLEVBQUl0cUIsTUFBTThuQyxHQUMzQixJQUFLLElBQ0hFLEVBQVVOLEVBQWNLLEVBQUcvbkMsTUFBTSxHQUFJLElBQ3JDLE1BQ0YsUUFDRSxJQUFJbkcsR0FBS2t1QyxFQUNULEdBQVUsSUFBTmx1QyxFQUFTLE9BQU93UyxFQUNwQixHQUFJeFMsRUFBSXJCLEVBQUcsQ0FDVCxJQUFJK0osRUFBSTZYLEVBQU12Z0IsRUFBSSxJQUNsQixPQUFVLElBQU4wSSxFQUFnQjhKLEVBQ2hCOUosR0FBSy9KLE9BQThCNmUsSUFBcEJvd0IsRUFBU2xsQyxFQUFJLEdBQW1Cd2xDLEVBQUdqOUIsT0FBTyxHQUFLMjhCLEVBQVNsbEMsRUFBSSxHQUFLd2xDLEVBQUdqOUIsT0FBTyxHQUN2RnVCLEVBRVQyN0IsRUFBVVAsRUFBUzV0QyxFQUFJLEdBRTNCLFlBQW1Cd2QsSUFBWjJ3QixFQUF3QixHQUFLQSxVLDZCQ2hIMUMsSUFBSTV2QixFQUFXLEVBQVEsR0FDbkI2dkIsRUFBWSxFQUFRLElBQ3BCekIsRUFBYSxFQUFRLElBR3pCLEVBQVEsR0FBUixDQUF5QixTQUFVLEdBQUcsU0FBVTl0QixFQUFTd3ZCLEVBQVFDLEVBQVN6QixHQUN4RSxNQUFPLENBR0wsU0FBZ0JyYyxHQUNkLElBQUk3UixFQUFJRSxFQUFRMWdCLE1BQ1ppaUIsRUFBZTVDLE1BQVZnVCxPQUFzQmhULEVBQVlnVCxFQUFPNmQsR0FDbEQsWUFBYzd3QixJQUFQNEMsRUFBbUJBLEVBQUcxaEIsS0FBSzh4QixFQUFRN1IsR0FBSyxJQUFJaVAsT0FBTzRDLEdBQVE2ZCxHQUFRaHZCLE9BQU9WLEtBSW5GLFNBQVU2UixHQUNSLElBQUk5TyxFQUFNbXJCLEVBQWdCeUIsRUFBUzlkLEVBQVFyeUIsTUFDM0MsR0FBSXVqQixFQUFJNkYsS0FBTSxPQUFPN0YsRUFBSWxpQixNQUN6QixJQUFJc3RDLEVBQUt2dUIsRUFBU2lTLEdBQ2R0VCxFQUFJbUMsT0FBT2xoQixNQUNYb3dDLEVBQW9CekIsRUFBR3ZYLFVBQ3RCNlksRUFBVUcsRUFBbUIsS0FBSXpCLEVBQUd2WCxVQUFZLEdBQ3JELElBQUk1VCxFQUFTZ3JCLEVBQVdHLEVBQUk1dkIsR0FFNUIsT0FES2t4QixFQUFVdEIsRUFBR3ZYLFVBQVdnWixLQUFvQnpCLEVBQUd2WCxVQUFZZ1osR0FDOUMsT0FBWDVzQixHQUFtQixFQUFJQSxFQUFPL2IsWSw2QkN6QjNDLElBQUl3dUIsRUFBVyxFQUFRLElBQ25CN1YsRUFBVyxFQUFRLEdBQ25CcUUsRUFBcUIsRUFBUSxJQUM3QjhwQixFQUFxQixFQUFRLElBQzdCNXJCLEVBQVcsRUFBUSxHQUNuQjB0QixFQUFpQixFQUFRLElBQ3pCN2UsRUFBYSxFQUFRLElBQ3JCclEsRUFBUSxFQUFRLEdBQ2hCbXZCLEVBQU9wbUMsS0FBS0MsSUFDWm9tQyxFQUFRLEdBQUcvc0MsS0FPWGd0QyxHQUFjcnZCLEdBQU0sV0FBY3NPLE9BSHJCLFdBR3dDLFFBR3pELEVBQVEsR0FBUixDQUF5QixRQUFTLEdBQUcsU0FBVS9PLEVBQVMrdkIsRUFBT0MsRUFBUWhDLEdBQ3JFLElBQUlpQyxFQWtESixPQXhDRUEsRUFSNkIsS0FBN0IsT0FBYSxNQUFFLFFBQVEsSUFDZSxHQUF0QyxPQUFhLE1BQUUsUUFBUyxHQUFTLFFBQ0UsR0FBbkMsS0FBVyxNQUFFLFdBQWlCLFFBQ0ssR0FBbkMsSUFBVSxNQUFFLFlBQWtCLFFBQzlCLElBQVUsTUFBRSxRQUFjLE9BQUksR0FDOUIsR0FBUyxNQUFFLE1BQVksT0FHUCxTQUFVem1CLEVBQVcwbUIsR0FDbkMsSUFBSXR2QixFQUFTSixPQUFPbGhCLE1BQ3BCLFFBQWtCcWYsSUFBZDZLLEdBQXFDLElBQVYwbUIsRUFBYSxNQUFPLEdBRW5ELElBQUszYSxFQUFTL0wsR0FBWSxPQUFPd21CLEVBQU9ud0MsS0FBSytnQixFQUFRNEksRUFBVzBtQixHQVdoRSxJQVZBLElBU0l2OEIsRUFBTytpQixFQUFXeVosRUFUbEJDLEVBQVMsR0FDVHhTLEdBQVNwVSxFQUFVaUgsV0FBYSxJQUFNLEtBQzdCakgsRUFBVWtILFVBQVksSUFBTSxLQUM1QmxILEVBQVVtSCxRQUFVLElBQU0sS0FDMUJuSCxFQUFVb0gsT0FBUyxJQUFNLElBQ2xDeWYsRUFBZ0IsRUFDaEJDLE9BQXVCM3hCLElBQVZ1eEIsRUE1Qk4sV0E0QnlDQSxJQUFVLEVBRTFESyxFQUFnQixJQUFJeGhCLE9BQU92RixFQUFVNUwsT0FBUWdnQixFQUFRLE1BRWxEanFCLEVBQVFtZCxFQUFXanhCLEtBQUswd0MsRUFBZTN2QixRQUM1QzhWLEVBQVk2WixFQUF3QixXQUNwQkYsSUFDZEQsRUFBT3R0QyxLQUFLOGQsRUFBT3RaLE1BQU0rb0MsRUFBZTE4QixFQUFNNU0sUUFDMUM0TSxFQUFZLE9BQUksR0FBS0EsRUFBTTVNLE1BQVE2WixFQUFhLFFBQUdpdkIsRUFBTTVyQyxNQUFNbXNDLEVBQVF6OEIsRUFBTXJNLE1BQU0sSUFDdkY2b0MsRUFBYXg4QixFQUFNLEdBQVMsT0FDNUIwOEIsRUFBZ0IzWixFQUNaMFosRUFBYSxRQUFLRSxLQUVwQkMsRUFBd0IsWUFBTTU4QixFQUFNNU0sT0FBT3dwQyxFQUF3QixZQUt6RSxPQUhJRixJQUFrQnp2QixFQUFhLFFBQzdCdXZCLEdBQWVJLEVBQWN0OEIsS0FBSyxLQUFLbThCLEVBQU90dEMsS0FBSyxJQUNsRHN0QyxFQUFPdHRDLEtBQUs4ZCxFQUFPdFosTUFBTStvQyxJQUN6QkQsRUFBYSxPQUFJRSxFQUFhRixFQUFPOW9DLE1BQU0sRUFBR2dwQyxHQUFjRixHQUc1RCxJQUFVLFdBQUV6eEIsRUFBVyxHQUFTLE9BQ3pCLFNBQVU2SyxFQUFXMG1CLEdBQ25DLFlBQXFCdnhCLElBQWQ2SyxHQUFxQyxJQUFWMG1CLEVBQWMsR0FBS0YsRUFBT253QyxLQUFLUCxLQUFNa3FCLEVBQVcwbUIsSUFHcEVGLEVBR1gsQ0FHTCxTQUFleG1CLEVBQVcwbUIsR0FDeEIsSUFBSXB3QixFQUFJRSxFQUFRMWdCLE1BQ1preEMsRUFBd0I3eEIsTUFBYjZLLE9BQXlCN0ssRUFBWTZLLEVBQVV1bUIsR0FDOUQsWUFBb0JweEIsSUFBYjZ4QixFQUNIQSxFQUFTM3dDLEtBQUsycEIsRUFBVzFKLEVBQUdvd0IsR0FDNUJELEVBQWNwd0MsS0FBSzJnQixPQUFPVixHQUFJMEosRUFBVzBtQixJQU8vQyxTQUFVdmUsRUFBUXVlLEdBQ2hCLElBQUlydEIsRUFBTW1yQixFQUFnQmlDLEVBQWV0ZSxFQUFRcnlCLEtBQU00d0MsRUFBT0QsSUFBa0JELEdBQ2hGLEdBQUludEIsRUFBSTZGLEtBQU0sT0FBTzdGLEVBQUlsaUIsTUFFekIsSUFBSXN0QyxFQUFLdnVCLEVBQVNpUyxHQUNkdFQsRUFBSW1DLE9BQU9saEIsTUFDWHVvQixFQUFJOUQsRUFBbUJrcUIsRUFBSWxmLFFBRTNCMGhCLEVBQWtCeEMsRUFBR3RkLFFBQ3JCaU4sR0FBU3FRLEVBQUd4ZCxXQUFhLElBQU0sS0FDdEJ3ZCxFQUFHdmQsVUFBWSxJQUFNLEtBQ3JCdWQsRUFBR3RkLFFBQVUsSUFBTSxLQUNuQm1mLEVBQWEsSUFBTSxLQUk1QlUsRUFBVyxJQUFJM29CLEVBQUVpb0IsRUFBYTdCLEVBQUssT0FBU0EsRUFBR3J3QixPQUFTLElBQUtnZ0IsR0FDN0Q4UyxPQUFnQi94QixJQUFWdXhCLEVBekZDLFdBeUZrQ0EsSUFBVSxFQUN2RCxHQUFZLElBQVJRLEVBQVcsTUFBTyxHQUN0QixHQUFpQixJQUFicnlCLEVBQUUzYixPQUFjLE9BQXVDLE9BQWhDaXRDLEVBQWVhLEVBQVVueUIsR0FBYyxDQUFDQSxHQUFLLEdBSXhFLElBSEEsSUFBSTdjLEVBQUksRUFDSm12QyxFQUFJLEVBQ0oxVSxFQUFJLEdBQ0QwVSxFQUFJdHlCLEVBQUUzYixRQUFRLENBQ25COHRDLEVBQVM5WixVQUFZb1osRUFBYWEsRUFBSSxFQUN0QyxJQUNJcnJDLEVBREFxaUMsRUFBSWdJLEVBQWVhLEVBQVVWLEVBQWF6eEIsRUFBSUEsRUFBRS9XLE1BQU1xcEMsSUFFMUQsR0FDUSxPQUFOaEosSUFDQ3JpQyxFQUFJc3FDLEVBQUszdEIsRUFBU3V1QixFQUFTOVosV0FBYW9aLEVBQWEsRUFBSWEsSUFBS3R5QixFQUFFM2IsV0FBYWxCLEVBRTlFbXZDLEVBQUk5QyxFQUFtQnh2QixFQUFHc3lCLEVBQUdGLE9BQ3hCLENBRUwsR0FEQXhVLEVBQUVuNUIsS0FBS3ViLEVBQUUvVyxNQUFNOUYsRUFBR212QyxJQUNkMVUsRUFBRXY1QixTQUFXZ3VDLEVBQUssT0FBT3pVLEVBQzdCLElBQUssSUFBSXY4QixFQUFJLEVBQUdBLEdBQUtpb0MsRUFBRWpsQyxPQUFTLEVBQUdoRCxJQUVqQyxHQURBdThCLEVBQUVuNUIsS0FBSzZrQyxFQUFFam9DLElBQ0x1OEIsRUFBRXY1QixTQUFXZ3VDLEVBQUssT0FBT3pVLEVBRS9CMFUsRUFBSW52QyxFQUFJOEQsR0FJWixPQURBMjJCLEVBQUVuNUIsS0FBS3ViLEVBQUUvVyxNQUFNOUYsSUFDUnk2QixRLGdCQ2xJYixJQUFJcjZCLEVBQVMsRUFBUSxHQUNqQmd2QyxFQUFZLEVBQVEsSUFBV3QxQixJQUMvQnUxQixFQUFXanZDLEVBQU9rdkMsa0JBQW9CbHZDLEVBQU9tdkMsdUJBQzdDNVosRUFBVXYxQixFQUFPdTFCLFFBQ2pCa0ssRUFBVXovQixFQUFPeS9CLFFBQ2pCNUMsRUFBdUMsV0FBOUIsRUFBUSxHQUFSLENBQWtCdEgsR0FFL0JqNEIsRUFBT0QsUUFBVSxXQUNmLElBQUkreEMsRUFBTTMwQixFQUFNOGlCLEVBRVo4UixFQUFRLFdBQ1YsSUFBSUMsRUFBUTN2QixFQUVaLElBRElrZCxJQUFXeVMsRUFBUy9aLEVBQVE2SSxTQUFTa1IsRUFBTzlRLE9BQ3pDNFEsR0FBTSxDQUNYenZCLEVBQUt5dkIsRUFBS3p2QixHQUNWeXZCLEVBQU9BLEVBQUszZ0MsS0FDWixJQUNFa1IsSUFDQSxNQUFPamMsR0FHUCxNQUZJMHJDLEVBQU03UixJQUNMOWlCLE9BQU9zQyxFQUNOclosR0FFUitXLE9BQU9zQyxFQUNMdXlCLEdBQVFBLEVBQU8vUSxTQUlyQixHQUFJMUIsRUFDRlUsRUFBUyxXQUNQaEksRUFBUVksU0FBU2taLFNBR2QsSUFBSUosR0FBY2p2QyxFQUFPd3dCLFdBQWF4d0IsRUFBT3d3QixVQUFVK2UsV0FRdkQsR0FBSTlQLEdBQVdBLEVBQVF2QyxRQUFTLENBRXJDLElBQUlELEVBQVV3QyxFQUFRdkMsYUFBUW5nQixHQUM5QndnQixFQUFTLFdBQ1BOLEVBQVFJLEtBQUtnUyxTQVNmOVIsRUFBUyxXQUVQeVIsRUFBVS93QyxLQUFLK0IsRUFBUXF2QyxRQXZCZ0QsQ0FDekUsSUFBSUcsR0FBUyxFQUNUQyxFQUFPcnZDLFNBQVNzdkMsZUFBZSxJQUNuQyxJQUFJVCxFQUFTSSxHQUFPTSxRQUFRRixFQUFNLENBQUVHLGVBQWUsSUFDbkRyUyxFQUFTLFdBQ1BrUyxFQUFLdm1DLEtBQU9zbUMsR0FBVUEsR0FzQjFCLE9BQU8sU0FBVTd2QixHQUNmLElBQUkwYyxFQUFPLENBQUUxYyxHQUFJQSxFQUFJbFIsVUFBTXNPLEdBQ3ZCdEMsSUFBTUEsRUFBS2hNLEtBQU80dEIsR0FDakIrUyxJQUNIQSxFQUFPL1MsRUFDUGtCLEtBQ0E5aUIsRUFBTzRoQixLLGNDbEViLytCLEVBQU9ELFFBQVUsU0FBVWdnQixHQUN6QixJQUNFLE1BQU8sQ0FBRTNaLEdBQUcsRUFBTytJLEVBQUc0USxLQUN0QixNQUFPM1osR0FDUCxNQUFPLENBQUVBLEdBQUcsRUFBTStJLEVBQUcvSSxNLDZCQ0h6QixJQUFJbXNDLEVBQVMsRUFBUSxLQUNqQjdwQixFQUFXLEVBQVEsSUFJdkIxb0IsRUFBT0QsUUFBVSxFQUFRLEdBQVIsQ0FIUCxPQUdxQyxTQUFVc0IsR0FDdkQsT0FBTyxXQUFpQixPQUFPQSxFQUFJakIsS0FBTWlLLFVBQVU3RyxPQUFTLEVBQUk2RyxVQUFVLFFBQUtvVixNQUM5RSxDQUVEcGUsSUFBSyxTQUFhVSxHQUNoQixJQUFJaWhDLEVBQVF1UCxFQUFPeFAsU0FBU3JhLEVBQVN0b0IsS0FSL0IsT0FRMkMyQixHQUNqRCxPQUFPaWhDLEdBQVNBLEVBQU03ekIsR0FHeEJpTixJQUFLLFNBQWFyYSxFQUFLTixHQUNyQixPQUFPOHdDLEVBQU8vaUIsSUFBSTlHLEVBQVN0b0IsS0FickIsT0FheUMsSUFBUjJCLEVBQVksRUFBSUEsRUFBS04sS0FFN0Q4d0MsR0FBUSxJLDZCQ2pCWCxJQUFJQSxFQUFTLEVBQVEsS0FDakI3cEIsRUFBVyxFQUFRLElBSXZCMW9CLEVBQU9ELFFBQVUsRUFBUSxHQUFSLENBSFAsT0FHcUMsU0FBVXNCLEdBQ3ZELE9BQU8sV0FBaUIsT0FBT0EsRUFBSWpCLEtBQU1pSyxVQUFVN0csT0FBUyxFQUFJNkcsVUFBVSxRQUFLb1YsTUFDOUUsQ0FFRHRULElBQUssU0FBYTFLLEdBQ2hCLE9BQU84d0MsRUFBTy9pQixJQUFJOUcsRUFBU3RvQixLQVJyQixPQVFpQ3FCLEVBQWtCLElBQVZBLEVBQWMsRUFBSUEsRUFBT0EsS0FFekU4d0MsSSw2QkNaSCxJQWNJQyxFQWRBOXZDLEVBQVMsRUFBUSxHQUNqQit2QyxFQUFPLEVBQVEsR0FBUixDQUE0QixHQUNuQ2wwQixFQUFXLEVBQVEsSUFDbkJtUCxFQUFPLEVBQVEsSUFDZm9QLEVBQVMsRUFBUSxJQUNqQjRWLEVBQU8sRUFBUSxLQUNmMXlCLEVBQVcsRUFBUSxHQUNuQjBJLEVBQVcsRUFBUSxJQUNuQmlxQixFQUFrQixFQUFRLElBQzFCQyxHQUFXbHdDLEVBQU9td0MsZUFBaUIsa0JBQW1CbndDLEVBRXREbXJCLEVBQVVILEVBQUtHLFFBQ2ZSLEVBQWVuc0IsT0FBT21zQixhQUN0QmdXLEVBQXNCcVAsRUFBS2xQLFFBRzNCNVgsRUFBVSxTQUFVdnFCLEdBQ3RCLE9BQU8sV0FDTCxPQUFPQSxFQUFJakIsS0FBTWlLLFVBQVU3RyxPQUFTLEVBQUk2RyxVQUFVLFFBQUtvVixLQUl2RDhULEVBQVUsQ0FFWmx5QixJQUFLLFNBQWFVLEdBQ2hCLEdBQUlpZSxFQUFTamUsR0FBTSxDQUNqQixJQUFJNkosRUFBT2lpQixFQUFROXJCLEdBQ25CLE9BQWEsSUFBVDZKLEVBQXNCeTNCLEVBQW9CM2EsRUFBU3RvQixLQWpCOUMsWUFpQitEaUIsSUFBSVUsR0FDckU2SixFQUFPQSxFQUFLeEwsS0FBS3kyQixTQUFNcFgsSUFJbENyRCxJQUFLLFNBQWFyYSxFQUFLTixHQUNyQixPQUFPaXhDLEVBQUtsakIsSUFBSTlHLEVBQVN0b0IsS0F2QmQsV0F1QitCMkIsRUFBS04sS0FLL0NxeEMsRUFBVzl5QyxFQUFPRCxRQUFVLEVBQVEsR0FBUixDQTVCakIsVUE0Qm9ENnJCLEVBQVMySCxFQUFTbWYsR0FBTSxHQUFNLEdBRzdGQyxHQUFtQkMsSUFFckI5VixHQURBMFYsRUFBY0UsRUFBS3ZlLGVBQWV2SSxFQWhDckIsWUFpQ014cEIsVUFBV214QixHQUM5QjdGLEVBQUtDLE1BQU8sRUFDWjhrQixFQUFLLENBQUMsU0FBVSxNQUFPLE1BQU8sUUFBUSxTQUFVMXdDLEdBQzlDLElBQUk2bkIsRUFBUWtwQixFQUFTMXdDLFVBQ2pCOGYsRUFBUzBILEVBQU03bkIsR0FDbkJ3YyxFQUFTcUwsRUFBTzduQixHQUFLLFNBQVVrQixFQUFHVSxHQUVoQyxHQUFJcWMsRUFBUy9jLEtBQU9vcUIsRUFBYXBxQixHQUFJLENBQzlCN0MsS0FBSzZpQyxLQUFJN2lDLEtBQUs2aUMsR0FBSyxJQUFJdVAsR0FDNUIsSUFBSTV1QixFQUFTeGpCLEtBQUs2aUMsR0FBR2xoQyxHQUFLa0IsRUFBR1UsR0FDN0IsTUFBYyxPQUFQNUIsRUFBZTNCLEtBQU93akIsRUFFN0IsT0FBTzFCLEVBQU92aEIsS0FBS1AsS0FBTTZDLEVBQUdVLFcsNkJDdkRwQyxJQUFJK3VDLEVBQU8sRUFBUSxLQUNmaHFCLEVBQVcsRUFBUSxJQUl2QixFQUFRLEdBQVIsQ0FIZSxXQUdvQixTQUFVcm5CLEdBQzNDLE9BQU8sV0FBcUIsT0FBT0EsRUFBSWpCLEtBQU1pSyxVQUFVN0csT0FBUyxFQUFJNkcsVUFBVSxRQUFLb1YsTUFDbEYsQ0FFRHRULElBQUssU0FBYTFLLEdBQ2hCLE9BQU9peEMsRUFBS2xqQixJQUFJOUcsRUFBU3RvQixLQVJkLFdBUStCcUIsR0FBTyxLQUVsRGl4QyxHQUFNLEdBQU8sSSw2QkNaaEIsSUFBSWowQixFQUFVLEVBQVEsR0FDbEJxRixFQUFTLEVBQVEsSUFDakJ1RSxFQUFTLEVBQVEsSUFDakI3SCxFQUFXLEVBQVEsR0FDbkI0RCxFQUFrQixFQUFRLElBQzFCckIsRUFBVyxFQUFRLEdBQ25CL0MsRUFBVyxFQUFRLEdBQ25CMEYsRUFBYyxFQUFRLEdBQWFBLFlBQ25DYixFQUFxQixFQUFRLElBQzdCWSxFQUFlNEMsRUFBTzNDLFlBQ3RCQyxFQUFZMEMsRUFBT3pDLFNBQ25CbXRCLEVBQVVqdkIsRUFBT3NJLEtBQU8xRyxFQUFZc3RCLE9BQ3BDam9CLEVBQVN0RixFQUFhcmpCLFVBQVVnRyxNQUNoQzRmLEVBQU9sRSxFQUFPa0UsS0FHbEJ2SixFQUFRQSxFQUFRUSxFQUFJUixFQUFRbUIsRUFBSW5CLEVBQVFNLEdBQUsyRyxJQUFnQkQsR0FBZSxDQUFFQyxZQUFhRCxJQUUzRmhILEVBQVFBLEVBQVFVLEVBQUlWLEVBQVFNLEdBQUsrRSxFQUFPK0QsT0FKckIsY0FJMkMsQ0FFNURtckIsT0FBUSxTQUFnQi95QixHQUN0QixPQUFPOHlCLEdBQVdBLEVBQVE5eUIsSUFBT0QsRUFBU0MsSUFBTytILEtBQVEvSCxLQUk3RHhCLEVBQVFBLEVBQVFZLEVBQUlaLEVBQVFrQixFQUFJbEIsRUFBUU0sRUFBSSxFQUFRLEVBQVIsRUFBb0IsV0FDOUQsT0FBUSxJQUFJMEcsRUFBYSxHQUFHcmQsTUFBTSxPQUFHcVgsR0FBV2lOLGNBWi9CLGNBYUQsQ0FFaEJ0a0IsTUFBTyxTQUFldUwsRUFBT0QsR0FDM0IsUUFBZStMLElBQVhzTCxRQUFnQ3RMLElBQVIvTCxFQUFtQixPQUFPcVgsRUFBT3BxQixLQUFLNmYsRUFBU3BnQixNQUFPdVQsR0FRbEYsSUFQQSxJQUFJd1gsRUFBTTNLLEVBQVNwZ0IsTUFBTXNzQixXQUNyQnhQLEVBQVFrSCxFQUFnQnpRLEVBQU93WCxHQUMvQjhuQixFQUFNN3VCLE9BQXdCM0UsSUFBUi9MLEVBQW9CeVgsRUFBTXpYLEVBQUt5WCxHQUNyRHZILEVBQVMsSUFBS2lCLEVBQW1CemtCLEtBQU1xbEIsR0FBOUIsQ0FBNkMxQyxFQUFTa3dCLEVBQU0vMUIsSUFDckVnMkIsRUFBUSxJQUFJdnRCLEVBQVV2bEIsTUFDdEIreUMsRUFBUSxJQUFJeHRCLEVBQVUvQixHQUN0Qi9iLEVBQVEsRUFDTHFWLEVBQVErMUIsR0FDYkUsRUFBTTVYLFNBQVMxekIsSUFBU3FyQyxFQUFNelgsU0FBU3ZlLE1BQ3ZDLE9BQU8wRyxLQUliLEVBQVEsR0FBUixDQTlCbUIsZ0IsZ0JDZm5CLElBQUluRixFQUFVLEVBQVEsR0FDdEJBLEVBQVFBLEVBQVFRLEVBQUlSLEVBQVFtQixFQUFJbkIsRUFBUU0sR0FBSyxFQUFRLElBQVlxTixJQUFLLENBQ3BFeEcsU0FBVSxFQUFRLElBQW1CQSxZLGdCQ0Z2QyxFQUFRLEdBQVIsQ0FBMEIsT0FBUSxHQUFHLFNBQVVuaEIsR0FDN0MsT0FBTyxTQUFtQm1ILEVBQU1pZixFQUFZcm5CLEdBQzFDLE9BQU9pQixFQUFLckUsS0FBTXdMLEVBQU1pZixFQUFZcm5CLFEsZ0JDRnhDLEVBQVEsR0FBUixDQUEwQixRQUFTLEdBQUcsU0FBVWlCLEdBQzlDLE9BQU8sU0FBb0JtSCxFQUFNaWYsRUFBWXJuQixHQUMzQyxPQUFPaUIsRUFBS3JFLEtBQU13TCxFQUFNaWYsRUFBWXJuQixRLGdCQ0Z4QyxFQUFRLEdBQVIsQ0FBMEIsUUFBUyxHQUFHLFNBQVVpQixHQUM5QyxPQUFPLFNBQTJCbUgsRUFBTWlmLEVBQVlybkIsR0FDbEQsT0FBT2lCLEVBQUtyRSxLQUFNd0wsRUFBTWlmLEVBQVlybkIsT0FFckMsSSxnQkNKSCxFQUFRLEdBQVIsQ0FBMEIsUUFBUyxHQUFHLFNBQVVpQixHQUM5QyxPQUFPLFNBQW9CbUgsRUFBTWlmLEVBQVlybkIsR0FDM0MsT0FBT2lCLEVBQUtyRSxLQUFNd0wsRUFBTWlmLEVBQVlybkIsUSxnQkNGeEMsRUFBUSxHQUFSLENBQTBCLFNBQVUsR0FBRyxTQUFVaUIsR0FDL0MsT0FBTyxTQUFxQm1ILEVBQU1pZixFQUFZcm5CLEdBQzVDLE9BQU9pQixFQUFLckUsS0FBTXdMLEVBQU1pZixFQUFZcm5CLFEsZ0JDRnhDLEVBQVEsR0FBUixDQUEwQixRQUFTLEdBQUcsU0FBVWlCLEdBQzlDLE9BQU8sU0FBb0JtSCxFQUFNaWYsRUFBWXJuQixHQUMzQyxPQUFPaUIsRUFBS3JFLEtBQU13TCxFQUFNaWYsRUFBWXJuQixRLGdCQ0Z4QyxFQUFRLEdBQVIsQ0FBMEIsU0FBVSxHQUFHLFNBQVVpQixHQUMvQyxPQUFPLFNBQXFCbUgsRUFBTWlmLEVBQVlybkIsR0FDNUMsT0FBT2lCLEVBQUtyRSxLQUFNd0wsRUFBTWlmLEVBQVlybkIsUSxnQkNGeEMsRUFBUSxHQUFSLENBQTBCLFVBQVcsR0FBRyxTQUFVaUIsR0FDaEQsT0FBTyxTQUFzQm1ILEVBQU1pZixFQUFZcm5CLEdBQzdDLE9BQU9pQixFQUFLckUsS0FBTXdMLEVBQU1pZixFQUFZcm5CLFEsZ0JDRnhDLEVBQVEsR0FBUixDQUEwQixVQUFXLEdBQUcsU0FBVWlCLEdBQ2hELE9BQU8sU0FBc0JtSCxFQUFNaWYsRUFBWXJuQixHQUM3QyxPQUFPaUIsRUFBS3JFLEtBQU13TCxFQUFNaWYsRUFBWXJuQixRLGdCQ0R4QyxJQUFJaWIsRUFBVSxFQUFRLEdBQ2xCMkQsRUFBWSxFQUFRLElBQ3BCNUIsRUFBVyxFQUFRLEdBQ25CNHlCLEdBQVUsRUFBUSxHQUFhMVAsU0FBVyxJQUFJMytCLE1BQzlDc3VDLEVBQVMzekIsU0FBUzNhLE1BRXRCMFosRUFBUUEsRUFBUVUsRUFBSVYsRUFBUU0sR0FBSyxFQUFRLEVBQVIsRUFBb0IsV0FDbkRxMEIsR0FBTyxrQkFDTCxVQUFXLENBQ2JydUMsTUFBTyxTQUFlb0MsRUFBUW1zQyxFQUFjQyxHQUMxQyxJQUFJN2lCLEVBQUl0TyxFQUFVamIsR0FDZHFzQyxFQUFJaHpCLEVBQVMreUIsR0FDakIsT0FBT0gsRUFBU0EsRUFBTzFpQixFQUFHNGlCLEVBQWNFLEdBQUtILEVBQU8xeUMsS0FBSyt2QixFQUFHNGlCLEVBQWNFLE8sZ0JDWjlFLElBQUkvMEIsRUFBVSxFQUFRLEdBQ2xCM2MsRUFBUyxFQUFRLElBQ2pCc2dCLEVBQVksRUFBUSxJQUNwQjVCLEVBQVcsRUFBUSxHQUNuQlIsRUFBVyxFQUFRLEdBQ25CdUIsRUFBUSxFQUFRLEdBQ2hCdmYsRUFBTyxFQUFRLElBQ2Z5eEMsR0FBYyxFQUFRLEdBQWEvUCxTQUFXLElBQUlwRyxVQUlsRG9XLEVBQWlCbnlCLEdBQU0sV0FDekIsU0FBU3hDLEtBQ1QsUUFBUzAwQixHQUFXLGNBQTZCLEdBQUkxMEIsYUFBY0EsTUFFakU0MEIsR0FBWXB5QixHQUFNLFdBQ3BCa3lCLEdBQVcsa0JBR2JoMUIsRUFBUUEsRUFBUVUsRUFBSVYsRUFBUU0sR0FBSzIwQixHQUFrQkMsR0FBVyxVQUFXLENBQ3ZFclcsVUFBVyxTQUFtQnNXLEVBQVFoYixHQUNwQ3hXLEVBQVV3eEIsR0FDVnB6QixFQUFTb1ksR0FDVCxJQUFJaWIsRUFBWXhwQyxVQUFVN0csT0FBUyxFQUFJb3dDLEVBQVN4eEIsRUFBVS9YLFVBQVUsSUFDcEUsR0FBSXNwQyxJQUFhRCxFQUFnQixPQUFPRCxFQUFXRyxFQUFRaGIsRUFBTWliLEdBQ2pFLEdBQUlELEdBQVVDLEVBQVcsQ0FFdkIsT0FBUWpiLEVBQUtwMUIsUUFDWCxLQUFLLEVBQUcsT0FBTyxJQUFJb3dDLEVBQ25CLEtBQUssRUFBRyxPQUFPLElBQUlBLEVBQU9oYixFQUFLLElBQy9CLEtBQUssRUFBRyxPQUFPLElBQUlnYixFQUFPaGIsRUFBSyxHQUFJQSxFQUFLLElBQ3hDLEtBQUssRUFBRyxPQUFPLElBQUlnYixFQUFPaGIsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssSUFDakQsS0FBSyxFQUFHLE9BQU8sSUFBSWdiLEVBQU9oYixFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLElBRzVELElBQUlrYixFQUFRLENBQUMsTUFFYixPQURBQSxFQUFNbHdDLEtBQUttQixNQUFNK3VDLEVBQU9sYixHQUNqQixJQUFLNTJCLEVBQUsrQyxNQUFNNnVDLEVBQVFFLElBR2pDLElBQUlscUIsRUFBUWlxQixFQUFVenhDLFVBQ2xCd3hCLEVBQVc5eEIsRUFBT2tlLEVBQVM0SixHQUFTQSxFQUFRMW9CLE9BQU9rQixXQUNuRHdoQixFQUFTbEUsU0FBUzNhLE1BQU1wRSxLQUFLaXpDLEVBQVFoZ0IsRUFBVWdGLEdBQ25ELE9BQU81WSxFQUFTNEQsR0FBVUEsRUFBU2dRLE0sZ0JDM0N2QyxJQUFJalQsRUFBSyxFQUFRLElBQ2JsQyxFQUFVLEVBQVEsR0FDbEIrQixFQUFXLEVBQVEsR0FDbkJFLEVBQWMsRUFBUSxJQUcxQmpDLEVBQVFBLEVBQVFVLEVBQUlWLEVBQVFNLEVBQUksRUFBUSxFQUFSLEVBQW9CLFdBRWxEMmtCLFFBQVF2aUMsZUFBZXdmLEVBQUdoVyxFQUFFLEdBQUksRUFBRyxDQUFFbEosTUFBTyxJQUFNLEVBQUcsQ0FBRUEsTUFBTyxPQUM1RCxVQUFXLENBQ2JOLGVBQWdCLFNBQXdCZ0csRUFBUTRzQyxFQUFhQyxHQUMzRHh6QixFQUFTclosR0FDVDRzQyxFQUFjcnpCLEVBQVlxekIsR0FBYSxHQUN2Q3Z6QixFQUFTd3pCLEdBQ1QsSUFFRSxPQURBcnpCLEVBQUdoVyxFQUFFeEQsRUFBUTRzQyxFQUFhQyxJQUNuQixFQUNQLE1BQU81dEMsR0FDUCxPQUFPLE8sZ0JDbEJiLElBQUlxWSxFQUFVLEVBQVEsR0FDbEJrRSxFQUFPLEVBQVEsSUFBa0JoWSxFQUNqQzZWLEVBQVcsRUFBUSxHQUV2Qi9CLEVBQVFBLEVBQVFVLEVBQUcsVUFBVyxDQUM1QjgwQixlQUFnQixTQUF3QjlzQyxFQUFRNHNDLEdBQzlDLElBQUl2b0IsRUFBTzdJLEVBQUtuQyxFQUFTclosR0FBUzRzQyxHQUNsQyxRQUFPdm9CLElBQVNBLEVBQUtDLHNCQUE4QnRrQixFQUFPNHNDLE8sNkJDTjlELElBQUl0MUIsRUFBVSxFQUFRLEdBQ2xCK0IsRUFBVyxFQUFRLEdBQ25CMHpCLEVBQVksU0FBVXRkLEdBQ3hCeDJCLEtBQUttdkIsR0FBSy9PLEVBQVNvVyxHQUNuQngyQixLQUFLeTJCLEdBQUssRUFDVixJQUNJOTBCLEVBREF5a0IsRUFBT3BtQixLQUFLMDJCLEdBQUssR0FFckIsSUFBSy8wQixLQUFPNjBCLEVBQVVwUSxFQUFLNWlCLEtBQUs3QixJQUVsQyxFQUFRLElBQVIsQ0FBMEJteUMsRUFBVyxVQUFVLFdBQzdDLElBRUlueUMsRUFEQXlrQixFQURPcG1CLEtBQ0swMkIsR0FFaEIsR0FDRSxHQUpTMTJCLEtBSUF5MkIsSUFBTXJRLEVBQUtoakIsT0FBUSxNQUFPLENBQUUvQixXQUFPZ2UsRUFBVytKLE1BQU0sWUFDbkR6bkIsRUFBTXlrQixFQUxQcG1CLEtBS2lCeTJCLFNBTGpCejJCLEtBS2dDbXZCLEtBQzNDLE1BQU8sQ0FBRTl0QixNQUFPTSxFQUFLeW5CLE1BQU0sTUFHN0IvSyxFQUFRQSxFQUFRVSxFQUFHLFVBQVcsQ0FDNUJnMUIsVUFBVyxTQUFtQmh0QyxHQUM1QixPQUFPLElBQUkrc0MsRUFBVS9zQyxPLGdCQ3RCekIsSUFBSXdiLEVBQU8sRUFBUSxJQUNmNEIsRUFBaUIsRUFBUSxJQUN6QnhELEVBQU0sRUFBUSxJQUNkdEMsRUFBVSxFQUFRLEdBQ2xCdUIsRUFBVyxFQUFRLEdBQ25CUSxFQUFXLEVBQVEsR0FjdkIvQixFQUFRQSxFQUFRVSxFQUFHLFVBQVcsQ0FBRTlkLElBWmhDLFNBQVNBLEVBQUk4RixFQUFRNHNDLEdBQ25CLElBQ0l2b0IsRUFBTTVCLEVBRE53cUIsRUFBVy9wQyxVQUFVN0csT0FBUyxFQUFJMkQsRUFBU2tELFVBQVUsR0FFekQsT0FBSW1XLEVBQVNyWixLQUFZaXRDLEVBQWlCanRDLEVBQU80c0MsSUFDN0N2b0IsRUFBTzdJLEVBQUtoWSxFQUFFeEQsRUFBUTRzQyxJQUFxQmh6QixFQUFJeUssRUFBTSxTQUNyREEsRUFBSy9wQixXQUNRZ2UsSUFBYitMLEVBQUtucUIsSUFDSG1xQixFQUFLbnFCLElBQUlWLEtBQUt5ekMsUUFDZDMwQixFQUNGTyxFQUFTNEosRUFBUXJGLEVBQWVwZCxJQUFpQjlGLEVBQUl1b0IsRUFBT21xQixFQUFhSyxRQUE3RSxNLGdCQ2hCRixJQUFJenhCLEVBQU8sRUFBUSxJQUNmbEUsRUFBVSxFQUFRLEdBQ2xCK0IsRUFBVyxFQUFRLEdBRXZCL0IsRUFBUUEsRUFBUVUsRUFBRyxVQUFXLENBQzVCeUQseUJBQTBCLFNBQWtDemIsRUFBUTRzQyxHQUNsRSxPQUFPcHhCLEVBQUtoWSxFQUFFNlYsRUFBU3JaLEdBQVM0c0MsTyxnQkNOcEMsSUFBSXQxQixFQUFVLEVBQVEsR0FDbEI0MUIsRUFBVyxFQUFRLElBQ25CN3pCLEVBQVcsRUFBUSxHQUV2Qi9CLEVBQVFBLEVBQVFVLEVBQUcsVUFBVyxDQUM1Qm9GLGVBQWdCLFNBQXdCcGQsR0FDdEMsT0FBT2t0QyxFQUFTN3pCLEVBQVNyWixRLGdCQ043QixJQUFJc1gsRUFBVSxFQUFRLEdBRXRCQSxFQUFRQSxFQUFRVSxFQUFHLFVBQVcsQ0FDNUI0QixJQUFLLFNBQWE1WixFQUFRNHNDLEdBQ3hCLE9BQU9BLEtBQWU1c0MsTSxnQkNKMUIsSUFBSXNYLEVBQVUsRUFBUSxHQUNsQitCLEVBQVcsRUFBUSxHQUNuQnltQixFQUFnQi9sQyxPQUFPbXNCLGFBRTNCNU8sRUFBUUEsRUFBUVUsRUFBRyxVQUFXLENBQzVCa08sYUFBYyxTQUFzQmxtQixHQUVsQyxPQURBcVosRUFBU3JaLElBQ0Y4L0IsR0FBZ0JBLEVBQWM5L0IsTyxnQkNQekMsSUFBSXNYLEVBQVUsRUFBUSxHQUV0QkEsRUFBUUEsRUFBUVUsRUFBRyxVQUFXLENBQUV3a0IsUUFBUyxFQUFRLFEsZ0JDRmpELElBQUlsbEIsRUFBVSxFQUFRLEdBQ2xCK0IsRUFBVyxFQUFRLEdBQ25Cc21CLEVBQXFCNWxDLE9BQU9xc0Isa0JBRWhDOU8sRUFBUUEsRUFBUVUsRUFBRyxVQUFXLENBQzVCb08sa0JBQW1CLFNBQTJCcG1CLEdBQzVDcVosRUFBU3JaLEdBQ1QsSUFFRSxPQURJMi9CLEdBQW9CQSxFQUFtQjMvQixJQUNwQyxFQUNQLE1BQU9mLEdBQ1AsT0FBTyxPLGdCQ1hiLElBQUl1YSxFQUFLLEVBQVEsSUFDYmdDLEVBQU8sRUFBUSxJQUNmNEIsRUFBaUIsRUFBUSxJQUN6QnhELEVBQU0sRUFBUSxJQUNkdEMsRUFBVSxFQUFRLEdBQ2xCdUQsRUFBYSxFQUFRLElBQ3JCeEIsRUFBVyxFQUFRLEdBQ25CUixFQUFXLEVBQVEsR0F3QnZCdkIsRUFBUUEsRUFBUVUsRUFBRyxVQUFXLENBQUUvQyxJQXRCaEMsU0FBU0EsRUFBSWpWLEVBQVE0c0MsRUFBYU8sR0FDaEMsSUFFSUMsRUFBb0IzcUIsRUFGcEJ3cUIsRUFBVy9wQyxVQUFVN0csT0FBUyxFQUFJMkQsRUFBU2tELFVBQVUsR0FDckRtcUMsRUFBVTd4QixFQUFLaFksRUFBRTZWLEVBQVNyWixHQUFTNHNDLEdBRXZDLElBQUtTLEVBQVMsQ0FDWixHQUFJeDBCLEVBQVM0SixFQUFRckYsRUFBZXBkLElBQ2xDLE9BQU9pVixFQUFJd04sRUFBT21xQixFQUFhTyxFQUFHRixHQUVwQ0ksRUFBVXh5QixFQUFXLEdBRXZCLEdBQUlqQixFQUFJeXpCLEVBQVMsU0FBVSxDQUN6QixJQUF5QixJQUFyQkEsRUFBUTlvQixXQUF1QjFMLEVBQVNvMEIsR0FBVyxPQUFPLEVBQzlELEdBQUlHLEVBQXFCNXhCLEVBQUtoWSxFQUFFeXBDLEVBQVVMLEdBQWMsQ0FDdEQsR0FBSVEsRUFBbUJsekMsS0FBT2t6QyxFQUFtQm40QixNQUF1QyxJQUFoQ200QixFQUFtQjdvQixTQUFvQixPQUFPLEVBQ3RHNm9CLEVBQW1COXlDLE1BQVE2eUMsRUFDM0IzekIsRUFBR2hXLEVBQUV5cEMsRUFBVUwsRUFBYVEsUUFDdkI1ekIsRUFBR2hXLEVBQUV5cEMsRUFBVUwsRUFBYS94QixFQUFXLEVBQUdzeUIsSUFDakQsT0FBTyxFQUVULFlBQXVCNzBCLElBQWhCKzBCLEVBQVFwNEIsTUFBNkJvNEIsRUFBUXA0QixJQUFJemIsS0FBS3l6QyxFQUFVRSxJQUFJLE8sZ0JDNUI3RSxJQUFJNzFCLEVBQVUsRUFBUSxHQUNsQmcyQixFQUFXLEVBQVEsSUFFbkJBLEdBQVVoMkIsRUFBUUEsRUFBUVUsRUFBRyxVQUFXLENBQzFDd1YsZUFBZ0IsU0FBd0J4dEIsRUFBUXlpQixHQUM5QzZxQixFQUFTandDLE1BQU0yQyxFQUFReWlCLEdBQ3ZCLElBRUUsT0FEQTZxQixFQUFTcjRCLElBQUlqVixFQUFReWlCLElBQ2QsRUFDUCxNQUFPeGpCLEdBQ1AsT0FBTyxPLGdCQ1hiLEVBQVEsS0FDUnBHLEVBQU9ELFFBQVUsRUFBUSxHQUF1QmlFLE1BQU1xbUIsVSw2QkNDdEQsSUFBSTVMLEVBQVUsRUFBUSxHQUNsQmkyQixFQUFZLEVBQVEsR0FBUixFQUE2QixHQUU3Q2oyQixFQUFRQSxFQUFRWSxFQUFHLFFBQVMsQ0FDMUJnTCxTQUFVLFNBQWtCMkcsR0FDMUIsT0FBTzBqQixFQUFVdDBDLEtBQU00d0IsRUFBSTNtQixVQUFVN0csT0FBUyxFQUFJNkcsVUFBVSxRQUFLb1YsTUFJckUsRUFBUSxHQUFSLENBQWlDLGEsZ0JDWGpDLEVBQVEsS0FDUnpmLEVBQU9ELFFBQVUsRUFBUSxHQUF1QmlFLE1BQU0yd0MsUyw2QkNDdEQsSUFBSWwyQixFQUFVLEVBQVEsR0FDbEJtMkIsRUFBbUIsRUFBUSxLQUMzQjl4QixFQUFXLEVBQVEsSUFDbkJDLEVBQVcsRUFBUSxHQUNuQlgsRUFBWSxFQUFRLElBQ3BCeXlCLEVBQXFCLEVBQVEsS0FFakNwMkIsRUFBUUEsRUFBUVksRUFBRyxRQUFTLENBQzFCczFCLFFBQVMsU0FBaUJqeEIsR0FDeEIsSUFDSW94QixFQUFXL1gsRUFEWG5jLEVBQUlrQyxFQUFTMWlCLE1BTWpCLE9BSkFnaUIsRUFBVXNCLEdBQ1ZveEIsRUFBWS94QixFQUFTbkMsRUFBRXBkLFFBQ3ZCdTVCLEVBQUk4WCxFQUFtQmowQixFQUFHLEdBQzFCZzBCLEVBQWlCN1gsRUFBR25jLEVBQUdBLEVBQUdrMEIsRUFBVyxFQUFHLEVBQUdweEIsRUFBWXJaLFVBQVUsSUFDMUQweUIsS0FJWCxFQUFRLEdBQVIsQ0FBaUMsWSw2QkNuQmpDLElBQUlsbkIsRUFBVSxFQUFRLElBQ2xCbUssRUFBVyxFQUFRLEdBQ25CK0MsRUFBVyxFQUFRLEdBQ25CdkUsRUFBTSxFQUFRLElBQ2R1MkIsRUFBdUIsRUFBUSxFQUFSLENBQWtCLHNCQWdDN0MvMEMsRUFBT0QsUUE5QlAsU0FBUzYwQyxFQUFpQnp0QyxFQUFRazNCLEVBQVUzZixFQUFRbzJCLEVBQVduaEMsRUFBT3FoQyxFQUFPQyxFQUFRQyxHQU1uRixJQUxBLElBR0lDLEVBQVNDLEVBSFRDLEVBQWMxaEMsRUFDZDJoQyxFQUFjLEVBQ2RDLElBQVFOLEdBQVN6MkIsRUFBSXkyQixFQUFRQyxFQUFTLEdBR25DSSxFQUFjUixHQUFXLENBQzlCLEdBQUlRLEtBQWU1MkIsRUFBUSxDQVN6QixHQVJBeTJCLEVBQVVJLEVBQVFBLEVBQU03MkIsRUFBTzQyQixHQUFjQSxFQUFhalgsR0FBWTNmLEVBQU80MkIsR0FFN0VGLEdBQWEsRUFDVHAxQixFQUFTbTFCLEtBRVhDLE9BQTRCMzFCLEtBRDVCMjFCLEVBQWFELEVBQVFKLE1BQ3FCSyxFQUFhdi9CLEVBQVFzL0IsSUFHN0RDLEdBQWNKLEVBQVEsRUFDeEJLLEVBQWNULEVBQWlCenRDLEVBQVFrM0IsRUFBVThXLEVBQVNweUIsRUFBU295QixFQUFRM3hDLFFBQVM2eEMsRUFBYUwsRUFBUSxHQUFLLE1BQ3pHLENBQ0wsR0FBSUssR0FBZSxpQkFBa0IsTUFBTW4xQixZQUMzQy9ZLEVBQU9rdUMsR0FBZUYsRUFHeEJFLElBRUZDLElBRUYsT0FBT0QsSSxnQkNuQ1QsRUFBUSxLQUNScjFDLEVBQU9ELFFBQVUsRUFBUSxHQUF1QnVoQixPQUFPazBCLFUsNkJDQ3ZELElBQUkvMkIsRUFBVSxFQUFRLEdBQ2xCZzNCLEVBQU8sRUFBUSxLQUNmdGlCLEVBQVksRUFBUSxJQUdwQnVpQixFQUFhLG1EQUFtRDNnQyxLQUFLb2UsR0FFekUxVSxFQUFRQSxFQUFRWSxFQUFJWixFQUFRTSxFQUFJMjJCLEVBQVksU0FBVSxDQUNwREYsU0FBVSxTQUFrQjVSLEdBQzFCLE9BQU82UixFQUFLcjFDLEtBQU13akMsRUFBV3Y1QixVQUFVN0csT0FBUyxFQUFJNkcsVUFBVSxRQUFLb1YsR0FBVyxPLGdCQ1hsRixFQUFRLEtBQ1J6ZixFQUFPRCxRQUFVLEVBQVEsR0FBdUJ1aEIsT0FBT3EwQixRLDZCQ0N2RCxJQUFJbDNCLEVBQVUsRUFBUSxHQUNsQmczQixFQUFPLEVBQVEsS0FDZnRpQixFQUFZLEVBQVEsSUFHcEJ1aUIsRUFBYSxtREFBbUQzZ0MsS0FBS29lLEdBRXpFMVUsRUFBUUEsRUFBUVksRUFBSVosRUFBUU0sRUFBSTIyQixFQUFZLFNBQVUsQ0FDcERDLE9BQVEsU0FBZ0IvUixHQUN0QixPQUFPNlIsRUFBS3IxQyxLQUFNd2pDLEVBQVd2NUIsVUFBVTdHLE9BQVMsRUFBSTZHLFVBQVUsUUFBS29WLEdBQVcsTyxnQkNYbEYsRUFBUSxLQUNSemYsRUFBT0QsUUFBVSxFQUFRLEdBQXVCdWhCLE9BQU9zMEIsVSw2QkNDdkQsRUFBUSxHQUFSLENBQTBCLFlBQVksU0FBVWpZLEdBQzlDLE9BQU8sV0FDTCxPQUFPQSxFQUFNdjlCLEtBQU0sTUFFcEIsYyxnQkNOSCxFQUFRLEtBQ1JKLEVBQU9ELFFBQVUsRUFBUSxHQUF1QnVoQixPQUFPdTBCLFcsNkJDQ3ZELEVBQVEsR0FBUixDQUEwQixhQUFhLFNBQVVsWSxHQUMvQyxPQUFPLFdBQ0wsT0FBT0EsRUFBTXY5QixLQUFNLE1BRXBCLFksZ0JDTkgsRUFBUSxLQUNSSixFQUFPRCxRQUFVLEVBQVEsSUFBMEI0SyxFQUFFLGtCLGdCQ0RyRCxFQUFRLEdBQVIsQ0FBeUIsa0IsZ0JDQXpCLEVBQVEsS0FDUjNLLEVBQU9ELFFBQVUsRUFBUSxHQUF1Qm1CLE9BQU80MEMsMkIsZ0JDQXZELElBQUlyM0IsRUFBVSxFQUFRLEdBQ2xCa2xCLEVBQVUsRUFBUSxLQUNsQmpoQixFQUFZLEVBQVEsSUFDcEJDLEVBQU8sRUFBUSxJQUNmNHFCLEVBQWlCLEVBQVEsSUFFN0I5dUIsRUFBUUEsRUFBUVUsRUFBRyxTQUFVLENBQzNCMjJCLDBCQUEyQixTQUFtQzV6QyxHQU81RCxJQU5BLElBS0lILEVBQUt5cEIsRUFMTDVLLEVBQUk4QixFQUFVeGdCLEdBQ2Q2ekMsRUFBVXB6QixFQUFLaFksRUFDZjZiLEVBQU9tZCxFQUFRL2lCLEdBQ2ZnRCxFQUFTLEdBQ1RwakIsRUFBSSxFQUVEZ21CLEVBQUtoakIsT0FBU2hELFFBRU5pZixLQURiK0wsRUFBT3VxQixFQUFRbjFCLEVBQUc3ZSxFQUFNeWtCLEVBQUtobUIsUUFDTCtzQyxFQUFlM3BCLEVBQVE3aEIsRUFBS3lwQixHQUV0RCxPQUFPNUgsTSxnQkNuQlgsRUFBUSxLQUNSNWpCLEVBQU9ELFFBQVUsRUFBUSxHQUF1Qm1CLE9BQU9vbEIsUSxnQkNBdkQsSUFBSTdILEVBQVUsRUFBUSxHQUNsQnUzQixFQUFVLEVBQVEsSUFBUixFQUE4QixHQUU1Q3YzQixFQUFRQSxFQUFRVSxFQUFHLFNBQVUsQ0FDM0JtSCxPQUFRLFNBQWdCckcsR0FDdEIsT0FBTysxQixFQUFRLzFCLE8sZ0JDTm5CLEVBQVEsS0FDUmpnQixFQUFPRCxRQUFVLEVBQVEsR0FBdUJtQixPQUFPd2xCLFMsZ0JDQXZELElBQUlqSSxFQUFVLEVBQVEsR0FDbEIwWCxFQUFXLEVBQVEsSUFBUixFQUE4QixHQUU3QzFYLEVBQVFBLEVBQVFVLEVBQUcsU0FBVSxDQUMzQnVILFFBQVMsU0FBaUJ6RyxHQUN4QixPQUFPa1csRUFBU2xXLE8sNkJDTHBCLEVBQVEsS0FDUixFQUFRLEtBQ1JqZ0IsRUFBT0QsUUFBVSxFQUFRLEdBQXVCb2lDLFFBQWlCLFMsNkJDRGpFLElBQUkxakIsRUFBVSxFQUFRLEdBQ2xCUixFQUFPLEVBQVEsR0FDZnZiLEVBQVMsRUFBUSxHQUNqQm1pQixFQUFxQixFQUFRLElBQzdCc2EsRUFBaUIsRUFBUSxLQUU3QjFnQixFQUFRQSxFQUFRWSxFQUFJWixFQUFRb0IsRUFBRyxVQUFXLENBQUUsUUFBVyxTQUFVbzJCLEdBQy9ELElBQUl0dEIsRUFBSTlELEVBQW1CemtCLEtBQU02ZCxFQUFLa2tCLFNBQVd6L0IsRUFBT3kvQixTQUNwRDlnQixFQUFpQyxtQkFBYjQwQixFQUN4QixPQUFPNzFDLEtBQUsyL0IsS0FDVjFlLEVBQWEsU0FBVTRULEdBQ3JCLE9BQU9rSyxFQUFleFcsRUFBR3N0QixLQUFhbFcsTUFBSyxXQUFjLE9BQU85SyxNQUM5RGdoQixFQUNKNTBCLEVBQWEsU0FBVWpiLEdBQ3JCLE9BQU8rNEIsRUFBZXhXLEVBQUdzdEIsS0FBYWxXLE1BQUssV0FBYyxNQUFNMzVCLE1BQzdENnZDLE8sZ0JDakJSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSajJDLEVBQU9ELFFBQVUsRUFBUSxJLGdCQ0Z6QixJQUFJMkMsRUFBUyxFQUFRLEdBQ2pCK2IsRUFBVSxFQUFRLEdBQ2xCMFUsRUFBWSxFQUFRLElBQ3BCL3FCLEVBQVEsR0FBR0EsTUFDWDh0QyxFQUFPLFdBQVduaEMsS0FBS29lLEdBQ3ZCcVMsRUFBTyxTQUFVcHBCLEdBQ25CLE9BQU8sU0FBVWlHLEVBQUl0WSxHQUNuQixJQUFJb3NDLEVBQVk5ckMsVUFBVTdHLE9BQVMsRUFDL0JvMUIsSUFBT3VkLEdBQVkvdEMsRUFBTXpILEtBQUswSixVQUFXLEdBQzdDLE9BQU8rUixFQUFJKzVCLEVBQVksWUFFUCxtQkFBTjl6QixFQUFtQkEsRUFBSzNDLFNBQVMyQyxJQUFLdGQsTUFBTTNFLEtBQU13NEIsSUFDeER2VyxFQUFJdFksS0FHWjBVLEVBQVFBLEVBQVFRLEVBQUlSLEVBQVFjLEVBQUlkLEVBQVFNLEVBQUltM0IsRUFBTSxDQUNoRHRyQyxXQUFZNDZCLEVBQUs5aUMsRUFBT2tJLFlBQ3hCd3JDLFlBQWE1USxFQUFLOWlDLEVBQU8wekMsZ0IsZ0JDbEIzQixJQUFJMzNCLEVBQVUsRUFBUSxHQUNsQjQzQixFQUFRLEVBQVEsSUFDcEI1M0IsRUFBUUEsRUFBUVEsRUFBSVIsRUFBUWMsRUFBRyxDQUM3QjRZLGFBQWNrZSxFQUFNajZCLElBQ3BCaWMsZUFBZ0JnZSxFQUFNbmlCLFMsZ0JDeUN4QixJQTdDQSxJQUFJOUksRUFBYSxFQUFRLElBQ3JCb1IsRUFBVSxFQUFRLElBQ2xCamUsRUFBVyxFQUFRLElBQ25CN2IsRUFBUyxFQUFRLEdBQ2pCNGIsRUFBTyxFQUFRLElBQ2Z5RyxFQUFZLEVBQVEsSUFDcEJMLEVBQU0sRUFBUSxHQUNkOEMsRUFBVzlDLEVBQUksWUFDZjR4QixFQUFnQjV4QixFQUFJLGVBQ3BCNnhCLEVBQWN4eEIsRUFBVS9nQixNQUV4Qnd5QyxFQUFlLENBQ2pCQyxhQUFhLEVBQ2JDLHFCQUFxQixFQUNyQkMsY0FBYyxFQUNkQyxnQkFBZ0IsRUFDaEJDLGFBQWEsRUFDYkMsZUFBZSxFQUNmQyxjQUFjLEVBQ2RDLHNCQUFzQixFQUN0QkMsVUFBVSxFQUNWQyxtQkFBbUIsRUFDbkJDLGdCQUFnQixFQUNoQkMsaUJBQWlCLEVBQ2pCQyxtQkFBbUIsRUFDbkJDLFdBQVcsRUFDWEMsZUFBZSxFQUNmQyxjQUFjLEVBQ2RDLFVBQVUsRUFDVkMsa0JBQWtCLEVBQ2xCajZCLFFBQVEsRUFDUms2QixhQUFhLEVBQ2JDLGVBQWUsRUFDZkMsZUFBZSxFQUNmQyxnQkFBZ0IsRUFDaEJDLGNBQWMsRUFDZEMsZUFBZSxFQUNmQyxrQkFBa0IsRUFDbEJDLGtCQUFrQixFQUNsQkMsZ0JBQWdCLEVBQ2hCQyxrQkFBa0IsRUFDbEJDLGVBQWUsRUFDZkMsV0FBVyxHQUdKQyxFQUFjL2IsRUFBUWdhLEdBQWVoMkMsRUFBSSxFQUFHQSxFQUFJKzNDLEVBQVkvMEMsT0FBUWhELElBQUssQ0FDaEYsSUFJSXVCLEVBSkErZixFQUFPeTJCLEVBQVkvM0MsR0FDbkJnNEMsRUFBV2hDLEVBQWExMEIsR0FDeEIyMkIsRUFBYS8xQyxFQUFPb2YsR0FDcEI4SCxFQUFRNnVCLEdBQWNBLEVBQVdyMkMsVUFFckMsR0FBSXduQixJQUNHQSxFQUFNcEMsSUFBV2xKLEVBQUtzTCxFQUFPcEMsRUFBVSt1QixHQUN2QzNzQixFQUFNMHNCLElBQWdCaDRCLEVBQUtzTCxFQUFPMHNCLEVBQWV4MEIsR0FDdERpRCxFQUFVakQsR0FBUXkwQixFQUNkaUMsR0FBVSxJQUFLejJDLEtBQU9xcEIsRUFBaUJ4QixFQUFNN25CLElBQU13YyxFQUFTcUwsRUFBTzduQixFQUFLcXBCLEVBQVdycEIsSUFBTSxLLGdCQ2hEakcsSUFBSTIyQyxFQUFXLFNBQVUzNEMsR0FDdkIsYUFFQSxJQUVJMGYsRUFGQWs1QixFQUFLejNDLE9BQU9rQixVQUNadzJDLEVBQVNELEVBQUd0MkMsZUFFWms2QixFQUE0QixtQkFBWGg3QixPQUF3QkEsT0FBUyxHQUNsRHMzQyxFQUFpQnRjLEVBQVFwVCxVQUFZLGFBQ3JDMnZCLEVBQXNCdmMsRUFBUXdjLGVBQWlCLGtCQUMvQ0MsRUFBb0J6YyxFQUFRLzZCLGFBQWUsZ0JBRS9DLFNBQVNna0MsRUFBS3lULEVBQVNDLEVBQVMvNEMsRUFBTWc1QyxHQUVwQyxJQUFJQyxFQUFpQkYsR0FBV0EsRUFBUTkyQyxxQkFBcUJpM0MsRUFBWUgsRUFBVUcsRUFDL0VDLEVBQVlwNEMsT0FBT1ksT0FBT3MzQyxFQUFlaDNDLFdBQ3pDNHBDLEVBQVUsSUFBSXVOLEVBQVFKLEdBQWUsSUFNekMsT0FGQUcsRUFBVUUsUUFrTVosU0FBMEJQLEVBQVM5NEMsRUFBTTZyQyxHQUN2QyxJQUFJeU4sRUFBUUMsRUFFWixPQUFPLFNBQWdCeDNCLEVBQVFDLEdBQzdCLEdBQUlzM0IsSUFBVUUsRUFDWixNQUFNLElBQUlDLE1BQU0sZ0NBR2xCLEdBQUlILElBQVVJLEVBQW1CLENBQy9CLEdBQWUsVUFBWDMzQixFQUNGLE1BQU1DLEVBS1IsT0FBTzIzQixJQU1ULElBSEE5TixFQUFROXBCLE9BQVNBLEVBQ2pCOHBCLEVBQVE3cEIsSUFBTUEsSUFFRCxDQUNYLElBQUk0M0IsRUFBVy9OLEVBQVErTixTQUN2QixHQUFJQSxFQUFVLENBQ1osSUFBSUMsRUFBaUJDLEVBQW9CRixFQUFVL04sR0FDbkQsR0FBSWdPLEVBQWdCLENBQ2xCLEdBQUlBLElBQW1CRSxFQUFrQixTQUN6QyxPQUFPRixHQUlYLEdBQXVCLFNBQW5CaE8sRUFBUTlwQixPQUdWOHBCLEVBQVFtTyxLQUFPbk8sRUFBUW9PLE1BQVFwTyxFQUFRN3BCLFNBRWxDLEdBQXVCLFVBQW5CNnBCLEVBQVE5cEIsT0FBb0IsQ0FDckMsR0FBSXUzQixJQUFVQyxFQUVaLE1BREFELEVBQVFJLEVBQ0Y3TixFQUFRN3BCLElBR2hCNnBCLEVBQVFxTyxrQkFBa0JyTyxFQUFRN3BCLFNBRU4sV0FBbkI2cEIsRUFBUTlwQixRQUNqQjhwQixFQUFRc08sT0FBTyxTQUFVdE8sRUFBUTdwQixLQUduQ3MzQixFQUFRRSxFQUVSLElBQUloK0IsRUFBUzQrQixFQUFTdEIsRUFBUzk0QyxFQUFNNnJDLEdBQ3JDLEdBQW9CLFdBQWhCcndCLEVBQU9yVyxLQUFtQixDQU81QixHQUpBbTBDLEVBQVF6TixFQUFReGlCLEtBQ1pxd0IsRUFDQVcsRUFFQTcrQixFQUFPd0csTUFBUSszQixFQUNqQixTQUdGLE1BQU8sQ0FDTHo0QyxNQUFPa2EsRUFBT3dHLElBQ2RxSCxLQUFNd2lCLEVBQVF4aUIsTUFHUyxVQUFoQjdOLEVBQU9yVyxPQUNoQm0wQyxFQUFRSSxFQUdSN04sRUFBUTlwQixPQUFTLFFBQ2pCOHBCLEVBQVE3cEIsSUFBTXhHLEVBQU93RyxPQTFRUHM0QixDQUFpQnhCLEVBQVM5NEMsRUFBTTZyQyxHQUU3Q3NOLEVBY1QsU0FBU2lCLEVBQVNsNEIsRUFBSXRlLEVBQUtvZSxHQUN6QixJQUNFLE1BQU8sQ0FBRTdjLEtBQU0sU0FBVTZjLElBQUtFLEVBQUcxaEIsS0FBS29ELEVBQUtvZSxJQUMzQyxNQUFPNmYsR0FDUCxNQUFPLENBQUUxOEIsS0FBTSxRQUFTNmMsSUFBSzZmLElBaEJqQ2ppQyxFQUFReWxDLEtBQU9BLEVBb0JmLElBQUlrVSxFQUF5QixpQkFDekJjLEVBQXlCLGlCQUN6QmIsRUFBb0IsWUFDcEJFLEVBQW9CLFlBSXBCSyxFQUFtQixHQU12QixTQUFTYixLQUNULFNBQVNxQixLQUNULFNBQVNDLEtBSVQsSUFBSS9rQixFQUFvQixHQUN4QkEsRUFBa0JpakIsR0FBa0IsV0FDbEMsT0FBT3o0QyxNQUdULElBQUlpMEMsRUFBV256QyxPQUFPcWpCLGVBQ2xCcTJCLEVBQTBCdkcsR0FBWUEsRUFBU0EsRUFBUy90QixFQUFPLE1BQy9EczBCLEdBQ0FBLElBQTRCakMsR0FDNUJDLEVBQU9qNEMsS0FBS2k2QyxFQUF5Qi9CLEtBR3ZDampCLEVBQW9CZ2xCLEdBR3RCLElBQUlDLEVBQUtGLEVBQTJCdjRDLFVBQ2xDaTNDLEVBQVVqM0MsVUFBWWxCLE9BQU9ZLE9BQU84ekIsR0FRdEMsU0FBU2tsQixFQUFzQjE0QyxHQUM3QixDQUFDLE9BQVEsUUFBUyxVQUFVK25CLFNBQVEsU0FBU2pJLEdBQzNDOWYsRUFBVThmLEdBQVUsU0FBU0MsR0FDM0IsT0FBTy9oQixLQUFLbzVDLFFBQVF0M0IsRUFBUUMsT0FvQ2xDLFNBQVM0NEIsRUFBY3pCLEdBZ0NyQixJQUFJMEIsRUFnQ0o1NkMsS0FBS281QyxRQTlCTCxTQUFpQnQzQixFQUFRQyxHQUN2QixTQUFTODRCLElBQ1AsT0FBTyxJQUFJOVksU0FBUSxTQUFTdkMsRUFBU2lCLElBbkN6QyxTQUFTL0ksRUFBTzVWLEVBQVFDLEVBQUt5ZCxFQUFTaUIsR0FDcEMsSUFBSWxsQixFQUFTNCtCLEVBQVNqQixFQUFVcDNCLEdBQVNvM0IsRUFBV24zQixHQUNwRCxHQUFvQixVQUFoQnhHLEVBQU9yVyxLQUVKLENBQ0wsSUFBSXNlLEVBQVNqSSxFQUFPd0csSUFDaEIxZ0IsRUFBUW1pQixFQUFPbmlCLE1BQ25CLE9BQUlBLEdBQ2lCLGlCQUFWQSxHQUNQbTNDLEVBQU9qNEMsS0FBS2MsRUFBTyxXQUNkMGdDLFFBQVF2QyxRQUFRbitCLEVBQU15NUMsU0FBU25iLE1BQUssU0FBU3QrQixHQUNsRHEyQixFQUFPLE9BQVFyMkIsRUFBT20rQixFQUFTaUIsTUFDOUIsU0FBU21CLEdBQ1ZsSyxFQUFPLFFBQVNrSyxFQUFLcEMsRUFBU2lCLE1BSTNCc0IsUUFBUXZDLFFBQVFuK0IsR0FBT3MrQixNQUFLLFNBQVNvYixHQUkxQ3YzQixFQUFPbmlCLE1BQVEwNUMsRUFDZnZiLEVBQVFoYyxNQUNQLFNBQVM2ZCxHQUdWLE9BQU8zSixFQUFPLFFBQVMySixFQUFPN0IsRUFBU2lCLE1BdkJ6Q0EsRUFBT2xsQixFQUFPd0csS0FpQ1oyVixDQUFPNVYsRUFBUUMsRUFBS3lkLEVBQVNpQixNQUlqQyxPQUFPbWEsRUFhTEEsRUFBa0JBLEVBQWdCamIsS0FDaENrYixFQUdBQSxHQUNFQSxLQStHVixTQUFTaEIsRUFBb0JGLEVBQVUvTixHQUNyQyxJQUFJOXBCLEVBQVM2M0IsRUFBUzV3QixTQUFTNmlCLEVBQVE5cEIsUUFDdkMsR0FBSUEsSUFBV3pDLEVBQVcsQ0FLeEIsR0FGQXVzQixFQUFRK04sU0FBVyxLQUVJLFVBQW5CL04sRUFBUTlwQixPQUFvQixDQUU5QixHQUFJNjNCLEVBQVM1d0IsU0FBaUIsU0FHNUI2aUIsRUFBUTlwQixPQUFTLFNBQ2pCOHBCLEVBQVE3cEIsSUFBTTFDLEVBQ2R3NkIsRUFBb0JGLEVBQVUvTixHQUVQLFVBQW5CQSxFQUFROXBCLFFBR1YsT0FBT2c0QixFQUlYbE8sRUFBUTlwQixPQUFTLFFBQ2pCOHBCLEVBQVE3cEIsSUFBTSxJQUFJakMsVUFDaEIsa0RBR0osT0FBT2c2QixFQUdULElBQUl2K0IsRUFBUzQrQixFQUFTcjRCLEVBQVE2M0IsRUFBUzV3QixTQUFVNmlCLEVBQVE3cEIsS0FFekQsR0FBb0IsVUFBaEJ4RyxFQUFPclcsS0FJVCxPQUhBMG1DLEVBQVE5cEIsT0FBUyxRQUNqQjhwQixFQUFRN3BCLElBQU14RyxFQUFPd0csSUFDckI2cEIsRUFBUStOLFNBQVcsS0FDWkcsRUFHVCxJQUFJa0IsRUFBT3ovQixFQUFPd0csSUFFbEIsT0FBTWk1QixFQU9GQSxFQUFLNXhCLE1BR1B3aUIsRUFBUStOLEVBQVNzQixZQUFjRCxFQUFLMzVDLE1BR3BDdXFDLEVBQVE3NkIsS0FBTzRvQyxFQUFTdUIsUUFRRCxXQUFuQnRQLEVBQVE5cEIsU0FDVjhwQixFQUFROXBCLE9BQVMsT0FDakI4cEIsRUFBUTdwQixJQUFNMUMsR0FVbEJ1c0IsRUFBUStOLFNBQVcsS0FDWkcsR0FORWtCLEdBM0JQcFAsRUFBUTlwQixPQUFTLFFBQ2pCOHBCLEVBQVE3cEIsSUFBTSxJQUFJakMsVUFBVSxvQ0FDNUI4ckIsRUFBUStOLFNBQVcsS0FDWkcsR0FvRFgsU0FBU3FCLEVBQWFDLEdBQ3BCLElBQUl4WSxFQUFRLENBQUV5WSxPQUFRRCxFQUFLLElBRXZCLEtBQUtBLElBQ1B4WSxFQUFNMFksU0FBV0YsRUFBSyxJQUdwQixLQUFLQSxJQUNQeFksRUFBTTJZLFdBQWFILEVBQUssR0FDeEJ4WSxFQUFNNFksU0FBV0osRUFBSyxJQUd4QnA3QyxLQUFLeTdDLFdBQVdqNEMsS0FBS28vQixHQUd2QixTQUFTOFksRUFBYzlZLEdBQ3JCLElBQUlybkIsRUFBU3FuQixFQUFNK1ksWUFBYyxHQUNqQ3BnQyxFQUFPclcsS0FBTyxnQkFDUHFXLEVBQU93RyxJQUNkNmdCLEVBQU0rWSxXQUFhcGdDLEVBR3JCLFNBQVM0OUIsRUFBUUosR0FJZi80QyxLQUFLeTdDLFdBQWEsQ0FBQyxDQUFFSixPQUFRLFNBQzdCdEMsRUFBWWh2QixRQUFRb3hCLEVBQWNuN0MsTUFDbENBLEtBQUs0N0MsT0FBTSxHQThCYixTQUFTMTFCLEVBQU8yTSxHQUNkLEdBQUlBLEVBQVUsQ0FDWixJQUFJZ3BCLEVBQWlCaHBCLEVBQVM0bEIsR0FDOUIsR0FBSW9ELEVBQ0YsT0FBT0EsRUFBZXQ3QyxLQUFLc3lCLEdBRzdCLEdBQTZCLG1CQUFsQkEsRUFBUzloQixLQUNsQixPQUFPOGhCLEVBR1QsSUFBS3hkLE1BQU13ZCxFQUFTenZCLFFBQVMsQ0FDM0IsSUFBSWhELEdBQUssRUFBRzJRLEVBQU8sU0FBU0EsSUFDMUIsT0FBUzNRLEVBQUl5eUIsRUFBU3p2QixRQUNwQixHQUFJbzFDLEVBQU9qNEMsS0FBS3N5QixFQUFVenlCLEdBR3hCLE9BRkEyUSxFQUFLMVAsTUFBUXd4QixFQUFTenlCLEdBQ3RCMlEsRUFBS3FZLE1BQU8sRUFDTHJZLEVBT1gsT0FIQUEsRUFBSzFQLE1BQVFnZSxFQUNidE8sRUFBS3FZLE1BQU8sRUFFTHJZLEdBR1QsT0FBT0EsRUFBS0EsS0FBT0EsR0FLdkIsTUFBTyxDQUFFQSxLQUFNMm9DLEdBSWpCLFNBQVNBLElBQ1AsTUFBTyxDQUFFcjRDLE1BQU9nZSxFQUFXK0osTUFBTSxHQStNbkMsT0F4bUJBa3hCLEVBQWtCdDRDLFVBQVl5NEMsRUFBRzd2QyxZQUFjMnZDLEVBQy9DQSxFQUEyQjN2QyxZQUFjMHZDLEVBQ3pDQyxFQUEyQjNCLEdBQ3pCMEIsRUFBa0J3QixZQUFjLG9CQVlsQ244QyxFQUFRbzhDLG9CQUFzQixTQUFTQyxHQUNyQyxJQUFJQyxFQUF5QixtQkFBWEQsR0FBeUJBLEVBQU9weEMsWUFDbEQsUUFBT3F4QyxJQUNIQSxJQUFTM0IsR0FHMkIsdUJBQW5DMkIsRUFBS0gsYUFBZUcsRUFBS3Q3QyxRQUloQ2hCLEVBQVF1OEMsS0FBTyxTQUFTRixHQVV0QixPQVRJbDdDLE9BQU95ekIsZUFDVHp6QixPQUFPeXpCLGVBQWV5bkIsRUFBUXpCLElBRTlCeUIsRUFBT3ZuQixVQUFZOGxCLEVBQ2IzQixLQUFxQm9ELElBQ3pCQSxFQUFPcEQsR0FBcUIsc0JBR2hDb0QsRUFBT2g2QyxVQUFZbEIsT0FBT1ksT0FBTys0QyxHQUMxQnVCLEdBT1RyOEMsRUFBUXc4QyxNQUFRLFNBQVNwNkIsR0FDdkIsTUFBTyxDQUFFKzRCLFFBQVMvNEIsSUFzRXBCMjRCLEVBQXNCQyxFQUFjMzRDLFdBQ3BDMjRDLEVBQWMzNEMsVUFBVTAyQyxHQUF1QixXQUM3QyxPQUFPMTRDLE1BRVRMLEVBQVFnN0MsY0FBZ0JBLEVBS3hCaDdDLEVBQVF5OEMsTUFBUSxTQUFTdkQsRUFBU0MsRUFBUy80QyxFQUFNZzVDLEdBQy9DLElBQUl0c0IsRUFBTyxJQUFJa3VCLEVBQ2J2VixFQUFLeVQsRUFBU0MsRUFBUy80QyxFQUFNZzVDLElBRy9CLE9BQU9wNUMsRUFBUW84QyxvQkFBb0JqRCxHQUMvQnJzQixFQUNBQSxFQUFLMWIsT0FBTzR1QixNQUFLLFNBQVNuYyxHQUN4QixPQUFPQSxFQUFPNEYsS0FBTzVGLEVBQU9uaUIsTUFBUW9yQixFQUFLMWIsV0F1S2pEMnBDLEVBQXNCRCxHQUV0QkEsRUFBRzdCLEdBQXFCLFlBT3hCNkIsRUFBR2hDLEdBQWtCLFdBQ25CLE9BQU96NEMsTUFHVHk2QyxFQUFHejNDLFNBQVcsV0FDWixNQUFPLHNCQWtDVHJELEVBQVF5bUIsS0FBTyxTQUFTdGtCLEdBQ3RCLElBQUlza0IsRUFBTyxHQUNYLElBQUssSUFBSXprQixLQUFPRyxFQUNkc2tCLEVBQUs1aUIsS0FBSzdCLEdBTVosT0FKQXlrQixFQUFLMVksVUFJRSxTQUFTcUQsSUFDZCxLQUFPcVYsRUFBS2hqQixRQUFRLENBQ2xCLElBQUl6QixFQUFNeWtCLEVBQUszaEIsTUFDZixHQUFJOUMsS0FBT0csRUFHVCxPQUZBaVAsRUFBSzFQLE1BQVFNLEVBQ2JvUCxFQUFLcVksTUFBTyxFQUNMclksRUFRWCxPQURBQSxFQUFLcVksTUFBTyxFQUNMclksSUFzQ1hwUixFQUFRdW1CLE9BQVNBLEVBTWpCaXpCLEVBQVFuM0MsVUFBWSxDQUNsQjRJLFlBQWF1dUMsRUFFYnlDLE1BQU8sU0FBU1MsR0FjZCxHQWJBcjhDLEtBQUsraUMsS0FBTyxFQUNaL2lDLEtBQUsrUSxLQUFPLEVBR1ovUSxLQUFLKzVDLEtBQU8vNUMsS0FBS2c2QyxNQUFRMzZCLEVBQ3pCcmYsS0FBS29wQixNQUFPLEVBQ1pwcEIsS0FBSzI1QyxTQUFXLEtBRWhCMzVDLEtBQUs4aEIsT0FBUyxPQUNkOWhCLEtBQUsraEIsSUFBTTFDLEVBRVhyZixLQUFLeTdDLFdBQVcxeEIsUUFBUTJ4QixJQUVuQlcsRUFDSCxJQUFLLElBQUkxN0MsS0FBUVgsS0FFUSxNQUFuQlcsRUFBS21TLE9BQU8sSUFDWjBsQyxFQUFPajRDLEtBQUtQLEtBQU1XLEtBQ2pCMFUsT0FBTzFVLEVBQUtxSCxNQUFNLE1BQ3JCaEksS0FBS1csR0FBUTBlLElBTXJCaTlCLEtBQU0sV0FDSnQ4QyxLQUFLb3BCLE1BQU8sRUFFWixJQUNJbXpCLEVBRFl2OEMsS0FBS3k3QyxXQUFXLEdBQ0xFLFdBQzNCLEdBQXdCLFVBQXBCWSxFQUFXcjNDLEtBQ2IsTUFBTXEzQyxFQUFXeDZCLElBR25CLE9BQU8vaEIsS0FBS3c4QyxNQUdkdkMsa0JBQW1CLFNBQVN3QyxHQUMxQixHQUFJejhDLEtBQUtvcEIsS0FDUCxNQUFNcXpCLEVBR1IsSUFBSTdRLEVBQVU1ckMsS0FDZCxTQUFTMDhDLEVBQU9DLEVBQUtDLEdBWW5CLE9BWEFyaEMsRUFBT3JXLEtBQU8sUUFDZHFXLEVBQU93RyxJQUFNMDZCLEVBQ2I3USxFQUFRNzZCLEtBQU80ckMsRUFFWEMsSUFHRmhSLEVBQVE5cEIsT0FBUyxPQUNqQjhwQixFQUFRN3BCLElBQU0xQyxLQUdOdTlCLEVBR1osSUFBSyxJQUFJeDhDLEVBQUlKLEtBQUt5N0MsV0FBV3I0QyxPQUFTLEVBQUdoRCxHQUFLLElBQUtBLEVBQUcsQ0FDcEQsSUFBSXdpQyxFQUFRNWlDLEtBQUt5N0MsV0FBV3I3QyxHQUN4Qm1iLEVBQVNxbkIsRUFBTStZLFdBRW5CLEdBQXFCLFNBQWpCL1ksRUFBTXlZLE9BSVIsT0FBT3FCLEVBQU8sT0FHaEIsR0FBSTlaLEVBQU15WSxRQUFVcjdDLEtBQUsraUMsS0FBTSxDQUM3QixJQUFJOFosRUFBV3JFLEVBQU9qNEMsS0FBS3FpQyxFQUFPLFlBQzlCa2EsRUFBYXRFLEVBQU9qNEMsS0FBS3FpQyxFQUFPLGNBRXBDLEdBQUlpYSxHQUFZQyxFQUFZLENBQzFCLEdBQUk5OEMsS0FBSytpQyxLQUFPSCxFQUFNMFksU0FDcEIsT0FBT29CLEVBQU85WixFQUFNMFksVUFBVSxHQUN6QixHQUFJdDdDLEtBQUsraUMsS0FBT0gsRUFBTTJZLFdBQzNCLE9BQU9tQixFQUFPOVosRUFBTTJZLGlCQUdqQixHQUFJc0IsR0FDVCxHQUFJNzhDLEtBQUsraUMsS0FBT0gsRUFBTTBZLFNBQ3BCLE9BQU9vQixFQUFPOVosRUFBTTBZLFVBQVUsT0FHM0IsS0FBSXdCLEVBTVQsTUFBTSxJQUFJdEQsTUFBTSwwQ0FMaEIsR0FBSXg1QyxLQUFLK2lDLEtBQU9ILEVBQU0yWSxXQUNwQixPQUFPbUIsRUFBTzlaLEVBQU0yWSxnQkFVOUJyQixPQUFRLFNBQVNoMUMsRUFBTTZjLEdBQ3JCLElBQUssSUFBSTNoQixFQUFJSixLQUFLeTdDLFdBQVdyNEMsT0FBUyxFQUFHaEQsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUl3aUMsRUFBUTVpQyxLQUFLeTdDLFdBQVdyN0MsR0FDNUIsR0FBSXdpQyxFQUFNeVksUUFBVXI3QyxLQUFLK2lDLE1BQ3JCeVYsRUFBT2o0QyxLQUFLcWlDLEVBQU8sZUFDbkI1aUMsS0FBSytpQyxLQUFPSCxFQUFNMlksV0FBWSxDQUNoQyxJQUFJd0IsRUFBZW5hLEVBQ25CLE9BSUFtYSxJQUNVLFVBQVQ3M0MsR0FDUyxhQUFUQSxJQUNENjNDLEVBQWExQixRQUFVdDVCLEdBQ3ZCQSxHQUFPZzdCLEVBQWF4QixhQUd0QndCLEVBQWUsTUFHakIsSUFBSXhoQyxFQUFTd2hDLEVBQWVBLEVBQWFwQixXQUFhLEdBSXRELE9BSEFwZ0MsRUFBT3JXLEtBQU9BLEVBQ2RxVyxFQUFPd0csSUFBTUEsRUFFVGc3QixHQUNGLzhDLEtBQUs4aEIsT0FBUyxPQUNkOWhCLEtBQUsrUSxLQUFPZ3NDLEVBQWF4QixXQUNsQnpCLEdBR0Y5NUMsS0FBS2c5QyxTQUFTemhDLElBR3ZCeWhDLFNBQVUsU0FBU3poQyxFQUFRaWdDLEdBQ3pCLEdBQW9CLFVBQWhCamdDLEVBQU9yVyxLQUNULE1BQU1xVyxFQUFPd0csSUFjZixNQVhvQixVQUFoQnhHLEVBQU9yVyxNQUNTLGFBQWhCcVcsRUFBT3JXLEtBQ1RsRixLQUFLK1EsS0FBT3dLLEVBQU93RyxJQUNNLFdBQWhCeEcsRUFBT3JXLE1BQ2hCbEYsS0FBS3c4QyxLQUFPeDhDLEtBQUsraEIsSUFBTXhHLEVBQU93RyxJQUM5Qi9oQixLQUFLOGhCLE9BQVMsU0FDZDloQixLQUFLK1EsS0FBTyxPQUNhLFdBQWhCd0ssRUFBT3JXLE1BQXFCczJDLElBQ3JDeDdDLEtBQUsrUSxLQUFPeXFDLEdBR1AxQixHQUdUbUQsT0FBUSxTQUFTMUIsR0FDZixJQUFLLElBQUluN0MsRUFBSUosS0FBS3k3QyxXQUFXcjRDLE9BQVMsRUFBR2hELEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJd2lDLEVBQVE1aUMsS0FBS3k3QyxXQUFXcjdDLEdBQzVCLEdBQUl3aUMsRUFBTTJZLGFBQWVBLEVBR3ZCLE9BRkF2N0MsS0FBS2c5QyxTQUFTcGEsRUFBTStZLFdBQVkvWSxFQUFNNFksVUFDdENFLEVBQWM5WSxHQUNQa1gsSUFLYixNQUFTLFNBQVN1QixHQUNoQixJQUFLLElBQUlqN0MsRUFBSUosS0FBS3k3QyxXQUFXcjRDLE9BQVMsRUFBR2hELEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJd2lDLEVBQVE1aUMsS0FBS3k3QyxXQUFXcjdDLEdBQzVCLEdBQUl3aUMsRUFBTXlZLFNBQVdBLEVBQVEsQ0FDM0IsSUFBSTkvQixFQUFTcW5CLEVBQU0rWSxXQUNuQixHQUFvQixVQUFoQnBnQyxFQUFPclcsS0FBa0IsQ0FDM0IsSUFBSWc0QyxFQUFTM2hDLEVBQU93RyxJQUNwQjI1QixFQUFjOVksR0FFaEIsT0FBT3NhLEdBTVgsTUFBTSxJQUFJMUQsTUFBTSwwQkFHbEIyRCxjQUFlLFNBQVN0cUIsRUFBVW9vQixFQUFZQyxHQWE1QyxPQVpBbDdDLEtBQUsyNUMsU0FBVyxDQUNkNXdCLFNBQVU3QyxFQUFPMk0sR0FDakJvb0IsV0FBWUEsRUFDWkMsUUFBU0EsR0FHUyxTQUFoQmw3QyxLQUFLOGhCLFNBR1A5aEIsS0FBSytoQixJQUFNMUMsR0FHTnk2QixJQVFKbjZDLEVBdnJCSyxDQThyQmlCQyxFQUFPRCxTQUd0QyxJQUNFeTlDLG1CQUFxQjlFLEVBQ3JCLE1BQU8rRSxHQVVQLzlCLFNBQVMsSUFBSyx5QkFBZEEsQ0FBd0NnNUIsSyxjQ3B0QjFDMTRDLEVBQU9ELFFBQVUsU0FBUzI5QyxHQUN6QixJQUFLQSxFQUFlQyxnQkFBaUIsQ0FDcEMsSUFBSTM5QyxFQUFTa0IsT0FBT1ksT0FBTzQ3QyxHQUV0QjE5QyxFQUFPNDlDLFdBQVU1OUMsRUFBTzQ5QyxTQUFXLElBQ3hDMThDLE9BQU9DLGVBQWVuQixFQUFRLFNBQVUsQ0FDdkNvQixZQUFZLEVBQ1pDLElBQUssV0FDSixPQUFPckIsRUFBT1MsS0FHaEJTLE9BQU9DLGVBQWVuQixFQUFRLEtBQU0sQ0FDbkNvQixZQUFZLEVBQ1pDLElBQUssV0FDSixPQUFPckIsRUFBT1EsS0FHaEJVLE9BQU9DLGVBQWVuQixFQUFRLFVBQVcsQ0FDeENvQixZQUFZLElBRWJwQixFQUFPMjlDLGdCQUFrQixFQUUxQixPQUFPMzlDLEksMkNDWU8sTUFsQ2YsU0FBa0J5QyxHQUNoQixJQUFJbzdDLEVBQW1CcDdDLEVBQU9xN0MsUUFBUTE3QyxVQUVFLG1CQUE3Qnk3QyxFQUFpQkUsVUFDMUJGLEVBQWlCRSxRQUFVRixFQUFpQkcsbUJBQXFCSCxFQUFpQkksb0JBQXNCSixFQUFpQkssdUJBQXlCLFNBQWlCOXNDLEdBS2pLLElBSkEsSUFDSStzQyxHQURVLzlDLEtBQ1UwQyxVQURWMUMsS0FDOEJnK0MsZUFBZXByQyxpQkFBaUI1QixHQUN4RXZKLEVBQVEsRUFFTHMyQyxFQUFTdDJDLElBQVVzMkMsRUFBU3QyQyxLQUpyQnpILFFBS1Z5SCxFQUdKLE9BQU93MkMsUUFBUUYsRUFBU3QyQyxNQUlZLG1CQUE3QmcyQyxFQUFpQlMsVUFDMUJULEVBQWlCUyxRQUFVLFNBQWlCbHRDLEdBRzFDLElBRkEsSUFBSStqQyxFQUFVLzBDLEtBRVArMEMsR0FBZ0MsSUFBckJBLEVBQVExakMsVUFBZ0IsQ0FDeEMsR0FBSTBqQyxFQUFRNEksUUFBUTNzQyxHQUNsQixPQUFPK2pDLEVBR1RBLEVBQVVBLEVBQVFvSixXQUdwQixPQUFPLFE7Ozs7Ozs7Ozs7OztBQ2JiLElBQVN2NUMsVUFBVSxXQUFZLENBQUMsaUJBQWlCLHNCQUFzQixjQUFjLFdBRW5GLElBQUl0QixFQUFTLFNBQVNULEdBQ3BCLElBRUN6QyxFQUZHbUQsRUFBSSxHQUNQbEQsRUFBSXdDLEVBQUVPLE9BRVAsSUFBS2hELEVBQUksRUFBR0EsSUFBTUMsRUFBR2tELEVBQUVDLEtBQUtYLEVBQUV6QyxPQUM5QixPQUFPbUQsR0FFUjY2QyxFQUFjLFNBQVNyekMsRUFBTW1HLEVBQVM5USxHQUNyQyxJQUNDOEIsRUFBR2lSLEVBREFrckMsRUFBTXR6QyxFQUFLdXpDLE1BRWYsSUFBS3A4QyxLQUFLbThDLEVBQ1RsckMsRUFBTWtyQyxFQUFJbjhDLEdBQ1Y2SSxFQUFLN0ksR0FBc0IsbUJBQVYsRUFBd0JpUixFQUFJL1MsRUFBRzhRLEVBQVE5USxHQUFJOFEsR0FBV2lDLEVBQUkvUyxFQUFJK1MsRUFBSS9QLGVBRTdFMkgsRUFBS3V6QyxPQUdiQyxFQUFjLFNBQVN4dkMsR0FDdEIsR0FBa0IsbUJBQVIsRUFDVCxPQUFPQSxFQUVSLElBQUloRSxFQUFzQixpQkFBUixFQUFvQmdFLEVBQUksQ0FBQ3NqQyxLQUFLdGpDLEdBQy9DbEosRUFBT2tGLEVBQUtsRixLQUNab0gsRUFBT2xDLEVBQUtrQyxNQUFRLEVBQ3BCdXhDLEVBQU96ekMsRUFBS3l6QyxNQUFRLEVBQ3BCQyxFQUFRLEdBQ1JDLEVBQWdCcnBDLE1BQU1wSSxHQUN0QjB4QyxFQUFPNXpDLEVBQUs0ekMsS0FDWmh2QyxFQUFRLENBQUNpdkMsT0FBTyxHQUFLdHJDLElBQUksR0FBR3JHLElBQVMsRUFDdEMsT0FBTyxTQUFTN00sRUFBRzJHLEVBQVFsRSxHQUMxQixJQUVDZzhDLEVBQVNDLEVBQVNqcUIsRUFBR21JLEVBQUd0OEIsRUFBR3VGLEVBQUcrbkIsRUFBSzdqQixFQUFLaTdCLEVBRnJDL2tDLEdBQUt3QyxHQUFLa0ksR0FBTTNILE9BQ25CMjdDLEVBQVlOLEVBQU1wK0MsR0FFbkIsSUFBSzArQyxFQUFXLENBRWYsS0FEQTNaLEVBQXNCLFNBQWRyNkIsRUFBS2kwQyxLQUFtQixHQUFLajBDLEVBQUtpMEMsTUFBUSxDQUFDcnFCLE1BQVcsSUFDbkQsQ0FFVixJQURBM0csR0FBTzJHLElBQ0EzRyxHQUFPQSxFQUFNbnJCLEVBQUV1aUMsS0FBUTZaLHdCQUF3QnZiLE9BQVMwQixFQUFPL2tDLElBQ3RFK2tDLElBT0QsSUFMQTJaLEVBQVlOLEVBQU1wK0MsR0FBSyxHQUN2QncrQyxFQUFVSCxFQUFpQngwQyxLQUFLQyxJQUFJaTdCLEVBQU0va0MsR0FBS3NQLEVBQVMsR0FBTTFDLEVBQU9tNEIsRUFDckUwWixFQUFVSixFQUFnQnIrQyxFQUFJc1AsRUFBUXkxQixFQUFPLEdBQU9uNEIsRUFBT200QixFQUFRLEVBQ25FcFgsRUFBTSxFQUNON2pCLEVBQU13cUIsSUFDRDF1QixFQUFJLEVBQUdBLEVBQUk1RixFQUFHNEYsSUFDbEI0dUIsRUFBSzV1QixFQUFJbS9CLEVBQVF5WixFQUNqQjdoQixFQUFJOGhCLEdBQVk3NEMsRUFBSW0vQixFQUFRLEdBQzVCMlosRUFBVTk0QyxHQUFLdkYsRUFBS2krQyxFQUFrQ3owQyxLQUFLaXZCLElBQWMsTUFBVHdsQixFQUFnQjNoQixFQUFJbkksR0FBekQzcUIsS0FBSzgrQixLQUFLblUsRUFBSUEsRUFBSW1JLEVBQUlBLEdBQzdDdDhCLEVBQUlzdEIsSUFDUEEsRUFBTXR0QixHQUVIQSxFQUFJeUosSUFDUEEsRUFBTXpKLEdBR1JxK0MsRUFBVS93QixJQUFNQSxFQUFNN2pCLEVBQ3RCNDBDLEVBQVU1MEMsSUFBTUEsRUFDaEI0MEMsRUFBVWh3QyxFQUFJMU8sRUFBSTBLLEVBQUttMEMsUUFBV24wQyxFQUFLc25DLE1BQVFqTixFQUFPL2tDLEVBQUlBLEVBQUksRUFBS3MrQyxFQUEyQyxNQUFUQSxFQUFldCtDLEVBQUkra0MsRUFBT0EsRUFBckRsN0IsS0FBSzhqQixJQUFJb1gsRUFBTS9rQyxFQUFJK2tDLEtBQTRDLEVBQ3pJMlosRUFBVXg3QyxFQUFLbEQsRUFBSSxFQUFLbStDLEVBQU9uK0MsRUFBSW0rQyxFQUdwQyxPQURBbitDLEdBQUswK0MsRUFBVTMrQyxHQUFLMitDLEVBQVU1MEMsS0FBTzQwQyxFQUFVL3dCLElBQ3hDK3dCLEVBQVV4N0MsR0FBS3NDLEVBQU9BLEVBQUtRLFNBQVNoRyxHQUFLQSxHQUFLMCtDLEVBQVVod0MsSUFHakVvd0MsRUFBVyxTQUFTcDRDLEVBQVErRCxFQUFVQyxHQUNyQ3hJLEVBQUEsRUFBVWhDLEtBQUtQLEtBQU0rRyxFQUFRK0QsRUFBVUMsR0FDdkMvSyxLQUFLby9DLE9BQVMsRUFDZHAvQyxLQUFLcS9DLE9BQTRCLElBQW5Cci9DLEtBQUsrSyxLQUFLcU0sUUFBbUJwWCxLQUFLK0ssS0FBSzRNLFNBQ3JEM1gsS0FBS3MvQyxRQUFVdC9DLEtBQUsrSyxLQUFLc00sUUFBVSxFQUNuQ3JYLEtBQUt1L0MsYUFBZXYvQyxLQUFLK0ssS0FBS3VNLGFBQWUsRUFDekN0WCxLQUFLcy9DLFNBQ1J0L0MsS0FBS3dPLFVBQVMsR0FFZnhPLEtBQUs0TixPQUFTdXhDLEVBQVNuOUMsVUFBVTRMLFFBR2xDNHhDLEVBQXFCajlDLEVBQUEsRUFBVWlULFdBQy9CeEQsRUFBY3d0QyxFQUFtQnJ1QyxXQUNqQ3pOLEVBQVc4N0MsRUFBbUIvcEMsUUFDOUJ2VCxFQUFJaTlDLEVBQVNuOUMsVUFBWU8sRUFBQSxFQUFVeVgsR0FBRyxHQUFJLEdBQUssSUFDL0N5bEMsRUFBYyxHQUVmTixFQUFTN3NDLFFBQVUsUUFDbkJwUSxFQUFFMEksWUFBY3UwQyxFQUNoQmo5QyxFQUFFcU0sT0FBT25DLEtBQU0sRUFDZit5QyxFQUFTaGpDLGFBQWVnakMsRUFBUy9pQyxtQkFBcUI3WixFQUFBLEVBQVU0WixhQUNoRWdqQyxFQUFTbGpDLFlBQWMxWixFQUFBLEVBQVUwWixZQUNqQ2tqQyxFQUFTcjFDLGFBQWV2SCxFQUFBLEVBQVV1SCxhQUNsQ3ExQyxFQUFTanpDLE9BQVMzSixFQUFBLEVBQVUySixPQUM1Qml6QyxFQUFTdnhDLE9BQVNyTCxFQUFBLEVBQVVxTCxPQUM1QnV4QyxFQUFTTyxXQUFhbkIsRUFFdEJyOEMsRUFBRTRMLFdBQWEsV0FNZCxPQUxBOU4sS0FBS3EvQyxPQUE0QixJQUFuQnIvQyxLQUFLK0ssS0FBS3FNLFFBQW1CcFgsS0FBSytLLEtBQUs0TSxTQUNyRDNYLEtBQUtzL0MsUUFBVXQvQyxLQUFLK0ssS0FBS3NNLFFBQVUsRUFDbkNyWCxLQUFLdS9DLGFBQWV2L0MsS0FBSytLLEtBQUt1TSxhQUFlLEVBQzdDdFgsS0FBSzIvQyxVQUFZLEtBQ2pCMy9DLEtBQUt3TyxVQUFTLEdBQ1BqTSxFQUFBLEVBQVVQLFVBQVU4TCxXQUFXdk4sS0FBS1AsT0FHNUNrQyxFQUFFMDlDLFNBQVcsU0FBUzcwQyxFQUFNODBDLEdBQzNCLElBR0MzOUMsRUFGQTQ5QyxFQURVOS9DLEtBQ00yUCxNQUNoQm9LLEVBRlUvWixLQUVPK0ssS0FBS1EsaUJBQW1CUixFQUFLUSxnQkFXL0MsSUFBS3JKLEtBVEQyOUMsR0FKTzcvQyxLQUlla0osV0FKZmxKLEtBSWlDNE0sVUFBVVosUUFKM0NoTSxLQUtMa0osV0FMS2xKLEtBS2E0TSxVQUFVWixNQUx2QmhNLEtBTUx3TyxVQUFTLEdBTkp4TyxLQU9Eb00sSUFQQ3BNLEtBUUorTixVQUFTLEdBQU0sR0FSWC9OLEtBVUo0TSxVQUFVMEQsT0FWTnRRLFVBVXdCa0osV0FWeEJsSixLQVUwQ2tMLFNBRzNDSCxFQWJDL0ssS0FjTCtLLEtBQUs3SSxHQUFLNkksRUFBSzdJLEdBRXJCLEdBaEJXbEMsS0FnQkZxTSxVQUFZME4sRUFDcEIsR0FBSThsQyxFQWpCTTcvQyxLQWtCSnFNLFVBQVcsRUFDWjBOLEdBbkJLL1osS0FvQkg0TixPQUFPLEdBQUcsR0FBTSxRQVN0QixHQTdCUzVOLEtBdUJBb00sS0F2QkFwTSxLQXdCSCtOLFVBQVMsR0FBTSxHQXhCWi9OLEtBMEJBb1MseUJBMUJBcFMsS0EwQmdDaVMsVUFDeEMxUCxFQUFBLEVBQVU4WCxlQUFlLGFBM0JqQnJhLFdBNkJBZ00sTUE3QkFoTSxLQTZCYWdMLFVBQVksS0FBTyxDQUN4QyxJQUFJbVEsRUE5QkluYixLQThCWXVNLFdBOUJadk0sS0ErQkg0TixPQUFPLEdBQUcsR0FBTSxHQS9CYjVOLEtBZ0NIcU0sVUFBVyxFQWhDUnJNLEtBaUNINE4sT0FBT3VOLEdBQVUsR0FBTSxRQUk1QixHQXJDUW5iLEtBbUNIcU0sVUFBVyxFQW5DUnJNLEtBb0NIMFosUUFwQ0cxWixLQXFDQ2dNLE1BQVEsR0FBSytOLEVBR3JCLElBRkEsSUFDcUJnbUMsRUFEakJDLEVBQU0sR0FBSyxFQUFJRixHQUNsQjFzQyxFQXZDTXBULEtBdUNJaVMsU0FDSm1CLEdBQ04yc0MsRUFBVzNzQyxFQUFHalIsRUFBSWlSLEVBQUczUyxFQUNyQjJTLEVBQUczUyxHQUFLdS9DLEVBQ1I1c0MsRUFBR2pSLEVBQUk0OUMsRUFBVzNzQyxFQUFHM1MsRUFDckIyUyxFQUFLQSxFQUFHM0csTUFNYixPQWxEV3pNLE1BcURaa0MsRUFBRTBMLE9BQVMsU0FBU2pFLEVBQU11RCxFQUFnQlcsR0FDcEM3TixLQUFLcU0sVUFBaUMsSUFBbkJyTSxLQUFLZ0wsV0FBbUJoTCxLQUFLK0ssS0FBS3NNLFFBQ3pEclgsS0FBSzhOLGFBRU4sSUFPQ21OLEVBQVk5VCxFQUFVaU0sRUFBSTZzQyxFQUFlLytDLEVBQUdnRSxFQUFNbVcsRUFBS0gsRUFBYXZELEVBTnBFdW9DLEVBRFVsZ0QsS0FDUW1NLE9BRFJuTSxLQUM2QzJOLGdCQUQ3QzNOLEtBQ3VCaUwsZUFDakNrUSxFQUZVbmIsS0FFTWdNLE1BQ2hCbTBDLEVBSFVuZ0QsS0FHV3VNLFdBQ3JCNnpDLEVBSlVwZ0QsS0FJT28vQyxPQUNqQnQwQyxFQUxVOUssS0FLTWdMLFVBQ2hCb1EsRUFOVXBiLEtBTWF3TSxhQTRHeEIsR0ExR0k3QyxHQUFRdTJDLEVBNUZELE1BNEZ3QnYyQyxHQUFRLEdBUmhDM0osS0FTTHVNLFdBQWEyekMsRUFUUmxnRCxLQVVMby9DLE9BVktwL0MsS0FVU3MvQyxRQVZUdC9DLEtBV0RxL0MsT0FBK0IsSUFBUCxFQVh2QnIvQyxLQVdjby9DLFNBWGRwL0MsS0FZSmdNLE1BQVEsRUFaSmhNLEtBYUoyUCxNQWJJM1AsS0FhU3dTLE1BQU1sTSxTQWJmdEcsS0FhK0J3UyxNQUFNbk0sU0FBUyxHQUFLLElBYm5EckcsS0FlSmdNLE1BQVFsQixFQWZKOUssS0FnQkoyUCxNQWhCSTNQLEtBZ0JTd1MsTUFBTWxNLFNBaEJmdEcsS0FnQitCd1MsTUFBTW5NLFNBQVMsR0FBSyxHQWhCbkRyRyxLQWtCQXlMLFlBQ1R3UCxHQUFhLEVBQ2I5VCxFQUFXLGFBQ1gwRyxFQUFTQSxHQXJCQTdOLEtBcUJjNE0sVUFBVXVELG9CQUVqQixJQUFickYsSUF2Qk05SyxLQXVCbUJxTSxXQXZCbkJyTSxLQXVCcUMrSyxLQUFLeU0sTUFBUTNKLEtBdkJsRDdOLEtBd0JBa0osYUF4QkFsSixLQXdCb0I0TSxVQUFVNUIsWUFDdENyQixFQUFPLElBRUp5UixFQUFrQixHQUFNelIsR0FBUSxHQUFLQSxJQS9HaEMsYUErR3VEeVIsR0FBOEMsWUEzQnJHcGIsS0EyQjRGd0wsT0FBeUI0UCxJQUFvQnpSLElBQ2pKa0UsR0FBUSxFQUNKdU4sRUFqSEksT0FrSFBqVSxFQUFXLHNCQTlCSm5ILEtBaUNKd00sYUFBZTBPLEdBQWdCaE8sR0FBa0J2RCxHQUFReVIsSUFBb0J6UixFQUFRQSxFQXJIakYsT0F3SEFBLEVBeEhBLE1Bb0ZBM0osS0FxQ0x1TSxXQXJDS3ZNLEtBcUNhZ00sTUFyQ2JoTSxLQXFDMEJvL0MsT0FBUyxFQXJDbkNwL0MsS0FzQ0wyUCxNQXRDSzNQLEtBc0NRd1MsTUFBTWxNLFNBdENkdEcsS0FzQzhCd1MsTUFBTW5NLFNBQVMsR0FBSyxHQUN0QyxJQUFsQjg1QyxHQUFxQyxJQUFicjFDLEdBQWtCc1EsRUFBa0IsS0FDL0RqVSxFQUFXLG9CQUNYOFQsRUF6Q1NqYixLQXlDU3lMLFdBRWY5QixHQS9ITSxLQWdJVEEsRUFBTyxFQUNHQSxFQUFPLElBN0NSM0osS0E4Q0pzTCxTQUFVLEVBQ0UsSUFBYlIsSUEvQ0s5SyxLQStDb0JxTSxXQS9DcEJyTSxLQStDc0MrSyxLQUFLeU0sTUFBUTNKLEtBQ3ZEdU4sR0FBbUIsSUFDdEJ2TixHQUFRLEdBakREN04sS0FtREh3TSxhQUFlME8sR0FBZ0JoTyxHQUFrQnZELEdBQVF5UixJQUFvQnpSLEVBQVFBLEVBdklsRixPQW9GQTNKLEtBc0RBcU0sV0FDVHdCLEdBQVEsS0F2REM3TixLQTBETHVNLFdBMURLdk0sS0EwRGFnTSxNQUFRckMsRUFDVixJQTNEWDNKLEtBMkREcy9DLFVBQ1JXLEVBQWdCbjFDLEVBNURQOUssS0E0RHVCdS9DLGFBNUR2QnYvQyxLQTZESm8vQyxPQTdESXAvQyxLQTZEV3VNLFdBQWEwekMsR0FBa0IsRUFDL0IsSUE5RFhqZ0QsS0E4REFvL0MsUUE5REFwL0MsS0E4RHVCby9DLFNBOUR2QnAvQyxLQThEdUN1TSxXQUFhMHpDLEdBQWlCRSxHQUFpQngyQyxHQTlEdEYzSixLQStESG8vQyxTQS9ER3AvQyxLQWlFSmdNLE1BakVJaE0sS0FpRVN1TSxXQWpFVHZNLEtBaUU0Qm8vQyxPQUFTYSxFQWpFckNqZ0QsS0FrRUFxL0MsT0FBaUMsSUFBUCxFQWxFMUJyL0MsS0FrRWlCby9DLFVBbEVqQnAvQyxLQW1FSGdNLE1BQVFsQixFQW5FTDlLLEtBbUVxQmdNLE9BQzdCMkwsRUFwRVEzWCxLQW9FUTIvQyxXQXBFUjMvQyxLQW9FMEIrSyxLQUFLNE0sWUFwRS9CM1gsS0FzRUcyL0MsYUFDUSxJQUFiaG9DLEdBdkVFM1gsS0F1RXlCcU0sU0F2RXpCck0sS0EyRUEyL0MsVUFBWWhvQyxHQUF5QixJQUFiQSxFQTNFeEIzWCxLQTJFa0R3UyxNQUFTbUYsYUFBb0IsSUFBUUEsRUFBVyxJQUFLalMsSUFBSWlTLElBSGhIQSxFQXhFSzNYLEtBd0VXK0ssS0FBS2xGLEtBeEVoQjdGLEtBeUVBMi9DLFVBQVlob0MsRUFBWUEsRUFBb0NBLGFBQW9CLElBQVFBLEVBQWlDLG1CQUFmLEVBQTZCLElBQUksSUFBS0EsRUF6RWhKM1gsS0F5RStKK0ssS0FBS29NLFlBQWMsSUFBS3pSLElBQUlpUyxJQUFhcFYsRUFBQSxFQUFVZ1EsWUFBL0toUSxFQUFBLEVBQVVnUSxjQXpFN0N2UyxLQThFRjJQLE1BQVFnSSxFQUFXLEVBQUlBLEVBQVN0UixVQUFVeUUsRUE5RXhDOUssS0E4RXdEZ00sT0FBU2xCLEdBQVksSUE5RTdFOUssS0FpRkFnTSxNQUFRbEIsRUFqRlI5SyxLQWtGSGdNLE1BQVFsQixFQWxGTDlLLEtBbUZPZ00sTUFBUSxJQW5GZmhNLEtBb0ZIZ00sTUFBUSxJQXBGTGhNLEtBdUZEa2EsWUFBY3ZDLEdBQ3RCelcsRUF4RlNsQixLQXdGQWdNLE1BQVFsQixHQUdKLEtBRmI1RixFQXpGU2xGLEtBeUZHa2EsWUFFZ0IsSUFBVGhWLEdBQWNoRSxHQUFLLE1BQ3JDQSxFQUFJLEVBQUlBLEdBRUksSUFBVGdFLElBQ0hoRSxHQUFLLEdBRU0sS0FQWm1hLEVBMUZTcmIsS0EwRkVtYSxZQVFWalosR0FBS0EsRUFDYSxJQUFSbWEsRUFDVm5hLEdBQUtBLEVBQUlBLEVBQ1MsSUFBUm1hLEVBQ1ZuYSxHQUFLQSxFQUFJQSxFQUFJQSxFQUNLLElBQVJtYSxJQUNWbmEsR0FBS0EsRUFBSUEsRUFBSUEsRUFBSUEsR0F4R1RsQixLQTBHSjJQLE1BQWtCLElBQVR6SyxFQUFjLEVBQUloRSxFQUFjLElBQVRnRSxFQUFjaEUsRUExRzFDbEIsS0EwR29EZ00sTUFBUWxCLEVBQVcsR0FBTzVKLEVBQUksRUFBSSxFQUFLQSxFQUFJLEdBRTdGeVcsSUE1R0YzWCxLQTZHSjJQLE1BN0dJM1AsS0E2R1N3UyxNQUFNbk0sU0E3R2ZyRyxLQTZHNkJnTSxNQUFRbEIsS0FLNUNxUSxJQWxIT25iLEtBa0hXZ00sT0FBVTZCLEdBQVN1eUMsSUFsSDlCcGdELEtBa0hpRG8vQyxPQUE1RCxDQUtPLElBdkhJcC9DLEtBdUhNcU0sU0FBVSxDQUUxQixHQXpIVXJNLEtBd0hMMFosU0F4SEsxWixLQXlIQXFNLFVBekhBck0sS0F5SGlCb00sSUFDMUIsT0FDTSxJQUFLeUIsR0EzSEY3TixLQTJIZ0JpUyxZQUFpQyxJQTNIakRqUyxLQTJIbUMrSyxLQUFLeU0sTUEzSHhDeFgsS0EySCtEZ0wsV0EzSC9EaEwsS0EySG1GK0ssS0FBS3lNLE9BM0h4RnhYLEtBMkhzR2dMLFdBTy9HLE9BbElTaEwsS0E0SEpnTSxNQUFRbVAsRUE1SEpuYixLQTZISnVNLFdBQWE0ekMsRUE3SFRuZ0QsS0E4SEp3TSxhQUFlNE8sRUE5SFhwYixLQStISm8vQyxPQUFTZ0IsRUFDZFosRUFBbUI5cEMsV0FBV2xTLEtBaElyQnhELGdCQWlJSnFTLE1BQVEsQ0FBQzFJLEVBQU11RCxLQWpJWGxOLEtBcUlEZ00sT0FBVWlQLEdBQWV0RCxFQUV2QnNELEdBQWNqYixLQUFLd1MsTUFBTWxNLFdBQWFxUixJQXZJdkMzWCxLQXdJSjJQLE1BeElJM1AsS0F3SVN3UyxNQUFNbk0sU0FBeUIsSUF4SXhDckcsS0F3SThCZ00sTUFBZSxFQUFJLElBeElqRGhNLEtBc0lKMlAsTUF0SUkzUCxLQXNJU3dTLE1BQU1uTSxTQXRJZnJHLEtBc0k2QmdNLE1BQVFsQixHQTZCaEQsS0F4Qm1CLElBM0lSOUssS0EySUZxUyxRQTNJRXJTLEtBNElMcVMsT0FBUSxHQTVJSHJTLEtBK0lEc0wsVUEvSUN0TCxLQStJa0JzTSxTQS9JbEJ0TSxLQStJa0NnTSxRQUFVbVAsR0FBWXhSLEdBQVEsSUEvSWhFM0osS0FnSkxzTCxTQUFVLEdBRU0sSUFBbEI2MEMsSUFDbUIsSUFuSlpuZ0QsS0FtSkRxTSxVQUFrQjFDLEVBQU8sR0FuSnhCM0osS0FvSkowWixRQXBKSTFaLEtBc0pEbVMsV0FDSnhJLEdBQVEsRUF2SkgzSixLQXdKSG1TLFNBQVN2RSxPQUFPakUsR0FBTSxFQUFNa0UsR0FDdEIxRyxJQUNYQSxFQUFXLGFBMUpIbkgsS0E2SkQrSyxLQUFLMkwsVUFBaUMsSUE3SnJDMVcsS0E2SnNCdU0sWUFBaUMsSUFBYnpCLEdBQXFCb0MsR0E3Si9EbE4sS0E4Sko4TyxVQUFVLGFBSWpCc0UsRUFsS1dwVCxLQWtLRGlTLFNBQ0htQixHQUNGQSxFQUFHN0ksRUFDTjZJLEVBQUc5UixFQUFFOFIsRUFBR2xSLEdBQUdrUixFQUFHM1MsRUFyS0xULEtBcUtjMlAsTUFBUXlELEVBQUdqUixHQUVsQ2lSLEVBQUc5UixFQUFFOFIsRUFBR2xSLEdBQUtrUixFQUFHM1MsRUF2S1BULEtBdUtnQjJQLE1BQVF5RCxFQUFHalIsRUFFckNpUixFQUFLQSxFQUFHM0csTUF6S0V6TSxLQTRLRjJNLFlBQ0poRCxFQUFPLEdBN0tEM0osS0E2S2FtUyxVQTdLYm5TLEtBNks4QmtKLFlBN0s5QmxKLEtBOEtKbVMsU0FBU3ZFLE9BQU9qRSxHQUFNLEVBQU1rRSxHQUU3QlgsSUFoTEtsTixLQWdMb0J1TSxhQUFlNHpDLEdBQWlCaDVDLElBaExwRG5ILEtBaUxKOE8sVUFBVSxhQWpMTjlPLEtBb0xGby9DLFNBQVdnQixJQUFnQmx6QyxHQXBMekJsTixLQW9MbURvTSxLQXBMbkRwTSxLQW9MaUUrSyxLQUFLaU0sVUFwTHRFaFgsS0FxTEw4TyxVQUFVLGFBRVozSCxJQXZMT25ILEtBdUxhb00sTUFBT3lCLElBQzFCbEUsRUFBTyxHQXhMRDNKLEtBd0xXbVMsV0F4TFhuUyxLQXdMNkIyTSxXQXhMN0IzTSxLQXdMK0NrSixZQXhML0NsSixLQXlMSm1TLFNBQVN2RSxPQUFPakUsR0FBTSxFQUFNa0UsR0FFOUJvTixJQTNMTWpiLEtBNExBNE0sVUFBVXVELG9CQTVMVm5RLEtBNkxIK04sVUFBUyxHQUFPLEdBN0xiL04sS0ErTEpzTCxTQUFVLElBRVg0QixHQWpNS2xOLEtBaU1rQitLLEtBQUs1RCxJQWpNdkJuSCxLQWtNSjhPLFVBQVUzSCxHQUVDLElBQWIyRCxHQXhSTSxPQW9GQTlLLEtBb01pQndNLGNBeFJqQixPQXdSOEMwTyxJQXBNOUNsYixLQXFNSndNLGFBQWUsVUFsRmpCMnpDLElBbkhNbmdELEtBbUhpQnVNLFlBbkhqQnZNLEtBbUhzQzJNLFlBQWdCTyxHQW5IdERsTixLQW9ISjhPLFVBQVUsY0F3RmxCcXdDLEVBQVNubEMsR0FBSyxTQUFTalQsRUFBUStELEVBQVVDLEdBQ3hDLE9BQU8sSUFBSW8wQyxFQUFTcDRDLEVBQVErRCxFQUFVQyxJQUd2Q28wQyxFQUFTbHlDLEtBQU8sU0FBU2xHLEVBQVErRCxFQUFVQyxHQUcxQyxPQUZBQSxFQUFLc0wsY0FBZSxFQUNwQnRMLEVBQUtRLGdCQUEyQyxHQUF4QlIsRUFBS1EsZ0JBQ3RCLElBQUk0ekMsRUFBU3A0QyxFQUFRK0QsRUFBVUMsSUFHdkNvMEMsRUFBU3ZqQyxPQUFTLFNBQVM3VSxFQUFRK0QsRUFBVStRLEVBQVVDLEdBR3RELE9BRkFBLEVBQU94RixRQUFVdUYsRUFDakJDLEVBQU92USxnQkFBNkMsR0FBMUJ1USxFQUFPdlEsaUJBQXdELEdBQTVCc1EsRUFBU3RRLGdCQUMvRCxJQUFJNHpDLEVBQVNwNEMsRUFBUStELEVBQVVnUixJQUd2Q3FqQyxFQUFTa0IsVUFBWWxCLEVBQVNtQixNQUFRLFNBQVNwdkMsRUFBU3BHLEVBQVVDLEVBQU0yRixFQUFTNnZDLEVBQWVDLEVBQXFCQyxHQUNwSCxJQUlDcGdELEVBQUd3TyxFQUFNek8sRUFBRzhCLEVBSlRXLEVBQUksR0FDUDY5QyxFQUFjbkMsRUFBWXh6QyxFQUFLMkYsU0FBV0EsR0FDMUM0dEMsRUFBUXZ6QyxFQUFLdXpDLE1BQ2JxQyxHQUFhNTFDLEVBQUt1TCxTQUFXbXBDLEdBQWFuQixNQVkzQyxJQVZLNTZDLEVBQVN3TixLQUNXLGlCQUFkLElBQ1RBLEVBQVUzTyxFQUFBLEVBQVV5TyxTQUFTRSxJQUFZQSxHQUV0Q2MsRUFBWWQsS0FDZkEsRUFBVTVOLEVBQU80TixLQUluQjdRLEdBREE2USxFQUFVQSxHQUFXLElBQ1Q5TixPQUFTLEVBQ2hCaEQsRUFBSSxFQUFHQSxHQUFLQyxFQUFHRCxJQUFLLENBRXhCLElBQUs4QixLQURMMk0sRUFBTyxHQUNHOUQsRUFDVDhELEVBQUszTSxHQUFLNkksRUFBSzdJLEdBU2hCLEdBUElvOEMsSUFDSEYsRUFBWXZ2QyxFQUFNcUMsRUFBUzlRLEdBQ04sTUFBakJ5TyxFQUFLL0QsV0FDUkEsRUFBVytELEVBQUsvRCxnQkFDVCtELEVBQUsvRCxXQUdWNjFDLEVBQVcsQ0FFZCxJQUFLeitDLEtBREx5K0MsRUFBWTl4QyxFQUFLeUgsUUFBVSxHQUNqQnZMLEVBQUt1TCxRQUNkcXFDLEVBQVV6K0MsR0FBSzZJLEVBQUt1TCxRQUFRcFUsR0FFN0JrOEMsRUFBWXZ2QyxFQUFLeUgsUUFBU3BGLEVBQVM5USxHQUVwQ3lPLEVBQUt6RCxNQUFRczFDLEVBQVl0Z0QsRUFBRzhRLEVBQVE5USxHQUFJOFEsSUFBWXJDLEVBQUt6RCxPQUFTLEdBQzlEaEwsSUFBTUMsR0FBS2tnRCxJQUNkMXhDLEVBQUtxSCxXQUFhLFdBQ2JuTCxFQUFLbUwsWUFDUm5MLEVBQUttTCxXQUFXdlIsTUFBTW9HLEVBQUtxTCxpQkFBbUJwVyxLQUFNaUssV0FFckRzMkMsRUFBYzU3QyxNQUFNODdDLEdBQXNCMTFDLEVBQUtpRSxlQUFpQmhQLEtBQU13Z0QsR0FBdUJmLEtBRy9GNThDLEVBQUV6QyxHQUFLLElBQUkrK0MsRUFBU2p1QyxFQUFROVEsR0FBSTBLLEVBQVUrRCxHQUUzQyxPQUFPaE0sR0FHUnM4QyxFQUFTeUIsWUFBY3pCLEVBQVMwQixRQUFVLFNBQVMzdkMsRUFBU3BHLEVBQVVDLEVBQU0yRixFQUFTNnZDLEVBQWVDLEVBQXFCQyxHQUd4SCxPQUZBMTFDLEVBQUtzTCxjQUFlLEVBQ3BCdEwsRUFBS1EsZ0JBQTJDLEdBQXhCUixFQUFLUSxnQkFDdEI0ekMsRUFBU2tCLFVBQVVudkMsRUFBU3BHLEVBQVVDLEVBQU0yRixFQUFTNnZDLEVBQWVDLEVBQXFCQyxJQUdqR3RCLEVBQVMyQixjQUFnQjNCLEVBQVM0QixVQUFZLFNBQVM3dkMsRUFBU3BHLEVBQVUrUSxFQUFVQyxFQUFRcEwsRUFBUzZ2QyxFQUFlQyxFQUFxQkMsR0FHeEksT0FGQTNrQyxFQUFPeEYsUUFBVXVGLEVBQ2pCQyxFQUFPdlEsZ0JBQTZDLEdBQTFCdVEsRUFBT3ZRLGlCQUF3RCxHQUE1QnNRLEVBQVN0USxnQkFDL0Q0ekMsRUFBU2tCLFVBQVVudkMsRUFBU3BHLEVBQVVnUixFQUFRcEwsRUFBUzZ2QyxFQUFlQyxFQUFxQkMsSUFHbkd0QixFQUFTcGpDLFlBQWMsU0FBUzNRLEVBQU9qRSxFQUFVeUgsRUFBUXhILEVBQU95RSxHQUMvRCxPQUFPLElBQUlzekMsRUFBU2g0QyxFQUFVLEVBQUcsQ0FBQ2lFLE1BQU1BLEVBQU84SyxXQUFXL08sRUFBVWdQLGlCQUFpQnZILEVBQVFJLGNBQWM1SCxFQUFPeVAsa0JBQWtCMVAsRUFBVTJQLHdCQUF3QmxJLEVBQVFyRCxpQkFBZ0IsRUFBT00sVUFBVUEsRUFBVzBGLFVBQVUsS0FHck80dEMsRUFBU25qQyxJQUFNLFNBQVNqVixFQUFRZ0UsR0FDL0IsT0FBTyxJQUFJbzBDLEVBQVNwNEMsRUFBUSxFQUFHZ0UsSUFHaENvMEMsRUFBUzZCLFdBQWEsU0FBU2o2QyxHQUM5QixPQUFReEUsRUFBQSxFQUFVMFosWUFBWWxWLEdBQVEsR0FBTTNELE9BQVMsR0FHdEQsSUFBSTY5QyxFQUFpQixTQUFTcDBDLEVBQVVxMEMsR0FJdEMsSUFIQSxJQUFJcitDLEVBQUksR0FDUHMrQyxFQUFNLEVBQ056eUMsRUFBUTdCLEVBQVN1RCxPQUNYMUIsR0FDRkEsYUFBaUJuTSxFQUFBLEVBQ3BCTSxFQUFFcytDLEtBQVN6eUMsR0FFUHd5QyxJQUNIcitDLEVBQUVzK0MsS0FBU3p5QyxHQUdaeXlDLEdBREF0K0MsRUFBSUEsRUFBRTJDLE9BQU95N0MsRUFBZXZ5QyxFQUFPd3lDLEtBQzNCOTlDLFFBRVRzTCxFQUFRQSxFQUFNakMsTUFFZixPQUFPNUosR0FFUnUrQyxFQUFlakMsRUFBU2lDLGFBQWUsU0FBU0YsR0FDL0MsT0FBT0QsRUFBZSxJQUFVdDFDLGNBQWV1MUMsR0FBa0IxN0MsT0FBUXk3QyxFQUFlLElBQVVuMUMsb0JBQXFCbzFDLEtBR3pIL0IsRUFBU2tDLFFBQVUsU0FBU3JFLEVBQVUza0MsRUFBUWlwQyxFQUFjQyxHQUM3QyxNQUFWbHBDLElBQ0hBLEdBQVMsR0FFVSxNQUFoQmlwQyxJQUNIQSxHQUFlLEdBRWhCLElBR0NFLEVBQU05eUMsRUFBT3RPLEVBSFZ5QyxFQUFJdStDLEVBQTJCLEdBQWJHLEdBQ3JCbGhELEVBQUl3QyxFQUFFTyxPQUNOcStDLEVBQVdwcEMsR0FBVWlwQyxHQUFnQkMsRUFFdEMsSUFBS25oRCxFQUFJLEVBQUdBLEVBQUlDLEVBQUdELElBQ2xCc08sRUFBUTdMLEVBQUV6QyxJQUNOcWhELEdBQVkveUMsYUFBaUIsTUFBcUI4eUMsRUFBUTl5QyxFQUFNM0gsU0FBVzJILEVBQU0zRCxLQUFLbUwsYUFBZ0JvckMsR0FBa0JqcEMsSUFBV21wQyxLQUNsSXhFLEVBQ0h0dUMsRUFBTW5CLFVBQVVtQixFQUFNakQsVUFBWSxFQUFJaUQsRUFBTWYsaUJBRTVDZSxFQUFNWCxVQUFTLEdBQU8sS0FNMUJveEMsRUFBU3VDLGtCQUFvQixTQUFTOVAsRUFBUW9MLEdBQzdDLEdBQWMsTUFBVnBMLEVBQUosQ0FHQSxJQUNDL3VDLEVBQUc4K0MsRUFBV3ovQyxFQUFHOUIsRUFBR0MsRUFEakJ1TCxFQUFLNHpDLEVBQW1CMXBDLFlBUTVCLEdBTnVCLGlCQUFiLElBQ1Q4N0IsRUFBU3J2QyxFQUFBLEVBQVV5TyxTQUFTNGdDLElBQVdBLEdBRXBDNS9CLEVBQVk0L0IsS0FDZkEsRUFBU3R1QyxFQUFPc3VDLElBRWJsdUMsRUFBU2t1QyxHQUVaLElBREF4eEMsRUFBSXd4QyxFQUFPeHVDLFNBQ0ZoRCxHQUFLLEdBQ2IrK0MsRUFBU3VDLGtCQUFrQjlQLEVBQU94eEMsR0FBSTQ4QyxPQUh4QyxDQVFBLElBQUs5NkMsS0FETFcsRUFBSSxHQUNNK0ksRUFFVCxJQURBKzFDLEVBQVkvMUMsRUFBRzFKLEdBQUc2RSxPQUFPbzNDLFdBQ2xCd0QsR0FDRkEsSUFBYy9QLElBQ2pCL3VDLEVBQUlBLEVBQUUyQyxPQUFPb0csRUFBRzFKLEdBQUdtVyxTQUVwQnNwQyxFQUFZQSxFQUFVeEQsV0FJeEIsSUFEQTk5QyxFQUFJd0MsRUFBRU8sT0FDRGhELEVBQUksRUFBR0EsRUFBSUMsRUFBR0QsSUFDZDQ4QyxHQUNIbjZDLEVBQUV6QyxHQUFHbU4sVUFBVTFLLEVBQUV6QyxHQUFHdU4saUJBRXJCOUssRUFBRXpDLEdBQUcyTixVQUFTLEdBQU8sTUFJdkIsSUFBSTZ6QyxFQUFlLFNBQVN4MEMsRUFBT2lMLEVBQVFpcEMsRUFBY0MsR0FDeERscEMsR0FBcUIsSUFBWEEsRUFDVmlwQyxHQUFpQyxJQUFqQkEsRUFNaEIsSUFKQSxJQUdDRSxFQUFNOXlDLEVBSEg3TCxFQUFJdStDLEVBRFJHLEdBQTJCLElBQWRBLEdBRVpFLEVBQVdwcEMsR0FBVWlwQyxHQUFnQkMsRUFDckNuaEQsRUFBSXlDLEVBQUVPLFNBRUVoRCxHQUFLLEdBQ2JzTyxFQUFRN0wsRUFBRXpDLElBQ05xaEQsR0FBWS95QyxhQUFpQixNQUFxQjh5QyxFQUFROXlDLEVBQU0zSCxTQUFXMkgsRUFBTTNELEtBQUttTCxhQUFnQm9yQyxHQUFrQmpwQyxJQUFXbXBDLElBQ3RJOXlDLEVBQU16QyxPQUFPbUIsSUFtR2hCLE9BOUZBK3hDLEVBQVMwQyxTQUFXLFNBQVN4cEMsRUFBUWlwQyxFQUFjQyxHQUNsREssR0FBYSxFQUFNdnBDLEVBQVFpcEMsRUFBY0MsSUFHMUNwQyxFQUFTMkMsVUFBWSxTQUFTenBDLEVBQVFpcEMsRUFBY0MsR0FDbkRLLEdBQWEsRUFBT3ZwQyxFQUFRaXBDLEVBQWNDLElBRzNDcEMsRUFBUzRDLGdCQUFrQixTQUFTMWdELEdBQ25DLElBQUl1SyxFQUFLLElBQVVELGNBQ2xCckssRUFBSWlCLEVBQUEsRUFBVTJKLE9BQU92QyxLQUN0QixPQUFLTSxVQUFVN0csUUFHZi9CLEVBQVFBLEdBMWVHLEtBMmVYdUssRUFBRzFDLFdBQWE1SCxHQUFNQSxFQUFJc0ssRUFBRzFDLFlBQWMwQyxFQUFHUCxXQUFhaEssRUFDM0R1SyxFQUFLLElBQVVFLG9CQUNmeEssRUFBSWlCLEVBQUEsRUFBVTJKLE9BQU90QyxNQUNyQmdDLEVBQUcxQyxXQUFhNUgsR0FBTUEsRUFBSXNLLEVBQUcxQyxZQUFjMEMsRUFBR1AsV0FBYWhLLEVBQzNEdUssRUFBR1AsV0FBYSxJQUFVTSxjQUFjTixXQUFhaEssRUFDOUNBLEdBUkN1SyxFQUFHUCxZQWNabkosRUFBRXVOLFNBQVcsU0FBU3BPLEVBQU82TCxHQUM1QixPQUFTakQsVUFBVTdHLE9BQXlFcEQsS0FBS3VOLFVBQVd2TixLQUFLOEssWUFBZTlLLEtBQUtxL0MsT0FBK0IsSUFBUCxFQUFkci9DLEtBQUtvL0MsUUFBcUIsRUFBSS85QyxFQUFRQSxHQUFVckIsS0FBS28vQyxRQUFVcC9DLEtBQUtnTCxVQUFZaEwsS0FBS3UvQyxjQUFnQnJ5QyxHQUF0TmxOLEtBQUs4SyxXQUFhOUssS0FBS2dNLE1BQVFoTSxLQUFLZ0wsVUFBWWhMLEtBQUsyUCxPQUdwRnpOLEVBQUV3TixjQUFnQixTQUFTck8sRUFBTzZMLEdBQ2pDLE9BQVNqRCxVQUFVN0csT0FBbURwRCxLQUFLdU4sVUFBV3ZOLEtBQUsyTixnQkFBa0J0TSxFQUFPNkwsR0FBdkZsTixLQUFLdU0sV0FBYXZNLEtBQUsyTixpQkFHckR6TCxFQUFFeUgsS0FBTyxTQUFTdEksRUFBTzZMLEdBQ3hCLElBQUtqRCxVQUFVN0csT0FDZCxPQUFPcEQsS0FBS2dNLE1BRVRoTSxLQUFLbU0sUUFDUm5NLEtBQUsyTixnQkFFTixJQUFJN0MsRUFBVzlLLEtBQUtnTCxVQUNuQnN6QyxFQUFRdCtDLEtBQUtvL0MsT0FDYjRDLEVBQVcxRCxHQUFTeHpDLEVBQVc5SyxLQUFLdS9DLGNBSXJDLE9BSElsK0MsRUFBUXlKLElBQ1h6SixFQUFReUosR0FFRjlLLEtBQUt1TixVQUFXdk4sS0FBS3EvQyxPQUFrQixFQUFSZixFQUFjeHpDLEVBQVd6SixFQUFRMmdELEVBQVdoaUQsS0FBS3MvQyxRQUFVaitDLEVBQVEyZ0QsRUFBVzNnRCxFQUFPNkwsSUFHNUhoTCxFQUFFNEksU0FBVyxTQUFTekosR0FDckIsT0FBSzRJLFVBQVU3RyxPQUdSLElBQVVwQixVQUFVOEksU0FBU3ZLLEtBQUtQLEtBQU1xQixHQUZ2Q3JCLEtBQUtnTCxXQUtkOUksRUFBRXlMLGNBQWdCLFNBQVN0TSxHQUMxQixPQUFLNEksVUFBVTdHLFFBUVcsSUFBbEJwRCxLQUFLcy9DLFFBQWtCdC9DLEtBQU9BLEtBQUs4SyxVQUFXekosRUFBU3JCLEtBQUtzL0MsUUFBVXQvQyxLQUFLdS9DLGVBQWtCdi9DLEtBQUtzL0MsUUFBVSxLQVAvR3QvQyxLQUFLbU0sU0FFUm5NLEtBQUtpTCxnQkFBb0MsSUFBbEJqTCxLQUFLcy9DLFFBQWtCLGFBQWV0L0MsS0FBS2dMLFdBQWFoTCxLQUFLcy9DLFFBQVUsR0FBTXQvQyxLQUFLdS9DLGFBQWV2L0MsS0FBS3MvQyxRQUM3SHQvQyxLQUFLbU0sUUFBUyxHQUVSbk0sS0FBS2lMLGlCQUtkL0ksRUFBRW1WLE9BQVMsU0FBU2hXLEdBQ25CLE9BQUs0SSxVQUFVN0csUUFHZnBELEtBQUtzL0MsUUFBVWorQyxFQUNSckIsS0FBS3dPLFVBQVMsSUFIYnhPLEtBQUtzL0MsU0FNZHA5QyxFQUFFb1YsWUFBYyxTQUFTalcsR0FDeEIsT0FBSzRJLFVBQVU3RyxRQUdmcEQsS0FBS3UvQyxhQUFlbCtDLEVBQ2JyQixLQUFLd08sVUFBUyxJQUhieE8sS0FBS3UvQyxjQU1kcjlDLEVBQUVrVixLQUFPLFNBQVMvVixHQUNqQixPQUFLNEksVUFBVTdHLFFBR2ZwRCxLQUFLcS9DLE1BQVFoK0MsRUFDTnJCLE1BSENBLEtBQUtxL0MsT0FPUEYsS0FFTCxHQUVHLElBQUksRUFBVyxJQUFRQTs7Ozs7Ozs7Ozs7O0FDN29CN0IsSUFBU3Y2QyxVQUFVLG9CQUFxQixDQUFDLHNCQUFzQixjQUFjLFdBRzVFLElBTUNxOUMsRUFDQUMsRUFDQUMsRUFDQXRuQyxFQVRHdW5DLEVBQVksV0FDZCxJQUFZN2hELEtBQUtQLEtBQU0sT0FDdkJBLEtBQUs2YSxnQkFBZ0J6WCxPQUFTLEVBQzlCcEQsS0FBSzBVLFNBQVcwdEMsRUFBVXBnRCxVQUFVMFMsVUFFckMvUixFQUFXLElBQVNpQyxVQUFVRSxRQUs5QnU5QyxFQUFnQixHQUNoQm5nRCxFQUFJa2dELEVBQVVwZ0QsVUFBWSxJQUFJLElBQVksT0FFM0NFLEVBQUUwSSxZQUFjdzNDLEVBQ2hCQSxFQUFVOXZDLFFBQVUsUUFDcEI4dkMsRUFBVTVsQyxJQUFNLEVBQ2hCNGxDLEVBQVVFLDRCQUE4QixFQUN4Q0YsRUFBVUcsZ0JBQWtCLGNBQzVCSCxFQUFVSSxxQkFBc0IsRUFDaEN0Z0QsRUFBSSxLQUNKa2dELEVBQVVLLFVBQVksQ0FBQ0MsSUFBSXhnRCxFQUFHeWdELE1BQU16Z0QsRUFBRzBnRCxPQUFPMWdELEVBQUd3aEMsS0FBS3hoQyxFQUFHMmdELE1BQU0zZ0QsRUFBRzRnRCxPQUFPNWdELEVBQUc2Z0QsU0FBUzdnRCxFQUFHOGdELFFBQVE5Z0QsRUFBRytnRCxPQUFPL2dELEVBQUdnaEQsWUFBWWhoRCxFQUFHaWhELFdBQVcsSUFHdkksSUFnQ0NDLEVBQ0FDLEVBRUFDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBd0JBaHdDLEVBQ0Fpd0MsRUEvREdDLEVBQVUsNEJBQ2JDLEVBQWEsdURBQ2JDLEVBQWEsbURBQ2JDLEVBQXVCLHFEQUN2QkMsRUFBVSwwQ0FDVkMsRUFBYSx3QkFDYkMsRUFBYyx1QkFDZEMsRUFBaUIsbUJBQ2pCQyxFQUFrQiwwQkFDbEJDLEVBQWEsYUFDYkMsRUFBVyxXQUNYQyxFQUFZLGFBQ1pDLEVBQVUseUNBQ1ZDLEVBQWEsU0FBU3JpRCxFQUFHc2lELEdBQUssT0FBT0EsRUFBRW5uQyxlQUN2Q29uQyxFQUFZLHdCQUNaQyxFQUFrQixpQ0FDbEJDLEVBQWtCLHNEQUNsQkMsRUFBeUIsd0JBQ3pCQyxFQUFjLFdBQ2RDLEVBQVc3NkMsS0FBSzg2QyxHQUFLLElBQ3JCQyxFQUFXLElBQU0vNkMsS0FBSzg2QyxHQUN0QkUsRUFBVyxHQUNYQyxFQUFnQixDQUFDN3pDLE1BQU0sSUFDdkI3TyxFQUFPLElBQVNDLFVBQVksQ0FBQzB4QixjQUFlLFdBQVksT0FBTyt3QixJQUMvREMsRUFBaUIsU0FBU2xnRCxFQUFNekQsR0FDL0IsSUFBSXVFLEVBQUl2RCxFQUFLNGlELGdCQUFrQjVpRCxFQUFLNGlELGdCQUFnQjVqRCxHQUFNLCtCQUFnQ3lELEdBQVF6QyxFQUFLMnhCLGNBQWNsdkIsR0FDckgsT0FBT2MsRUFBRXNMLE1BQVF0TCxFQUFJdkQsRUFBSzJ4QixjQUFjbHZCLElBRXpDb2dELEVBQVdGLEVBQWUsT0FDMUJHLEVBQVdILEVBQWUsT0FDMUI1dkMsRUFBYTRzQyxFQUFVNXNDLFdBQWEsQ0FBQzZzQyxjQUFjQSxHQUNuRG1ELEdBQVUsSUFBUzF5QixXQUFhLElBQUlDLFdBQWEsR0FRakQweUIsRUFBb0IsV0FDbkIsSUFBSXJsRCxFQUFJb2xELEVBQU9yMkMsUUFBUSxXQUN0QnRNLEVBQUl1aUQsRUFBZSxLQU9wQixPQU5BOUIsR0FBMkMsSUFBOUJrQyxFQUFPcjJDLFFBQVEsWUFBa0QsSUFBOUJxMkMsRUFBT3IyQyxRQUFRLGFBQTRCLElBQVAvTyxHQUFZbVUsV0FBV2l4QyxFQUFPdDJDLE9BQU85TyxFQUFFLEVBQUcsSUFBTSxHQUNwSW9qRCxFQUFnQkYsR0FBYy91QyxXQUFXaXhDLEVBQU90MkMsT0FBT3MyQyxFQUFPcjJDLFFBQVEsWUFBWSxFQUFHLElBQU0sRUFDM0ZvMEMsR0FBNkMsSUFBL0JpQyxFQUFPcjJDLFFBQVEsWUFDekIsOEJBQWdDd1EsS0FBSzZsQyxJQUFXLHVDQUF5QzdsQyxLQUFLNmxDLE1BQ2pHL0IsRUFBVWx2QyxXQUFZa2IsT0FBT2kyQixPQUV6QjdpRCxJQUdMQSxFQUFFeU8sTUFBTXEwQyxRQUFVLHVCQUNYLFFBQVFoeEMsS0FBSzlSLEVBQUV5TyxNQUFNczBDLFVBYlYsR0FlbkJDLEVBQWdCLFNBQVM5MkMsR0FDeEIsT0FBUWsxQyxFQUFZdHZDLEtBQXNCLGlCQUFSLEVBQW9CNUYsR0FBS0EsRUFBRSsyQyxhQUFlLzJDLEVBQUUrMkMsYUFBYWp5QyxPQUFTOUUsRUFBRXVDLE1BQU11QyxTQUFXLElBQVVVLFdBQVlrYixPQUFPaTJCLElBQU8sSUFBUSxHQUVwS0ssRUFBTyxTQUFTNWpELEdBQ1gsSUFBU3FiLFNBQ1pBLFFBQVFDLElBQUl0YixJQU1kNmpELEVBQWEsR0FDYkMsRUFBVSxHQUdWQyxFQUFtQixTQUFTaGtELEVBQUc4RCxHQUU5QixJQUNDbkQsRUFBR3pDLEVBREErQixHQURKNkQsRUFBSUEsR0FBS3MvQyxHQUNDaDBDLE1BRVYsUUFBYStOLElBQVRsZCxFQUFFRCxHQUNMLE9BQU9BLEVBS1IsSUFIQUEsRUFBSUEsRUFBRTRRLE9BQU8sR0FBR3dLLGNBQWdCcGIsRUFBRWdOLE9BQU8sR0FDekNyTSxFQUFJLENBQUMsSUFBSSxNQUFNLEtBQUssS0FBSyxVQUN6QnpDLEVBQUksSUFDS0EsR0FBSyxRQUFtQmlmLElBQWRsZCxFQUFFVSxFQUFFekMsR0FBRzhCLEtBQzFCLE9BQUk5QixHQUFLLEdBRVI0bEQsRUFBYSxLQURiQyxFQUFpQixJQUFON2xELEVBQVcsS0FBT3lDLEVBQUV6QyxJQUNKdWhCLGNBQWdCLElBQ3BDc2tDLEVBQVUvakQsR0FFWCxNQUdSaWtELEVBQTBDLG9CQUFiLE9BQTJCOWpELE9BQVNJLEVBQUsyakQsYUFBZSxDQUFDQyxpQkFBaUIsY0FDdkdDLEVBQW9CLFNBQVN0Z0QsR0FDNUIsT0FBT21nRCxFQUFvQkUsaUJBQWlCcmdELElBYzdDdWdELEdBQVluRSxFQUFVb0UsU0FBVyxTQUFTbGxELEVBQUdZLEVBQUd1a0QsRUFBSUMsRUFBTUMsR0FDekQsSUFBSUMsRUFDSixPQUFLbkIsR0FBNEIsWUFBTnZqRCxJQUd0QndrRCxHQUFRcGxELEVBQUVnUSxNQUFNcFAsR0FDcEIwa0QsRUFBS3RsRCxFQUFFZ1EsTUFBTXBQLElBQ0Z1a0QsRUFBS0EsR0FBTUgsRUFBa0JobEQsSUFDeENzbEQsRUFBS0gsRUFBR3ZrRCxJQUFNdWtELEVBQUdJLGlCQUFpQjNrRCxJQUFNdWtELEVBQUdJLGlCQUFpQjNrRCxFQUFFb1QsUUFBUSt1QyxFQUFVLE9BQU8xaUMsZUFDN0VyZ0IsRUFBRXdrRCxlQUNaYyxFQUFLdGxELEVBQUV3a0QsYUFBYTVqRCxJQUVMLE1BQVJ5a0QsR0FBa0JDLEdBQWEsU0FBUEEsR0FBd0IsU0FBUEEsR0FBd0IsY0FBUEEsRUFBOEJBLEVBQVBELEdBVGpGZCxFQUFjdmtELElBcUJ2QndsRCxHQUFtQnR4QyxFQUFXdXhDLGdCQUFrQixTQUFTemxELEVBQUdZLEVBQUc2TSxFQUFHaTRDLEVBQUtDLEdBQ3RFLEdBQVksT0FBUkQsSUFBa0JBLEdBQWEsZUFBTjlrRCxFQUF1QixPQUFPNk0sRUFDM0QsR0FBWSxTQUFSaTRDLElBQW1CajRDLEVBQUssT0FBTyxFQUNuQyxJQUtDbTRDLEVBQUt6SSxFQUFPOTBDLEVBTFR3OUMsRUFBUXpDLEVBQVUvdkMsS0FBS3pTLEdBQzFCNnZDLEVBQU96d0MsRUFDUGdRLEVBQVFnMEMsRUFBU2gwQyxNQUNqQjgxQyxFQUFPcjRDLEVBQUksRUFDWHM0QyxFQUFpQixJQUFOdDRDLEVBUVosR0FOSXE0QyxJQUNIcjRDLEdBQUtBLEdBRUZzNEMsSUFDSHQ0QyxHQUFLLEtBRUksZUFBTjdNLEdBQXVCOGtELEVBS3BCLEdBQVksTUFBUkEsSUFBd0MsSUFBekI5a0QsRUFBRWlOLFFBQVEsVUFDbkMrM0MsRUFBT240QyxFQUFJLEtBQVFvNEMsRUFBUTdsRCxFQUFFZ21ELFlBQWNobUQsRUFBRWltRCxrQkFDdkMsQ0FFTixHQURBajJDLEVBQU1xMEMsUUFBVSwrQkFBaUNZLEdBQVVqbEQsRUFBRyxZQUFjLGtCQUNoRSxNQUFSMGxELEdBQWdCalYsRUFBS3ZqQixhQUFpQyxNQUFsQnc0QixFQUFJbDBDLE9BQU8sSUFBc0IsUUFBUmswQyxFQVloRTExQyxFQUFPNjFDLEVBQVEsa0JBQW9CLGtCQUFxQnA0QyxFQUFJaTRDLE1BWm1CLENBTy9FLEdBTkFqVixFQUFPendDLEVBQUU2OEMsWUFBYzE3QyxFQUFLK2tELE1BQ3dCLElBQWhEakIsR0FBVXhVLEVBQU0sV0FBVzVpQyxRQUFRLFVBQ3RDbUMsRUFBTWQsU0FBVyxZQUVsQml1QyxFQUFRMU0sRUFBSzBWLFNBQ2I5OUMsRUFBT3BILEVBQUEsRUFBVTJKLE9BQU90QyxNQUNwQjYwQyxHQUFTMEksR0FBUzFJLEVBQU05MEMsT0FBU0EsRUFDcEMsT0FBTzgwQyxFQUFNb0UsTUFBUTl6QyxFQUFJLElBRTFCdUMsRUFBTzYxQyxFQUFRLFFBQVUsVUFBYXA0QyxFQUFJaTRDLEVBSTNDalYsRUFBS3ZqQixZQUFZODJCLEdBQ2pCNEIsRUFBTTN5QyxXQUFXK3dDLEVBQVU2QixFQUFRLGNBQWdCLGlCQUNuRHBWLEVBQUtoWixZQUFZdXNCLEdBQ2I2QixHQUFpQixNQUFSSCxJQUF5QyxJQUExQjVFLEVBQVVzRixlQUNyQ2pKLEVBQVExTSxFQUFLMFYsU0FBVzFWLEVBQUswVixVQUFZLElBQ25DOTlDLEtBQU9BLEVBQ2I4MEMsRUFBTW9FLE1BQVFxRSxFQUFNbjRDLEVBQUksS0FFYixJQUFSbTRDLEdBQWNELElBQ2pCQyxFQUFNSixHQUFpQnhsRCxFQUFHWSxFQUFHNk0sRUFBR2k0QyxHQUFLLFNBL0J0Q3ZJLEVBQVE2SCxFQUFrQmhsRCxHQUFHNmhELFdBQzdCN2hELEVBQUVnUSxNQUFNNnhDLFdBQWFwMEMsRUFDckJtNEMsRUFBTTN5QyxXQUFXK3hDLEVBQWtCaGxELEdBQUc2aEQsWUFDdEM3aEQsRUFBRWdRLE1BQU02eEMsV0FBYTFFLEVBa0N0QixPQUhJNEksSUFDSEgsR0FBTyxLQUVERSxHQUFPRixFQUFNQSxHQUVyQlMsR0FBbUJueUMsRUFBV295QyxnQkFBa0IsU0FBU3RtRCxFQUFHWSxFQUFHdWtELEdBQzlELEdBQXFDLGFBQWpDRixHQUFVamxELEVBQUcsV0FBWW1sRCxHQUFzQixPQUFPLEVBQzFELElBQUlvQixFQUFjLFNBQU4zbEQsRUFBZ0IsT0FBUyxNQUNwQzZNLEVBQUl3M0MsR0FBVWpsRCxFQUFHLFNBQVd1bUQsRUFBS3BCLEdBQ2xDLE9BQU9ubEQsRUFBRSxTQUFXdW1ELElBQVFmLEdBQWlCeGxELEVBQUdZLEVBQUdxUyxXQUFXeEYsR0FBSUEsRUFBRXVHLFFBQVEwdUMsRUFBWSxNQUFRLElBSWpHOEQsR0FBZ0IsU0FBU3htRCxFQUFHbWxELEdBQzNCLElBQ0NybUQsRUFBRzJuRCxFQUFJN2xELEVBREpDLEVBQUksR0FFUixHQUFLc2tELEVBQUtBLEdBQU1ILEVBQWtCaGxELEdBQ2pDLEdBQUtsQixFQUFJcW1ELEVBQUdyakQsT0FDWCxPQUFTaEQsR0FBSyxJQUVvQixLQURqQzhCLEVBQUl1a0QsRUFBR3JtRCxJQUNEK08sUUFBUSxlQUF3QjY0QyxLQUFzQjlsRCxJQUMzREMsRUFBRUQsRUFBRW9ULFFBQVFndkMsRUFBV0UsSUFBZWlDLEVBQUdJLGlCQUFpQjNrRCxTQUk1RCxJQUFLOUIsS0FBS3FtRCxHQUN1QixJQUE1QnJtRCxFQUFFK08sUUFBUSxjQUF1Qjg0QyxLQUFtQjduRCxJQUN2RCtCLEVBQUUvQixHQUFLcW1ELEVBQUdybUQsU0FJUCxHQUFLcW1ELEVBQUtubEQsRUFBRXdrRCxjQUFnQnhrRCxFQUFFZ1EsTUFDcEMsSUFBS2xSLEtBQUtxbUQsRUFDUyxpQkFBUixRQUE2QnBuQyxJQUFUbGQsRUFBRS9CLEtBQy9CK0IsRUFBRS9CLEVBQUVrVixRQUFRZ3ZDLEVBQVdFLElBQWVpQyxFQUFHcm1ELElBdUI1QyxPQW5CS3FsRCxJQUNKdGpELEVBQUV5akQsUUFBVUMsRUFBY3ZrRCxJQUUzQnltRCxFQUFLRyxHQUFjNW1ELEVBQUdtbEQsR0FBSSxHQUMxQnRrRCxFQUFFZ21ELFNBQVdKLEVBQUdJLFNBQ2hCaG1ELEVBQUVpbUQsTUFBUUwsRUFBR0ssTUFDYmptRCxFQUFFa21ELE9BQVNOLEVBQUdNLE9BQ2RsbUQsRUFBRW1tRCxPQUFTUCxFQUFHTyxPQUNkbm1ELEVBQUUweUIsRUFBSWt6QixFQUFHbHpCLEVBQ1QxeUIsRUFBRTY2QixFQUFJK3FCLEVBQUcvcUIsRUFDTHVyQixLQUNIcG1ELEVBQUVrbUMsRUFBSTBmLEVBQUcxZixFQUNUbG1DLEVBQUVxbUQsVUFBWVQsRUFBR1MsVUFDakJybUQsRUFBRXNtRCxVQUFZVixFQUFHVSxVQUNqQnRtRCxFQUFFdW1ELE9BQVNYLEVBQUdXLFFBRVh2bUQsRUFBRXdtRCxnQkFDRXhtRCxFQUFFd21ELFFBRUh4bUQsR0FJUnltRCxHQUFVLFNBQVN0bkQsRUFBR3VuRCxFQUFJQyxFQUFJLzlDLEVBQU1nK0MsR0FDbkMsSUFFQzUxQyxFQUFLalIsRUFBRzhtRCxFQUZMQyxFQUFPLEdBQ1YzM0MsRUFBUWhRLEVBQUVnUSxNQUVYLElBQUtwUCxLQUFLNG1ELEVBQ0MsWUFBTjVtRCxHQUEyQixXQUFOQSxHQUFvQm1ULE1BQU1uVCxLQUFRMm1ELEVBQUczbUQsTUFBUWlSLEVBQU0yMUMsRUFBRzVtRCxLQUFRNm1ELEdBQWVBLEVBQVk3bUQsTUFBa0MsSUFBekJBLEVBQUVpTixRQUFRLFlBQXNDLGlCQUFWLEdBQXNDLGlCQUFWLElBQzVMODVDLEVBQUsvbUQsR0FBYyxTQUFSaVIsR0FBeUIsU0FBTmpSLEdBQXNCLFFBQU5BLEVBQW1ELEtBQVJpUixHQUFzQixTQUFSQSxHQUEwQixTQUFSQSxHQUFxQyxpQkFBWDAxQyxFQUFHM21ELElBQW1ELEtBQS9CMm1ELEVBQUczbUQsR0FBR29ULFFBQVF5dUMsRUFBUyxJQUFrQjV3QyxFQUFKLEVBQWpKdzBDLEdBQWlCcm1ELEVBQUdZLFFBQ2pFbWQsSUFBYi9OLEVBQU1wUCxLQUNUOG1ELEVBQU0sSUFBSUUsR0FBYzUzQyxFQUFPcFAsRUFBR29QLEVBQU1wUCxHQUFJOG1ELE1BSS9DLEdBQUlqK0MsRUFDSCxJQUFLN0ksS0FBSzZJLEVBQ0MsY0FBTjdJLElBQ0grbUQsRUFBSy9tRCxHQUFLNkksRUFBSzdJLElBSWxCLE1BQU8sQ0FBQyttRCxLQUFLQSxFQUFNRSxTQUFTSCxJQUU3QkksR0FBYyxDQUFDdkcsTUFBTSxDQUFDLE9BQU8sU0FBVUMsT0FBTyxDQUFDLE1BQU0sV0FDckR1RyxHQUFXLENBQUMsYUFBYSxjQUFjLFlBQVksZ0JBU25EQyxHQUFnQixTQUFTaG9ELEVBQUdZLEVBQUd1a0QsR0FDOUIsR0FBd0MsU0FBbkNubEQsRUFBRWlvRCxTQUFXLElBQUk1bkMsY0FDckIsT0FBUThrQyxHQUFNSCxFQUFrQmhsRCxJQUFJWSxJQUFNLEVBQ3BDLEdBQUlaLEVBQUVrb0QsUUFBVUMsR0FBT25vRCxHQUM3QixPQUFPQSxFQUFFb29ELFVBQVV4bkQsSUFBTSxFQUUxQixJQUFJNk0sRUFBSXdGLFdBQWtCLFVBQU5yUyxFQUFpQlosRUFBRXFvRCxZQUFjcm9ELEVBQUVzb0QsY0FDdEQvbUQsRUFBSXVtRCxHQUFZbG5ELEdBQ2hCOUIsRUFBSXlDLEVBQUVPLE9BRVAsSUFEQXFqRCxFQUFLQSxHQUFNSCxFQUFrQmhsRCxLQUNwQmxCLEdBQUssR0FDYjJPLEdBQUt3RixXQUFZZ3lDLEdBQVVqbEQsRUFBRyxVQUFZdUIsRUFBRXpDLEdBQUlxbUQsR0FBSSxLQUFXLEVBQy9EMTNDLEdBQUt3RixXQUFZZ3lDLEdBQVVqbEQsRUFBRyxTQUFXdUIsRUFBRXpDLEdBQUssUUFBU3FtRCxHQUFJLEtBQVcsRUFFekUsT0FBTzEzQyxHQUlSODZDLEdBQWlCLFNBQVM5NkMsRUFBRys2QyxHQUM1QixHQUFVLFlBQU4vNkMsR0FBeUIsU0FBTkEsR0FBc0IsY0FBTkEsRUFDdEMsT0FBT0EsRUFBSSxJQUVILE1BQUxBLEdBQW1CLEtBQU5BLElBQ2hCQSxFQUFJLE9BRUwsSUFHQzNPLEVBSEd5QyxFQUFJa00sRUFBRTVMLE1BQU0sS0FDZjB4QixHQUE0QixJQUF2QjlsQixFQUFFSSxRQUFRLFFBQWtCLE1BQWdDLElBQXhCSixFQUFFSSxRQUFRLFNBQW1CLE9BQVN0TSxFQUFFLEdBQ2pGbTZCLEdBQTJCLElBQXRCanVCLEVBQUVJLFFBQVEsT0FBaUIsTUFBaUMsSUFBekJKLEVBQUVJLFFBQVEsVUFBb0IsT0FBU3RNLEVBQUUsR0FFbEYsR0FBSUEsRUFBRU8sT0FBUyxJQUFNMG1ELEVBQVEsQ0FHNUIsSUFGQWpuRCxFQUFJa00sRUFBRTVMLE1BQU0sTUFBTXVCLEtBQUssS0FBS3ZCLE1BQU0sS0FDbEM0TCxFQUFJLEdBQ0MzTyxFQUFJLEVBQUdBLEVBQUl5QyxFQUFFTyxPQUFRaEQsSUFDekIyTyxFQUFFdkwsS0FBS3FtRCxHQUFlaG5ELEVBQUV6QyxLQUV6QixPQUFPMk8sRUFBRXJLLEtBQUssS0FvQmYsT0FsQlMsTUFBTHM0QixFQUNIQSxFQUFXLFdBQU5uSSxFQUFrQixNQUFRLElBQ2YsV0FBTm1JLElBQ1ZBLEVBQUksUUFFSyxXQUFObkksR0FBbUJ4ZixNQUFNZCxXQUFXc2dCLE1BQWtDLEtBQTFCQSxFQUFJLElBQUkxbEIsUUFBUSxRQUMvRDBsQixFQUFJLE9BRUw5bEIsRUFBSThsQixFQUFJLElBQU1tSSxHQUFNbjZCLEVBQUVPLE9BQVMsRUFBSyxJQUFNUCxFQUFFLEdBQUssSUFDN0NpbkQsSUFDSEEsRUFBT0MsS0FBMkIsSUFBcEJsMUIsRUFBRTFsQixRQUFRLEtBQ3hCMjZDLEVBQU9FLEtBQTJCLElBQXBCaHRCLEVBQUU3dEIsUUFBUSxLQUN4QjI2QyxFQUFPRyxJQUF1QixNQUFoQnAxQixFQUFFL2hCLE9BQU8sR0FDdkJnM0MsRUFBT0ksSUFBdUIsTUFBaEJsdEIsRUFBRWxxQixPQUFPLEdBQ3ZCZzNDLEVBQU9LLEdBQUs1MUMsV0FBV3NnQixFQUFFdmYsUUFBUXl1QyxFQUFTLEtBQzFDK0YsRUFBT00sR0FBSzcxQyxXQUFXeW9CLEVBQUUxbkIsUUFBUXl1QyxFQUFTLEtBQzFDK0YsRUFBTy82QyxFQUFJQSxHQUVMKzZDLEdBQVUvNkMsR0FTbEJzN0MsR0FBZSxTQUFTcmtELEVBQUd6QyxHQUkxQixNQUhrQixtQkFBUixJQUNUeUMsRUFBSUEsRUFBRTA5QyxFQUFRandDLElBRU8saUJBQVIsR0FBb0MsTUFBaEJ6TixFQUFFOE0sT0FBTyxHQUFjMEIsU0FBU3hPLEVBQUU4TSxPQUFPLEdBQUssSUFBSyxJQUFNeUIsV0FBV3ZPLEVBQUVrSixPQUFPLElBQU9xRixXQUFXdk8sR0FBS3VPLFdBQVdoUixJQUFPLEdBU3pKK21ELEdBQVksU0FBU3Y3QyxFQUFHck8sR0FDTCxtQkFBUixJQUNUcU8sRUFBSUEsRUFBRTIwQyxFQUFRandDLElBRWYsSUFBSTBCLEVBQTRCLGlCQUFSLEdBQW9DLE1BQWhCcEcsRUFBRStELE9BQU8sR0FJckQsTUFIa0IsaUJBQVIsR0FBK0MsTUFBM0IvRCxFQUFFK0QsT0FBTy9ELEVBQUUzTCxPQUFTLEtBQ2pEMkwsR0FBS29HLEVBQWFwRyxFQUFFRyxPQUFPLEVBQUcsR0FBSyxHQUFNN00sT0FBTyxTQUE2QixPQUFqQjBNLEVBQUVHLFFBQVEsR0FBZSxTQUFXLFdBQWFxRixXQUFXWSxFQUFhcEcsRUFBRUcsT0FBTyxHQUFLSCxHQUFLLE1BRTVJLE1BQUxBLEVBQWFyTyxFQUFJeVUsRUFBYVgsU0FBU3pGLEVBQUUrRCxPQUFPLEdBQUssSUFBSyxJQUFNeUIsV0FBV3hGLEVBQUVHLE9BQU8sSUFBTXhPLEVBQUk2VCxXQUFXeEYsSUFBTSxHQVd4SHc3QyxHQUFjLFNBQVN4N0MsRUFBR3JPLEVBQUd3QixFQUFHc29ELEdBQy9CLElBQ01ybkQsRUFBT3NuRCxFQUFLam5DLEVBQVFyTyxFQWtDMUIsTUFqQ2tCLG1CQUFSLElBQ1RwRyxFQUFJQSxFQUFFMjBDLEVBQVFqd0MsSUFFTixNQUFMMUUsRUFDSHlVLEVBQVM5aUIsRUFDZSxpQkFBUixFQUNoQjhpQixFQUFTelUsR0FFSCxJQUNONUwsRUFBUTRMLEVBQUU1TCxNQUFNLEtBRWhCc25ELElBREF0MUMsRUFBOEIsTUFBaEJwRyxFQUFFK0QsT0FBTyxJQUNIMEIsU0FBU3pGLEVBQUUrRCxPQUFPLEdBQUssSUFBSyxJQUFNeUIsV0FBV3BSLEVBQU0sR0FBRytMLE9BQU8sSUFBTXFGLFdBQVdwUixFQUFNLE9BQStCLElBQXRCNEwsRUFBRUksUUFBUSxPQUFpQixFQUFJODFDLElBQWE5dkMsRUFBYSxFQUFJelUsR0FDMUt5QyxFQUFNQyxTQUNMb25ELElBQ0hBLEVBQWV0b0QsR0FBS3hCLEVBQUkrcEQsSUFFRyxJQUF4QjE3QyxFQUFFSSxRQUFRLFdBQ2JzN0MsR0FUSSxPQVVRQSxFQUFNLE1BQ2pCQSxFQUFPQSxFQUFNLEVBQUtBLEVBWGYsSUFXMkJBLEVBWDNCLE1BY3FCLElBQXRCMTdDLEVBQUVJLFFBQVEsUUFBaUJzN0MsRUFBTSxFQUNwQ0EsR0FBUUEsRUFBTUMsZUFmVixTQWV1Q0QsRUFmdkMsSUFlb0QsSUFDeEIsSUFBdEIxN0MsRUFBRUksUUFBUSxRQUFpQnM3QyxFQUFNLElBQzNDQSxHQUFRQSxFQUFNQyxlQWpCVixTQWlCdUNELEVBakJ2QyxJQWlCb0QsS0FHMURqbkMsRUFBUzlpQixFQUFJK3BELEdBRVZqbkMsRUFoQ00sTUFnQ1VBLEdBaENWLE9BaUNUQSxFQUFTLEdBRUhBLEdBR1JtbkMsR0FBZSxDQUFDQyxLQUFLLENBQUMsRUFBRSxJQUFJLEtBQzNCQyxLQUFLLENBQUMsRUFBRSxJQUFJLEdBQ1pDLE9BQU8sQ0FBQyxJQUFJLElBQUksS0FDaEJDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FDWEMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUNkQyxLQUFLLENBQUMsRUFBRSxJQUFJLEtBQ1pDLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FDVkMsS0FBSyxDQUFDLEVBQUUsRUFBRSxLQUNWQyxNQUFNLENBQUMsSUFBSSxJQUFJLEtBQ2ZDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsS0FDZkMsTUFBTSxDQUFDLElBQUksSUFBSSxHQUNmQyxPQUFPLENBQUMsSUFBSSxJQUFJLEdBQ2hCQyxPQUFPLENBQUMsSUFBSSxJQUFJLEdBQ2hCQyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQ2RDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FDZEMsTUFBTSxDQUFDLEVBQUUsSUFBSSxHQUNiQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQ1hDLEtBQUssQ0FBQyxJQUFJLElBQUksS0FDZEMsS0FBSyxDQUFDLEVBQUUsSUFBSSxLQUNaQyxZQUFZLENBQUMsSUFBSSxJQUFJLElBQUksSUFFMUJDLEdBQU8sU0FBU0MsRUFBR0MsRUFBSUMsR0FFdEIsT0FBeUgsS0FBMUcsR0FEZkYsRUFBS0EsRUFBSSxFQUFLQSxFQUFJLEVBQUtBLEVBQUksRUFBS0EsRUFBSSxFQUFJQSxHQUNyQixFQUFLQyxHQUFNQyxFQUFLRCxHQUFNRCxFQUFJLEVBQUtBLEVBQUksR0FBT0UsRUFBVSxFQUFKRixFQUFRLEVBQUtDLEdBQU1DLEVBQUtELElBQU8sRUFBSSxFQUFJRCxHQUFLLEVBQUlDLEdBQWEsR0FBTyxHQVN4SUUsR0FBY2hLLEVBQVVpSyxXQUFhLFNBQVN0OUMsRUFBR3U5QyxHQUNoRCxJQUFJenBELEVBQUczQixFQUFHdWpELEVBQUdsaEQsRUFBRzBvRCxFQUFHOXBELEVBQUc5QixFQUFHMnRCLEVBQUs3akIsRUFBS3pKLEVBQUc2ckQsRUFDdEMsR0FBS3g5QyxFQUVFLEdBQWtCLGlCQUFSLEVBQ2hCbE0sRUFBSSxDQUFDa00sR0FBSyxHQUFLQSxHQUFLLEVBQUssSUFBUyxJQUFKQSxPQUN4QixDQUlOLEdBSCtCLE1BQTNCQSxFQUFFK0QsT0FBTy9ELEVBQUUzTCxPQUFTLEtBQ3ZCMkwsRUFBSUEsRUFBRUcsT0FBTyxFQUFHSCxFQUFFM0wsT0FBUyxJQUV4QnVuRCxHQUFhNTdDLEdBQ2hCbE0sRUFBSThuRCxHQUFhNTdDLFFBQ1gsR0FBb0IsTUFBaEJBLEVBQUUrRCxPQUFPLEdBQ0YsSUFBYi9ELEVBQUUzTCxTQUNMbEMsRUFBSTZOLEVBQUUrRCxPQUFPLEdBQ2IyeEMsRUFBSTExQyxFQUFFK0QsT0FBTyxHQUNidlAsRUFBSXdMLEVBQUUrRCxPQUFPLEdBQ2IvRCxFQUFJLElBQU03TixFQUFJQSxFQUFJdWpELEVBQUlBLEVBQUlsaEQsRUFBSUEsR0FHL0JWLEVBQUksRUFESmtNLEVBQUl5RixTQUFTekYsRUFBRUcsT0FBTyxHQUFJLE1BQ2hCLEdBQUtILEdBQUssRUFBSyxJQUFTLElBQUpBLFFBQ3hCLEdBQXVCLFFBQW5CQSxFQUFFRyxPQUFPLEVBQUcsR0FFdEIsR0FEQXJNLEVBQUkwcEQsRUFBU3g5QyxFQUFFc0YsTUFBTXN2QyxHQUNoQjJJLEdBWUUsSUFBd0IsSUFBcEJ2OUMsRUFBRUksUUFBUSxLQUNwQixPQUFPSixFQUFFc0YsTUFBTXV2QyxRQVpmcUksRUFBSzlnRCxPQUFPdEksRUFBRSxJQUFNLElBQU8sSUFDM0JWLEVBQUlnSixPQUFPdEksRUFBRSxJQUFNLElBR25CM0IsRUFBUSxHQUZSYixFQUFJOEssT0FBT3RJLEVBQUUsSUFBTSxNQUNuQjRoRCxFQUFLcGtELEdBQUssR0FBT0EsR0FBSzhCLEVBQUksR0FBSzlCLEVBQUk4QixFQUFJOUIsRUFBSThCLEdBRXZDVSxFQUFFTyxPQUFTLElBQ2RQLEVBQUUsR0FBS3NJLE9BQU90SSxFQUFFLEtBRWpCQSxFQUFFLEdBQUttcEQsR0FBS0MsRUFBSSxFQUFJLEVBQUcvcUQsRUFBR3VqRCxHQUMxQjVoRCxFQUFFLEdBQUttcEQsR0FBS0MsRUFBRy9xRCxFQUFHdWpELEdBQ2xCNWhELEVBQUUsR0FBS21wRCxHQUFLQyxFQUFJLEVBQUksRUFBRy9xRCxFQUFHdWpELFFBSzNCNWhELEVBQUlrTSxFQUFFc0YsTUFBTXN2QyxJQUFZZ0gsR0FBYW9CLFlBRXRDbHBELEVBQUUsR0FBS3NJLE9BQU90SSxFQUFFLElBQ2hCQSxFQUFFLEdBQUtzSSxPQUFPdEksRUFBRSxJQUNoQkEsRUFBRSxHQUFLc0ksT0FBT3RJLEVBQUUsSUFDWkEsRUFBRU8sT0FBUyxJQUNkUCxFQUFFLEdBQUtzSSxPQUFPdEksRUFBRSxVQTFDakJBLEVBQUk4bkQsR0FBYUksTUFnRWxCLE9BbkJJdUIsSUFBVUMsSUFDYnJyRCxFQUFJMkIsRUFBRSxHQUFLLElBQ1g0aEQsRUFBSTVoRCxFQUFFLEdBQUssSUFDWFUsRUFBSVYsRUFBRSxHQUFLLElBR1h4QyxJQUZBMnRCLEVBQU05akIsS0FBSzhqQixJQUFJOXNCLEVBQUd1akQsRUFBR2xoRCxLQUNyQjRHLEVBQU1ELEtBQUtDLElBQUlqSixFQUFHdWpELEVBQUdsaEQsS0FDSCxFQUNkeXFCLElBQVE3akIsRUFDWDhoRCxFQUFJOXBELEVBQUksR0FFUnpCLEVBQUlzdEIsRUFBTTdqQixFQUNWaEksRUFBSTlCLEVBQUksR0FBTUssR0FBSyxFQUFJc3RCLEVBQU03akIsR0FBT3pKLEdBQUtzdEIsRUFBTTdqQixHQUMvQzhoRCxFQUFLaitCLElBQVE5c0IsR0FBTXVqRCxFQUFJbGhELEdBQUs3QyxHQUFLK2pELEVBQUlsaEQsRUFBSSxFQUFJLEdBQU15cUIsSUFBUXkyQixHQUFNbGhELEVBQUlyQyxHQUFLUixFQUFJLEdBQUtRLEVBQUl1akQsR0FBSy9qRCxFQUFJLEVBQ2hHdXJELEdBQUssSUFFTnBwRCxFQUFFLEdBQU1vcEQsRUFBSSxHQUFPLEVBQ25CcHBELEVBQUUsR0FBVSxJQUFKVixFQUFVLEdBQU8sRUFDekJVLEVBQUUsR0FBVSxJQUFKeEMsRUFBVSxHQUFPLEdBRW5Cd0MsR0FFUjJwRCxHQUFnQixTQUFTcnFELEVBQUdtcUQsR0FDM0IsSUFHQ2xzRCxFQUFHZ1UsRUFBT3E0QyxFQUhQQyxFQUFTdnFELEVBQUVrUyxNQUFNczRDLEtBQWMsR0FDbEN4NEMsRUFBWSxFQUNaeTRDLEVBQVMsR0FFVixJQUFLRixFQUFPdHBELE9BQ1gsT0FBT2pCLEVBRVIsSUFBSy9CLEVBQUksRUFBR0EsRUFBSXNzRCxFQUFPdHBELE9BQVFoRCxJQUM5QmdVLEVBQVFzNEMsRUFBT3RzRCxHQUVmK1QsSUFEQXM0QyxFQUFPdHFELEVBQUUrTSxPQUFPaUYsRUFBV2hTLEVBQUVnTixRQUFRaUYsRUFBT0QsR0FBV0EsSUFDckMvUSxPQUFTZ1IsRUFBTWhSLE9BRVosS0FEckJnUixFQUFRZzRDLEdBQVloNEMsRUFBT2s0QyxJQUNqQmxwRCxRQUNUZ1IsRUFBTTVRLEtBQUssR0FFWm9wRCxHQUFVSCxHQUFRSCxFQUFRLFFBQVVsNEMsRUFBTSxHQUFLLElBQU1BLEVBQU0sR0FBSyxLQUFPQSxFQUFNLEdBQUssS0FBT0EsRUFBTSxHQUFLLFFBQVVBLEVBQU0xUCxLQUFLLE1BQVEsSUFFbEksT0FBT2tvRCxFQUFTenFELEVBQUUrTSxPQUFPaUYsSUFFMUJ3NEMsR0FBWSx1RUFFYixJQUFLenFELEtBQUt5b0QsR0FDVGdDLElBQWEsSUFBTXpxRCxFQUFJLE1BRXhCeXFELEdBQVksSUFBSWw5QixPQUFPazlCLEdBQVUsSUFBSyxNQUV0Q3ZLLEVBQVV5SyxrQkFBb0IsU0FBU2hxRCxHQUN0QyxJQUNDeXBELEVBREdRLEVBQVdqcUQsRUFBRSxHQUFLLElBQU1BLEVBQUUsR0FFMUI4cEQsR0FBVWg0QyxLQUFLbTRDLEtBQ2xCUixHQUF1QyxJQUE5QlEsRUFBUzM5QyxRQUFRLFVBQWlELElBQS9CMjlDLEVBQVMzOUMsUUFBUSxTQUM3RHRNLEVBQUUsR0FBSzJwRCxHQUFjM3BELEVBQUUsR0FBSXlwRCxHQUMzQnpwRCxFQUFFLEdBQUsycEQsR0FBYzNwRCxFQUFFLEdBQUl5cEQsSUFFNUJLLEdBQVV2MUIsVUFBWSxHQUdsQjcwQixFQUFBLEVBQVVnVCxzQkFDZGhULEVBQUEsRUFBVWdULG9CQUFzQjZzQyxFQUFVeUssbUJBVTNDLElBQUlFLEdBQWdCLFNBQVNwRyxFQUFNcUcsRUFBS0MsRUFBYUMsR0FDbkQsR0FBWSxNQUFSdkcsRUFDSCxPQUFPLFNBQVM1M0MsR0FBSSxPQUFPQSxHQUU1QixJQU9DbytDLEVBUEdDLEVBQVNKLEdBQU9yRyxFQUFLdHlDLE1BQU1zNEMsS0FBYyxDQUFDLEtBQUssR0FBSyxHQUN2RFUsRUFBUTFHLEVBQUt4akQsTUFBTWlxRCxHQUFRMW9ELEtBQUssSUFBSTJQLE1BQU13dkMsSUFBZSxHQUN6RHlKLEVBQU0zRyxFQUFLejNDLE9BQU8sRUFBR3kzQyxFQUFLeDNDLFFBQVFrK0MsRUFBTSxLQUN4Q3JHLEVBQXdDLE1BQWpDTCxFQUFLN3pDLE9BQU82ekMsRUFBS3ZqRCxPQUFTLEdBQWMsSUFBTSxHQUNyRG1xRCxHQUFnQyxJQUF2QjVHLEVBQUt4M0MsUUFBUSxLQUFlLElBQU0sSUFDM0NxK0MsRUFBVUgsRUFBTWpxRCxPQUNoQnFxRCxFQUFRRCxFQUFVLEVBQUtILEVBQU0sR0FBRy8zQyxRQUFRcXVDLEVBQVMsSUFBTSxHQUV4RCxPQUFLNkosRUFJSkwsRUFER0gsRUFDUyxTQUFTaitDLEdBQ3BCLElBQUlxRixFQUFPczVDLEVBQU10dEQsRUFBR3lDLEVBQ3BCLEdBQWtCLGlCQUFSLEVBQ1RrTSxHQUFLMCtDLE9BQ0MsR0FBSVAsR0FBU3JJLEVBQXVCbHdDLEtBQUs1RixHQUFJLENBRW5ELElBREFsTSxFQUFJa00sRUFBRXVHLFFBQVF1dkMsRUFBd0IsS0FBSzFoRCxNQUFNLEtBQzVDL0MsRUFBSSxFQUFHQSxFQUFJeUMsRUFBRU8sT0FBUWhELElBQ3pCeUMsRUFBRXpDLEdBQUsrc0QsRUFBVXRxRCxFQUFFekMsSUFFcEIsT0FBT3lDLEVBQUU2QixLQUFLLEtBS2YsR0FIQTBQLEdBQVNyRixFQUFFc0YsTUFBTXM0QyxLQUFjLENBQUNTLElBQVMsR0FFekNodEQsR0FEQXN0RCxFQUFPMytDLEVBQUU1TCxNQUFNaVIsR0FBTzFQLEtBQUssSUFBSTJQLE1BQU13dkMsSUFBZSxJQUMzQ3pnRCxPQUNMb3FELEVBQVVwdEQsSUFDYixPQUFTQSxFQUFJb3RELEdBQ1pFLEVBQUt0dEQsR0FBSzZzRCxFQUFjUyxHQUFRdHRELEVBQUksR0FBSyxFQUFLLEdBQU1pdEQsRUFBTWp0RCxHQUc1RCxPQUFPa3RELEVBQU1JLEVBQUtocEQsS0FBSzZvRCxHQUFTQSxFQUFRbjVDLEVBQVE0eUMsSUFBK0IsSUFBeEJqNEMsRUFBRUksUUFBUSxTQUFrQixTQUFXLEtBS3BGLFNBQVNKLEdBQ3BCLElBQUkyK0MsRUFBTTdxRCxFQUFHekMsRUFDYixHQUFrQixpQkFBUixFQUNUMk8sR0FBSzArQyxPQUNDLEdBQUlQLEdBQVNySSxFQUF1Qmx3QyxLQUFLNUYsR0FBSSxDQUVuRCxJQURBbE0sRUFBSWtNLEVBQUV1RyxRQUFRdXZDLEVBQXdCLEtBQUsxaEQsTUFBTSxLQUM1Qy9DLEVBQUksRUFBR0EsRUFBSXlDLEVBQUVPLE9BQVFoRCxJQUN6QnlDLEVBQUV6QyxHQUFLK3NELEVBQVV0cUQsRUFBRXpDLElBRXBCLE9BQU95QyxFQUFFNkIsS0FBSyxLQUlmLEdBREF0RSxHQURBc3RELEVBQU8zK0MsRUFBRXNGLE1BQWdCLE1BQVZrNUMsRUFBZ0IxSixFQUFhQyxJQUF5QixJQUM1RDFnRCxPQUNMb3FELEVBQVVwdEQsSUFDYixPQUFTQSxFQUFJb3RELEdBQ1pFLEVBQUt0dEQsR0FBSzZzRCxFQUFjUyxHQUFRdHRELEVBQUksR0FBSyxFQUFLLEdBQU1pdEQsRUFBTWp0RCxHQUc1RCxPQUFTa3RELEdBQWEsU0FBTnYrQyxHQUFnQkEsRUFBRUcsT0FBTyxFQUFHSCxFQUFFSSxRQUFRdStDLEVBQUssTUFBY0osR0FBT0ksRUFBS2hwRCxLQUFLNm9ELEdBQVN2RyxHQTdDNUYsU0FBU2o0QyxHQUFJLE9BQU9BLElBdUQ3QjQrQyxHQUFpQixTQUFTNzBDLEdBRXpCLE9BREFBLEVBQVFBLEVBQU0zVixNQUFNLEtBQ2IsU0FBUzdCLEVBQUcwRSxFQUFHOUQsRUFBRzByRCxFQUFNeDZDLEVBQUlvSCxFQUFRelAsR0FDMUMsSUFDQzNLLEVBREd5QyxHQUFLbUQsRUFBSSxJQUFJN0MsTUFBTSxLQUd2QixJQURBNEgsRUFBTyxHQUNGM0ssRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBQ2xCMkssRUFBSytOLEVBQU0xWSxJQUFNeUMsRUFBRXpDLEdBQUt5QyxFQUFFekMsSUFBTXlDLEdBQUt6QyxFQUFJLEdBQUssR0FBTSxHQUVyRCxPQUFPd3RELEVBQUtDLE1BQU12c0QsRUFBR3lKLEVBQU1xSSxFQUFJb0gsS0FxRGpDMHVDLElBaERrQjF6QyxFQUFXczRDLGdCQUFrQixTQUFTLytDLEdBQ3ZEL08sS0FBS3dhLE9BQU85RixTQUFTM0YsR0FNckIsSUFMQSxJQUlDb0UsRUFBS0MsRUFBSWhULEVBQUdreUIsRUFBS3B3QixFQUpkeEIsRUFBSVYsS0FBS3dMLEtBQ1o4aUMsRUFBUTV0QyxFQUFFNHRDLE1BQ1YwYSxFQUFNdG9ELEVBQUV5b0QsU0FHRkgsR0FDTjcxQyxFQUFNbTdCLEVBQU0wYSxFQUFJajZDLEdBQ1ppNkMsRUFBSTluRCxFQUNQaVMsRUFBTTYxQyxFQUFJOW5ELEVBQUVpUyxHQUNGQSxFQU5MLE1BTWtCQSxHQU5sQixPQU9MQSxFQUFNLEdBRVA2MUMsRUFBSTFuRCxFQUFFMG5ELEVBQUk5bUQsR0FBS2lSLEVBQ2Y2MUMsRUFBTUEsRUFBSXY4QyxNQU1YLEdBSkkvTCxFQUFFcXRELGFBQ0xydEQsRUFBRXF0RCxXQUFXNUYsU0FBV3puRCxFQUFFcVUsSUFBTXJVLEVBQUVxVSxJQUFJeFUsS0FBS1AsS0FBS3dULE9BQVE4NkIsRUFBTTZaLFNBQVVub0QsS0FBS3NCLEVBQUd0QixLQUFLd1QsUUFBVTg2QixFQUFNNlosVUFHNUYsSUFBTnA1QyxHQUFpQixJQUFOQSxFQUdkLElBRkFpNkMsRUFBTXRvRCxFQUFFeW9ELFNBQ1JqbkQsRUFBVyxJQUFONk0sRUFBVyxJQUFNLElBQ2ZpNkMsR0FBSyxDQUVYLElBREE1MUMsRUFBSzQxQyxFQUFJMW5ELEdBQ0Q0RCxNQUVELEdBQWdCLElBQVprTyxFQUFHbE8sS0FBWSxDQUV6QixJQURBb3RCLEVBQU1sZixFQUFHNDZDLElBQU01NkMsRUFBR2pSLEVBQUlpUixFQUFHNjZDLElBQ3BCN3RELEVBQUksRUFBR0EsRUFBSWdULEVBQUcvUyxFQUFHRCxJQUNyQmt5QixHQUFPbGYsRUFBRyxLQUFLaFQsR0FBS2dULEVBQUcsTUFBTWhULEVBQUUsSUFFaENnVCxFQUFHbFIsR0FBS293QixRQU5SbGYsRUFBR2xSLEdBQUtrUixFQUFHalIsRUFBSWlSLEVBQUc0NkMsSUFRbkJoRixFQUFNQSxFQUFJdjhDLFFBYUcsU0FBU25MLEVBQUdZLEVBQUc2TSxFQUFHZ0MsRUFBTTdQLEdBQ3ZDbEIsS0FBS3NCLEVBQUlBLEVBQ1R0QixLQUFLa0MsRUFBSUEsRUFDVGxDLEtBQUsrTyxFQUFJQSxFQUNUL08sS0FBS2tCLEVBQUlBLEVBQ0w2UCxJQUNIQSxFQUFLRixNQUFRN1EsS0FDYkEsS0FBS3lNLE1BQVFzRSxLQXlGZm05QyxJQXRFZ0IxNEMsRUFBVzI0QyxjQUFnQixTQUFTN3NELEVBQUd5SixFQUFNNmlELEVBQU14NkMsRUFBSW9ILEVBQVE0ekMsR0FDOUUsSUFLQ2h1RCxFQUFHOEIsRUFBR21zRCxFQUFJckYsRUFBS3R0QyxFQUxaNHlDLEVBQU1sN0MsRUFDVEcsRUFBUSxHQUNSRCxFQUFNLEdBQ05pN0MsRUFBWVgsRUFBS1ksV0FDakJDLEVBQVd2SixFQWdCWixJQWRBMEksRUFBS1ksV0FBYSxLQUNsQnRKLEVBQVduNkMsRUFDWHFJLEVBQUtzSSxFQUFVa3lDLEVBQUtDLE1BQU12c0QsRUFBR3lKLEVBQU1xSSxFQUFJb0gsR0FDdkMwcUMsRUFBV3VKLEVBRVBMLElBQ0hSLEVBQUtZLFdBQWFELEVBQ2RELElBQ0hBLEVBQUl6OUMsTUFBUSxLQUNSeTlDLEVBQUl6OUMsUUFDUHk5QyxFQUFJejlDLE1BQU1wRSxNQUFRLFFBSWQyRyxHQUFNQSxJQUFPazdDLEdBQUssQ0FDeEIsR0FBSWw3QyxFQUFHbE8sTUFBUSxJQUVkb08sRUFEQXBSLEVBQUlrUixFQUFHbFIsR0FDRWtSLEVBQUdqUixFQUFJaVIsRUFBRzNTLEVBQ25COFMsRUFBTXJSLEdBQUtrUixFQUFHalIsRUFDVGlzRCxJQUNKcEYsRUFBTSxJQUFJRSxHQUFjOTFDLEVBQUksSUFBS2xSLEVBQUc4bUQsRUFBSzUxQyxFQUFHbFMsR0FDNUNrUyxFQUFHM1MsRUFBSSxHQUVRLElBQVoyUyxFQUFHbE8sTUFFTixJQURBOUUsRUFBSWdULEVBQUcvUyxJQUNFRCxFQUFJLEdBQ1ppdUQsRUFBSyxLQUFPanVELEVBRVprVCxFQURBcFIsRUFBSWtSLEVBQUdsUixFQUFJLElBQU1tc0QsR0FDUmo3QyxFQUFHNUgsS0FBSzZpRCxHQUNqQjk2QyxFQUFNclIsR0FBS2tSLEVBQUdpN0MsR0FDVEQsSUFDSnBGLEVBQU0sSUFBSUUsR0FBYzkxQyxFQUFJaTdDLEVBQUluc0QsRUFBRzhtRCxFQUFLNTFDLEVBQUdzN0MsSUFBSUwsS0FLbkRqN0MsRUFBS0EsRUFBRzNHLE1BRVQsTUFBTyxDQUFDNmhDLE1BQU0vNkIsRUFBT0QsSUFBSUEsRUFBSzYxQyxTQUFTSCxFQUFLNTFDLEdBQUdzSSxJQXlCakNsRyxFQUFXMDRDLGFBQWUsU0FBUzVzRCxFQUFHWSxFQUFHQyxFQUFHMUIsRUFBR3NRLEVBQU03TCxFQUFNckQsRUFBR1gsRUFBRzBHLEVBQUlyRSxFQUFHeUMsR0FDdEZoRyxLQUFLc0IsRUFBSUEsRUFDVHRCLEtBQUtrQyxFQUFJQSxFQUNUbEMsS0FBS21DLEVBQUlBLEVBQ1RuQyxLQUFLUyxFQUFJQSxFQUNUVCxLQUFLNkIsRUFBSUEsR0FBS0ssRUFDUlosYUFBYTRzRCxJQUNsQnJ6QyxFQUFnQnJYLEtBQUt4RCxLQUFLNkIsR0FFM0I3QixLQUFLa0IsRUFBS0EsRUFBdUIsbUJBQVIsRUFBc0JBLEVBQUlnSixLQUFLdUssTUFBMUN2VCxFQUNkbEIsS0FBS2tGLEtBQU9BLEdBQVEsRUFDaEIwQyxJQUNINUgsS0FBSzRILEdBQUtBLEVBQ1ZxNkMsR0FBZSxHQUVoQmppRCxLQUFLdUQsT0FBVzhiLElBQU45YixFQUFtQnBCLEVBQUlvQixFQUNqQ3ZELEtBQUtnRyxPQUFXcVosSUFBTnJaLEVBQW1CN0QsRUFBSTFCLEVBQUl1RixFQUNqQytLLElBQ0gvUSxLQUFLeU0sTUFBUXNFLEVBQ2JBLEVBQUtGLE1BQVE3USxRQUlmMnVELEdBQTJCLFNBQVM1bkQsRUFBUThOLEVBQU10QixFQUFPRCxFQUFLdkMsRUFBTStELEdBQ25FLElBQUkxQixFQUFLLElBQUk4NkMsR0FBYW5uRCxFQUFROE4sRUFBTXRCLEVBQU9ELEVBQU1DLEVBQU94QyxHQUFPLEVBQUcrRCxHQUd0RSxPQUZBMUIsRUFBRzdQLEVBQUlnUSxFQUNQSCxFQUFHcE4sRUFBSW9OLEVBQUc0NkMsSUFBTTE2QyxFQUNURixHQXFCUnc3QyxHQUFnQnhNLEVBQVV5TSxhQUFlLFNBQVN2dEQsRUFBR1ksRUFBR3FCLEVBQUd5QyxFQUFHOG9ELEVBQU1uSSxFQUFNdnpDLEVBQUl4TCxFQUFJNFMsRUFBUTlGLEdBRXpGblIsRUFBSUEsR0FBS29qRCxHQUFRLEdBQ0MsbUJBQVIsSUFDVDNnRCxFQUFJQSxFQUFFMDlDLEVBQVFqd0MsSUFFZkwsRUFBSyxJQUFJODZDLEdBQWE1c0QsRUFBR1ksRUFBRyxFQUFHLEVBQUdrUixFQUFLc0IsRUFBVyxFQUFJLEVBQUksTUFBTSxFQUFPOU0sRUFBSXJFLEVBQUd5QyxHQUM5RUEsR0FBSyxHQUNEOG9ELEdBQVFuQyxHQUFVaDRDLEtBQUszTyxFQUFJekMsS0FDOUJ5QyxFQUFJLENBQUN6QyxFQUFHeUMsR0FDUm84QyxFQUFVeUssa0JBQWtCN21ELEdBQzVCekMsRUFBSXlDLEVBQUUsR0FDTkEsRUFBSUEsRUFBRSxJQUVQLElBSUM1RixFQUFHMnVELEVBQUlDLEVBQUlDLEVBQUlDLEVBQUlDLEVBQU9DLEVBQU9DLEVBQUlDLEVBQVU3QyxFQUFNOEMsRUFBSWo5QixFQUFLazlCLEVBSjNEQyxFQUFLbHNELEVBQUVKLE1BQU0sTUFBTXVCLEtBQUssS0FBS3ZCLE1BQU0sS0FDdEN1c0QsRUFBSzFwRCxFQUFFN0MsTUFBTSxNQUFNdUIsS0FBSyxLQUFLdkIsTUFBTSxLQUNuQzlDLEVBQUlvdkQsRUFBR3JzRCxPQUNQdXNELEdBQTRCLElBQWZ2TSxFQW9CZCxLQWxCd0IsSUFBcEJwOUMsRUFBRW1KLFFBQVEsT0FBbUMsSUFBcEI1TCxFQUFFNEwsUUFBUSxRQUNOLEtBQTNCbkosRUFBSXpDLEdBQUc0TCxRQUFRLFNBQTZDLEtBQTNCbkosRUFBSXpDLEdBQUc0TCxRQUFRLFFBQ3BEc2dELEVBQUtBLEVBQUcvcUQsS0FBSyxLQUFLNFEsUUFBUXV2QyxFQUF3QixNQUFNMWhELE1BQU0sS0FDOUR1c0QsRUFBS0EsRUFBR2hyRCxLQUFLLEtBQUs0USxRQUFRdXZDLEVBQXdCLE1BQU0xaEQsTUFBTSxPQUU5RHNzRCxFQUFLQSxFQUFHL3FELEtBQUssS0FBS3ZCLE1BQU0sS0FBS3VCLEtBQUssTUFBTXZCLE1BQU0sS0FDOUN1c0QsRUFBS0EsRUFBR2hyRCxLQUFLLEtBQUt2QixNQUFNLEtBQUt1QixLQUFLLE1BQU12QixNQUFNLE1BRS9DOUMsRUFBSW92RCxFQUFHcnNELFFBRUovQyxJQUFNcXZELEVBQUd0c0QsU0FHWi9DLEdBREFvdkQsR0FBTTlJLEdBQVEsSUFBSXhqRCxNQUFNLE1BQ2pCQyxRQUVSZ1EsRUFBR29ILE9BQVNBLEVBQ1pwSCxFQUFHc0IsU0FBV0EsRUFDZGk0QyxHQUFVdjFCLFVBQVksRUFDakJoM0IsRUFBSSxFQUFHQSxFQUFJQyxFQUFHRCxJQUtsQixHQUpBNnVELEVBQUtRLEVBQUdydkQsR0FDUjh1RCxFQUFLUSxFQUFHdHZELEdBQUssSUFDYml2RCxFQUFLOTZDLFdBQVcwNkMsS0FFQyxJQUFQSSxFQUNUajhDLEVBQUd3OEMsV0FBVyxHQUFJUCxFQUFJaEYsR0FBYTZFLEVBQUlHLEdBQUtILEVBQUc1NUMsUUFBUXN1QyxFQUFZLE9BQU0rTCxJQUFtQyxJQUF0QlQsRUFBRy8vQyxRQUFRLFFBQWdCakYsS0FBS3VLLE9BQWUsUUFHL0gsR0FBSXE2QyxHQUFRbkMsR0FBVWg0QyxLQUFLczZDLEdBRWpDMzhCLEVBQU0sTUFETkEsRUFBTTQ4QixFQUFHLy9DLFFBQVEsS0FBTyxHQUNMKy9DLEVBQUdoZ0QsT0FBT29qQixHQUFPLElBQ3BDazlCLEdBQWlDLElBQXZCTixFQUFHLy9DLFFBQVEsUUFBaUJzMkMsRUFDdENnSCxFQUFPeUMsRUFDUEQsRUFBSzdDLEdBQVk2QyxFQUFJTyxHQUNyQk4sRUFBSzlDLEdBQVk4QyxFQUFJTSxJQUNyQkYsRUFBWUwsRUFBRzdyRCxPQUFTOHJELEVBQUc5ckQsT0FBUyxLQUNuQnFpRCxHQUE4QixJQUFWeUosRUFBRyxJQUN2Qzk3QyxFQUFHLEtBQU9BLEVBQUcvUyxJQUFNK1MsRUFBRy9TLEVBQUksZUFBaUIsY0FDM0MrUyxFQUFHcE4sRUFBSW9OLEVBQUdwTixFQUFFN0MsTUFBTXVzRCxFQUFHdHZELElBQUlzRSxLQUFLLGlCQUV6QitnRCxJQUNKNkosR0FBVyxHQUVSRSxFQUNIcDhDLEVBQUd3OEMsV0FBV25ELEVBQUt2OUMsT0FBTyxFQUFHdTlDLEVBQUt0OUMsUUFBUSxTQUFXbWdELEVBQVcsUUFBVSxRQUFTTCxFQUFHLEdBQUk1RSxHQUFhNkUsRUFBRyxHQUFJRCxFQUFHLElBQUssS0FBSyxHQUFPLEdBQ2hJVyxXQUFXLEdBQUlYLEVBQUcsR0FBSTVFLEdBQWE2RSxFQUFHLEdBQUlELEVBQUcsSUFBSyxNQUFNLEdBQ3hEVyxXQUFXLEdBQUlYLEVBQUcsR0FBSTVFLEdBQWE2RSxFQUFHLEdBQUlELEVBQUcsSUFBTUssRUFBVyxLQUFPLElBQU1oOUIsR0FBTSxHQUVuRmxmLEVBQUd3OEMsV0FBV25ELEVBQUt2OUMsT0FBTyxFQUFHdTlDLEVBQUt0OUMsUUFBUSxTQUFXbWdELEVBQVcsUUFBVSxRQUFTTCxFQUFHLEdBQUlDLEVBQUcsR0FBS0QsRUFBRyxHQUFJLElBQUsva0QsS0FBS3VLLE9BQU8sR0FDeEhtN0MsV0FBVyxHQUFJWCxFQUFHLEdBQUlDLEVBQUcsR0FBS0QsRUFBRyxHQUFJLElBQUsva0QsS0FBS3VLLE9BQy9DbTdDLFdBQVcsR0FBSVgsRUFBRyxHQUFJQyxFQUFHLEdBQUtELEVBQUcsR0FBS0ssRUFBVyxJQUFNaDlCLEVBQU1wb0IsS0FBS3VLLE9BR2pFNjZDLElBQ0hMLEVBQU1BLEVBQUc3ckQsT0FBUyxFQUFLLEVBQUk2ckQsRUFBRyxHQUM5Qjc3QyxFQUFHdzhDLFdBQVcsR0FBSVgsR0FBTUMsRUFBRzlyRCxPQUFTLEVBQUssRUFBSThyRCxFQUFHLElBQU1ELEVBQUkzOEIsR0FBSyxLQUdqRXE2QixHQUFVdjFCLFVBQVksT0FNdEIsR0FIQSszQixFQUFRRixFQUFHNTZDLE1BQU1zdkMsR0FPVixDQUVOLEtBREF5TCxFQUFRRixFQUFHNzZDLE1BQU11dkMsS0FDSHdMLEVBQU1oc0QsU0FBVytyRCxFQUFNL3JELE9BRXBDLE9BQU9nUSxFQUdSLElBREE0N0MsRUFBSyxFQUNBRCxFQUFLLEVBQUdBLEVBQUtJLEVBQU0vckQsT0FBUTJyRCxJQUMvQlEsRUFBS0osRUFBTUosR0FDWHRDLEVBQU93QyxFQUFHOS9DLFFBQVFvZ0QsRUFBSVAsR0FDdEI1N0MsRUFBR3c4QyxXQUFXWCxFQUFHLy9DLE9BQU84L0MsRUFBSXZDLEVBQU91QyxHQUFLN2pELE9BQU9va0QsR0FBS2xGLEdBQWErRSxFQUFNTCxHQUFLUSxHQUFLLE1BQUtJLEdBQWdELE9BQW5DVixFQUFHLy9DLE9BQU91OUMsRUFBTzhDLEVBQUduc0QsT0FBUSxLQUFlOEcsS0FBS3VLLE1BQXVCLElBQVBzNkMsR0FDbktDLEVBQUt2QyxFQUFPOEMsRUFBR25zRCxPQUVoQmdRLEVBQUcsS0FBT0EsRUFBRy9TLElBQU00dUQsRUFBRy8vQyxPQUFPOC9DLFFBaEI3QjU3QyxFQUFHLEtBQU9BLEVBQUcvUyxJQUFPK1MsRUFBRy9TLEdBQUsrUyxFQUFHLEtBQU9BLEVBQUcvUyxHQUFNLElBQU02dUQsRUFBS0EsRUFxQjdELElBQXdCLElBQXBCbHBELEVBQUVtSixRQUFRLE1BQWlCaUUsRUFBRzVILEtBQU0sQ0FFdkMsSUFEQThtQixFQUFNbGYsRUFBRzQ2QyxJQUFNNTZDLEVBQUc1SCxLQUFLckosRUFDbEIvQixFQUFJLEVBQUdBLEVBQUlnVCxFQUFHL1MsRUFBR0QsSUFDckJreUIsR0FBT2xmLEVBQUcsS0FBT2hULEdBQUtnVCxFQUFHNUgsS0FBSyxLQUFPcEwsR0FFdENnVCxFQUFHcE4sRUFBSXNzQixFQUFNbGYsRUFBRyxLQUFPaFQsR0FNeEIsT0FKS2dULEVBQUcvUyxJQUNQK1MsRUFBR2xPLE1BQVEsRUFDWGtPLEVBQUc0NkMsSUFBTTU2QyxFQUFHcE4sR0FFTm9OLEVBQUd5OEMsUUFBVXo4QyxHQUVyQmhULEdBQUksRUFLTCxLQUZBOEIsRUFBSWdzRCxHQUFhbHNELFdBQ2YzQixFQUFJNkIsRUFBRTBGLEdBQUssSUFDSnhILEdBQUksR0FDWjhCLEVBQUUsS0FBTzlCLElBQUssRUFDZDhCLEVBQUUsS0FBTzlCLElBQUssR0FFZjhCLEVBQUU4ckQsSUFBTSxHQUNSOXJELEVBQUV1SyxNQUFRdkssRUFBRTJPLE1BQVEzTyxFQUFFMnRELE9BQVMzdEQsRUFBRXNKLEtBQU90SixFQUFFc1ksT0FBU3RZLEVBQUV3UyxTQUFXeFMsRUFBRXdzRCxJQUFNLEtBZXhFeHNELEVBQUUwdEQsV0FBYSxTQUFTdEMsRUFBS25yRCxFQUFHMUIsRUFBR3VtRCxFQUFLOWxELEVBQUc0dUQsR0FDMUMsSUFBSTE4QyxFQUFLcFQsS0FDUkssRUFBSStTLEVBQUcvUyxFQUVSLE9BREErUyxFQUFHLEtBQU8vUyxJQUFPeXZELElBQVF6dkQsR0FBSytTLEVBQUcsS0FBTy9TLElBQU8sSUFBTWl0RCxFQUFNQSxHQUFPLEdBQzdEN3NELEdBQWEsSUFBTkosR0FBWStTLEVBQUdvSCxRQUkzQnBILEVBQUcvUyxJQUNIK1MsRUFBR2xPLEtBQU9rTyxFQUFHc0IsU0FBVyxFQUFJLEVBQzVCdEIsRUFBRyxLQUFPQSxFQUFHL1MsR0FBSzJtRCxHQUFPLEdBQ3JCM21ELEVBQUksR0FDUCtTLEVBQUc1SCxLQUFLLEtBQU9uTCxHQUFLOEIsRUFBSTFCLEVBQ3hCMlMsRUFBR3M3QyxJQUFJLEtBQU9ydUQsR0FBS2EsRUFDbkJrUyxFQUFHLEtBQU8vUyxHQUFLOEIsRUFDVmlSLEVBQUdvSCxTQUNQcEgsRUFBR3k4QyxPQUFTLElBQUkzQixHQUFhOTZDLEVBQUksS0FBTy9TLEVBQUc4QixFQUFHMUIsRUFBRzJTLEVBQUd5OEMsUUFBVXo4QyxFQUFJLEVBQUdBLEVBQUd2UixFQUFHWCxFQUFHa1MsRUFBR3hMLElBQ2pGd0wsRUFBR3k4QyxPQUFPN0IsSUFBTSxHQUVWNTZDLElBRVJBLEVBQUc1SCxLQUFPLENBQUNySixFQUFFQSxFQUFJMUIsR0FDakIyUyxFQUFHczdDLElBQU0sR0FDVHQ3QyxFQUFHalIsRUFBSUEsRUFDUGlSLEVBQUczUyxFQUFJQSxFQUNQMlMsRUFBR2xTLEVBQUlBLEVBQ0FrUyxLQXJCTkEsRUFBRyxLQUFPL1MsSUFBTThCLEdBQUs2a0QsR0FBTyxJQUNyQjV6QyxJQXFDVCxJQUFJMjhDLEdBQWMsU0FBUzd0RCxFQUFHOHRELEdBQzVCQSxFQUFVQSxHQUFXLEdBQ3JCaHdELEtBQUtrQyxFQUFJOHRELEVBQVFDLFFBQVMvSixFQUFpQmhrRCxJQUFVQSxFQUNyRG1nRCxFQUFjbmdELEdBQUttZ0QsRUFBY3JpRCxLQUFLa0MsR0FBS2xDLEtBQzNDQSxLQUFLa3dELE9BQVNGLEVBQVE3QyxXQUFhSixHQUFjaUQsRUFBUUcsYUFBY0gsRUFBUTU3QyxNQUFPNDdDLEVBQVEvQyxZQUFhK0MsRUFBUTlDLE9BQy9HOEMsRUFBUUksU0FDWHB3RCxLQUFLNnRELE1BQVFtQyxFQUFRSSxRQUV0QnB3RCxLQUFLOHVELEtBQU9rQixFQUFRNTdDLE1BQ3BCcFUsS0FBS2t0RCxNQUFROEMsRUFBUTlDLE1BQ3JCbHRELEtBQUtxd0QsUUFBVUwsRUFBUUssUUFDdkJyd0QsS0FBSzJtRCxLQUFPcUosRUFBUUcsYUFDcEJud0QsS0FBS3N3RCxVQUFZTixFQUFRTSxVQUN6QnR3RCxLQUFLNEgsR0FBS29vRCxFQUFRMW9ELFVBQVksR0FJL0JpcEQsR0FBOEIvNkMsRUFBVys2Qyw0QkFBOEIsU0FBU3J1RCxFQUFHOHRELEVBQVNRLEdBQ25FLGlCQUFkLElBQ1RSLEVBQVUsQ0FBQ0ksT0FBT0ksSUFFbkIsSUFFQ3B3RCxFQUZHeUMsRUFBSVgsRUFBRWlCLE1BQU0sS0FDZnpDLEVBQUlzdkQsRUFBUUcsYUFHYixJQURBSyxFQUFXQSxHQUFZLENBQUM5dkQsR0FDbkJOLEVBQUksRUFBR0EsRUFBSXlDLEVBQUVPLE9BQVFoRCxJQUN6QjR2RCxFQUFRQyxPQUFnQixJQUFON3ZELEdBQVc0dkQsRUFBUUMsT0FDckNELEVBQVFHLGFBQWVLLEVBQVNwd0QsSUFBTU0sRUFDL0IsSUFBSXF2RCxHQUFZbHRELEVBQUV6QyxHQUFJNHZELElBSy9CUyxHQUFzQmo3QyxFQUFXaTdDLG9CQUFzQixTQUFTdnVELEdBQy9ELElBQUttZ0QsRUFBY25nRCxHQUFJLENBQ3RCLElBQUl3dUQsRUFBYXh1RCxFQUFFNFEsT0FBTyxHQUFHd0ssY0FBZ0JwYixFQUFFZ04sT0FBTyxHQUFLLFNBQzNEcWhELEdBQTRCcnVELEVBQUcsQ0FBQ2t1RCxPQUFPLFNBQVM5dUQsRUFBRzBFLEVBQUc5RCxFQUFHMHJELEVBQU14NkMsRUFBSW9ILEVBQVF6UCxHQUMxRSxJQUFJNGxELEVBQWNodUQsRUFBU2diLElBQUlDLFVBQVVYLFFBQVF5ekMsR0FDakQsT0FBS0MsR0FJTEEsRUFBWUMsZUFDTHZPLEVBQWNuZ0QsR0FBRzJyRCxNQUFNdnNELEVBQUcwRSxFQUFHOUQsRUFBRzByRCxFQUFNeDZDLEVBQUlvSCxFQUFRelAsS0FKeERnN0MsRUFBSyxVQUFZMkssRUFBYSx3QkFDdkJ0OUMsU0FTWmxSLEVBQUk2dEQsR0FBWS90RCxXQVlkNnNELGFBQWUsU0FBU3Z0RCxFQUFHaUMsRUFBR3lDLEVBQUdvTixFQUFJb0gsRUFBUTlGLEdBQzlDLElBQ0N0VSxFQUFHcXZELEVBQUlDLEVBQUlydkQsRUFBR3d3RCxFQUFJQyxFQURmQyxFQUFNL3dELEtBQUtxd0QsUUFVZixHQVBJcndELEtBQUtrdEQsUUFBV3JJLEVBQXVCbHdDLEtBQUszTyxJQUFNNitDLEVBQXVCbHdDLEtBQUtwUixJQUNqRmtzRCxFQUFLbHNELEVBQUUrUixRQUFRdXZDLEVBQXdCLEtBQUsxaEQsTUFBTSxLQUNsRHVzRCxFQUFLMXBELEVBQUVzUCxRQUFRdXZDLEVBQXdCLEtBQUsxaEQsTUFBTSxNQUN4QzR0RCxJQUNWdEIsRUFBSyxDQUFDbHNELEdBQ05tc0QsRUFBSyxDQUFDMXBELEtBRUgwcEQsRUFBSSxDQUVQLElBREFydkQsRUFBS3F2RCxFQUFHdHNELE9BQVNxc0QsRUFBR3JzRCxPQUFVc3NELEVBQUd0c0QsT0FBU3FzRCxFQUFHcnNELE9BQ3hDaEQsRUFBSSxFQUFHQSxFQUFJQyxFQUFHRCxJQUNsQm1ELEVBQUlrc0QsRUFBR3J2RCxHQUFLcXZELEVBQUdydkQsSUFBTUosS0FBSzJtRCxLQUMxQjNnRCxFQUFJMHBELEVBQUd0dkQsR0FBS3N2RCxFQUFHdHZELElBQU1KLEtBQUsybUQsS0FDdEJvSyxJQUNIRixFQUFLdHRELEVBQUU0TCxRQUFRNGhELE9BQ2ZELEVBQUs5cUQsRUFBRW1KLFFBQVE0aEQsT0FFRixJQUFSRCxFQUNIckIsRUFBR3J2RCxHQUFLcXZELEVBQUdydkQsR0FBRytDLE1BQU00dEQsR0FBS3JzRCxLQUFLLEtBQ1osSUFBUm1zRCxJQUNWcEIsRUFBR3J2RCxJQUFNLElBQU0yd0QsSUFLbkJ4dEQsRUFBSWtzRCxFQUFHL3FELEtBQUssTUFDWnNCLEVBQUkwcEQsRUFBR2hyRCxLQUFLLE1BRWIsT0FBT2txRCxHQUFjdHRELEVBQUd0QixLQUFLa0MsRUFBR3FCLEVBQUd5QyxFQUFHaEcsS0FBSzh1RCxLQUFNOXVELEtBQUsybUQsS0FBTXZ6QyxFQUFJcFQsS0FBSzRILEdBQUk0UyxFQUFROUYsSUFnQmxGeFMsRUFBRTJyRCxNQUFRLFNBQVN2c0QsRUFBRzBFLEVBQUc5RCxFQUFHMHJELEVBQU14NkMsRUFBSW9ILEVBQVF6UCxHQUM3QyxPQUFPL0ssS0FBSzZ1RCxhQUFhdnRELEVBQUVnUSxNQUFPdFIsS0FBS2t3RCxPQUFPM0osR0FBVWpsRCxFQUFHdEIsS0FBS2tDLEVBQUdpZ0QsR0FBSyxFQUFPbmlELEtBQUsybUQsT0FBUTNtRCxLQUFLa3dELE9BQU9scUQsR0FBSW9OLEVBQUlvSCxJQTZCakg0bkMsRUFBVTRPLG9CQUFzQixTQUFTcndELEVBQU1zd0QsRUFBYTNwRCxHQUMzRGlwRCxHQUE0QjV2RCxFQUFNLENBQUN5dkQsT0FBTyxTQUFTOXVELEVBQUcwRSxFQUFHOUQsRUFBRzByRCxFQUFNeDZDLEVBQUlvSCxFQUFRelAsR0FDN0UsSUFBSTY3QyxFQUFLLElBQUlzSCxHQUFhNXNELEVBQUdZLEVBQUcsRUFBRyxFQUFHa1IsRUFBSSxFQUFHbFIsR0FBRyxFQUFPb0YsR0FHdkQsT0FGQXMvQyxFQUFHcHNDLE9BQVNBLEVBQ1pvc0MsRUFBR2x5QyxTQUFXdThDLEVBQVkzdkQsRUFBRzBFLEVBQUc0bkQsRUFBS3A2QyxPQUFRdFIsR0FDdEMwa0QsR0FDTHQvQyxTQUFTQSxLQVNiODZDLEVBQVU4TyxxQkFBc0IsRUFDaEMsSUFVQ0MsR0FpQkVDLEdBQUtDLEdBQU14TyxHQURSaDFDLEdBMUJGeWpELEdBQWtCLG9HQUFzR251RCxNQUFNLEtBQ2pJOGtELEdBQWlCL0IsRUFBaUIsYUFDbEM4QixHQUFvQmhDLEVBQWEsWUFDakN1TCxHQUF1QnJMLEVBQWlCLG1CQUN4Q3FDLEdBQW1ELE9BQXBDckMsRUFBaUIsZUFDaENzTCxHQUFZaDhDLEVBQVdnOEMsVUFBWSxXQUNsQ3h4RCxLQUFLa2pELFlBQWMzdUMsV0FBVzZ0QyxFQUFVRSw4QkFBZ0MsRUFDeEV0aUQsS0FBS3l4RCxXQUF3QyxJQUE3QnJQLEVBQVVzUCxpQkFBNkJuSixNQUF1Qm5HLEVBQVVzUCxnQkFBa0IsU0FFM0dDLEdBQWMsSUFBU0MsV0FJdkJDLEdBQWEsU0FBUzNzRCxFQUFNNHNELEVBQVdsZSxHQUN0QyxJQUVDMXhDLEVBRkc2eUMsRUFBVXR5QyxFQUFLNGlELGdCQUFnQiw2QkFBOEJuZ0QsR0FDaEU2c0QsRUFBTSxrQkFFUCxJQUFLN3ZELEtBQUsweEMsRUFDVG1CLEVBQVFpZCxlQUFlLEtBQU05dkQsRUFBRW9ULFFBQVF5OEMsRUFBSyxTQUFTcHdDLGNBQWVpeUIsRUFBVzF4QyxJQUdoRixPQURBNHZELEVBQVV0akMsWUFBWXVtQixHQUNmQSxHQUVSa2QsR0FBY3h2RCxFQUFLNnhCLGlCQUFtQixHQUN0QzQ5QixJQUVLcmtELEdBQVE0MUMsR0FBWSxXQUFXOXVDLEtBQUs2d0MsS0FBWSxJQUFTMk0sT0FFekQxdkQsRUFBSzRpRCxpQkFBbUI0TSxHQUFZempDLGNBQWdCM2dCLEtBQ3ZEdWpELEdBQU1TLEdBQVcsTUFBT0ksSUFFeEJwUCxJQURBd08sR0FBT1EsR0FBVyxPQUFRVCxHQUFLLENBQUN2TyxNQUFNLElBQUtDLE9BQU8sR0FBSWp1QixFQUFFLE9BQzNDb3FCLHdCQUF3QjRELE1BQ3JDd08sR0FBSy8vQyxNQUFNaWdELElBQXdCLFVBQ25DRixHQUFLLy9DLE1BQU0yMkMsSUFBa0IsY0FDN0JwNkMsR0FBU2cxQyxLQUFVd08sR0FBS3BTLHdCQUF3QjRELFNBQVdVLEdBQWNnRixJQUN6RTBKLEdBQVlsNUIsWUFBWXE0QixLQUVsQnZqRCxJQUVSdWtELEdBQWtCLFNBQVNwc0QsRUFBR3FzRCxFQUFPQyxFQUFXQyxFQUFVQyxFQUFjQyxHQUN2RSxJQUVDMWpELEVBQUc4bEIsRUFBR21JLEVBQUcwMUIsRUFBU0MsRUFBUzl2RCxFQUFHVSxFQUFHOUMsRUFBR0MsRUFBR2t5RCxFQUFJQyxFQUFJQyxFQUFhQyxFQUFZQyxFQUZyRUMsRUFBS2p0RCxFQUFFa3RELGFBQ1YxeUQsRUFBSTJ5RCxHQUFXbnRELEdBQUcsR0FFZml0RCxJQUNIRixFQUFhRSxFQUFHUCxRQUNoQk0sRUFBYUMsRUFBR04sV0FFWkosSUFBYXhqRCxFQUFJd2pELEVBQVNwdkQsTUFBTSxNQUFNQyxPQUFTLEtBRXZDLEtBRFpHLEVBQUl5QyxFQUFFMGpELFdBQ0E3MEIsR0FBbUIsSUFBUnR4QixFQUFFeTVCLEdBQVd6NUIsRUFBRXMvQyxNQUFRdC9DLEVBQUV1L0MsU0FBVyxJQUNwRHYvQyxFQUFJLENBQUNzeEIsRUFBR3RnQixXQUFXdk8sRUFBRW90RCxhQUFhLEtBQU9wdEQsRUFBRXF0RCxhQUFhLEtBQU9ydEQsRUFBRW90RCxhQUFhLE1BQVFwdEQsRUFBRXF0RCxhQUFhLE1BQVEsSUFBTSxFQUFHcjJCLEVBQUd6b0IsV0FBV3ZPLEVBQUVvdEQsYUFBYSxLQUFPcHRELEVBQUVxdEQsYUFBYSxLQUFPcnRELEVBQUVvdEQsYUFBYSxNQUFRcHRELEVBQUVxdEQsYUFBYSxNQUFRLElBQU0sRUFBR3hRLE1BQU0sRUFBR0MsT0FBTyxJQUd4UC96QyxFQUFJLEdBQTZCLEtBRGpDc2pELEVBQVF4SSxHQUFld0ksR0FBT2x2RCxNQUFNLE1BQ3hCLEdBQUdnTSxRQUFRLEtBQWNvRixXQUFXODlDLEVBQU0sSUFBTSxJQUFNOXVELEVBQUVzL0MsTUFBUXR1QyxXQUFXODlDLEVBQU0sS0FBTzl1RCxFQUFFc3hCLElBQ3hFLElBQTNCdzlCLEVBQU0sR0FBR2xqRCxRQUFRLEtBQWNvRixXQUFXODlDLEVBQU0sSUFBTSxJQUFNOXVELEVBQUV1L0MsT0FBU3Z1QyxXQUFXODlDLEVBQU0sS0FBTzl1RCxFQUFFeTVCLElBRXJHczFCLEVBQVVJLFFBQVVBLEVBQVVuK0MsV0FBV3hGLEVBQUUsSUFDM0N1akQsRUFBVUssUUFBVUEsRUFBVXArQyxXQUFXeEYsRUFBRSxJQUN2Q3dqRCxHQUFZL3hELElBQU04eUQsS0FDckJ6d0QsRUFBSXJDLEVBQUUsR0FDTitDLEVBQUkvQyxFQUFFLEdBQ05DLEVBQUlELEVBQUUsR0FDTkUsRUFBSUYsRUFBRSxHQUNOb3lELEVBQUtweUQsRUFBRSxHQUNQcXlELEVBQUtyeUQsRUFBRSxJQUNQc3lELEVBQWVqd0QsRUFBSW5DLEVBQUk2QyxFQUFJOUMsS0FFMUJvMEIsRUFBSTY5QixHQUFXaHlELEVBQUlveUQsR0FBZUgsSUFBWWx5RCxFQUFJcXlELElBQWlCcnlELEVBQUlveUQsRUFBS255RCxFQUFJa3lELEdBQU1FLEVBQ3RGOTFCLEVBQUkwMUIsSUFBWW52RCxFQUFJdXZELEdBQWVILEdBQVc5dkQsRUFBSWl3RCxJQUFpQmp3RCxFQUFJZ3dELEVBQUt0dkQsRUFBSXF2RCxHQUFNRSxFQUN0RkosRUFBVUosRUFBVUksUUFBVTNqRCxFQUFFLEdBQUs4bEIsRUFDckM4OUIsRUFBVUwsRUFBVUssUUFBVTVqRCxFQUFFLEdBQUtpdUIsSUFHbkNpMkIsSUFDQ1IsSUFDSEgsRUFBVWlCLFFBQVVOLEVBQUdNLFFBQ3ZCakIsRUFBVWtCLFFBQVVQLEVBQUdPLFFBQ3ZCUCxFQUFLWCxHQUVGRSxJQUFrQyxJQUFqQkEsSUFBNEQsSUFBbENwUSxFQUFVSSxxQkFDeEQzdEIsRUFBSTY5QixFQUFVSyxFQUNkLzFCLEVBQUkyMUIsRUFBVUssRUFJZEMsRUFBR00sU0FBWTErQixFQUFJcjBCLEVBQUUsR0FBS3c4QixFQUFJeDhCLEVBQUUsR0FBTXEwQixFQUN0Q28rQixFQUFHTyxTQUFZMytCLEVBQUlyMEIsRUFBRSxHQUFLdzhCLEVBQUl4OEIsRUFBRSxHQUFNdzhCLEdBRXRDaTJCLEVBQUdNLFFBQVVOLEVBQUdPLFFBQVUsR0FHdkJmLEdBQ0p6c0QsRUFBRXl0RCxhQUFhLGtCQUFtQjFrRCxFQUFFckssS0FBSyxPQUczQ2d2RCxHQUFlLFNBQVNDLEdBQ3ZCLElBSUNDLEVBSkd4QyxFQUFNaE0sRUFBZSxNQUFRcGxELEtBQUs2ekQsaUJBQW1CN3pELEtBQUs2ekQsZ0JBQWdCUixhQUFhLFVBQWEsOEJBQ3ZHUyxFQUFZOXpELEtBQUttK0MsV0FDakI0VixFQUFhL3pELEtBQUtnMEQsWUFDbEJDLEVBQVNqMEQsS0FBS3NSLE1BQU1xMEMsUUFLckIsR0FIQXNNLEdBQVl6akMsWUFBWTRpQyxHQUN4QkEsRUFBSTVpQyxZQUFZeHVCLE1BQ2hCQSxLQUFLc1IsTUFBTWlkLFFBQVUsUUFDakJvbEMsRUFDSCxJQUNDQyxFQUFPNXpELEtBQUswcEQsVUFDWjFwRCxLQUFLazBELGlCQUFtQmwwRCxLQUFLMHBELFFBQzdCMXBELEtBQUswcEQsUUFBVWdLLEdBQ2QsTUFBTzF0RCxTQUNDaEcsS0FBS2swRCxtQkFDZk4sRUFBTzV6RCxLQUFLazBELG9CQVNiLE9BUElILEVBQ0hELEVBQVVLLGFBQWFuMEQsS0FBTSt6RCxHQUU3QkQsRUFBVXRsQyxZQUFZeHVCLE1BRXZCaXlELEdBQVlsNUIsWUFBWXE0QixHQUN4QnB4RCxLQUFLc1IsTUFBTXEwQyxRQUFVc08sRUFDZEwsR0FTUm5LLEdBQVMsU0FBU3pqRCxHQUNqQixTQUFVMnJELEtBQWUzckQsRUFBRXdqRCxRQUFZeGpELEVBQUVtNEMsYUFBY240QyxFQUFFNnRELGtCQVIvQyxTQUFTN3RELEdBQ25CLElBQ0MsT0FBT0EsRUFBRTBqRCxVQUNSLE1BQU9yb0IsR0FDUixPQUFPcXlCLEdBQWFuekQsS0FBS3lGLEdBQUcsSUFJZ0RvdUQsQ0FBU3B1RCxLQUV2RnN0RCxHQUFvQixDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUMvQkgsR0FBYSxTQUFTbnRELEVBQUdxdUQsR0FDeEIsSUFHQ0MsRUFBV255RCxFQUFHM0IsRUFBR3FCLEVBQUcweUQsRUFBS1AsRUFBYXBpQixFQUhuQ3FoQixFQUFLanRELEVBQUVrdEQsY0FBZ0IsSUFBSTFCLEdBRTlCbGdELEVBQVF0TCxFQUFFc0wsTUFpRFgsR0EvQ0kyMkMsR0FDSDlsRCxFQUFJb2tELEdBQVV2Z0QsRUFBR2dpRCxHQUFtQixNQUFNLEdBQ2hDaGlELEVBQUU4L0MsZUFHWjNqRCxHQURBQSxFQUFJNkQsRUFBRTgvQyxhQUFhanlDLE9BQU9RLE1BQU1zd0MsS0FDVCxJQUFieGlELEVBQUVpQixPQUFnQixDQUFDakIsRUFBRSxHQUFHK00sT0FBTyxHQUFJL0QsT0FBT2hKLEVBQUUsR0FBRytNLE9BQU8sSUFBSy9ELE9BQU9oSixFQUFFLEdBQUcrTSxPQUFPLElBQUsvTSxFQUFFLEdBQUcrTSxPQUFPLEdBQUsrakQsRUFBR3ArQixHQUFLLEVBQUtvK0IsRUFBR2oyQixHQUFLLEdBQUl0NEIsS0FBSyxLQUFPLElBRXBKNHZELEdBQWNueUQsR0FBVyxTQUFOQSxHQUFzQiw2QkFBTkEsRUFDL0I4bEQsSUFBa0JxTSxJQUFjdHVELEVBQUV3dUQsY0FBZ0J4dUQsSUFBTWlzRCxLQUUzRHB3RCxFQUFJeVAsRUFBTWlkLFFBQ1ZqZCxFQUFNaWQsUUFBVSxTQUNoQnFqQixFQUFTNXJDLEVBQUVtNEMsYUFDS240QyxFQUFFd3VELGVBQ2pCRCxFQUFNLEVBQ05QLEVBQWNodUQsRUFBRWd1RCxZQUNoQi9CLEdBQVl6akMsWUFBWXhvQixJQUd6QnN1RCxJQURBbnlELEVBQUlva0QsR0FBVXZnRCxFQUFHZ2lELEdBQW1CLE1BQU0sS0FDakIsU0FBTjdsRCxHQUFzQiw2QkFBTkEsRUFDL0JOLEVBQ0h5UCxFQUFNaWQsUUFBVTFzQixFQUVoQjR5RCxHQUFZbmpELEVBQU8sV0FFaEJpakQsSUFDQ1AsRUFDSHBpQixFQUFPdWlCLGFBQWFudUQsRUFBR2d1RCxHQUNicGlCLEVBQ1ZBLEVBQU9wakIsWUFBWXhvQixHQUVuQmlzRCxHQUFZbDVCLFlBQVkveUIsTUFJdkJpdEQsRUFBRzdCLEtBQVFwckQsRUFBRXdqRCxRQUFVQyxHQUFPempELE1BQzdCc3VELElBQWlFLEtBQW5EaGpELEVBQU0yMkMsSUFBa0IsSUFBSTk0QyxRQUFRLFlBQ3JEaE4sRUFBSW1QLEVBQU0yMkMsSUFDVnFNLEVBQVksR0FFYjl6RCxFQUFJd0YsRUFBRXF0RCxhQUFhLGFBQ2ZpQixHQUFhOXpELElBRWhCMkIsRUFBSSxXQURKM0IsRUFBSXdGLEVBQUV1b0QsVUFBVW1HLFFBQVFDLGNBQWNDLFFBQ3BCL3hELEVBQUksSUFBTXJDLEVBQUUrQyxFQUFJLElBQU0vQyxFQUFFQyxFQUFJLElBQU1ELEVBQUVFLEVBQUksSUFBTUYsRUFBRXdGLEVBQUksSUFBTXhGLEVBQUUrSixFQUFJLElBQ2xGK3BELEVBQVksSUFHVkEsRUFDSCxPQUFPaEIsR0FLUixJQUZBOXlELEdBQUsyQixHQUFLLElBQUlrUyxNQUFNc3ZDLElBQVksR0FDaEN2akQsR0FBSUksRUFBRTRDLFNBQ0doRCxJQUFLLEdBQ2J5QixFQUFJc0osT0FBTzNLLEVBQUVKLEtBQ2JJLEVBQUVKLEtBQU1tMEQsRUFBTTF5RCxHQUFLQSxHQUFLLEtBMURsQixJQTBEMEIweUQsR0FBYUEsRUFBTSxHQUFLLEdBQU0sSUFBUSxHQTFEaEUsSUEwRDJFMXlELEVBQUlBLEVBRXRGLE9BQVF3eUQsR0FBVzd6RCxFQUFFNEMsT0FBUyxFQUFLLENBQUM1QyxFQUFFLEdBQUlBLEVBQUUsR0FBSUEsRUFBRSxHQUFJQSxFQUFFLEdBQUlBLEVBQUUsSUFBS0EsRUFBRSxLQUFPQSxHQVc3RTBuRCxHQUFnQjF5QyxFQUFXcS9DLGFBQWUsU0FBU3Z6RCxFQUFHbWxELEVBQUlxTyxFQUFLakgsR0FDOUQsR0FBSXZzRCxFQUFFNHhELGNBQWdCNEIsSUFBUWpILEVBQzdCLE9BQU92c0QsRUFBRTR4RCxhQUVWLElBTUMxeUQsRUFBR0osRUFBR2lvRCxFQUFRQyxFQUFRSCxFQUFVQyxFQU43QjZLLEVBQUs2QixHQUFNeHpELEVBQUU0eEQsY0FBa0MsSUFBSTFCLEdBQ3REdUQsRUFBUTlCLEVBQUc1SyxPQUFTLEVBR3BCMk0sRUFBVXpNLEtBQWNoMEMsV0FBV2d5QyxHQUFVamxELEVBQUdpd0QsR0FBc0I5SyxHQUFJLEVBQU8sU0FBU3RqRCxNQUFNLEtBQUssS0FBTzh2RCxFQUFHK0IsVUFBZ0IsRUFDL0gxUyxFQUE4Qi90QyxXQUFXNnRDLEVBQVVFLDhCQUFnQyxFQVNwRixHQU5BMlEsRUFBRzdCLE9BQVM5dkQsRUFBRWtvRCxTQUFVQyxHQUFPbm9ELElBQzNCMnhELEVBQUc3QixNQUNOZ0IsR0FBZ0I5d0QsRUFBR2lsRCxHQUFVamxELEVBQUdpd0QsR0FBc0I5SyxHQUFJLEVBQU8sV0FBYSxHQUFJd00sRUFBSTN4RCxFQUFFK3hELGFBQWEsb0JBQ3JHbEMsR0FBdUIvTyxFQUFVOE8scUJBQXVCZ0IsS0FFekQxeEQsRUFBSTJ5RCxHQUFXN3hELE1BQ0xneUQsR0FBbUIsQ0FFNUIsR0FBaUIsS0FBYjl5RCxFQUFFNEMsT0FBZSxDQUVwQixJQU1DNnhELEVBQUlDLEVBQUlDLEVBQVFDLEVBQUtDLEVBTmxCQyxFQUFNOTBELEVBQUUsR0FBSSswRCxFQUFNLzBELEVBQUUsR0FBSWcxRCxFQUFNaDFELEVBQUUsR0FBSWkxRCxFQUFNajFELEVBQUUsR0FDL0NrMUQsRUFBTWwxRCxFQUFFLEdBQUltMUQsRUFBTW4xRCxFQUFFLEdBQUlvMUQsRUFBTXAxRCxFQUFFLEdBQUlxMUQsRUFBTXIxRCxFQUFFLEdBQzVDczFELEVBQU10MUQsRUFBRSxHQUFJdTFELEVBQU12MUQsRUFBRSxHQUFJdzFELEVBQU14MUQsRUFBRSxJQUNoQ3kxRCxFQUFNejFELEVBQUUsSUFBSzAxRCxFQUFNMTFELEVBQUUsSUFBSzIxRCxFQUFNMzFELEVBQUUsSUFDbEM0MUQsRUFBTTUxRCxFQUFFLElBQ1I2MUQsRUFBUW5zRCxLQUFLb3NELE1BQU1WLEVBQUtJLEdBR3JCL0MsRUFBRytCLFVBRU5pQixFQUFNSCxHQUROSyxHQUFPbEQsRUFBRytCLFNBQ0l4MEQsRUFBRSxJQUNoQjAxRCxFQUFNSCxFQUFJSSxFQUFJMzFELEVBQUUsSUFDaEIyMUQsRUFBTUgsRUFBSUcsRUFBSWxELEVBQUcrQixRQUFReDBELEVBQUUsS0FHNUJ5eUQsRUFBR3pLLFVBQVk2TixFQUFRcFIsRUFFbkJvUixJQUdIcEIsRUFBS1MsR0FGTE4sRUFBTWxyRCxLQUFLa3JELEtBQUtpQixJQUVIUCxHQURiVCxFQUFNbnJELEtBQUttckQsS0FBS2dCLElBRWhCbkIsRUFBS1MsRUFBSVAsRUFBSVcsRUFBSVYsRUFDakJGLEVBQUtTLEVBQUlSLEVBQUlZLEVBQUlYLEVBQ2pCUyxFQUFNSixHQUFLTCxFQUFJUyxFQUFJVixFQUNuQlcsRUFBTUosR0FBS04sRUFBSVUsRUFBSVgsRUFDbkJZLEVBQU1KLEdBQUtQLEVBQUlXLEVBQUlaLEVBQ25CZ0IsRUFBTVAsR0FBS1IsRUFBSWUsRUFBSWhCLEVBQ25CTSxFQUFNVCxFQUNOVSxFQUFNVCxFQUNOVSxFQUFNVCxHQUdQa0IsRUFBUW5zRCxLQUFLb3NELE9BQU9kLEVBQUtRLEdBQ3pCL0MsRUFBR3hLLFVBQVk0TixFQUFRcFIsRUFDbkJvUixJQUlIbkIsRUFBS0ssR0FITEgsRUFBTWxyRCxLQUFLa3JELEtBQUtpQixJQUdITixHQUZiVixFQUFNbnJELEtBQUttckQsS0FBS2dCLElBR2hCbEIsRUFBS0ssRUFBSUosRUFBSVksRUFBSVgsRUFDakJVLEVBQU1SLEVBQUlGLEVBQUlVLEVBQUlYLEVBQ2xCWSxFQUFNUixFQUFJSCxFQUFJVyxFQUFJWixFQUNsQmdCLEVBQU1YLEVBQUlKLEVBQUllLEVBQUloQixFQUNsQkUsRUFOQUwsRUFBS0ssRUFBSUYsRUFBSVUsRUFBSVQsRUFPakJFLEVBQU1MLEVBQ05NLEVBQU1MLEdBR1BrQixFQUFRbnNELEtBQUtvc0QsTUFBTWYsRUFBS0QsR0FDeEJyQyxFQUFHOUssU0FBV2tPLEVBQVFwUixFQUNsQm9SLElBR0hwQixFQUFLSyxHQUZMRixFQUFNbHJELEtBQUtrckQsSUFBSWlCLElBRUZkLEdBRGJGLEVBQU1uckQsS0FBS21yRCxJQUFJZ0IsSUFFZm5CLEVBQUtRLEVBQUlOLEVBQUlPLEVBQUlOLEVBQ2pCRixFQUFLVyxFQUFJVixFQUFJVyxFQUFJVixFQUNqQkUsRUFBTUEsRUFBSUgsRUFBSUUsRUFBSUQsRUFDbEJNLEVBQU1BLEVBQUlQLEVBQUlNLEVBQUlMLEVBQ2xCVSxFQUFNQSxFQUFJWCxFQUFJVSxFQUFJVCxFQUNsQkMsRUFBTUwsRUFDTlMsRUFBTVIsRUFDTlksRUFBTVgsR0FHSGxDLEVBQUd6SyxXQUFhdCtDLEtBQUtpdkIsSUFBSTg1QixFQUFHekssV0FBYXQrQyxLQUFLaXZCLElBQUk4NUIsRUFBRzlLLFVBQVksUUFDcEU4SyxFQUFHekssVUFBWXlLLEVBQUc5SyxTQUFXLEVBQzdCOEssRUFBR3hLLFVBQVksSUFBTXdLLEVBQUd4SyxXQUl6QjROLEVBQVFuc0QsS0FBS29zRCxNQUFNWixFQUFLQyxHQUd4QjFDLEVBQUc1SyxRQXhGRSxJQXdGU24rQyxLQUFLOCtCLEtBQUtzc0IsRUFBTUEsRUFBTUMsRUFBTUEsRUFBTUMsRUFBTUEsR0FBYSxHQUFPLEdBeEZyRSxJQXlGTHZDLEVBQUczSyxRQXpGRSxJQXlGU3ArQyxLQUFLOCtCLEtBQUsyc0IsRUFBTUEsRUFBTUMsRUFBTUEsR0FBYSxHQUFPLEdBekZ6RCxJQTBGTDNDLEVBQUd2SyxRQTFGRSxJQTBGU3grQyxLQUFLOCtCLEtBQUs4c0IsRUFBTUEsRUFBTUMsRUFBTUEsRUFBTUMsRUFBTUEsR0FBYSxHQUFPLEdBMUZyRSxJQTJGTFYsR0FBT3JDLEVBQUc1SyxPQUNWcU4sR0FBT3pDLEVBQUczSyxPQUNWaU4sR0FBT3RDLEVBQUc1SyxPQUNWc04sR0FBTzFDLEVBQUczSyxPQUNOcCtDLEtBQUtpdkIsSUFBSWs5QixHQWhHUixNQWlHSnBELEVBQUc3SyxNQUFRaU8sRUFBUXBSLEVBQ25CeVEsRUFBTSxFQUNjLFdBQWhCekMsRUFBR3NELFdBQ050RCxFQUFHM0ssUUFBVSxFQUFJcCtDLEtBQUtrckQsSUFBSWlCLEtBSTNCcEQsRUFBRzdLLE1BQVEsRUFxQlo2SyxFQUFHL1AsWUFBY2tULEVBQU0sR0FBTUEsRUFBTSxHQUFNQSxFQUFNQSxHQUFPLEVBQ3REbkQsRUFBR3ArQixFQUFJb2hDLEVBQ1BoRCxFQUFHajJCLEVBQUlrNUIsRUFDUGpELEVBQUc1cUIsRUFBSTh0QixFQUNIbEQsRUFBRzdCLE1BQ042QixFQUFHcCtCLEdBQUtvK0IsRUFBR1AsU0FBV08sRUFBR1AsUUFBVTRDLEVBQU1yQyxFQUFHTixRQUFVK0MsR0FDdER6QyxFQUFHajJCLEdBQUtpMkIsRUFBR04sU0FBV00sRUFBR04sUUFBVTRDLEVBQU10QyxFQUFHUCxRQUFVaUQsU0FHakQsSUFBTXBOLElBQWVzRixJQUFVcnRELEVBQUU0QyxRQUFVNnZELEVBQUdwK0IsSUFBTXIwQixFQUFFLElBQU15eUQsRUFBR2oyQixJQUFNeDhCLEVBQUUsS0FBUXl5RCxFQUFHekssWUFBY3lLLEVBQUd4SyxVQUFhLENBQ3RILElBQUk1ckIsRUFBS3I4QixFQUFFNEMsUUFBVSxFQUNwQlAsRUFBSWc2QixFQUFJcjhCLEVBQUUsR0FBSyxFQUNmK0MsRUFBSS9DLEVBQUUsSUFBTSxFQUNaQyxFQUFJRCxFQUFFLElBQU0sRUFDWkUsRUFBSW04QixFQUFJcjhCLEVBQUUsR0FBSyxFQUNoQnl5RCxFQUFHcCtCLEVBQUlyMEIsRUFBRSxJQUFNLEVBQ2Z5eUQsRUFBR2oyQixFQUFJeDhCLEVBQUUsSUFBTSxFQUNmNm5ELEVBQVNuK0MsS0FBSzgrQixLQUFLbm1DLEVBQUlBLEVBQUlVLEVBQUlBLEdBQy9CK2tELEVBQVNwK0MsS0FBSzgrQixLQUFLdG9DLEVBQUlBLEVBQUlELEVBQUlBLEdBQy9CMG5ELEVBQVl0bEQsR0FBS1UsRUFBSzJHLEtBQUtvc0QsTUFBTS95RCxFQUFHVixHQUFLb2lELEVBQVdnTyxFQUFHOUssVUFBWSxFQUNuRUMsRUFBUzNuRCxHQUFLQyxFQUFLd0osS0FBS29zRCxNQUFNNzFELEVBQUdDLEdBQUt1a0QsRUFBV2tELEVBQVc4SyxFQUFHN0ssT0FBUyxFQUN4RTZLLEVBQUc1SyxPQUFTQSxFQUNaNEssRUFBRzNLLE9BQVNBLEVBQ1oySyxFQUFHOUssU0FBV0EsRUFDZDhLLEVBQUc3SyxNQUFRQSxFQUNQRyxLQUNIMEssRUFBR3pLLFVBQVl5SyxFQUFHeEssVUFBWXdLLEVBQUc1cUIsRUFBSSxFQUNyQzRxQixFQUFHL1AsWUFBY1osRUFDakIyUSxFQUFHdkssT0FBUyxHQUVUdUssRUFBRzdCLE1BQ042QixFQUFHcCtCLEdBQUtvK0IsRUFBR1AsU0FBV08sRUFBR1AsUUFBVTd2RCxFQUFJb3dELEVBQUdOLFFBQVVseUQsR0FDcER3eUQsRUFBR2oyQixHQUFLaTJCLEVBQUdOLFNBQVdNLEVBQUdQLFFBQVVudkQsRUFBSTB2RCxFQUFHTixRQUFVanlELElBZXRELElBQUtOLEtBWkQ4SixLQUFLaXZCLElBQUk4NUIsRUFBRzdLLE9BQVMsSUFBTWwrQyxLQUFLaXZCLElBQUk4NUIsRUFBRzdLLE9BQVMsTUFDL0MyTSxHQUNIOUIsRUFBRzVLLFNBQVcsRUFDZDRLLEVBQUc3SyxPQUFVNkssRUFBRzlLLFVBQVksRUFBSyxLQUFPLElBQ3hDOEssRUFBRzlLLFVBQWE4SyxFQUFHOUssVUFBWSxFQUFLLEtBQU8sTUFFM0M4SyxFQUFHM0ssU0FBVyxFQUNkMkssRUFBRzdLLE9BQVU2SyxFQUFHN0ssT0FBUyxFQUFLLEtBQU8sTUFHdkM2SyxFQUFHK0IsUUFBVUEsRUFFSC9CLEVBQ0xBLEVBQUc3eUQsR0E3S0YsTUE2S2dCNnlELEVBQUc3eUQsSUE3S25CLE9BOEtKNnlELEVBQUc3eUQsR0FBSyxHQW1CWCxPQWRJMDBELElBQ0h4ekQsRUFBRTR4RCxhQUFlRCxFQUNiQSxFQUFHN0IsTUFDRkQsSUFBd0I3dkQsRUFBRWdRLE1BQU0yMkMsSUFDbkMxbEQsRUFBQSxFQUFVd1osWUFBWSxNQUFPLFdBQzVCMDRDLEdBQVluekQsRUFBRWdRLE1BQU8yMkMsUUFFWGtKLElBQXdCN3ZELEVBQUUreEQsYUFBYSxjQUNsRDl3RCxFQUFBLEVBQVV3WixZQUFZLE1BQU8sV0FDNUJ6YSxFQUFFazFELGdCQUFnQixrQkFLZnZELEdBSVJ3RCxHQUF1QixTQUFTMW5ELEdBQy9CLElBVUM0NUMsRUFBU3gxQyxFQVZON1IsRUFBSXRCLEtBQUt3TCxLQUNaa3JELEdBQU9wMUQsRUFBRTZtRCxTQUFXcEQsRUFDcEI0UixFQUFPRCxFQUFNcDFELEVBQUU4bUQsTUFBUXJELEVBRXZCbGlELEdBQU1xSCxLQUFLa3JELElBQUlzQixHQUFPcDFELEVBQUUrbUQsT0FEbEIsSUFDa0MsR0FEbEMsSUFFTjlrRCxHQUFNMkcsS0FBS21yRCxJQUFJcUIsR0FBT3AxRCxFQUFFK21ELE9BRmxCLElBRWtDLEdBRmxDLElBR041bkQsR0FBTXlKLEtBQUttckQsSUFBSXNCLElBQVNyMUQsRUFBRWduRCxPQUhwQixJQUdvQyxHQUhwQyxJQUlONW5ELEdBQU13SixLQUFLa3JELElBQUl1QixHQUFRcjFELEVBQUVnbkQsT0FKbkIsSUFJbUMsR0FKbkMsSUFLTmgzQyxFQUFRdFIsS0FBS3NCLEVBQUVnUSxNQUNmbTFDLEVBQUt6bUQsS0FBS3NCLEVBQUV3a0QsYUFFYixHQUFLVyxFQUFMLENBR0F0ekMsRUFBTTVQLEVBQ05BLEdBQUs5QyxFQUNMQSxHQUFLMFMsRUFDTHcxQyxFQUFVbEMsRUFBRzV5QyxPQUNidkMsRUFBTXVDLE9BQVMsR0FDZixJQU1DK2lELEVBQUlDLEVBTkR4cEMsRUFBSXJ0QixLQUFLc0IsRUFBRXFvRCxZQUNkc0MsRUFBSWpzRCxLQUFLc0IsRUFBRXNvRCxhQUNYa04sRUFBd0IsYUFBaEJyUSxFQUFHajJDLFNBQ1hoUSxFQUFJLGdEQUFrRHFDLEVBQUksU0FBV1UsRUFBSSxTQUFXOUMsRUFBSSxTQUFXQyxFQUNuR3lwRCxFQUFLN29ELEVBQUV1ekIsRUFBS3hILEVBQUkvckIsRUFBRXkxRCxTQUFXLElBQzdCM00sRUFBSzlvRCxFQUFFMDdCLEVBQUtpdkIsRUFBSTNxRCxFQUFFMDFELFNBQVcsSUErQjlCLEdBM0JZLE1BQVIxMUQsRUFBRTZvRCxLQUdMQSxJQUZBeU0sR0FBT3QxRCxFQUFLLElBQUkrckIsRUFBSS9yQixFQUFFNm9ELEdBQUssSUFBTzdvRCxFQUFFNm9ELElBQU05OEIsRUFBSSxJQUVsQ3VwQyxFQUFLL3pELEdBRGpCZzBELEdBQU92MUQsRUFBSyxJQUFJMnFELEVBQUkzcUQsRUFBRThvRCxHQUFLLElBQU85b0QsRUFBRThvRCxJQUFNNkIsRUFBSSxHQUNwQjFvRCxHQUMxQjZtRCxHQUFNeU0sR0FBTUQsRUFBS24yRCxFQUFJbzJELEVBQUtuMkQsSUFTMUJGLEdBTklzMkQsRUFNQyxVQUhMRixFQUFNdnBDLEVBQUksSUFHWXVwQyxFQUFLL3pELEdBRjNCZzBELEVBQU01SyxFQUFJLEdBRTBCMW9ELEdBQUs0bUQsR0FBTSxTQUFXME0sR0FBTUQsRUFBS24yRCxFQUFJbzJELEVBQUtuMkQsR0FBSzBwRCxHQUFNLElBTHBGLGlDQU95RCxJQUEzRHpCLEVBQVF4NUMsUUFBUSxzQ0FDbkJtQyxFQUFNdUMsT0FBUzgwQyxFQUFRcnpDLFFBQVFzdkMsRUFBaUJwa0QsR0FFaEQ4USxFQUFNdUMsT0FBU3JULEVBQUksSUFBTW1vRCxFQUloQixJQUFONTVDLEdBQWlCLElBQU5BLEdBQW1CLElBQU5sTSxHQUFtQixJQUFOVSxHQUFtQixJQUFOOUMsR0FBbUIsSUFBTkMsSUFBY28yRCxJQUFxQyxJQUE3QnQyRCxFQUFFMk8sUUFBUSxlQUEyQjgwQyxFQUFZdHZDLEtBQUtnMEMsSUFBc0MsTUFBMUJwMEMsV0FBV2tiLE9BQU9pMkIsTUFBK0UsSUFBOURpRCxFQUFReDVDLFFBQXVCdzVDLEVBQVF4NUMsUUFBUSxXQUM1T21DLEVBQU1rbEQsZ0JBQWdCLFlBSWxCTSxFQUFNLENBQ1YsSUFDQ0csRUFBTXBpRCxFQUFNNDFDLEVBRFR5TSxFQUFRelQsRUFBVSxFQUFLLEdBQUssRUFNaEMsSUFKQW1ULEVBQUt0MUQsRUFBRTYxRCxXQUFhLEVBQ3BCTixFQUFLdjFELEVBQUU4MUQsV0FBYSxFQUNwQjkxRCxFQUFFNjFELFVBQVlqdEQsS0FBS3VLLE9BQU80WSxJQUFNeHFCLEVBQUksR0FBS0EsRUFBSUEsR0FBS3dxQixHQUFLOXBCLEVBQUksR0FBS0EsRUFBSUEsR0FBSzBvRCxJQUFNLEVBQUk5QixHQUNuRjdvRCxFQUFFODFELFVBQVlsdEQsS0FBS3VLLE9BQU93M0MsSUFBTXZyRCxFQUFJLEdBQUtBLEVBQUlBLEdBQUt1ckQsR0FBS3hyRCxFQUFJLEdBQUtBLEVBQUlBLEdBQUs0c0IsSUFBTSxFQUFJKzhCLEdBQzlFaHFELEdBQUksRUFBR0EsR0FBSSxFQUFHQSxLQU1qQnFxRCxHQUZEdDNDLEdBQStCLEtBRi9COGpELEVBQU94USxFQURQNXhDLEVBQU93MEMsR0FBU2pwRCxNQUdKK08sUUFBUSxNQUFnQm9GLFdBQVcwaUQsR0FBUW5RLEdBQWlCOW1ELEtBQUtzQixFQUFHdVQsRUFBTU4sV0FBVzBpRCxHQUFPQSxFQUFLM2hELFFBQVEwdUMsRUFBWSxNQUFRLEtBQzdIMWlELEVBQUV1VCxHQUNOelUsR0FBSSxHQUFNa0IsRUFBRTYxRCxXQUFhNzFELEVBQUU4MUQsVUFFM0JoM0QsR0FBSSxFQUFLdzJELEVBQUt0MUQsRUFBRTYxRCxVQUFZTixFQUFLdjFELEVBQUU4MUQsVUFFM0M5bEQsRUFBTXVELElBQVN2VCxFQUFFdVQsR0FBUTNLLEtBQUt1SyxNQUFPdEIsRUFBTXMzQyxHQUFjLElBQU5ycUQsSUFBaUIsSUFBTkEsR0FBVyxFQUFJODJELEtBQVcsUUFhM0ZHLEdBQXFCN2hELEVBQVc4aEQsb0JBQXNCOWhELEVBQVcraEQsa0JBQW9CLFNBQVN4b0QsR0FDN0YsSUFnQkNrbUQsRUFBSUssRUFBS0ksRUFBS0ksRUFBS1AsRUFBS0ksRUFBS0ksRUFBS1AsRUFBS0ksRUFBS0ksRUFBS1AsRUFBS0ksRUFBS08sRUFDM0RwQixFQUFTN3FELEVBQUtpckQsRUFBS0MsRUFBS0gsRUFBSTNHLEVBQXdCb0ksRUFqQmpEcjFELEVBQUl0QixLQUFLd0wsS0FDWjhGLEVBQVF0UixLQUFLc0IsRUFBRWdRLE1BQ2Yra0QsRUFBUS8wRCxFQUFFNm1ELFNBQ1ZLLEVBQVlsbkQsRUFBRWtuRCxVQUNkQyxFQUFZbm5ELEVBQUVtbkQsVUFDZCtPLEVBQUtsMkQsRUFBRSttRCxPQUNQb1AsRUFBS24yRCxFQUFFZ25ELE9BQ1BvUCxFQUFLcDJELEVBQUVvbkQsT0FDUDd6QixFQUFJdnpCLEVBQUV1ekIsRUFDTm1JLEVBQUkxN0IsRUFBRTA3QixFQUNOcUwsRUFBSS9tQyxFQUFFK21DLEVBQ05zdkIsRUFBUXIyRCxFQUFFOHZELElBQ1ZsTyxFQUFjNWhELEVBQUU0aEQsWUFDaEJ1TyxFQUFVbndELEVBQUVtd0QsUUFDWm1HLEVBQVF0MkQsRUFBRXMyRCxNQUNWeFAsRUFBUTltRCxFQUFFOG1ELE1BU1gsR0FOSXdQLElBQ0h4UCxHQUFTd1AsRUFDVHZCLEdBQVN1QixNQUlJLElBQU43b0QsR0FBaUIsSUFBTkEsR0FBd0IsU0FBWjBpRCxHQUF1Qnp4RCxLQUFLME8sTUFBTW5DLGFBQWV2TSxLQUFLME8sTUFBTXpELGdCQUFtQmpMLEtBQUswTyxNQUFNbkMsYUFBaUJrbEQsR0FBYXBwQixHQUFNNmEsR0FBZ0J1RixHQUFjRCxHQUFvQixJQUFQa1AsSUFBY3ZHLElBQXdCd0csSUFBV3BQLEdBR3BQOE4sR0FBU2pPLEdBQVN1UCxHQUNyQnRCLEdBQVN0UixFQUNUNFIsRUFBT3ZPLEVBQVFyRCxFQUNULElBQ051USxFQUFNcHJELEtBQUtrckQsSUFBSWlCLEdBQVNtQixFQUN4QmpDLEVBQU1yckQsS0FBS21yRCxJQUFJZ0IsR0FBU21CLEVBQ3hCOUIsRUFBTXhyRCxLQUFLbXJELElBQUlnQixFQUFRTSxJQUFTYyxFQUNoQzlCLEVBQU16ckQsS0FBS2tyRCxJQUFJaUIsRUFBUU0sR0FBUWMsRUFDM0JkLEdBQXVCLFdBQWZyMUQsRUFBRWkxRCxXQUNidEIsRUFBSy9xRCxLQUFLMnRELElBQUlsQixFQUFPaUIsRUFBUTdTLEdBRTdCMlEsR0FEQVQsRUFBSy9xRCxLQUFLOCtCLEtBQUssRUFBSWlzQixFQUFLQSxHQUV4QlUsR0FBT1YsRUFDSDJDLElBQ0gzQyxFQUFLL3FELEtBQUsydEQsSUFBSUQsRUFBUTdTLEdBRXRCdVEsR0FEQUwsRUFBSy9xRCxLQUFLOCtCLEtBQUssRUFBSWlzQixFQUFLQSxHQUV4Qk0sR0FBT04sSUFHTDBDLElBQ0g5aUMsR0FBS3Z6QixFQUFFb3hELFNBQVdweEQsRUFBRW94RCxRQUFVNEMsRUFBTWgwRCxFQUFFcXhELFFBQVUrQyxHQUFPcDBELEVBQUVpeUQsUUFDekR2MkIsR0FBSzE3QixFQUFFcXhELFNBQVdyeEQsRUFBRW94RCxRQUFVNkMsRUFBTWowRCxFQUFFcXhELFFBQVVnRCxHQUFPcjBELEVBQUVreUQsUUFDckRyQyxLQUF5Qjd2RCxFQUFFeTFELFVBQVl6MUQsRUFBRTAxRCxZQUM1QzdzRCxFQUFNbkssS0FBS3NCLEVBQUVvb0QsVUFDYjcwQixHQUFrQixJQUFidnpCLEVBQUV5MUQsU0FBa0I1c0QsRUFBSTA0QyxNQUM3QjdsQixHQUFrQixJQUFiMTdCLEVBQUUwMUQsU0FBa0I3c0QsRUFBSTI0QyxRQUcxQmp1QixHQURKMXFCLEVBQU0sT0FDVzBxQixHQUFLMXFCLElBQ3JCMHFCLEVBQUksR0FFRG1JLEVBQUk3eUIsR0FBUzZ5QixHQUFLN3lCLElBQ3JCNnlCLEVBQUksSUFHTnV4QixHQWpDTSxJQWlDUytHLEVBQWEsR0FqQ3RCLElBaUNrQyxLQWpDbEMsSUFpQzJDQyxFQUFhLEdBakN4RCxJQWlDb0UsS0FqQ3BFLElBaUM2RUcsRUFBYSxHQWpDMUYsSUFpQ3NHLEtBakN0RyxJQWlDK0dDLEVBQWEsR0FqQzVILElBaUN3SSxJQUFNOWdDLEVBQUksSUFBTW1JLEVBQUksSUFDOUoyNkIsR0FBU3hHLEdBQ1pueEQsS0FBS3NCLEVBQUVteUQsYUFBYSxZQUFhLFVBQVlsRixHQUc3Q2o5QyxFQUFNMjJDLEtBQW9CM21ELEVBQUV5MUQsVUFBWXoxRCxFQUFFMDFELFNBQVksYUFBZTExRCxFQUFFeTFELFNBQVcsS0FBT3oxRCxFQUFFMDFELFNBQVcsYUFBZSxXQUFhekksR0FHbklqOUMsRUFBTTIyQyxLQUFvQjNtRCxFQUFFeTFELFVBQVl6MUQsRUFBRTAxRCxTQUFZLGFBQWUxMUQsRUFBRXkxRCxTQUFXLEtBQU96MUQsRUFBRTAxRCxTQUFXLGFBQWUsV0FBYVEsRUFBSyxRQUFVQyxFQUFLLElBQU01aUMsRUFBSSxJQUFNbUksRUFBSSxRQS9DNUssQ0FnRUEsR0FaSXVtQixJQUVDaVUsR0FESnJ0RCxFQUFNLE9BQ1VxdEQsR0FBTXJ0RCxJQUNyQnF0RCxFQUFLRSxFQUFLLE1BRVBELEVBQUt0dEQsR0FBT3N0RCxHQUFNdHRELElBQ3JCc3RELEVBQUtDLEVBQUssT0FFUHhVLEdBQWdCNWhELEVBQUUrbUMsR0FBTS9tQyxFQUFFa25ELFdBQWNsbkQsRUFBRW1uRCxZQUM3Q3ZGLEVBQWMsSUFHWm1ULEdBQVNqTyxFQUNaaU8sR0FBU3RSLEVBQ1RxUSxFQUFNRSxFQUFNcHJELEtBQUtrckQsSUFBSWlCLEdBQ3JCaEIsRUFBTUUsRUFBTXJyRCxLQUFLbXJELElBQUlnQixHQUNqQmpPLElBQ0hpTyxHQUFTak8sRUFBUXJELEVBQ2pCcVEsRUFBTWxyRCxLQUFLa3JELElBQUlpQixHQUNmaEIsRUFBTW5yRCxLQUFLbXJELElBQUlnQixHQUNJLFdBQWYvMEQsRUFBRWkxRCxXQUNMdEIsRUFBSy9xRCxLQUFLMnRELEtBQUt6UCxFQUFRd1AsR0FBUzdTLEdBRWhDcVEsR0FEQUgsRUFBSy9xRCxLQUFLOCtCLEtBQUssRUFBSWlzQixFQUFLQSxHQUV4QkksR0FBT0osRUFDSDN6RCxFQUFFczJELFFBQ0wzQyxFQUFLL3FELEtBQUsydEQsSUFBSUQsRUFBUTdTLEdBRXRCdVEsR0FEQUwsRUFBSy9xRCxLQUFLOCtCLEtBQUssRUFBSWlzQixFQUFLQSxHQUV4Qk0sR0FBT04sS0FJVlMsR0FBT0wsRUFDUE0sRUFBTVAsTUFFQSxNQUFLM00sR0FBY0QsR0FBb0IsSUFBUGtQLEdBQWF4VSxHQUFnQnlVLEdBRW5FLFlBREFybUQsRUFBTTIyQyxLQUFvQjNtRCxFQUFFeTFELFVBQVl6MUQsRUFBRTAxRCxTQUFZLGFBQWUxMUQsRUFBRXkxRCxTQUFXLEtBQU96MUQsRUFBRTAxRCxTQUFXLGtCQUFvQixnQkFBa0JuaUMsRUFBSSxNQUFRbUksRUFBSSxNQUFRcUwsRUFBRyxPQUFpQixJQUFQbXZCLEdBQW1CLElBQVBDLEVBQVksVUFBWUQsRUFBSyxJQUFNQyxFQUFLLElBQU0sS0FHM09uQyxFQUFNSyxFQUFNLEVBQ1pELEVBQU1ILEVBQU0sRUFzQmJTLEVBQU0sRUFDTkYsRUFBTUMsRUFBTVAsRUFBTUksRUFBTUgsRUFBTUksRUFBTSxFQUNwQ08sRUFBTSxHQUFpQixFQUFJbFQsRUFBYyxFQUN6QzhSLEVBQVUxekQsRUFBRTB6RCxRQUNaN3FELEVBQU0sS0FDRSxJQUNELEtBQ1Brc0QsRUFBUTVOLEVBQVkxRCxLQUVuQnFRLEVBQU1sckQsS0FBS2tyRCxJQUFJaUIsR0FFZmIsSUFEQUgsRUFBTW5yRCxLQUFLbXJELElBQUlnQixJQUVmWixFQUFNVyxHQUFLZixFQUNYUyxFQUFNUixFQUFJRCxFQUNWVSxFQUFNUixFQUFJRixFQUNWVyxFQUFNWixFQUNOZ0IsR0FBT2hCLEVBQ1BFLEdBQU9GLEVBQ1BHLEdBQU9ILElBRVJpQixFQUFRN04sRUFBWXpELEtBSW5Ca1EsRUFBS1MsR0FGTE4sRUFBTWxyRCxLQUFLa3JELElBQUlpQixJQUVGUCxHQURiVCxFQUFNbnJELEtBQUttckQsSUFBSWdCLElBRWZuQixFQUFLUyxFQUFJUCxFQUFJVyxFQUFJVixFQUNqQk8sRUFBTUksRUFBSVgsRUFDVlEsRUFBTU8sRUFBSWYsRUFDVlMsRUFBTUosR0FBS0wsRUFBSVMsRUFBSVYsRUFDbkJXLEVBQU1KLEdBQUtOLEVBQUlVLEVBQUlYLEVBQ25CWSxHQUFVWixFQUNWZ0IsR0FBVWhCLEVBQ1ZNLEVBQU1ULEVBQ05VLEVBQU1ULEdBRUksSUFBUHdDLElBQ0g1QixHQUFLNEIsRUFDTDNCLEdBQUsyQixFQUNMMUIsR0FBSzBCLEVBQ0x0QixHQUFLc0IsR0FFSyxJQUFQRCxJQUNIL0IsR0FBSytCLEVBQ0w5QixHQUFLOEIsRUFDTDdCLEdBQUs2QixFQUNMNUIsR0FBSzRCLEdBRUssSUFBUEQsSUFDSGxDLEdBQUtrQyxFQUNMakMsR0FBS2lDLEVBQ0xoQyxHQUFLZ0MsRUFDTC9CLEdBQUsrQixJQUdGeEMsR0FBVzJDLEtBQ1YzQyxJQUNIbmdDLEdBQUtpaEMsR0FBS2QsRUFDVmg0QixHQUFLKzRCLEdBQUtmLEVBQ1Yzc0IsR0FBSzJ0QixHQUFLaEIsRUFBUUEsR0FFZjJDLElBQ0g5aUMsR0FBS3Z6QixFQUFFb3hELFNBQVdweEQsRUFBRW94RCxRQUFVNEMsRUFBTWgwRCxFQUFFcXhELFFBQVUrQyxHQUFPcDBELEVBQUVpeUQsUUFDekR2MkIsR0FBSzE3QixFQUFFcXhELFNBQVdyeEQsRUFBRW94RCxRQUFVNkMsRUFBTWowRCxFQUFFcXhELFFBQVVnRCxHQUFPcjBELEVBQUVreUQsU0FFdEQzK0IsRUFBSTFxQixHQUFPMHFCLEdBQUsxcUIsSUFDbkIwcUIsRUEzREssS0E2REZtSSxFQUFJN3lCLEdBQU82eUIsR0FBSzd5QixJQUNuQjZ5QixFQTlESyxLQWdFRnFMLEVBQUlsK0IsR0FBT2srQixHQUFLbCtCLElBQ25CaytCLEVBQUksSUFLTmttQixFQUFjanRELEVBQUV5MUQsVUFBWXoxRCxFQUFFMDFELFNBQVksYUFBZTExRCxFQUFFeTFELFNBQVcsS0FBT3oxRCxFQUFFMDFELFNBQVcsZUFBaUIsWUFDM0d6SSxJQUFlK0csRUFBTW5yRCxHQUFPbXJELEdBQU9uckQsRUF2RTVCLElBdUUwQ21yRCxHQXhFekMsS0F3RTBEQyxFQUFNcHJELEdBQU9vckQsR0FBT3ByRCxFQXZFL0UsSUF1RTZGb3JELEdBeEU1RixLQXdFNkdDLEVBQU1yckQsR0FBT3FyRCxHQUFPcnJELEVBdkVsSSxJQXVFZ0pxckQsR0FDdkpqSCxHQXpFUSxLQXlFZWtILEVBQU10ckQsR0FBT3NyRCxHQUFPdHJELEVBeEVwQyxJQXdFa0RzckQsR0F6RWpELEtBeUVrRUMsRUFBTXZyRCxHQUFPdXJELEdBQU92ckQsRUF4RXZGLElBd0VxR3VyRCxHQXpFcEcsS0F5RXFIQyxFQUFNeHJELEdBQU93ckQsR0FBT3hyRCxFQXhFMUksSUF3RXdKd3JELEdBQzNKbk4sR0FBYUMsR0FBb0IsSUFBUGlQLEdBQzdCbkosR0EzRU8sS0EyRWdCcUgsRUFBTXpyRCxHQUFPeXJELEdBQU96ckQsRUExRXJDLElBMEVtRHlyRCxHQTNFbEQsS0EyRW1FQyxFQUFNMXJELEdBQU8wckQsR0FBTzFyRCxFQTFFeEYsSUEwRXNHMHJELEdBM0VyRyxLQTJFc0hDLEVBQU0zckQsR0FBTzJyRCxHQUFPM3JELEVBMUUzSSxJQTBFeUoyckQsR0FDL0p2SCxHQTVFTyxLQTRFZ0J3SCxFQUFNNXJELEdBQU80ckQsR0FBTzVyRCxFQTNFckMsSUEyRW1ENHJELEdBNUVsRCxLQTRFbUVDLEVBQU03ckQsR0FBTzZyRCxHQUFPN3JELEVBM0V4RixJQTJFc0c2ckQsR0E1RXJHLEtBNEVzSEksRUFBTWpzRCxHQUFPaXNELEdBQU9qc0QsRUEzRTNJLElBMkV5SmlzRCxHQTVFeEosS0E4RVA3SCxHQUFhLGdCQUVkQSxHQUFhMTVCLEVBaEZMLElBZ0ZpQm1JLEVBaEZqQixJQWdGNkJxTCxFQWhGN0IsS0FnRjBDNmEsRUFBZSxHQUFNN2EsRUFBSTZhLEVBQWdCLEdBQUssSUFFaEc1eEMsRUFBTTIyQyxJQUFrQnNHLEtBRzFCcnNELEVBQUlzdkQsR0FBVXh2RCxXQUNaNnlCLEVBQUkzeUIsRUFBRTg2QixFQUFJOTZCLEVBQUVtbUMsRUFBSW5tQyxFQUFFa21ELE1BQVFsbUQsRUFBRTAxRCxNQUFRMTFELEVBQUVpbUQsU0FBV2ptRCxFQUFFc21ELFVBQVl0bUQsRUFBRXVtRCxVQUFZdm1ELEVBQUU4eUQsUUFBVTl5RCxFQUFFNjBELFNBQVc3MEQsRUFBRTgwRCxTQUFXOTBELEVBQUVxeEQsUUFBVXJ4RCxFQUFFc3hELFFBQVUsRUFDN0l0eEQsRUFBRW1tRCxPQUFTbm1ELEVBQUVvbUQsT0FBU3BtRCxFQUFFd21ELE9BQVMsRUFFakM2SCxHQUE0Qiw2UkFBOFIsQ0FBQ0gsT0FBTyxTQUFTOXVELEVBQUcwRSxFQUFHOHhELEVBQWFsSyxFQUFNeDZDLEVBQUlvSCxFQUFRelAsR0FDL1csR0FBSTZpRCxFQUFLbUssdUJBQXlCaHRELEVBQVEsT0FBT3FJLEVBQ2pEdzZDLEVBQUttSyxxQkFBdUJodEQsRUFDNUIsSUFBSWl0RCxFQUFhanRELEVBQUtrdEQsT0FBZ0MsbUJBQWhCbHRELEVBQVUsTUFBb0JBLEVBQUtrdEQsTUFBUSxFQUM3RUQsSUFDSGp0RCxFQUFLa3RELE1BQVFELEVBQVV0VSxFQUFRcGlELElBRWhDLElBU0M2cUQsRUFBSXQ5QyxFQUFNcXBELEVBQU9DLEVBQVdDLEVBQUl2akMsRUFBR21JLEVBQUc0M0IsRUFBUTF5RCxFQVQzQ20yRCxFQUFzQi8yRCxFQUFFNHhELGFBQzNCNWhELEVBQVFoUSxFQUFFZ1EsTUFFVmxSLEVBQUlreEQsR0FBZ0JsdUQsT0FDcEIyTCxFQUFJaEUsRUFDSnV0RCxFQUFlLEdBRWZwTSxFQUFLaEUsR0FBYzVtRCxFQUFHNmdELEdBQUssRUFBTXB6QyxFQUFFd3BELGdCQUNuQ0MsRUFBT3pwRCxFQUFFdy9DLFlBQXVDLG1CQUFqQngvQyxFQUFXLFVBQW9CQSxFQUFFdy9DLFVBQVU3SyxFQUFRandDLEdBQVcxRSxFQUFFdy9DLFdBT2hHLEdBTEFyQyxFQUFHcUssU0FBV3huRCxFQUFFd25ELFVBQVlySyxFQUFHcUssVUFBWW5VLEVBQVVHLGdCQUNyRHFMLEVBQUtZLFdBQWF0QyxFQUNkLGNBQWVuOUMsSUFDbEJBLEVBQUVvNUMsU0FBV3A1QyxFQUFFMHBELFdBRVpELEdBQXlCLGlCQUFYLEdBQXVCdlEsSUFDeENwNUMsRUFBT3kyQyxFQUFTaDBDLE9BQ1gyMkMsSUFBa0J1USxFQUN2QjNwRCxFQUFLMGYsUUFBVSxRQUNmMWYsRUFBSzJCLFNBQVcsWUFDVyxJQUF2QmdvRCxFQUFLcnBELFFBQVEsT0FDaEJOLEVBQUtnMEMsTUFBUTBELEdBQVVqbEQsRUFBRyxTQUMxQnVOLEVBQUtpMEMsT0FBU3lELEdBQVVqbEQsRUFBRyxXQUU1Qm1CLEVBQUsra0QsS0FBS2g1QixZQUFZODJCLEdBQ3RCNkcsRUFBS2pFLEdBQWM1QyxFQUFVLE1BQU0sR0FDZixXQUFoQjRHLEVBQUdxSyxXQUNOcEssRUFBRzdELFFBQVVwK0MsS0FBS2tyRCxJQUFJakosRUFBRy9ELE1BQVFyRCxJQUU5Qm1ILEVBQUdrRixNQUNOdjhCLEVBQUlxM0IsRUFBR3dHLFFBQ1AxMUIsRUFBSWt2QixFQUFHeUcsUUFDUHhHLEVBQUd0M0IsR0FBS3EzQixFQUFHcUgsUUFDWHBILEVBQUdudkIsR0FBS2t2QixFQUFHc0gsU0FDUHprRCxFQUFFMnBELGlCQUFtQjNwRCxFQUFFNHBELGFBQzFCSCxFQUFPLEdBQ1BwRyxHQUFnQjl3RCxFQUFHdW9ELEdBQWU5NkMsRUFBRTJwRCxpQkFBa0JGLEVBQU16cEQsRUFBRTRwRCxVQUFXNXBELEVBQUV5akQsY0FBYyxHQUN6RjM5QixFQUFJMmpDLEVBQUs5RixRQUNUMTFCLEVBQUl3N0IsRUFBSzdGLFFBQ1R4RyxFQUFHdDNCLEdBQUsyakMsRUFBS2pGLFFBQVVySCxFQUFHcUgsUUFDMUJwSCxFQUFHbnZCLEdBQUt3N0IsRUFBS2hGLFFBQVV0SCxFQUFHc0gsVUFFdkIzK0IsR0FBS21JLEtBQ1I0M0IsRUFBU3pCLEdBQVc3TixHQUFVLEdBQzlCNkcsRUFBR3QzQixHQUFLQSxHQUFLQSxFQUFJKy9CLEVBQU8sR0FBSzUzQixFQUFJNDNCLEVBQU8sSUFDeEN6SSxFQUFHbnZCLEdBQUtBLEdBQUtuSSxFQUFJKy9CLEVBQU8sR0FBSzUzQixFQUFJNDNCLEVBQU8sTUFHMUNueUQsRUFBSytrRCxLQUFLenVCLFlBQVl1c0IsR0FDakI2RyxFQUFHakosY0FDUGlKLEVBQUdqSixZQUFjZ0osRUFBR2hKLGFBRUgsTUFBZG4wQyxFQUFFZ29ELFdBQ0w1SyxFQUFHNEssU0FBV3pNLEdBQVV2N0MsRUFBRWdvRCxTQUFVN0ssRUFBRzZLLFdBRXRCLE1BQWRob0QsRUFBRWlvRCxXQUNMN0ssRUFBRzZLLFNBQVcxTSxHQUFVdjdDLEVBQUVpb0QsU0FBVTlLLEVBQUc4SyxnQkFFbEMsR0FBa0IsaUJBQVIsRUFBa0IsQ0FXbEMsR0FWQTdLLEVBQUssQ0FBQzlELE9BQU9pQyxHQUF1QixNQUFadjdDLEVBQUVzNUMsT0FBa0J0NUMsRUFBRXM1QyxPQUFTdDVDLEVBQUVrcEQsTUFBTy9MLEVBQUc3RCxRQUNsRUMsT0FBT2dDLEdBQXVCLE1BQVp2N0MsRUFBRXU1QyxPQUFrQnY1QyxFQUFFdTVDLE9BQVN2NUMsRUFBRWtwRCxNQUFPL0wsRUFBRzVELFFBQzdESSxPQUFPNEIsR0FBVXY3QyxFQUFFMjVDLE9BQVF3RCxFQUFHeEQsUUFDOUI3ekIsRUFBRXkxQixHQUFVdjdDLEVBQUU4bEIsRUFBR3EzQixFQUFHcjNCLEdBQ3BCbUksRUFBRXN0QixHQUFVdjdDLEVBQUVpdUIsRUFBR2t2QixFQUFHbHZCLEdBQ3BCcUwsRUFBRWlpQixHQUFVdjdDLEVBQUVzNUIsRUFBRzZqQixFQUFHN2pCLEdBQ3BCMHVCLFNBQVN6TSxHQUFVdjdDLEVBQUVnb0QsU0FBVTdLLEVBQUc2SyxVQUNsQ0MsU0FBUzFNLEdBQVV2N0MsRUFBRWlvRCxTQUFVOUssRUFBRzhLLFVBQ2xDOVQsWUFBWW9ILEdBQVV2N0MsRUFBRTZwRCxxQkFBc0IxTSxFQUFHaEosY0FFeEMsT0FEVmtWLEVBQUtycEQsRUFBRThwRCxxQkFFTixHQUFtQixpQkFBVCxFQUNULElBQUtocUQsS0FBUXVwRCxFQUNacnBELEVBQUVGLEdBQVF1cEQsRUFBR3ZwRCxRQUdkRSxFQUFFbzVDLFNBQVdpUSxFQUdLLGlCQUFUcnBELEVBQUcsSUFBd0MsSUFBdEJBLEVBQUU4bEIsRUFBRTFsQixRQUFRLE9BQzNDZzlDLEVBQUd0M0IsRUFBSSxFQUNQczNCLEVBQUc0SyxTQUFXek0sR0FBVXY3QyxFQUFFOGxCLEVBQUdxM0IsRUFBRzZLLFdBRWIsaUJBQVRob0QsRUFBRyxJQUF3QyxJQUF0QkEsRUFBRWl1QixFQUFFN3RCLFFBQVEsT0FDM0NnOUMsRUFBR252QixFQUFJLEVBQ1BtdkIsRUFBRzZLLFNBQVcxTSxHQUFVdjdDLEVBQUVpdUIsRUFBR2t2QixFQUFHOEssV0FHakM3SyxFQUFHaEUsU0FBV29DLEdBQWEsYUFBY3g3QyxFQUFLQSxFQUFFbzVDLFNBQVksa0JBQW1CcDVDLEVBQUtBLEVBQUUrcEQsY0FBZ0IsU0FBVzVNLEVBQUcvRCxTQUFVK0QsRUFBRy9ELFNBQVUsV0FBWW1RLEdBQ25KL1AsS0FDSDRELEVBQUczRCxVQUFZK0IsR0FBYSxjQUFleDdDLEVBQUtBLEVBQUV5NUMsVUFBYSxtQkFBb0J6NUMsRUFBS0EsRUFBRWdxRCxlQUFpQixTQUFXN00sRUFBRzFELFdBQWEsRUFBRzBELEVBQUcxRCxVQUFXLFlBQWE4UCxHQUNwS25NLEVBQUcxRCxVQUFZOEIsR0FBYSxjQUFleDdDLEVBQUtBLEVBQUUwNUMsVUFBYSxtQkFBb0IxNUMsRUFBS0EsRUFBRWlxRCxlQUFpQixTQUFXOU0sRUFBR3pELFdBQWEsRUFBR3lELEVBQUd6RCxVQUFXLFlBQWE2UCxJQUVyS25NLEVBQUcvRCxNQUFRbUMsR0FBWXg3QyxFQUFFcTVDLE1BQU84RCxFQUFHOUQsT0FDbkMrRCxFQUFHeUwsTUFBUXJOLEdBQVl4N0MsRUFBRTZvRCxNQUFPMUwsRUFBRzBMLE9BWXBDLElBVklyUCxJQUE0QixNQUFieDVDLEVBQUUwaUQsVUFDcEJ2RixFQUFHdUYsUUFBVTFpRCxFQUFFMGlELFFBQ2YwRyxHQUFZLElBR2JELEVBQVNoTSxFQUFHdUYsU0FBV3ZGLEVBQUc3akIsR0FBSzZqQixFQUFHMUQsV0FBYTBELEVBQUd6RCxXQUFhMEQsRUFBRzlqQixHQUFLOGpCLEVBQUczRCxXQUFhMkQsRUFBRzFELFdBQWEwRCxFQUFHakosY0FDakYsTUFBWG4wQyxFQUFFa3BELFFBQ2Y5TCxFQUFHekQsT0FBUyxLQUdKdG9ELEdBQUssS0FFYm80RCxFQUFPck0sRUFEUGpxRCxFQUFJb3ZELEdBQWdCbHhELElBQ0w4ckQsRUFBR2hxRCxJQXpHWixNQTBHWXMyRCxHQTFHWixNQTBHbUMsTUFBUnpwRCxFQUFFN00sSUFBNkIsTUFBZmdqRCxFQUFTaGpELE1BQ3pEaTJELEdBQVksRUFDWi9rRCxFQUFLLElBQUk4NkMsR0FBYWhDLEVBQUlocUQsRUFBR2dxRCxFQUFHaHFELEdBQUlzMkQsRUFBTXBsRCxHQUN0Q2xSLEtBQUtvMkQsSUFDUmxsRCxFQUFHcE4sRUFBSXN5RCxFQUFhcDJELElBRXJCa1IsRUFBRzQ2QyxJQUFNLEVBQ1Q1NkMsRUFBR29ILE9BQVNBLEVBQ1pvekMsRUFBSy95QyxnQkFBZ0JyWCxLQUFLNFAsRUFBR3ZSLElBb0QvQixPQWhEQTIyRCxFQUFzQyxtQkFBdkJ6cEQsRUFBaUIsZ0JBQW9CQSxFQUFFMnBELGdCQUFnQmhWLEVBQVFqd0MsR0FBVzFFLEVBQUUycEQsZ0JBQ3ZGeE0sRUFBR2tGLE1BQVFvSCxHQUFRenBELEVBQUU0cEQsYUFDeEI5akMsRUFBSXEzQixFQUFHcUgsUUFDUHYyQixFQUFJa3ZCLEVBQUdzSCxRQUNQcEIsR0FBZ0I5d0QsRUFBR3VvRCxHQUFlMk8sR0FBT3JNLEVBQUlwOUMsRUFBRTRwRCxVQUFXNXBELEVBQUV5akQsY0FDNURwL0MsRUFBS3U3QyxHQUF5QnpDLEVBQUksV0FBWW1NLEVBQXNCbk0sRUFBS0MsR0FBSXVHLFFBQVN2RyxFQUFHdUcsUUFBU3QvQyxFQXZIMUUsbUJBd0h4QkEsRUFBS3U3QyxHQUF5QnpDLEVBQUksV0FBWW1NLEVBQXNCbk0sRUFBS0MsR0FBSXdHLFFBQVN4RyxFQUFHd0csUUFBU3YvQyxFQXhIMUUsbUJBeUhwQnloQixJQUFNcTNCLEVBQUdxSCxTQUFXdjJCLElBQU1rdkIsRUFBR3NILFVBQ2hDcGdELEVBQUt1N0MsR0FBeUJ6QyxFQUFJLFVBQVltTSxFQUFzQnhqQyxFQUFJcTNCLEVBQUdxSCxRQUFVckgsRUFBR3FILFFBQVNuZ0QsRUExSDFFLG1CQTJIdkJBLEVBQUt1N0MsR0FBeUJ6QyxFQUFJLFVBQVltTSxFQUFzQnI3QixFQUFJa3ZCLEVBQUdzSCxRQUFVdEgsRUFBR3NILFFBQVNwZ0QsRUEzSDFFLG9CQTZIeEJvbEQsRUFBTyxZQUVKQSxHQUFTalEsSUFBZTJQLEdBQVNoTSxFQUFHOEksV0FDbkMvTSxJQUNIa1EsR0FBWSxFQUNaajJELEVBQUlxdkQsR0FDQ2lILElBRUpBLEdBREFBLEdBQVFqUyxHQUFVamxELEVBQUdZLEVBQUdpZ0QsR0FBSyxFQUFPLFdBQWEsSUFBSWgvQyxNQUFNLE1BQy9DLEdBQUssSUFBTXExRCxFQUFLLEdBQUssSUFBTXRNLEVBQUc4SSxRQUFVLE1BRXJEd0QsR0FBUSxJQUNScGxELEVBQUssSUFBSTg2QyxHQUFhNThDLEVBQU9wUCxFQUFHLEVBQUcsRUFBR2tSLEdBQUssRUF4SXBCLG9CQXlJcEI3UCxFQUFJK04sRUFBTXBQLEdBQ2JrUixFQUFHb0gsT0FBU0EsRUFDUit0QyxJQUNIMTVDLEVBQU9xOUMsRUFBRzhJLFFBQ1Z3RCxFQUFPQSxFQUFLcjFELE1BQU0sS0FDbEIrb0QsRUFBRzhJLFNBQVl3RCxFQUFLcDFELE9BQVMsRUFBS21SLFdBQVdpa0QsRUFBSyxJQUFNM3BELElBQVMsRUFDakV1RSxFQUFHNDZDLElBQU01NkMsRUFBR3BOLEVBQUl3eUQsRUFBSyxHQUFLLEtBQU9BLEVBQUssSUFBTSxPQUFTLFFBQ3JEcGxELEVBQUssSUFBSTg2QyxHQUFhaEMsRUFBSSxVQUFXLEVBQUcsRUFBRzk0QyxHQUFLLEVBQUdBLEVBQUd2UixJQUNuRDBCLEVBQUlzTCxFQUNQdUUsRUFBRzQ2QyxJQUFNNTZDLEVBQUdwTixFQUFJa21ELEVBQUc4SSxTQUVuQjVoRCxFQUFHNDZDLElBQU01NkMsRUFBR3BOLEVBQUl3eUQsR0FLakIzTyxHQUFlMk8sRUFBTyxHQUFJdE0sSUFHeEJpTSxJQUNIdkssRUFBS3FMLGVBQW9CL00sRUFBR2tGLEtBQU9ELEtBQTBCK0csR0FBaUMsSUFBeEJsNEQsS0FBS2k1RCxlQUE2QixFQUFKLEdBRWpHakIsSUFDSGp0RCxFQUFLa3RELE1BQVFELEdBRVA1a0QsR0FDTGs5QyxXQUFVLEVBQU1MLFFBQU8sSUFFMUJNLEdBQTRCLFlBQWEsQ0FBQ0osYUFBYSx1QkFBd0JGLFFBQU8sRUFBTTc3QyxPQUFNLEVBQU04NEMsT0FBTSxFQUFNbUQsUUFBUSxVQUM1SEUsR0FBNEIsV0FBWSxDQUFDSixhQUFhLFlBQWFGLFFBQU8sRUFBTS9DLE9BQU0sRUFBTUMsVUFBVUosR0FBYyxzQkFBc0IsR0FBTyxLQUVqSndELEdBQTRCLGVBQWdCLENBQUNKLGFBQWEsTUFBT0MsT0FBTyxTQUFTOXVELEVBQUcwRSxFQUFHOUQsRUFBRzByRCxFQUFNeDZDLEVBQUlvSCxHQUNuR3hVLEVBQUloRyxLQUFLa3dELE9BQU9scUQsR0FDaEIsSUFFQ2t6RCxFQUFLOTRELEVBQUcrNEQsRUFBS0MsRUFBS0MsRUFBSUMsRUFBSWpLLEVBQUlrSyxFQUFJbHNDLEVBQUc0K0IsRUFBR3VOLEVBQU1DLEVBQU1DLEVBQUtDLEVBQUlDLEVBQUlDLEVBRjlEL2dELEVBQVEsQ0FBQyxzQkFBc0IsdUJBQXVCLDBCQUEwQiwwQkFDbkZ4SCxFQUFRaFEsRUFBRWdRLE1BS1gsSUFIQStiLEVBQUk5WSxXQUFXalQsRUFBRXFvRCxhQUNqQnNDLEVBQUkxM0MsV0FBV2pULEVBQUVzb0QsY0FDakJzUCxFQUFNbHpELEVBQUU3QyxNQUFNLEtBQ1QvQyxFQUFJLEVBQUdBLEVBQUkwWSxFQUFNMVYsT0FBUWhELElBQ3pCSixLQUFLa0MsRUFBRWlOLFFBQVEsWUFDbEIySixFQUFNMVksR0FBSzhsRCxFQUFpQnB0QyxFQUFNMVksTUFHVixLQUR6Qmk1RCxFQUFLRCxFQUFNN1MsR0FBVWpsRCxFQUFHd1gsRUFBTTFZLEdBQUkraEQsR0FBSyxFQUFPLFFBQ3ZDaHpDLFFBQVEsT0FDZGlxRCxFQUFNQyxFQUFHbDJELE1BQU0sS0FDZmsyRCxFQUFLRCxFQUFJLEdBQ1RBLEVBQU1BLEVBQUksSUFFWEUsRUFBS0gsRUFBTUQsRUFBSTk0RCxHQUNmaXZELEVBQUs5NkMsV0FBVzhrRCxHQUNoQkksRUFBT0osRUFBR25xRCxRQUFRbWdELEVBQUssSUFBSWpzRCxTQUMzQnMyRCxFQUF3QixNQUFqQkosRUFBR3htRCxPQUFPLEtBRWhCeW1ELEVBQUsva0QsU0FBUzhrRCxFQUFHeG1ELE9BQU8sR0FBRyxJQUFLLElBQ2hDd21ELEVBQUtBLEVBQUdwcUQsT0FBTyxHQUNmcXFELEdBQU1obEQsV0FBVytrRCxHQUNqQkUsRUFBT0YsRUFBR3BxRCxRQUFRcXFELEVBQUssSUFBSW4yRCxRQUFVbTJELEVBQUssRUFBSSxFQUFJLEtBQU8sS0FFekRBLEVBQUtobEQsV0FBVytrRCxHQUNoQkUsRUFBT0YsRUFBR3BxRCxRQUFRcXFELEVBQUssSUFBSW4yRCxTQUVmLEtBQVRvMkQsSUFDSEEsRUFBT3RYLEVBQVdoZ0QsSUFBTXUzRCxHQUVyQkQsSUFBU0MsSUFDWkUsRUFBSzdTLEdBQWlCeGxELEVBQUcsYUFBYyt0RCxFQUFJb0ssR0FDM0NHLEVBQUs5UyxHQUFpQnhsRCxFQUFHLFlBQWErdEQsRUFBSW9LLEdBQzdCLE1BQVRELEdBQ0hILEVBQU1NLEVBQUt0c0MsRUFBSSxJQUFPLElBQ3RCK3JDLEVBQU9RLEVBQUszTixFQUFJLElBQU8sS0FDSixPQUFUdU4sR0FFVkgsRUFBTU0sR0FETkUsRUFBSy9TLEdBQWlCeGxELEVBQUcsYUFBYyxFQUFHLE9BQ3pCLEtBQ2pCODNELEVBQU9RLEVBQUtDLEVBQU0sT0FFbEJSLEVBQUtNLEVBQUssS0FDVlAsRUFBTVEsRUFBSyxNQUVSRixJQUNISixFQUFNL2tELFdBQVc4a0QsR0FBTUUsRUFBTUMsRUFDN0JMLEVBQU81a0QsV0FBVzZrRCxHQUFPRyxFQUFNQyxJQUdqQ3BtRCxFQUFLdzdDLEdBQWN0OUMsRUFBT3dILEVBQU0xWSxHQUFJaTVELEVBQUssSUFBTUQsRUFBS0UsRUFBSyxJQUFNSCxHQUFLLEVBQU8sTUFBTy9sRCxHQUVuRixPQUFPQSxHQUNMNjhDLFFBQU8sRUFBTTlDLFVBQVVKLEdBQWMsbUJBQW1CLEdBQU8sS0FDbEV3RCxHQUE0QiwwRkFBMkYsQ0FBQ0osYUFBYSxNQUFPQyxPQUFPLFNBQVM5dUQsRUFBRzBFLEVBQUc5RCxFQUFHMHJELEVBQU14NkMsRUFBSW9ILEdBQzlLLE9BQU9vMEMsR0FBY3R0RCxFQUFFZ1EsTUFBT3BQLEVBQUdsQyxLQUFLa3dELE9BQU8zSixHQUFVamxELEVBQUdZLEVBQUdpZ0QsR0FBSyxFQUFPLFlBQWFuaUQsS0FBS2t3RCxPQUFPbHFELElBQUksRUFBTyxNQUFPb04sSUFDbEg2OEMsUUFBTyxFQUFNOUMsVUFBVUosR0FBYyxXQUFXLEdBQU8sS0FDMUR3RCxHQUE0QixxQkFBc0IsQ0FBQ0osYUFBYSxNQUFPQyxPQUFPLFNBQVM5dUQsRUFBRzBFLEVBQUc5RCxFQUFHMHJELEVBQU14NkMsRUFBSW9ILEdBQ3pHLElBSUNpMUMsRUFBSUMsRUFBSXR2RCxFQUFHMDVELEVBQUt0d0QsRUFBU3NoQixFQUp0Qml2QyxFQUFLLHNCQUNSdFQsRUFBTXRFLEdBQU9tRSxFQUFrQmhsRCxHQUMvQiszRCxFQUFLcjVELEtBQUtrd0QsUUFBUyxFQUFPek0sRUFBVWdELEVBQUdJLGlCQUFpQmtULEVBQUssTUFBUSxJQUFNdFQsRUFBR0ksaUJBQWlCa1QsRUFBSyxNQUFRdFQsRUFBR0ksaUJBQWlCa1QsR0FBTXo0RCxFQUFFd2tELGFBQWFrVSxvQkFBc0IsSUFBTTE0RCxFQUFFd2tELGFBQWFtVSxzQkFBd0IsT0FDeE5YLEVBQUt0NUQsS0FBS2t3RCxPQUFPbHFELEdBRWxCLElBQTBCLElBQXJCcXpELEVBQUdscUQsUUFBUSxRQUF1QyxJQUFyQm1xRCxFQUFHbnFELFFBQVEsT0FBZ0JtcUQsRUFBR24yRCxNQUFNLEtBQUtDLE9BQVMsSUFDbkYwbkIsRUFBTXk3QixHQUFVamxELEVBQUcsbUJBQW1CZ1UsUUFBUWl2QyxFQUFTLE1BQ3BDLFNBQVJ6NUIsRUFBZ0IsQ0FLMUIsSUFKQTJrQyxFQUFLNEosRUFBR2wyRCxNQUFNLEtBQ2R1c0QsRUFBSzRKLEVBQUduMkQsTUFBTSxLQUNkb2lELEVBQVNrTyxhQUFhLE1BQU8zb0MsR0FDN0IxcUIsRUFBSSxJQUNLQSxHQUFLLElBRWIwNUQsR0FBNEIsS0FENUJULEVBQUs1SixFQUFHcnZELElBQ0UrTyxRQUFRLFVBQ21CLElBQXhCdWdELEVBQUd0dkQsR0FBRytPLFFBQVEsUUFDMUIzRixFQUFpQixJQUFOcEosRUFBV2tCLEVBQUVxb0QsWUFBY3BFLEVBQVMxQyxNQUFRdmhELEVBQUVzb0QsYUFBZXJFLEVBQVN6QyxPQUNqRjJNLEVBQUdydkQsR0FBSzA1RCxFQUFPdmxELFdBQVc4a0QsR0FBTSxJQUFNN3ZELEVBQVcsS0FBUStLLFdBQVc4a0QsR0FBTTd2RCxFQUFVLElBQU8sS0FHN0Y2dkQsRUFBSzVKLEVBQUcvcUQsS0FBSyxLQUdmLE9BQU8xRSxLQUFLNnVELGFBQWF2dEQsRUFBRWdRLE1BQU8rbkQsRUFBSUMsRUFBSWxtRCxFQUFJb0gsSUFDNUMyeUMsVUFBVXRELEtBQ2IwRyxHQUE0QixpQkFBa0IsQ0FBQ0osYUFBYSxNQUFPaEQsVUFBVSxTQUFTcCtDLEdBRXJGLE1BQTBCLFFBRDFCQSxHQUFLLElBQ0tHLE9BQU8sRUFBRSxHQUFlSCxFQUFJODZDLElBQW1DLElBQXBCOTZDLEVBQUVJLFFBQVEsS0FBY0osRUFBSSxJQUFNQSxFQUFJQSxNQUU1RndoRCxHQUE0QixjQUFlLENBQUNKLGFBQWEsTUFBT0YsUUFBTyxJQUN2RU0sR0FBNEIsb0JBQXFCLENBQUNKLGFBQWEsVUFBV0YsUUFBTyxJQUNqRk0sR0FBNEIsaUJBQWtCLENBQUNOLFFBQU8sSUFDdERNLEdBQTRCLHFCQUFzQixDQUFDTixRQUFPLElBQzFETSxHQUE0QixhQUFjLENBQUNOLFFBQU8sSUFDbERNLEdBQTRCLFNBQVUsQ0FBQ0gsT0FBT3pDLEdBQWUsbURBQzdENEMsR0FBNEIsVUFBVyxDQUFDSCxPQUFPekMsR0FBZSx1REFDOUQ0QyxHQUE0QixPQUFRLENBQUNKLGFBQWEsd0JBQXlCQyxPQUFPLFNBQVM5dUQsRUFBRzBFLEVBQUc5RCxFQUFHMHJELEVBQU14NkMsRUFBSW9ILEdBQzdHLElBQUlqWCxFQUFHa2pELEVBQUk4RyxFQVVYLE9BVEk5SixFQUFVLEdBQ2JnRCxFQUFLbmxELEVBQUV3a0QsYUFDUHlILEVBQVE5SixFQUFVLEVBQUksSUFBTSxJQUM1QmxnRCxFQUFJLFFBQVVrakQsRUFBR3lULFFBQVUzTSxFQUFROUcsRUFBRzBULFVBQVk1TSxFQUFROUcsRUFBRzJULFdBQWE3TSxFQUFROUcsRUFBRzRULFNBQVcsSUFDaEdyMEQsRUFBSWhHLEtBQUtrd0QsT0FBT2xxRCxHQUFHN0MsTUFBTSxLQUFLdUIsS0FBSzZvRCxLQUVuQ2hxRCxFQUFJdkQsS0FBS2t3RCxPQUFPM0osR0FBVWpsRCxFQUFHdEIsS0FBS2tDLEVBQUdpZ0QsR0FBSyxFQUFPbmlELEtBQUsybUQsT0FDdEQzZ0QsRUFBSWhHLEtBQUtrd0QsT0FBT2xxRCxJQUVWaEcsS0FBSzZ1RCxhQUFhdnRELEVBQUVnUSxNQUFPL04sRUFBR3lDLEVBQUdvTixFQUFJb0gsTUFFN0MrMUMsR0FBNEIsYUFBYyxDQUFDSixhQUFhLG1CQUFvQi83QyxPQUFNLEVBQU04NEMsT0FBTSxJQUM5RnFELEdBQTRCLHdCQUF5QixDQUFDSCxPQUFPLFNBQVM5dUQsRUFBRzBFLEVBQUc5RCxFQUFHMHJELEVBQU14NkMsR0FBSyxPQUFPQSxLQUNqR205QyxHQUE0QixTQUFVLENBQUNKLGFBQWEsaUJBQWtCQyxPQUFPLFNBQVM5dUQsRUFBRzBFLEVBQUc5RCxFQUFHMHJELEVBQU14NkMsRUFBSW9ILEdBQ3hHLElBQUk4L0MsRUFBSy9ULEdBQVVqbEQsRUFBRyxpQkFBa0I2Z0QsR0FBSyxFQUFPLE9BQ25EN3VDLEVBQU10VCxLQUFLa3dELE9BQU9scUQsR0FBRzdDLE1BQU0sS0FDM0JxMkQsRUFBT2xtRCxFQUFJLEdBQUdnQyxRQUFRMHVDLEVBQVksSUFJbkMsTUFIYSxPQUFUd1YsSUFDSGMsRUFBTS9sRCxXQUFXK2xELEdBQU14VCxHQUFpQnhsRCxFQUFHLGlCQUFrQixFQUFHazRELEdBQVNBLEdBRW5FeDVELEtBQUs2dUQsYUFBYXZ0RCxFQUFFZ1EsTUFBT3RSLEtBQUtrd0QsT0FBT29LLEVBQUssSUFBTS9ULEdBQVVqbEQsRUFBRyxpQkFBa0I2Z0QsR0FBSyxFQUFPLFNBQVcsSUFBTW9FLEdBQVVqbEQsRUFBRyxpQkFBa0I2Z0QsR0FBSyxFQUFPLFNBQVU3dUMsRUFBSTVPLEtBQUssS0FBTTBPLEVBQUlvSCxJQUMxTHBHLE9BQU0sRUFBTSs0QyxVQUFVLFNBQVNwK0MsR0FDakMsSUFBSWxNLEVBQUlrTSxFQUFFNUwsTUFBTSxLQUNoQixPQUFPTixFQUFFLEdBQUssS0FBT0EsRUFBRSxJQUFNLFNBQVcsS0FBT2tNLEVBQUVzRixNQUFNczRDLEtBQWMsQ0FBQyxTQUFTLE1BRWpGNEQsR0FBNEIsY0FBZSxDQUFDSCxPQUFPekMsR0FBZSx1RUFDbEU0QyxHQUE0Qiw0QkFBNkIsQ0FBQ0gsT0FBTyxTQUFTOXVELEVBQUcwRSxFQUFHOUQsRUFBRzByRCxFQUFNeDZDLEVBQUlvSCxHQUM1RixJQUFJclksRUFBSWIsRUFBRWdRLE1BQ1R1RCxFQUFRLGFBQWMxUyxFQUFLLFdBQWEsYUFDekMsT0FBTyxJQUFJK3JELEdBQWEvckQsRUFBRzBTLEVBQU0sRUFBRyxFQUFHekIsR0FBSyxFQUFHbFIsR0FBRyxFQUFPLEVBQUdDLEVBQUUwUyxHQUFPN08sTUFJdEUsSUFBSXUwRCxHQUFxQixTQUFTeHJELEdBQ2hDLElBR0N5ckQsRUFIR2w1RCxFQUFJdEIsS0FBS3NCLEVBQ1pxbkQsRUFBVXJuRCxFQUFFdVMsUUFBVTB5QyxHQUFVdm1ELEtBQUt3TCxLQUFNLFdBQWEsR0FDeEQySCxFQUFPblQsS0FBS21DLEVBQUluQyxLQUFLUyxFQUFJc08sRUFBSyxFQUVuQixNQUFSb0UsS0FDZ0MsSUFBL0J3MUMsRUFBUXg1QyxRQUFRLFlBQXFELElBQWpDdzVDLEVBQVF4NUMsUUFBUSxjQUFxRCxJQUEvQnc1QyxFQUFReDVDLFFBQVEsV0FDN0Y3TixFQUFFazFELGdCQUFnQixVQUNsQmdFLEdBQVNqVSxHQUFVdm1ELEtBQUt3TCxLQUFNLFlBRTlCbEssRUFBRXVTLE9BQVM4MEMsRUFBUXJ6QyxRQUFRNnVDLEVBQWlCLElBQzVDcVcsR0FBTyxJQUdKQSxJQUNBeDZELEtBQUt5NkQsTUFDUm41RCxFQUFFdVMsT0FBUzgwQyxFQUFVQSxHQUFZLGlCQUFtQngxQyxFQUFNLE1BRXhCLElBQS9CdzFDLEVBQVF4NUMsUUFBUSxVQUNQLElBQVJnRSxHQUFjblQsS0FBS3k2RCxNQUN0Qm41RCxFQUFFdVMsT0FBUzgwQyxFQUFVLGtCQUFvQngxQyxFQUFNLEtBR2hEN1IsRUFBRXVTLE9BQVM4MEMsRUFBUXJ6QyxRQUFRMnVDLEVBQWEsV0FBYTl3QyxLQUl6RG85QyxHQUE0QiwwQkFBMkIsQ0FBQ0osYUFBYSxJQUFLQyxPQUFPLFNBQVM5dUQsRUFBRzBFLEVBQUc5RCxFQUFHMHJELEVBQU14NkMsRUFBSW9ILEdBQzVHLElBQUlqWCxFQUFJZ1IsV0FBV2d5QyxHQUFVamxELEVBQUcsVUFBVzZnRCxHQUFLLEVBQU8sTUFDdEQ3d0MsRUFBUWhRLEVBQUVnUSxNQUNWb3BELEVBQXFCLGNBQU54NEQsRUEwQmhCLE1BekJrQixpQkFBUixHQUFvQyxNQUFoQjhELEVBQUU4TSxPQUFPLEtBQ3RDOU0sR0FBc0IsTUFBaEJBLEVBQUU4TSxPQUFPLElBQWUsRUFBSSxHQUFLeUIsV0FBV3ZPLEVBQUVrSixPQUFPLElBQU0zTCxHQUU5RG0zRCxHQUFxQixJQUFObjNELEdBQStDLFdBQXBDZ2pELEdBQVVqbEQsRUFBRyxhQUFjNmdELElBQTJCLElBQU5uOEMsSUFDN0V6QyxFQUFJLEdBRURraUQsRUFDSHJ5QyxFQUFLLElBQUk4NkMsR0FBYTU4QyxFQUFPLFVBQVcvTixFQUFHeUMsRUFBSXpDLEVBQUc2UCxLQUVsREEsRUFBSyxJQUFJODZDLEdBQWE1OEMsRUFBTyxVQUFlLElBQUovTixFQUFtQixLQUFUeUMsRUFBSXpDLEdBQVU2UCxJQUM3RHFuRCxJQUFNQyxFQUFjLEVBQUksRUFDM0JwcEQsRUFBTXFwRCxLQUFPLEVBQ2J2bkQsRUFBR2xPLEtBQU8sRUFDVmtPLEVBQUc3UCxFQUFJLGlCQUFtQjZQLEVBQUdqUixFQUFJLElBQ2pDaVIsRUFBR3BOLEVBQUksa0JBQW9Cb04sRUFBR2pSLEVBQUlpUixFQUFHM1MsR0FBSyxJQUMxQzJTLEVBQUc1SCxLQUFPbEssRUFDVjhSLEVBQUdvSCxPQUFTQSxFQUNacEgsRUFBR3NCLFNBQVc2bEQsSUFFWEcsS0FDSHRuRCxFQUFLLElBQUk4NkMsR0FBYTU4QyxFQUFPLGFBQWMsRUFBRyxFQUFHOEIsR0FBSyxFQUFHLE1BQU0sRUFBTyxFQUFXLElBQU43UCxFQUFXLFVBQVksU0FBbUIsSUFBTnlDLEVBQVcsU0FBVyxZQUNsSWdvRCxJQUFNLFVBQ1RKLEVBQUsveUMsZ0JBQWdCclgsS0FBSzRQLEVBQUd2UixHQUM3QityRCxFQUFLL3lDLGdCQUFnQnJYLEtBQUt0QixJQUVwQmtSLEtBSVIsSUFBSXFoRCxHQUFjLFNBQVN0eUQsRUFBR0QsR0FDeEJBLElBQ0NDLEVBQUV5NEQsZ0JBQ2lCLE9BQWxCMTRELEVBQUVnTixPQUFPLEVBQUUsSUFBaUMsV0FBbEJoTixFQUFFZ04sT0FBTyxFQUFFLEtBQ3hDaE4sRUFBSSxJQUFNQSxHQUVYQyxFQUFFeTRELGVBQWUxNEQsRUFBRW9ULFFBQVErdUMsRUFBVSxPQUFPMWlDLGdCQUU1Q3hmLEVBQUVxMEQsZ0JBQWdCdDBELEtBSXJCMjRELEdBQXFCLFNBQVM5ckQsR0FFN0IsR0FEQS9PLEtBQUtzQixFQUFFdzVELFdBQWE5NkQsS0FDVixJQUFOK08sR0FBaUIsSUFBTkEsRUFBUyxDQUN2Qi9PLEtBQUtzQixFQUFFbXlELGFBQWEsUUFBZ0IsSUFBTjFrRCxFQUFXL08sS0FBS3VELEVBQUl2RCxLQUFLZ0csR0FHdkQsSUFGQSxJQUFJZ2pELEVBQU1ocEQsS0FBS3dMLEtBQ2RySixFQUFJbkMsS0FBS3NCLEVBQUVnUSxNQUNMMDNDLEdBQ0RBLEVBQUlqNkMsRUFHUjVNLEVBQUU2bUQsRUFBSTltRCxHQUFLOG1ELEVBQUlqNkMsRUFGZjBsRCxHQUFZdHlELEVBQUc2bUQsRUFBSTltRCxHQUlwQjhtRCxFQUFNQSxFQUFJdjhDLE1BRUQsSUFBTnNDLEdBQVcvTyxLQUFLc0IsRUFBRXc1RCxhQUFlOTZELE9BQ3BDQSxLQUFLc0IsRUFBRXc1RCxXQUFhLFdBRVg5NkQsS0FBS3NCLEVBQUUreEQsYUFBYSxXQUFhcnpELEtBQUtnRyxHQUNoRGhHLEtBQUtzQixFQUFFbXlELGFBQWEsUUFBU3p6RCxLQUFLZ0csSUFHckN1cUQsR0FBNEIsWUFBYSxDQUFDSCxPQUFPLFNBQVM5dUQsRUFBRzBFLEVBQUc5RCxFQUFHMHJELEVBQU14NkMsRUFBSW9ILEVBQVF6UCxHQUNwRixJQUVDZ3dELEVBQVMxQixFQUFJMkIsRUFBTUMsRUFBWWpTLEVBRjVCemxELEVBQUlqQyxFQUFFK3hELGFBQWEsVUFBWSxHQUNsQzFOLEVBQVVya0QsRUFBRWdRLE1BQU1xMEMsUUFVbkIsSUFSQXZ5QyxFQUFLdzZDLEVBQUtzTixhQUFlLElBQUloTixHQUFhNXNELEVBQUdZLEVBQUcsRUFBRyxFQUFHa1IsRUFBSSxJQUN2RHNCLFNBQVdtbUQsR0FDZHpuRCxFQUFHeEwsSUFBTSxHQUNUcTZDLEdBQWUsRUFDZjd1QyxFQUFHN1AsRUFBSUEsRUFDUDgxRCxFQUFLdlIsR0FBY3htRCxFQUFHNmdELEdBRXRCNlksRUFBTzE1RCxFQUFFdzVELFdBQ0MsQ0FHVCxJQUZBRyxFQUFhLEdBQ2JqUyxFQUFNZ1MsRUFBS3h2RCxLQUNKdzlDLEdBQ05pUyxFQUFXalMsRUFBSTltRCxHQUFLLEVBQ3BCOG1ELEVBQU1BLEVBQUl2OEMsTUFFWHV1RCxFQUFLdG1ELFNBQVMsR0FZZixPQVZBcFQsRUFBRXc1RCxXQUFhMW5ELEVBQ2ZBLEVBQUdwTixFQUFxQixNQUFoQkEsRUFBRThNLE9BQU8sR0FBYzlNLEVBQUl6QyxFQUFFK1IsUUFBUSxJQUFJbWEsT0FBTyxZQUFjenBCLEVBQUVrSixPQUFPLEdBQUssY0FBZSxLQUF3QixNQUFoQmxKLEVBQUU4TSxPQUFPLEdBQWMsSUFBTTlNLEVBQUVrSixPQUFPLEdBQUssSUFDdEo1TixFQUFFbXlELGFBQWEsUUFBU3JnRCxFQUFHcE4sR0FDM0IrMEQsRUFBVW5TLEdBQVF0bkQsRUFBRyszRCxFQUFJdlIsR0FBY3htRCxHQUFJeUosRUFBTWt3RCxHQUNqRDM1RCxFQUFFbXlELGFBQWEsUUFBU2x3RCxHQUN4QjZQLEVBQUc1SCxLQUFPdXZELEVBQVE1UixTQUNkN25ELEVBQUVnUSxNQUFNcTBDLFVBQVlBLElBQ3ZCcmtELEVBQUVnUSxNQUFNcTBDLFFBQVVBLEdBRW5CdnlDLEVBQUtBLEVBQUd5OEMsT0FBU2pDLEVBQUtDLE1BQU12c0QsRUFBR3k1RCxFQUFROVIsS0FBTTcxQyxFQUFJb0gsTUFLbEQsSUFBSTJnRCxHQUFzQixTQUFTcHNELEdBQ2xDLElBQVUsSUFBTkEsR0FBaUIsSUFBTkEsSUFBYS9PLEtBQUt3TCxLQUFLZSxhQUFldk0sS0FBS3dMLEtBQUtQLGdCQUFxQyxnQkFBbkJqTCxLQUFLd0wsS0FBS0EsS0FBd0IsQ0FDbEgsSUFFQzNJLEVBQUdYLEVBQUc5QixFQUFHZzdELEVBQWdCN00sRUFGdEJwc0QsRUFBSW5DLEtBQUtzQixFQUFFZ1EsTUFDZCtwRCxFQUFpQmhaLEVBQWNrTSxVQUFVVixNQUUxQyxHQUFlLFFBQVg3dEQsS0FBS2dHLEVBQ1I3RCxFQUFFd2pELFFBQVUsR0FDWnlWLEdBQWlCLE9BSWpCLElBREFoN0QsR0FEQXlDLEVBQUk3QyxLQUFLZ0csRUFBRTdDLE1BQU0sS0FBS3VCLEtBQUssSUFBSXZCLE1BQU0sTUFDL0JDLFNBQ0doRCxHQUFLLEdBQ2I4QixFQUFJVyxFQUFFekMsR0FDRmlpRCxFQUFjbmdELEtBQ2JtZ0QsRUFBY25nRCxHQUFHMnJELFFBQVV3TixFQUM5QkQsR0FBaUIsRUFFakJsNUQsRUFBVyxvQkFBTkEsRUFBMkJxdkQsR0FBdUJsUCxFQUFjbmdELEdBQUdBLEdBRzFFdXlELEdBQVl0eUQsRUFBR0QsR0FHYms1RCxJQUNIM0csR0FBWXR5RCxFQUFHOGxELEtBQ2ZzRyxFQUFZdnVELEtBQUtzQixFQUFFNHhELGdCQUVkM0UsRUFBVTZDLE1BQ2JweEQsS0FBS3NCLEVBQUVrMUQsZ0JBQWdCLG1CQUN2QngyRCxLQUFLc0IsRUFBRWsxRCxnQkFBZ0IscUJBRWpCeDJELEtBQUtzQixFQUFFNHhELGlCQWtCbEIsSUFaQTNDLEdBQTRCLGFBQWMsQ0FBQ0gsT0FBTyxTQUFTOXVELEVBQUcwRSxFQUFHOUQsRUFBRzByRCxFQUFNeDZDLEdBT3pFLE9BTkFBLEVBQUssSUFBSTg2QyxHQUFhNXNELEVBQUdZLEVBQUcsRUFBRyxFQUFHa1IsRUFBSSxJQUNuQ3NCLFNBQVd5bUQsR0FDZC9uRCxFQUFHcE4sRUFBSUEsRUFDUG9OLEVBQUd4TCxJQUFNLEdBQ1R3TCxFQUFHNUgsS0FBT29pRCxFQUFLcDZDLE9BQ2Z5dUMsR0FBZSxFQUNSN3VDLEtBR1JsUixFQUFJLDJDQUEyQ2lCLE1BQU0sS0FDckQvQyxHQUFJOEIsRUFBRWtCLE9BQ0NoRCxNQUNOcXdELEdBQW9CdnVELEVBQUU5QixNQVV2QjhCLEVBQUlrZ0QsRUFBVXBnRCxXQUNaaVEsU0FBVy9QLEVBQUU2MUQscUJBQXVCNzFELEVBQUVzc0QsV0FBYSxLQUdyRHRzRCxFQUFFeVksYUFBZSxTQUFTNVQsRUFBUWdFLEVBQU0yRCxFQUFPakgsR0FDOUMsSUFBS1YsRUFBT3NLLFNBQ1gsT0FBTyxFQUVSclIsS0FBS3lULFFBQVVBLEVBQVUxTSxFQUN6Qi9HLEtBQUt3VCxPQUFTOUUsRUFDZDFPLEtBQUtzN0QsTUFBUXZ3RCxFQUNiMjRDLEVBQVNqOEMsRUFDVDI3QyxFQUFhcjRDLEVBQUs0a0QsVUFDbEIxTixHQUFlLEVBQ2ZDLEVBQWFuM0MsRUFBSzAzQyxXQUFhTCxFQUFVSyxVQUN6Q04sRUFBTW1FLEVBQWtCdi9DLEdBQ3hCOFQsRUFBa0I3YSxLQUFLNmEsZ0JBQ3ZCLElBQ0M5TCxFQUFHcUUsRUFBSXlKLEVBQUtDLEVBQU9DLEVBQU1oTSxFQUFNd3FELEVBQVFDLEVBQUtDLEVBRHpDbnFELEVBQVF2SyxFQUFPdUssTUE0Qm5CLEdBMUJJK3hDLEdBQW9DLEtBQWpCL3hDLEVBQU1pcUQsU0FFbEIsVUFEVnhzRCxFQUFJdzNDLEdBQVV4L0MsRUFBUSxTQUFVbzdDLEtBQ04sS0FBTnB6QyxHQUVuQi9PLEtBQUswN0QsWUFBWXBxRCxFQUFPLFNBQVUsSUFJZixpQkFBWCxJQUNUd0wsRUFBUXhMLEVBQU1xMEMsUUFDZDUyQyxFQUFJKzRDLEdBQWMvZ0QsRUFBUW83QyxHQUMxQjd3QyxFQUFNcTBDLFFBQVU3b0MsRUFBUSxJQUFNL1IsRUFDOUJnRSxFQUFJNjVDLEdBQVE3aEQsRUFBUWdJLEVBQUcrNEMsR0FBYy9nRCxJQUFTa2lELE1BQ3pDeEQsR0FBb0J2QixFQUFldnZDLEtBQUs1SixLQUM1Q2dFLEVBQUU2MkMsUUFBVXJ4QyxXQUFZa2IsT0FBT2kyQixLQUVoQzM2QyxFQUFPZ0UsRUFDUHVDLEVBQU1xMEMsUUFBVTdvQyxHQUdiL1IsRUFBSzR3RCxVQUNSMzdELEtBQUtpUyxTQUFXbUIsRUFBS2l2QyxFQUFjc1osVUFBVTlOLE1BQU05bUQsRUFBUWdFLEVBQUs0d0QsVUFBVyxZQUFhMzdELEtBQU0sS0FBTSxLQUFNK0ssR0FFMUcvSyxLQUFLaVMsU0FBV21CLEVBQUtwVCxLQUFLNnRELE1BQU05bUQsRUFBUWdFLEVBQU0sTUFHM0MvSyxLQUFLaTVELGVBQWdCLENBdUJ4QixJQXRCQXdDLEVBQWtDLElBQXhCejdELEtBQUtpNUQsZUFDVmhSLEdBRU0zRSxJQUNWRCxHQUFnQixFQUVLLEtBQWpCL3hDLEVBQU1pcUQsU0FFTSxVQURmQSxFQUFTaFYsR0FBVXgvQyxFQUFRLFNBQVVvN0MsS0FDRCxLQUFYb1osR0FDeEJ2N0QsS0FBSzA3RCxZQUFZcHFELEVBQU8sU0FBVSxJQVFoQ2t5QyxHQUNIeGpELEtBQUswN0QsWUFBWXBxRCxFQUFPLDJCQUE0QnRSLEtBQUtzN0QsTUFBTU0sMkJBQTZCSCxFQUFTLFVBQVksWUFoQmxIbnFELEVBQU1xcEQsS0FBTyxFQW1CZDk5QyxFQUFNekosRUFDQ3lKLEdBQU9BLEVBQUlwUSxPQUNqQm9RLEVBQU1BLEVBQUlwUSxNQUVYK3VELEVBQU0sSUFBSXROLEdBQWFubkQsRUFBUSxZQUFhLEVBQUcsRUFBRyxLQUFNLEdBQ3hEL0csS0FBSzY3RCxVQUFVTCxFQUFLLEtBQU0zK0MsR0FDMUIyK0MsRUFBSTltRCxTQUFXdXpDLEdBQWlCb1AsR0FBcUJaLEdBQ3JEK0UsRUFBSWh3RCxLQUFPeEwsS0FBS3d1RCxZQUFjdEcsR0FBY25oRCxFQUFRbzdDLEdBQUssR0FDekRxWixFQUFJOXNELE1BQVFBLEVBQ1o4c0QsRUFBSTV6RCxJQUFNLEVBQ1ZpVCxFQUFnQnBXLE1BR2pCLEdBQUl3OUMsRUFBYyxDQUVqQixLQUFPN3VDLEdBQUksQ0FHVixJQUZBckMsRUFBT3FDLEVBQUczRyxNQUNWb1EsRUFBTUMsRUFDQ0QsR0FBT0EsRUFBSWpWLEdBQUt3TCxFQUFHeEwsSUFDekJpVixFQUFNQSxFQUFJcFEsT0FFTjJHLEVBQUd2QyxNQUFRZ00sRUFBTUEsRUFBSWhNLE1BQVFrTSxHQUNqQzNKLEVBQUd2QyxNQUFNcEUsTUFBUTJHLEVBRWpCMEosRUFBUTFKLEdBRUpBLEVBQUczRyxNQUFRb1EsR0FDZkEsRUFBSWhNLE1BQVF1QyxFQUVaMkosRUFBTzNKLEVBRVJBLEVBQUtyQyxFQUVOL1EsS0FBS2lTLFNBQVc2SyxFQUVqQixPQUFPLEdBSVI1YSxFQUFFMnJELE1BQVEsU0FBUzltRCxFQUFRZ0UsRUFBTXFJLEVBQUlvSCxHQUNwQyxJQUNDdFksRUFBRzQ1RCxFQUFJek0sRUFBSWtLLEVBQUlGLEVBQUlDLEVBQUlHLEVBQU1ELEVBQU11QyxFQUFPckMsRUFEdkNwb0QsRUFBUXZLLEVBQU91SyxNQUVuQixJQUFLcFAsS0FBSzZJLEVBQU0sQ0FNZixHQUxBdXVELEVBQUt2dUQsRUFBSzdJLEdBQ1Y0NUQsRUFBS3paLEVBQWNuZ0QsR0FDQSxtQkFBVCxHQUF5QjQ1RCxHQUFNQSxFQUFHeEwsWUFDM0NnSixFQUFLQSxFQUFHNVYsRUFBUWp3QyxJQUVicW9ELEVBQ0gxb0QsRUFBSzBvRCxFQUFHak8sTUFBTTltRCxFQUFRdXlELEVBQUlwM0QsRUFBR2xDLEtBQU1vVCxFQUFJb0gsRUFBUXpQLE9BQ3pDLElBQXNCLE9BQWxCN0ksRUFBRWdOLE9BQU8sRUFBRSxHQUFhLENBQ2xDbFAsS0FBS3dULE9BQU81QixZQUFZMVAsR0FBS2xDLEtBQUt5YyxVQUFVbGMsS0FBS1AsS0FBS3dULE9BQVF6TSxFQUFPdUssTUFBTyxjQUFlZzFDLEVBQWtCdi9DLEdBQVE4L0MsaUJBQWlCM2tELEdBQUssR0FBSW8zRCxFQUFLLEdBQUlwM0QsR0FBRyxFQUFPQSxHQUNsSyxTQUVBbTNELEVBQUs5UyxHQUFVeC9DLEVBQVE3RSxFQUFHaWdELEdBQU8sR0FDakM0WixFQUF3QixpQkFBVCxFQUNMLFVBQU43NUQsR0FBdUIsU0FBTkEsR0FBc0IsV0FBTkEsSUFBMEMsSUFBeEJBLEVBQUVpTixRQUFRLFVBQW9CNHNELEdBQVMzWCxFQUFXenZDLEtBQUsya0QsSUFDeEd5QyxJQUVKekMsSUFEQUEsRUFBS2xOLEdBQVlrTixJQUNQbDJELE9BQVMsRUFBSyxRQUFVLFFBQVVrMkQsRUFBRzUwRCxLQUFLLEtBQU8sS0FFNUQwTyxFQUFLdzdDLEdBQWN0OUMsRUFBT3BQLEVBQUdtM0QsRUFBSUMsR0FBSSxFQUFNLGNBQWVsbUQsRUFBSSxFQUFHb0gsSUFFdkR1aEQsR0FBU2pYLEVBQVlud0MsS0FBSzJrRCxHQUNwQ2xtRCxFQUFLdzdDLEdBQWN0OUMsRUFBT3BQLEVBQUdtM0QsRUFBSUMsR0FBSSxFQUFNLEtBQU1sbUQsRUFBSSxFQUFHb0gsSUFJeERpL0MsR0FEQXBLLEVBQUs5NkMsV0FBVzhrRCxLQUNLLElBQVBoSyxFQUFZZ0ssRUFBR25xRCxRQUFRbWdELEVBQUssSUFBSWpzRCxRQUFVLEdBRTdDLEtBQVBpMkQsR0FBb0IsU0FBUEEsSUFDTixVQUFObjNELEdBQXVCLFdBQU5BLEdBQ3BCbXRELEVBQUsvRixHQUFjdmlELEVBQVE3RSxFQUFHaWdELEdBQzlCc1gsRUFBTyxNQUNTLFNBQU52M0QsR0FBc0IsUUFBTkEsR0FDMUJtdEQsRUFBSzFILEdBQWlCNWdELEVBQVE3RSxFQUFHaWdELEdBQ2pDc1gsRUFBTyxPQUVQcEssRUFBWSxZQUFObnRELEVBQW1CLEVBQUksRUFDN0J1M0QsRUFBTyxNQUlUQyxFQUFPcUMsR0FBMEIsTUFBakJ6QyxFQUFHeG1ELE9BQU8sS0FFekJ5bUQsRUFBSy9rRCxTQUFTOGtELEVBQUd4bUQsT0FBTyxHQUFLLElBQUssSUFDbEN3bUQsRUFBS0EsRUFBR3BxRCxPQUFPLEdBQ2ZxcUQsR0FBTWhsRCxXQUFXK2tELEdBQ2pCRSxFQUFPRixFQUFHaGtELFFBQVEwdUMsRUFBWSxNQUU5QnVWLEVBQUtobEQsV0FBVytrRCxHQUNoQkUsRUFBT3VDLEVBQVF6QyxFQUFHaGtELFFBQVEwdUMsRUFBWSxJQUFNLElBR2hDLEtBQVR3VixJQUNIQSxFQUFRdDNELEtBQUtnZ0QsRUFBY0EsRUFBV2hnRCxHQUFLdTNELEdBRzVDSCxFQUFNQyxHQUFhLElBQVBBLEdBQWFHLEVBQU1ILEVBQUtsSyxFQUFLa0ssR0FBTUMsRUFBT3p1RCxFQUFLN0ksR0FFdkR1M0QsSUFBU0QsSUFBbUIsS0FBVEEsR0FBcUIsZUFBTnQzRCxJQUF3QnEzRCxHQUFhLElBQVBBLElBQWNsSyxJQUNqRkEsRUFBS3ZJLEdBQWlCLy9DLEVBQVE3RSxFQUFHbXRELEVBQUlvSyxHQUN4QixNQUFURCxHQUNIbkssR0FBTXZJLEdBQWlCLy9DLEVBQVE3RSxFQUFHLElBQUssS0FBTyxLQUNyQixJQUFyQjZJLEVBQUtpeEQsY0FDUjNDLEVBQUtoSyxFQUFLLE1BR1EsT0FBVG1LLEdBQTBCLFFBQVRBLEdBQTJCLE9BQVRBLEdBQTBCLE9BQVRBLEVBQzlEbkssR0FBTXZJLEdBQWlCLy9DLEVBQVE3RSxFQUFHLEVBQUdzM0QsR0FHbEIsT0FBVEEsSUFDVkQsRUFBS3pTLEdBQWlCLy9DLEVBQVE3RSxFQUFHcTNELEVBQUlDLEdBQ3JDQSxFQUFPLE1BRUpFLElBQVNILEdBQWEsSUFBUEEsS0FDbEJELEVBQU1DLEVBQUtsSyxFQUFNbUssS0FJZkUsSUFDSEgsR0FBTWxLLElBR0ZBLEdBQWEsSUFBUEEsSUFBY2tLLEdBQWEsSUFBUEEsT0FJUGw2QyxJQUFiL04sRUFBTXBQLEtBQXFCbzNELEdBQU9BLEVBQUssSUFBTyxPQUFlLE1BQU5BLElBR2pFbG1ELEVBQUssSUFBSTg2QyxHQUFhNThDLEVBQU9wUCxFQUFHcTNELEdBQU1sSyxHQUFNLEVBQUcsRUFBR2o4QyxHQUFLLEVBQUdsUixHQUFHLEVBQU8sRUFBR20zRCxFQUFJQyxJQUN4RXRMLElBQWMsU0FBUHNMLEdBQXdCLFlBQU5wM0QsSUFBMkMsSUFBeEJBLEVBQUVpTixRQUFRLFNBQXlCbXFELEVBQUxELEVBSDdFdFQsRUFBSyxXQUFhN2pELEVBQUksaUJBQW1CNkksRUFBSzdJLEtBSjlDa1IsRUFBSyxJQUFJODZDLEdBQWE1OEMsRUFBT3BQLEVBQUdtdEQsRUFBSWtLLEVBQUtsSyxFQUFJajhDLEVBQUksRUFBR2xSLEdBQW1CLElBQWZraEQsSUFBa0MsT0FBVG9XLEdBQXVCLFdBQU50M0QsR0FBa0IsRUFBR20zRCxFQUFJQyxJQUN4SHRMLElBQU13TCxHQVdSaC9DLEdBQVlwSCxJQUFPQSxFQUFHb0gsU0FDekJwSCxFQUFHb0gsT0FBU0EsR0FHZCxPQUFPcEgsR0FLUmxSLEVBQUV3UyxTQUFXLFNBQVMzRixHQUNyQixJQUVDb0UsRUFBS21mLEVBQUtseUIsRUFGUGdULEVBQUtwVCxLQUFLaVMsU0FJZCxHQUFVLElBQU5sRCxHQUFZL08sS0FBS3dULE9BQU94SCxRQUFVaE0sS0FBS3dULE9BQU94SSxXQUFtQyxJQUF0QmhMLEtBQUt3VCxPQUFPeEgsTUF3QnBFLEdBQUkrQyxHQUFPL08sS0FBS3dULE9BQU94SCxRQUFVaE0sS0FBS3dULE9BQU94SSxXQUFtQyxJQUF0QmhMLEtBQUt3VCxPQUFPeEgsUUFBOEMsT0FBOUJoTSxLQUFLd1QsT0FBT2hILGFBQ3hHLEtBQU80RyxHQUFJLENBT1YsR0FOQUQsRUFBTUMsRUFBRzNTLEVBQUlzTyxFQUFJcUUsRUFBR2pSLEVBQ2hCaVIsRUFBR2xTLEVBQ05pUyxFQUFNQyxFQUFHbFMsRUFBRWlTLEdBQ0RBLEVBaENOLE1BZ0NxQkEsR0FoQ3JCLE9BaUNKQSxFQUFNLEdBRUZDLEVBQUdsTyxLQUVELEdBQWdCLElBQVprTyxFQUFHbE8sS0FFYixHQUFVLEtBRFY5RSxFQUFJZ1QsRUFBRy9TLEdBRU4rUyxFQUFHOVIsRUFBRThSLEVBQUdsUixHQUFLa1IsRUFBRzQ2QyxJQUFNNzZDLEVBQU1DLEVBQUc2NkMsSUFBTTc2QyxFQUFHcW5ELElBQU1ybkQsRUFBRzZvRCxTQUMzQyxHQUFVLElBQU43N0QsRUFDVmdULEVBQUc5UixFQUFFOFIsRUFBR2xSLEdBQUtrUixFQUFHNDZDLElBQU03NkMsRUFBTUMsRUFBRzY2QyxJQUFNNzZDLEVBQUdxbkQsSUFBTXJuRCxFQUFHNm9ELElBQU03b0QsRUFBRzhvRCxJQUFNOW9ELEVBQUcrb0QsU0FDN0QsR0FBVSxJQUFOLzdELEVBQ1ZnVCxFQUFHOVIsRUFBRThSLEVBQUdsUixHQUFLa1IsRUFBRzQ2QyxJQUFNNzZDLEVBQU1DLEVBQUc2NkMsSUFBTTc2QyxFQUFHcW5ELElBQU1ybkQsRUFBRzZvRCxJQUFNN29ELEVBQUc4b0QsSUFBTTlvRCxFQUFHK29ELElBQU0vb0QsRUFBR2dwRCxJQUFNaHBELEVBQUdpcEQsU0FDL0UsR0FBVSxJQUFOajhELEVBQ1ZnVCxFQUFHOVIsRUFBRThSLEVBQUdsUixHQUFLa1IsRUFBRzQ2QyxJQUFNNzZDLEVBQU1DLEVBQUc2NkMsSUFBTTc2QyxFQUFHcW5ELElBQU1ybkQsRUFBRzZvRCxJQUFNN29ELEVBQUc4b0QsSUFBTTlvRCxFQUFHK29ELElBQU0vb0QsRUFBR2dwRCxJQUFNaHBELEVBQUdpcEQsSUFBTWpwRCxFQUFHa3BELElBQU1scEQsRUFBR21wRCxRQUNqRyxDQUVOLElBREFqcUMsRUFBTWxmLEVBQUc0NkMsSUFBTTc2QyxFQUFNQyxFQUFHNjZDLElBQ25CN3RELEVBQUksRUFBR0EsRUFBSWdULEVBQUcvUyxFQUFHRCxJQUNyQmt5QixHQUFPbGYsRUFBRyxLQUFLaFQsR0FBS2dULEVBQUcsTUFBTWhULEVBQUUsSUFFaENnVCxFQUFHOVIsRUFBRThSLEVBQUdsUixHQUFLb3dCLE9BR1MsSUFBYmxmLEVBQUdsTyxLQUNia08sRUFBRzlSLEVBQUU4UixFQUFHbFIsR0FBS2tSLEVBQUc0NkMsSUFFTjU2QyxFQUFHc0IsVUFDYnRCLEVBQUdzQixTQUFTM0YsUUF2QlpxRSxFQUFHOVIsRUFBRThSLEVBQUdsUixHQUFLaVIsRUFBTUMsRUFBRzQ2QyxJQXlCdkI1NkMsRUFBS0EsRUFBRzNHLFdBS1QsS0FBTzJHLEdBQ1UsSUFBWkEsRUFBR2xPLEtBQ05rTyxFQUFHOVIsRUFBRThSLEVBQUdsUixHQUFLa1IsRUFBRzdQLEVBRWhCNlAsRUFBR3NCLFNBQVMzRixHQUVicUUsRUFBS0EsRUFBRzNHLFdBcEVULEtBQU8yRyxHQUFJLENBQ1YsR0FBZ0IsSUFBWkEsRUFBR2xPLEtBQ04sR0FBSWtPLEVBQUdsUyxJQUFrQixJQUFia1MsRUFBR2xPLEtBRWQsR0FEQWlPLEVBQU1DLEVBQUdsUyxFQUFFa1MsRUFBR2pSLEVBQUlpUixFQUFHM1MsR0FDaEIyUyxFQUFHbE8sTUFFRCxHQUFnQixJQUFaa08sRUFBR2xPLEtBQVksQ0FHekIsSUFGQTlFLEVBQUlnVCxFQUFHL1MsRUFDUGl5QixFQUFNbGYsRUFBRzQ2QyxJQUFNNzZDLEVBQU1DLEVBQUc2NkMsSUFDbkI3dEQsRUFBSSxFQUFHQSxFQUFJZ1QsRUFBRy9TLEVBQUdELElBQ3JCa3lCLEdBQU9sZixFQUFHLEtBQUtoVCxHQUFLZ1QsRUFBRyxNQUFNaFQsRUFBRSxJQUVoQ2dULEVBQUc5UixFQUFFOFIsRUFBR2xSLEdBQUtvd0IsUUFQYmxmLEVBQUc5UixFQUFFOFIsRUFBR2xSLEdBQUtpUixFQUFNQyxFQUFHNDZDLFNBVXZCNTZDLEVBQUc5UixFQUFFOFIsRUFBR2xSLEdBQUtrUixFQUFHcE4sT0FHakJvTixFQUFHc0IsU0FBUzNGLEdBRWJxRSxFQUFLQSxFQUFHM0csUUFnRVh2SyxFQUFFczZELGtCQUFvQixTQUFTZixHQUM5Qno3RCxLQUFLd3VELFdBQWF4dUQsS0FBS3d1RCxZQUFjdEcsR0FBY2xvRCxLQUFLeVQsUUFBUzB1QyxHQUFLLEdBQ3RFbmlELEtBQUtpNUQsZUFBb0JqNUQsS0FBS3d1RCxXQUFXNEMsS0FBT0QsS0FBMEJzSyxHQUFrQyxJQUF4Qno3RCxLQUFLaTVELGVBQTZCLEVBQUosR0FHbkgsSUFBSXdELEdBQVUsU0FBUzF0RCxHQUN0Qi9PLEtBQUtzQixFQUFFdEIsS0FBS2tDLEdBQUtsQyxLQUFLZ0csRUFDdEJoRyxLQUFLd0wsS0FBS3F3RCxVQUFVNzdELEtBQU1BLEtBQUt5TSxNQUFPLE1BQU0sSUFHN0N2SyxFQUFFdzVELFlBQWMsU0FBU3A2RCxFQUFHWSxFQUFHNk0sR0FDOUIsSUFBSXFFLEVBQUtwVCxLQUFLaVMsU0FBVyxJQUFJaThDLEdBQWE1c0QsRUFBR1ksRUFBRyxFQUFHLEVBQUdsQyxLQUFLaVMsU0FBVSxHQUNyRW1CLEVBQUdwTixFQUFJK0ksRUFDUHFFLEVBQUdzQixTQUFXK25ELEdBQ2RycEQsRUFBRzVILEtBQU94TCxNQUlYa0MsRUFBRTI1RCxVQUFZLFNBQVN6b0QsRUFBSXJDLEVBQU1neUIsRUFBTTI1QixHQXNCdEMsT0FyQkl0cEQsSUFDQ3JDLElBQ0hBLEVBQUtGLE1BQVF1QyxHQUVWQSxFQUFHM0csUUFDTjJHLEVBQUczRyxNQUFNb0UsTUFBUXVDLEVBQUd2QyxPQUVqQnVDLEVBQUd2QyxNQUNOdUMsRUFBR3ZDLE1BQU1wRSxNQUFRMkcsRUFBRzNHLE1BQ1Z6TSxLQUFLaVMsV0FBYW1CLElBQzVCcFQsS0FBS2lTLFNBQVdtQixFQUFHM0csTUFDbkJpd0QsR0FBUyxHQUVOMzVCLEVBQ0hBLEVBQUt0MkIsTUFBUTJHLEVBQ0ZzcEQsR0FBNEIsT0FBbEIxOEQsS0FBS2lTLFdBQzFCalMsS0FBS2lTLFNBQVdtQixHQUVqQkEsRUFBRzNHLE1BQVFzRSxFQUNYcUMsRUFBR3ZDLE1BQVFreUIsR0FFTDN2QixHQUdSbFIsRUFBRXlhLEtBQU8sU0FBU0QsR0FFakIsSUFEQSxJQUFJdEosRUFBS3BULEtBQUtpUyxTQUNQbUIsR0FDdUIsbUJBQWxCc0osRUFBT3RKLEVBQUdsUixLQUNwQmtSLEVBQUdsUyxFQUFJd2IsRUFBT3RKLEVBQUdsUixJQUVsQmtSLEVBQUtBLEVBQUczRyxPQUtWdkssRUFBRW9NLE1BQVEsU0FBU29PLEdBQ2xCLElBQ0N0SixFQUFJbFIsRUFBRzJ0RCxFQURKaGhELEVBQU82TixFQUVYLEdBQUlBLEVBQU9pZ0QsV0FBYWpnRCxFQUFPa2dELE1BQU8sQ0FFckMsSUFBSzE2RCxLQURMMk0sRUFBTyxHQUNHNk4sRUFDVDdOLEVBQUszTSxHQUFLd2EsRUFBT3hhLEdBRWxCMk0sRUFBSysyQyxRQUFVLEVBQ1gvMkMsRUFBSzh0RCxZQUNSOXRELEVBQUtndUQsV0FBYSxHQWdCcEIsSUFiSW5nRCxFQUFPaS9DLFlBQWN2b0QsRUFBS3BULEtBQUtrN0QsaUJBQ2xDckwsRUFBU3o4QyxFQUFHeThDLFNBQ0VBLEVBQU9oL0MsTUFDcEI3USxLQUFLNjdELFVBQVVoTSxFQUFPaC9DLE1BQU91QyxFQUFHM0csTUFBT29qRCxFQUFPaC9DLE1BQU1BLE9BQzFDZy9DLElBQVc3dkQsS0FBS2lTLFdBQzFCalMsS0FBS2lTLFNBQVdtQixFQUFHM0csT0FFaEIyRyxFQUFHM0csT0FDTnpNLEtBQUs2N0QsVUFBVXpvRCxFQUFHM0csTUFBTzJHLEVBQUczRyxNQUFNQSxNQUFPb2pELEVBQU9oL0MsT0FFakQ3USxLQUFLazdELGFBQWUsTUFFckI5bkQsRUFBS3BULEtBQUtpUyxTQUNIbUIsR0FDRkEsRUFBR29ILFFBQVVwSCxFQUFHb0gsU0FBV3RZLEdBQUtrUixFQUFHb0gsT0FBT2xNLFFBQzdDOEUsRUFBR29ILE9BQU9sTSxNQUFNb08sR0FDaEJ4YSxFQUFJa1IsRUFBR29ILFFBRVJwSCxFQUFLQSxFQUFHM0csTUFFVCxPQUFPLElBQVl6SyxVQUFVc00sTUFBTS9OLEtBQUtQLEtBQU02TyxJQU0vQyxJQUFJaXVELEdBQWtCLFNBQVM5MkQsRUFBRzhTLEVBQU81SCxHQUN2QyxJQUFJc3NDLEVBQVVwOUMsRUFBR21RLEVBQU9yTCxFQUN4QixHQUFJYyxFQUFFZ0MsTUFFTCxJQURBNUgsRUFBSTRGLEVBQUU1QyxTQUNHaEQsR0FBSyxHQUNiMDhELEdBQWdCOTJELEVBQUU1RixHQUFJMFksRUFBTzVILFFBTS9CLElBREE5USxHQURBbzlDLEVBQVd4M0MsRUFBRSsyRCxZQUNBMzVELFNBQ0poRCxHQUFLLEdBRWI4RSxHQURBcUwsRUFBUWl0QyxFQUFTcDlDLElBQ0o4RSxLQUNUcUwsRUFBTWUsUUFDVHdILEVBQU10VixLQUFLc2tELEdBQWN2M0MsSUFDckJXLEdBQ0hBLEVBQVExTixLQUFLK00sSUFHRCxJQUFUckwsR0FBdUIsSUFBVEEsR0FBdUIsS0FBVEEsSUFBZ0JxTCxFQUFNd3NELFdBQVczNUQsUUFDakUwNUQsR0FBZ0J2c0QsRUFBT3VJLEVBQU81SCxJQTBEbEMsT0FuQ0FreEMsRUFBVTRhLFVBQVksU0FBU2oyRCxFQUFRK0QsRUFBVUMsR0FDaEQsSUFNQzNLLEVBQUc2b0QsRUFBTS9tRCxFQUFHK0ssRUFOVHlCLEVBQVFuTSxFQUFBLEVBQVV5WCxHQUFHalQsRUFBUStELEVBQVVDLEdBQzFDc2tDLEVBQVUsQ0FBQzNnQyxHQUNYbkwsRUFBSSxHQUNKeUMsRUFBSSxHQUNKa0wsRUFBVSxHQUNWOEUsRUFBaUJ6VCxFQUFBLEVBQVVpVCxXQUFXUyxjQVN2QyxJQVBBbFAsRUFBUzJILEVBQU1pRCxVQUFZakQsRUFBTTNILE9BQ2pDKzFELEdBQWdCLzFELEVBQVF4RCxFQUFHMk4sR0FDM0J4QyxFQUFNZCxPQUFPOUMsR0FBVSxHQUFNLEdBQzdCZ3lELEdBQWdCLzFELEVBQVFmLEdBQ3hCMEksRUFBTWQsT0FBTyxHQUFHLEdBQU0sR0FDdEJjLEVBQU1YLFVBQVMsR0FDZjNOLEVBQUk4USxFQUFROU4sU0FDSGhELEdBQUssR0FFYixJQURBNm9ELEVBQU9MLEdBQVExM0MsRUFBUTlRLEdBQUltRCxFQUFFbkQsR0FBSTRGLEVBQUU1RixLQUMxQitvRCxTQUFVLENBRWxCLElBQUtqbkQsS0FETCttRCxFQUFPQSxFQUFLQSxLQUNGbCtDLEVBQ0xpTCxFQUFlOVQsS0FDbEIrbUQsRUFBSy9tRCxHQUFLNkksRUFBSzdJLElBSWpCLElBQUtBLEtBREwrSyxFQUFPLEdBQ0dnOEMsRUFDVGg4QyxFQUFLL0ssR0FBS3FCLEVBQUVuRCxHQUFHOEIsR0FFaEJtdEMsRUFBUTdyQyxLQUFLakIsRUFBQSxFQUFVcVosT0FBTzFLLEVBQVE5USxHQUFJMEssRUFBVW1DLEVBQU1nOEMsSUFHNUQsT0FBTzVaLEdBR1IsSUFBWXJ5QixTQUFTLENBQUNvbEMsSUFDZkEsS0FFTCxHQUVHLElBQUksRUFBWSxJQUFRQSxVQ3gxRnBCNmEsRUFBYSxJQUFTcjRELFVBQVU0VixPQUFPLENBQ2pEMEMsU0FBVSxPQUNWVixJQUFLLEVBQ0xsSyxRQUFTLFFBR1RqTyxLQUFNLFNBQVMwQyxFQUFRMUYsRUFBT3FOLEVBQU9qSCxHQUNwQyxJQUFJdkYsRUFBR29SLEVBQ1AsR0FBb0MsbUJBQXpCdk0sRUFBbUIsYUFDN0IsT0FBTyxFQUVSLElBQUs3RSxLQUFLYixFQUVXLG1CQURwQmlTLEVBQU1qUyxFQUFNYSxNQUVYb1IsRUFBTUEsRUFBSTdMLEVBQU9WLElBRWxCL0csS0FBS3ljLFVBQVUxVixFQUFRLGVBQWdCQSxFQUFPc3NELGFBQWFueEQsR0FBSyxHQUFJb1IsRUFBTSxHQUFJcFIsR0FBRyxFQUFPQSxHQUN4RmxDLEtBQUs2YSxnQkFBZ0JyWCxLQUFLdEIsR0FFM0IsT0FBTyxLQ25CRWc3RCxFQUFtQixJQUFTdDRELFVBQVU0VixPQUFPLENBQ3BEMEMsU0FBVSxhQUNWNUssUUFBUyxRQUNUaEwsVUFBVyxFQUNYa1YsSUFBSyxFQUdMblksS0FBTSxTQUFTMEMsRUFBUTFGLEVBQU9xTixHQUU3QixPQURBMU8sS0FBS3dULE9BQVM5RSxHQUNQLEtBSVR5dUQsRUFBZ0IsU0FBU3B1RCxHQUN4QixJQUFJN00sRUFBSTZNLEVBQUksRUFBSTdFLEtBQUttUixJQUFJLElBQUt0TSxFQUFJLElBQUkzTCxPQUFTLEdBQUssRUFDcEQsT0FBTyxTQUFTdkIsR0FDZixPQUFTcUksS0FBS3VLLE1BQU01UyxFQUFJa04sR0FBS0EsRUFBSTdNLEVBQUssR0FBS0EsSUFHN0NrN0QsRUFBbUIsU0FBU3JyQixFQUFNaDlCLEdBQ2pDLEtBQU9nOUIsR0FDREEsRUFBS3huQyxHQUFNd25DLEVBQUsxK0IsT0FDcEIwK0IsRUFBS3Z4QyxFQUFJdVUsR0FBTzdLLEtBQUt1SyxPQUV0QnM5QixFQUFPQSxFQUFLdGxDLE9BR2QsRUFBSXl3RCxFQUFpQmw3RDs7Ozs7Ozs7Ozs7R0FFdEIsRUFBRThZLGdCQUFrQixXQUNuQixJQUlDMUgsRUFBSXJDLEVBQU0zUSxFQUFHOEIsRUFKVndNLEVBQVExTyxLQUFLd1QsT0FDaEI2cEQsRUFBSzN1RCxFQUFNM0QsS0FBS3V5RCxXQUNoQjVnRCxFQUFTLEdBQ1Q2Z0QsRUFBTTd1RCxFQUFNa0QsWUFBWTByRCxXQUV6QixHQUFtQixpQkFBVCxHQUFzQkQsRUFBRzc1RCxLQVNsQyxJQUptQixpQkFBVCxJQUNUNjVELEVBQUtBLEVBQUdsNkQsTUFBTSxNQUVmL0MsRUFBSWk5RCxFQUFHajZELFNBQ0VoRCxHQUFLLEdBQ2JzYyxFQUFPMmdELEVBQUdqOUQsSUFBTThKLEtBQUt1SyxXQVR0QixJQUFLdlMsS0FBS203RCxFQUNUM2dELEVBQU94YSxHQUFLaTdELEVBQWNFLEVBQUduN0QsSUFZL0IsSUFBS0EsS0FBS3dhLEVBRVQsSUFEQXRKLEVBQUsxRSxFQUFNdUQsU0FDSm1CLEdBQ05yQyxFQUFPcUMsRUFBRzNHLE1BQ04yRyxFQUFHZ0MsR0FDTmhDLEVBQUc5UixFQUFFcWIsS0FBS0QsR0FDQXRKLEVBQUd2UixJQUFNSyxJQUNOLElBQVRrUixFQUFHN0ksR0FBVzZJLEVBQUc5UixFQUNwQjg3RCxFQUFpQmhxRCxFQUFHOVIsRUFBRTJRLFNBQVV5SyxFQUFPeGEsS0FFdkNsQyxLQUFLdzlELEtBQUtwcUQsRUFBRzlSLEVBQUdZLEVBQUdrUixFQUFHalIsRUFBR2lSLEVBQUczUyxFQUFHaWMsRUFBT3hhLElBRWxDNk8sSUFDSEEsRUFBS0YsTUFBUXVDLEVBQUd2QyxPQUVidUMsRUFBR3ZDLE1BQ051QyxFQUFHdkMsTUFBTXBFLE1BQVFzRSxFQUNQckMsRUFBTXVELFdBQWFtQixJQUM3QjFFLEVBQU11RCxTQUFXbEIsR0FFbEJxQyxFQUFHM0csTUFBUTJHLEVBQUd2QyxNQUFRLEtBQ3RCbkMsRUFBTWtELFlBQVkxUCxHQUFLcTdELElBR3pCbnFELEVBQUtyQyxFQUdQLE9BQU8sR0FHUixFQUFFeXNELEtBQU8sU0FBU3oyRCxFQUFRN0UsRUFBR0MsRUFBRzFCLEVBQUdzVSxHQUNsQy9VLEtBQUt5YyxVQUFVMVYsRUFBUTdFLEVBQUdDLEVBQUdBLEVBQUkxQixFQUFHeUIsRUFBRzZTLEdBQU83SyxLQUFLdUssT0FDbkR6VSxLQUFLNmEsZ0JBQWdCclgsS0FBS3RCOzs7Ozs7Ozs7Ozs7QUNqRnRCLElBQUl1N0QsRUFBNEIsSUFBUzc0RCxVQUFVNFYsT0FBTyxDQUMvRDBDLFNBQVUsc0JBQ1Y1SyxRQUFTLFFBQ1RrSyxJQUFLLEVBR0xuWSxLQUFNLFNBQVMwQyxFQUFRMUYsRUFBT3FOLEVBQU9qSCxHQUNkLGlCQUFaLElBQ1RwRyxFQUFRLENBQUM4bUQsU0FBUzltRCxJQUVuQnJCLEtBQUswOUQsT0FBUyxHQUNkLElBRUN4N0QsRUFBRzZNLEVBQUd3RSxFQUFPRCxFQUFLbTNDLEVBQUt0bkQsRUFGcEJ1bkQsR0FBNEIsSUFBckJycEQsRUFBTXM4RCxXQUFpQyxFQUFWenpELEtBQUs4NkMsR0FBUyxJQUd0RCxJQUFLOWlELEtBQUtiLEVBQ0MsZUFBTmEsSUFFaUIsbUJBRHBCb1IsRUFBTWpTLEVBQU1hLE1BRVhvUixFQUFNQSxFQUFJN0wsRUFBT1YsSUFHbEJnSSxHQURBNUwsR0FBU21RLEVBQU0sSUFBSW5RLE1BQU0sTUFDZixHQUNWb1EsRUFBUWdCLFdBQW1DLG1CQUFmeE4sRUFBTzdFLEdBQXNCNkUsRUFBTzdFLEdBQUs2RSxFQUFVN0UsRUFBRWlOLFFBQVEsUUFBa0QsbUJBQWpDcEksRUFBTyxNQUFRN0UsRUFBRWdOLE9BQU8sSUFBdUJoTixFQUFJLE1BQVFBLEVBQUVnTixPQUFPLE9BRTlLdTdDLEdBREFuM0MsRUFBTXRULEtBQUswOUQsT0FBT3g3RCxHQUFvQixpQkFBUixHQUFvQyxNQUFoQjZNLEVBQUUrRCxPQUFPLEdBQWNTLEVBQVFpQixTQUFTekYsRUFBRStELE9BQU8sR0FBSyxJQUFLLElBQU0zSCxPQUFPNEQsRUFBRUcsT0FBTyxJQUFNL0QsT0FBTzRELElBQU0sR0FDMUl3RSxFQUNScFEsRUFBTUMsVUFFbUIsS0FENUIyTCxFQUFJNUwsRUFBTXVCLEtBQUssTUFDVHlLLFFBQVEsV0FDYnM3QyxHQUFZQyxLQUNBRCxHQUFPQyxFQUFNLEtBQ3hCRCxFQUFPQSxFQUFNLEVBQUtBLEVBQU1DLEVBQU1ELEVBQU1DLElBR1osSUFBdEIzN0MsRUFBRUksUUFBUSxRQUFpQnM3QyxFQUFNLEVBQ3BDQSxHQUFRQSxFQUFZLFdBQU5DLEdBQW9CQSxHQUFTRCxFQUFNQyxFQUFPLEdBQUtBLEdBQzdCLElBQXRCMzdDLEVBQUVJLFFBQVEsUUFBaUJzN0MsRUFBTSxJQUMzQ0EsR0FBUUEsRUFBWSxXQUFOQyxHQUFvQkEsR0FBU0QsRUFBTUMsRUFBTyxHQUFLQSxLQUczREQsRUEzQkMsTUEyQllBLEdBM0JaLFFBNEJKenFELEtBQUt5YyxVQUFVMVYsRUFBUTdFLEVBQUdxUixFQUFPQSxFQUFRazNDLEVBQUt2b0QsR0FDOUNsQyxLQUFLNmEsZ0JBQWdCclgsS0FBS3RCLEtBSTdCLE9BQU8sR0FJUjhaLElBQUssU0FBU3JNLEdBQ2IsSUFBSXlELEVBQ0osR0FBYyxJQUFWekQsRUFDSDNQLEtBQUt1YyxPQUFPN0gsU0FBU25VLEtBQUtQLEtBQU0yUCxRQUdoQyxJQURBeUQsRUFBS3BULEtBQUtpUyxTQUNIbUIsR0FDRkEsRUFBRzdJLEVBQ042SSxFQUFHOVIsRUFBRThSLEVBQUdsUixHQUFHbEMsS0FBSzA5RCxPQUFPdHFELEVBQUdsUixJQUUxQmtSLEVBQUc5UixFQUFFOFIsRUFBR2xSLEdBQUtsQyxLQUFLMDlELE9BQU90cUQsRUFBR2xSLEdBRTdCa1IsRUFBS0EsRUFBRzNHLFNBT2JneEQsRUFBMEIvaUQsVUFBVzs7Ozs7Ozs7Ozs7O0FDcEVyQyxJQUFTOVYsVUFBVSxlQUFnQixDQUFDLGlCQUFpQixzQkFBc0IsY0FBYyxXQUV2RixJQUFJZzVELEVBQWUsU0FBUzd5RCxHQUMxQixJQUFleEssS0FBS1AsS0FBTStLLEdBQzFCLElBRUNvSSxFQUFLalIsRUFETDZNLEVBRFUvTyxLQUNEK0ssS0FPVixJQUFLN0ksS0FSTWxDLEtBR042OUQsUUFBVSxHQUhKNzlELEtBSU5tUSxxQkFBdUJwQixFQUFFb0IsbUJBSm5CblEsS0FLTm9QLG9CQUFzQkwsRUFBRUssa0JBTGxCcFAsS0FNTjRQLGVBQWdCLEVBTlY1UCxLQU9OMk0sVUFBWW9DLEVBQUV3SCxTQUNUeEgsRUFDVG9FLEVBQU1wRSxFQUFFN00sR0FDSndCLEVBQVN5UCxLQUE4QyxJQUFwQ0EsRUFBSXpPLEtBQUssSUFBSXlLLFFBQVEsWUFDM0NKLEVBQUU3TSxHQVhPbEMsS0FXRzJPLGtCQUFrQndFLElBRzVCelAsRUFBU3FMLEVBQUVzSixTQWRKclksS0FlTCtMLElBQUlnRCxFQUFFc0osT0FBUSxFQUFHdEosRUFBRTBCLE1BQU8xQixFQUFFMkIsVUFJbkM4dUMsRUFBcUJqOUMsRUFBQSxFQUFVaVQsV0FDL0JBLEVBQWFvb0QsRUFBYXBvRCxXQUFhLEdBQ3ZDeEQsRUFBY3d0QyxFQUFtQnJ1QyxXQUNqQ3pOLEVBQVc4N0MsRUFBbUIvcEMsUUFDOUJsRyxFQUFjaXdDLEVBQW1COXBDLFdBQ2pDbEcsRUFBY2d3QyxFQUFtQnJuQyxXQUNqQ3hWLEVBQVcsSUFBU2lDLFVBQVVFLFFBQzlCZzVELEVBQVEsU0FBUy95RCxHQUNoQixJQUFlN0ksRUFBWDJNLEVBQU8sR0FDWCxJQUFLM00sS0FBSzZJLEVBQ1Q4RCxFQUFLM00sR0FBSzZJLEVBQUs3SSxHQUVoQixPQUFPMk0sR0FFUnV2QyxFQUFjLFNBQVNyekMsRUFBTW1HLEVBQVM5USxHQUNyQyxJQUNDOEIsRUFBR2lSLEVBREFrckMsRUFBTXR6QyxFQUFLdXpDLE1BRWYsSUFBS3A4QyxLQUFLbThDLEVBQ1RsckMsRUFBTWtyQyxFQUFJbjhDLEdBQ1Y2SSxFQUFLN0ksR0FBc0IsbUJBQVYsRUFBd0JpUixFQUFJL1MsRUFBRzhRLEVBQVE5USxHQUFJOFEsR0FBV2lDLEVBQUkvUyxFQUFJK1MsRUFBSS9QLGVBRTdFMkgsRUFBS3V6QyxPQUVieWYsRUFBaUJ2b0QsRUFBV3dvRCxjQUFnQixhQVE1Q0MsRUFBMEIsU0FBU3J5RCxFQUFJa1EsRUFBUUQsRUFBVXFpRCxHQUN4RCxJQUFJQyxFQUFLLGtCQUlULE9BSE1BLEtBQU1yaUQsSUFDWEEsRUFBT3FpRCxLQUFTdGlELElBQTZCLElBQWpCQSxFQUFTc2lELElBQWtCRCxJQUVqRHBpRCxHQUdSeWlDLEVBQWMsU0FBU3h2QyxHQUN0QixHQUFrQixtQkFBUixFQUNULE9BQU9BLEVBRVIsSUFBSWhFLEVBQXNCLGlCQUFSLEVBQW9CZ0UsRUFBSSxDQUFDc2pDLEtBQUt0akMsR0FDL0NsSixFQUFPa0YsRUFBS2xGLEtBQ1pvSCxFQUFPbEMsRUFBS2tDLE1BQVEsRUFDcEJ1eEMsRUFBT3p6QyxFQUFLeXpDLE1BQVEsRUFDcEJDLEVBQVEsR0FDUkMsRUFBZ0JycEMsTUFBTXBJLEdBQ3RCMHhDLEVBQU81ekMsRUFBSzR6QyxLQUNaaHZDLEVBQVEsQ0FBQ2l2QyxPQUFPLEdBQUt0ckMsSUFBSSxHQUFHckcsSUFBUyxFQUN0QyxPQUFPLFNBQVM3TSxFQUFHMkcsRUFBUWxFLEdBQzFCLElBRUNnOEMsRUFBU0MsRUFBU2pxQixFQUFHbUksRUFBR3Q4QixFQUFHdUYsRUFBRytuQixFQUFLN2pCLEVBQUtpN0IsRUFGckMva0MsR0FBS3dDLEdBQUtrSSxHQUFNM0gsT0FDbkIyN0MsRUFBWU4sRUFBTXArQyxHQUVuQixJQUFLMCtDLEVBQVcsQ0FFZixLQURBM1osRUFBc0IsU0FBZHI2QixFQUFLaTBDLEtBQW1CLEdBQUtqMEMsRUFBS2kwQyxNQUFRLENBQUNycUIsTUFBVyxJQUNuRCxDQUVWLElBREEzRyxHQUFPMkcsSUFDQTNHLEdBQU9BLEVBQU1uckIsRUFBRXVpQyxLQUFRNlosd0JBQXdCdmIsT0FBUzBCLEVBQU8va0MsSUFDdEUra0MsSUFPRCxJQUxBMlosRUFBWU4sRUFBTXArQyxHQUFLLEdBQ3ZCdytDLEVBQVVILEVBQWlCeDBDLEtBQUtDLElBQUlpN0IsRUFBTS9rQyxHQUFLc1AsRUFBUyxHQUFNMUMsRUFBT200QixFQUNyRTBaLEVBQVVKLEVBQWdCcitDLEVBQUlzUCxFQUFReTFCLEVBQU8sR0FBT240QixFQUFPbTRCLEVBQVEsRUFDbkVwWCxFQUFNLEVBQ043akIsRUFBTXdxQixJQUNEMXVCLEVBQUksRUFBR0EsRUFBSTVGLEVBQUc0RixJQUNsQjR1QixFQUFLNXVCLEVBQUltL0IsRUFBUXlaLEVBQ2pCN2hCLEVBQUk4aEIsR0FBWTc0QyxFQUFJbS9CLEVBQVEsR0FDNUIyWixFQUFVOTRDLEdBQUt2RixFQUFLaStDLEVBQWtDejBDLEtBQUtpdkIsSUFBYyxNQUFUd2xCLEVBQWdCM2hCLEVBQUluSSxHQUF6RDNxQixLQUFLOCtCLEtBQUtuVSxFQUFJQSxFQUFJbUksRUFBSUEsR0FDN0N0OEIsRUFBSXN0QixJQUNQQSxFQUFNdHRCLEdBRUhBLEVBQUl5SixJQUNQQSxFQUFNekosR0FHUnErQyxFQUFVL3dCLElBQU1BLEVBQU03akIsRUFDdEI0MEMsRUFBVTUwQyxJQUFNQSxFQUNoQjQwQyxFQUFVaHdDLEVBQUkxTyxFQUFJMEssRUFBS20wQyxRQUFXbjBDLEVBQUtzbkMsTUFBUWpOLEVBQU8va0MsRUFBSUEsRUFBSSxFQUFLcytDLEVBQTJDLE1BQVRBLEVBQWV0K0MsRUFBSStrQyxFQUFPQSxFQUFyRGw3QixLQUFLOGpCLElBQUlvWCxFQUFNL2tDLEVBQUkra0MsS0FBNEMsRUFDekkyWixFQUFVeDdDLEVBQUtsRCxFQUFJLEVBQUttK0MsRUFBT24rQyxFQUFJbStDLEVBR3BDLE9BREFuK0MsR0FBSzArQyxFQUFVMytDLEdBQUsyK0MsRUFBVTUwQyxLQUFPNDBDLEVBQVUvd0IsSUFDeEMrd0IsRUFBVXg3QyxHQUFLc0MsRUFBT0EsRUFBS1EsU0FBU2hHLEdBQUtBLEdBQUswK0MsRUFBVWh3QyxJQUdqRTdNLEVBQUkwN0QsRUFBYTU3RCxVQUFZLElBQUksSUF3c0JsQyxPQXRzQkE0N0QsRUFBYXRyRCxRQUFVLFFBQ3ZCc3JELEVBQWFsZSxXQUFhbkIsRUFDMUJyOEMsRUFBRTBJLFlBQWNnekQsRUFDaEIxN0QsRUFBRXFNLE9BQU9uQyxJQUFNbEssRUFBRWs4RCxpQkFBbUJsOEQsRUFBRW04RCxXQUFZLEVBd0JsRG44RCxFQUFFOFgsR0FBSyxTQUFTalQsRUFBUStELEVBQVVDLEVBQU15RixHQUN2QyxJQUFJOHRELEVBQVV2ekQsRUFBS3NNLFFBQVUxVSxFQUFTdzhDLFVBQWE1OEMsRUFBQSxFQUNuRCxPQUFPdUksRUFBVzlLLEtBQUsrTCxJQUFLLElBQUl1eUQsRUFBT3YzRCxFQUFRK0QsRUFBVUMsR0FBT3lGLEdBQVl4USxLQUFLZ2MsSUFBSWpWLEVBQVFnRSxFQUFNeUYsSUFHcEd0TyxFQUFFK0ssS0FBTyxTQUFTbEcsRUFBUStELEVBQVVDLEVBQU15RixHQUN6QyxPQUFPeFEsS0FBSytMLEtBQU9oQixFQUFLc00sUUFBVTFVLEVBQVN3OEMsVUFBYTU4QyxFQUFBLEdBQVcwSyxLQUFLbEcsRUFBUStELEVBQVVtekQsRUFBd0JqK0QsRUFBTStLLElBQVF5RixJQUdqSXRPLEVBQUUwWixPQUFTLFNBQVM3VSxFQUFRK0QsRUFBVStRLEVBQVVDLEVBQVF0TCxHQUN2RCxJQUFJOHRELEVBQVV4aUQsRUFBT3pFLFFBQVUxVSxFQUFTdzhDLFVBQWE1OEMsRUFBQSxFQUVyRCxPQURBdVosRUFBU21pRCxFQUF3QmorRCxFQUFNOGIsRUFBUUQsR0FDeEMvUSxFQUFXOUssS0FBSytMLElBQUt1eUQsRUFBTzFpRCxPQUFPN1UsRUFBUStELEVBQVUrUSxFQUFVQyxHQUFTdEwsR0FBWXhRLEtBQUtnYyxJQUFJalYsRUFBUStVLEVBQVF0TCxJQUdySHRPLEVBQUVtK0MsVUFBWSxTQUFTbnZDLEVBQVNwRyxFQUFVQyxFQUFNMkYsRUFBU0YsRUFBVSt2QyxFQUFlQyxFQUFxQkMsR0FDdEcsSUFJQzV4QyxFQUFNek8sRUFKSHdMLEVBQUssSUFBSWd5RCxFQUFhLENBQUMxbkQsV0FBV3FxQyxFQUFlcHFDLGlCQUFpQnFxQyxFQUFxQnh4QyxjQUFjeXhDLEVBQW9CcnhDLGtCQUFrQnBQLEtBQUtvUCxvQkFDbkpzeEMsRUFBY25DLEVBQVl4ekMsRUFBSzJGLFNBQVdBLEdBQzFDNEYsRUFBVXZMLEVBQUt1TCxRQUNmZ29DLEVBQVF2ekMsRUFBS3V6QyxNQVNkLElBUHdCLGlCQUFkLElBQ1RwdEMsRUFBVTNPLEVBQUEsRUFBVXlPLFNBQVNFLElBQVlBLEdBR3RDYyxFQURKZCxFQUFVQSxHQUFXLE1BRXBCQSxFQXRIUSxTQUFTck8sR0FDakIsSUFFQ3pDLEVBRkdtRCxFQUFJLEdBQ1BsRCxFQUFJd0MsRUFBRU8sT0FFUCxJQUFLaEQsRUFBSSxFQUFHQSxJQUFNQyxFQUFHa0QsRUFBRUMsS0FBS1gsRUFBRXpDLE9BQzlCLE9BQU9tRCxFQWlIR0QsQ0FBTzROLElBRWI5USxFQUFJLEVBQUdBLEVBQUk4USxFQUFROU4sT0FBUWhELElBQy9CeU8sRUFBT2l2RCxFQUFNL3lELEdBQ1R1TCxJQUNIekgsRUFBS3lILFFBQVV3bkQsRUFBTXhuRCxHQUNqQkEsRUFBUWdvQyxPQUNYRixFQUFZdnZDLEVBQUt5SCxRQUFTcEYsRUFBUzlRLElBR2pDaytDLElBQ0hGLEVBQVl2dkMsRUFBTXFDLEVBQVM5USxHQUNOLE1BQWpCeU8sRUFBSy9ELFdBQ1JBLEVBQVcrRCxFQUFLL0QsZ0JBQ1QrRCxFQUFLL0QsV0FHZGMsRUFBR29PLEdBQUc5SSxFQUFROVEsR0FBSTBLLEVBQVUrRCxFQUFNNnhDLEVBQVl0Z0QsRUFBRzhRLEVBQVE5USxHQUFJOFEsSUFFOUQsT0FBT2xSLEtBQUsrTCxJQUFJSCxFQUFJNEUsSUFHckJ0TyxFQUFFMCtDLFlBQWMsU0FBUzF2QyxFQUFTcEcsRUFBVUMsRUFBTTJGLEVBQVNGLEVBQVUrdkMsRUFBZUMsRUFBcUJDLEdBRXhHLE9BREExMUMsRUFBS3NMLGNBQWUsRUFDYnJXLEtBQUtxZ0QsVUFBVW52QyxFQUFTcEcsRUFBVW16RCxFQUF3QmorRCxFQUFNK0ssR0FBTzJGLEVBQVNGLEVBQVUrdkMsRUFBZUMsRUFBcUJDLElBR3RJditDLEVBQUU0K0MsY0FBZ0IsU0FBUzV2QyxFQUFTcEcsRUFBVStRLEVBQVVDLEVBQVFwTCxFQUFTRixFQUFVK3ZDLEVBQWVDLEVBQXFCQyxHQUV0SCxPQURBM2tDLEVBQU94RixRQUFVdUYsRUFDVjdiLEtBQUtxZ0QsVUFBVW52QyxFQUFTcEcsRUFBVW16RCxFQUF3QmorRCxFQUFNOGIsRUFBUUQsR0FBV25MLEVBQVNGLEVBQVUrdkMsRUFBZUMsRUFBcUJDLElBR2xKditDLEVBQUUzQixLQUFPLFNBQVM0RyxFQUFVeUgsRUFBUXhILEVBQU9vSixHQUMxQyxPQUFPeFEsS0FBSytMLElBQUt4SixFQUFBLEVBQVV3WixZQUFZLEVBQUc1VSxFQUFVeUgsRUFBUXhILEdBQVFvSixJQUdyRXRPLEVBQUU4WixJQUFNLFNBQVNqVixFQUFRZ0UsRUFBTXlGLEdBQzlCLE9BQU94USxLQUFLK0wsSUFBSyxJQUFJeEosRUFBQSxFQUFVd0UsRUFBUSxFQUFHazNELEVBQXdCaitELEVBQU0rSyxFQUFNLE1BQU0sSUFBUXlGLElBRzdGb3RELEVBQWFXLFdBQWEsU0FBU3h6RCxFQUFNeXpELEdBRVYsT0FEOUJ6ekQsRUFBT0EsR0FBUSxJQUNOcUUsb0JBQ1JyRSxFQUFLcUUsbUJBQW9CLEdBRTFCLElBRUNxdkQsRUFBa0I5MEQsRUFBTStFLEVBQU9xQyxFQUY1Qm5GLEVBQUssSUFBSWd5RCxFQUFhN3lELEdBQ3pCdEwsRUFBT21NLEVBQUdnQixVQVNYLElBUDBCLE1BQXRCNHhELElBQ0hBLEdBQXFCLEdBRXRCLytELEVBQUs0TyxRQUFRekMsR0FBSSxHQUNqQkEsRUFBRzFDLFdBQWEsRUFDaEIwQyxFQUFHWSxhQUFlWixFQUFHSSxNQUFRSixFQUFHVyxXQUFhOU0sRUFBS3VNLE1BQ2xEMEMsRUFBUWpQLEVBQUsyUSxPQUNOMUIsR0FDTnFDLEVBQU9yQyxFQUFNakMsTUFDUit4RCxHQUF3Qjl2RCxhQUFpQm5NLEVBQUEsR0FBYW1NLEVBQU0zSCxTQUFXMkgsRUFBTTNELEtBQUttTCxjQUN0RnZNLEVBQU8rRSxFQUFNeEYsV0FBYXdGLEVBQU14RCxRQUNyQixJQUNWdXpELEVBQW1CLEdBRXBCN3lELEVBQUdHLElBQUkyQyxFQUFPL0UsSUFFZitFLEVBQVFxQyxFQU1ULE9BSkF0UixFQUFLc00sSUFBSUgsRUFBSSxHQUNUNnlELEdBQ0g3eUQsRUFBRytCLGdCQUVHL0IsR0FHUjFKLEVBQUU2SixJQUFNLFNBQVMxSyxFQUFPbVAsRUFBVUMsRUFBT0MsR0FDeEMsSUFDQ2d1RCxFQUFTcitELEVBQUdELEVBQUdtUSxFQUFPM0UsRUFBSSt5RCxFQUkzQixHQUh5QixpQkFBZixJQUNUbnVELEVBSFV4USxLQUdNNCtELGtCQUFrQnB1RCxFQUFVLEdBQUcsRUFBTW5QLE1BRWhEQSxhQUFpQixLQUFZLENBQ2xDLEdBQUtBLGFBQWlCdUMsT0FBV3ZDLEdBQVNBLEVBQU1tQyxNQUFRRSxFQUFTckMsR0FBUyxDQUt6RSxJQUpBb1AsRUFBUUEsR0FBUyxTQUNqQkMsRUFBVUEsR0FBVyxFQUNyQmd1RCxFQUFVbHVELEVBQ1ZuUSxFQUFJZ0IsRUFBTStCLE9BQ0xoRCxFQUFJLEVBQUdBLEVBQUlDLEVBQUdELElBQ2RzRCxFQUFTNk0sRUFBUWxQLEVBQU1qQixNQUMxQm1RLEVBQVEsSUFBSXF0RCxFQUFhLENBQUN2bEQsT0FBTzlILEtBYjFCdlEsS0FlSCtMLElBQUl3RSxFQUFPbXVELEdBQ00saUJBQVosR0FBMEMsbUJBQVosSUFDekIsYUFBVmp1RCxFQUNIaXVELEVBQVVudUQsRUFBTXJILFdBQWNxSCxFQUFNNUMsZ0JBQWtCNEMsRUFBTWxGLFdBQ3hDLFVBQVZvRixJQUNWRixFQUFNckgsWUFBY3FILEVBQU1uRixVQUc1QnN6RCxHQUFXaHVELEVBRVosT0F6QlMxUSxLQXlCR3dPLFVBQVMsR0FDZixHQUFzQixpQkFBWixFQUNoQixPQTNCU3hPLEtBMkJHNitELFNBQVN4OUQsRUFBT21QLEdBQ3RCLEdBQXNCLG1CQUFaLEVBR2hCLEtBQU0sY0FBZ0JuUCxFQUFRLHdFQUY5QkEsRUFBUWtCLEVBQUEsRUFBVXdaLFlBQVksRUFBRzFhLEdBZ0JuQyxHQVZBLElBQWVXLFVBQVUrSixJQUFJeEwsS0FuQ2xCUCxLQW1DNkJxQixFQUFPbVAsSUFFM0NuUCxFQUFNMkssUUFBVzNLLEVBQU0ySixXQUFhM0osRUFBTWdMLFlBQzdDcXlELEdBdENVMStELEtBc0NNaU8sVUFBWTVNLEVBQU02SCxZQUFjN0gsRUFBTWdLLGFBQ2pEaEssRUFBTTJKLFdBQWFkLEtBQUtpdkIsSUFBSWp2QixLQUFLOGpCLElBQUksRUFBRzlqQixLQUFLQyxJQUFJOUksRUFBTXNNLGdCQUFpQit3RCxLQUFhcjlELEVBQU1rTCxXQUFhLE9BQzVHbEwsRUFBTXVNLE9BQU84d0QsR0FBUyxHQUFPLEtBeENwQjErRCxLQTZDRm9NLEtBN0NFcE0sS0E2Q1VnTSxRQTdDVmhNLEtBNkN5QmdMLGFBN0N6QmhMLEtBNkM4Q3NNLFNBN0M5Q3RNLEtBNkNnRWdMLFVBN0NoRWhMLEtBNkNpRjhLLFdBSTNGLElBREE2ekQsR0FEQS95RCxFQS9DVTVMLE1BZ0RVaU8sVUFBWTVNLEVBQU02SCxXQUMvQjBDLEVBQUdnQixXQUNMK3hELEdBQWlCL3lELEVBQUdnQixVQUFVd0Msa0JBQ2pDeEQsRUFBRzJCLFVBQVUzQixFQUFHVyxZQUFZLEdBQ2xCWCxFQUFHUSxLQUNiUixFQUFHbUMsVUFBUyxHQUFNLEdBRW5CbkMsRUFBS0EsRUFBR2dCLFVBSVYsT0EzRFc1TSxNQThEWmtDLEVBQUV3NkQsT0FBUyxTQUFTcjdELEdBQ25CLEdBQUlBLGFBQWlCLElBQVcsQ0FDL0JyQixLQUFLcU8sUUFBUWhOLEdBQU8sR0FDcEIsSUFBSXVLLEVBQUt2SyxFQUFNdUwsVUFBWXZMLEVBQU0wSixLQUFLYyxVQUFZLElBQVVDLG9CQUFzQixJQUFVSCxjQUU1RixPQURBdEssRUFBTTZILFlBQWM3SCxFQUFNaUwsUUFBVWpMLEVBQU1pTyxXQUFhMUQsRUFBR0ksUUFBWTNLLEVBQU1vSyxVQUErQnBLLEVBQU1zTSxnQkFBa0J0TSxFQUFNa0wsV0FBakRsTCxFQUFNa0wsWUFBeURsTCxFQUFNZ0ssV0FDdEpyTCxLQUNELEdBQUlxQixhQUFpQnVDLE9BQVV2QyxHQUFTQSxFQUFNbUMsTUFBUUUsRUFBU3JDLEdBQVMsQ0FFOUUsSUFEQSxJQUFJakIsRUFBSWlCLEVBQU0rQixTQUNMaEQsR0FBSyxHQUNiSixLQUFLMDhELE9BQU9yN0QsRUFBTWpCLElBRW5CLE9BQU9KLEtBQ0QsTUFBc0IsaUJBQVosRUFDVEEsS0FBSzgrRCxZQUFZejlELEdBRWxCckIsS0FBS3VPLEtBQUssS0FBTWxOLElBR3hCYSxFQUFFbU0sUUFBVSxTQUFTSyxFQUFPb0MsR0FTM0IsT0FSQSxJQUFlOU8sVUFBVXFNLFFBQVE5TixLQUFLUCxLQUFNME8sRUFBT29DLEdBQ3hDOVEsS0FBSzBNLE1BR0wxTSxLQUFLZ00sTUFBUWhNLEtBQUs4SyxhQUM1QjlLLEtBQUtnTSxNQUFRaE0sS0FBS2dMLFVBQ2xCaEwsS0FBS3VNLFdBQWF2TSxLQUFLaUwsZ0JBSHZCakwsS0FBS2dNLE1BQVFoTSxLQUFLdU0sV0FBYXZNLEtBQUtnTCxVQUFZaEwsS0FBS2lMLGVBQWlCLEVBS2hFakwsTUFHUmtDLEVBQUU2OEQsT0FBUyxTQUFTMTlELEVBQU8yOUQsR0FDMUIsT0FBT2gvRCxLQUFLK0wsSUFBSTFLLEVBQU9yQixLQUFLNCtELGtCQUFrQixLQUFNSSxHQUFlLEVBQU0zOUQsS0FHMUVhLEVBQUVvTyxPQUFTcE8sRUFBRSs4RCxlQUFpQixTQUFTNTlELEVBQU9tUCxFQUFVQyxFQUFPQyxHQUM5RCxPQUFPMVEsS0FBSytMLElBQUkxSyxFQUFPbVAsR0FBWSxFQUFHQyxFQUFPQyxJQUc5Q3hPLEVBQUVnOUQsZUFBaUIsU0FBUzdtRCxFQUFRMm1ELEVBQWV2dUQsRUFBT0MsR0FDekQsT0FBTzFRLEtBQUsrTCxJQUFJc00sRUFBUXJZLEtBQUs0K0Qsa0JBQWtCLEtBQU1JLEdBQWUsRUFBTTNtRCxHQUFTNUgsRUFBT0MsSUFHM0Z4TyxFQUFFMjhELFNBQVcsU0FBU00sRUFBTzN1RCxHQUU1QixPQURBeFEsS0FBSzY5RCxRQUFRc0IsR0FBU24vRCxLQUFLNCtELGtCQUFrQnB1RCxHQUN0Q3hRLE1BR1JrQyxFQUFFazlELFNBQVcsU0FBUzV1RCxFQUFVckosRUFBVXlILEVBQVF4SCxHQUNqRCxJQUFJOUYsRUFBSWlCLEVBQUEsRUFBVXdaLFlBQVksRUFBR2dpRCxFQUFnQm52RCxFQUFReEgsR0FBU3BILE1BSWxFLE9BSEFzQixFQUFFeUosS0FBS21MLFdBQWE1VSxFQUFFeUosS0FBSzhMLGtCQUFvQjFQLEVBQy9DN0YsRUFBRWtLLEtBQU8sVUFDVHhMLEtBQUtxK0QsV0FBWSxFQUNWcitELEtBQUsrTCxJQUFJekssRUFBR2tQLElBR3BCdE8sRUFBRTQ4RCxZQUFjLFNBQVNLLEdBRXhCLGNBRE9uL0QsS0FBSzY5RCxRQUFRc0IsR0FDYm4vRCxNQUdSa0MsRUFBRW05RCxhQUFlLFNBQVNGLEdBQ3pCLE9BQStCLE1BQXZCbi9ELEtBQUs2OUQsUUFBUXNCLEdBQWtCbi9ELEtBQUs2OUQsUUFBUXNCLElBQVUsR0FHL0RqOUQsRUFBRTA4RCxrQkFBb0IsU0FBU1UsRUFBYU4sRUFBZU8sRUFBZ0JDLEdBQzFFLElBQUlDLEVBQWlCci9ELEVBRXJCLEdBQUlvL0QsYUFBa0IsS0FBYUEsRUFBTzN5RCxXQUFhN00sS0FDdERBLEtBQUswOEQsT0FBTzhDLFFBQ04sR0FBSUEsSUFBWUEsYUFBa0I1N0QsT0FBVzQ3RCxFQUFPaDhELE1BQVFFLEVBQVM4N0QsSUFFM0UsSUFEQXAvRCxFQUFJby9ELEVBQU9wOEQsU0FDRmhELEdBQUssR0FDVG8vRCxFQUFPcC9ELGFBQWMsS0FBYW8vRCxFQUFPcC9ELEdBQUd5TSxXQUFhN00sTUFDNURBLEtBQUswOEQsT0FBTzhDLEVBQU9wL0QsSUFLdEIsR0FEQXEvRCxFQUEyQyxpQkFBbEIsR0FBK0JULEVBQXNCaC9ELEtBQUs4SyxXQUFhLFlBQWU5SyxLQUFLMC9ELFNBQVM3dkQsU0FBUSxHQUFTN1AsS0FBS2dMLFVBQTFFLEVBQzNDLGlCQUFwQixFQUNULE9BQU9oTCxLQUFLNCtELGtCQUFrQkksRUFBZ0JPLEdBQTBDLGlCQUFsQixHQUE2RCxNQUEvQnYvRCxLQUFLNjlELFFBQVFtQixHQUEwQk0sRUFBY0csRUFBa0IsRUFBR0YsR0FHL0ssR0FEQVAsRUFBZ0JBLEdBQWlCLEVBQ0wsaUJBQWxCLElBQStCM3BELE1BQU1pcUQsSUFBNkMsTUFBN0J0L0QsS0FBSzY5RCxRQUFReUIsR0FVbEQsTUFBZkEsSUFDVkEsRUFBY0csT0FYb0YsQ0FFbEcsSUFBVyxLQURYci9ELEVBQUlrL0QsRUFBWW53RCxRQUFRLE1BRXZCLE9BQWlDLE1BQTdCblAsS0FBSzY5RCxRQUFReUIsR0FDVEMsRUFBa0J2L0QsS0FBSzY5RCxRQUFReUIsR0FBZUcsRUFBa0JULEVBQWlCQSxFQUVsRmgvRCxLQUFLNjlELFFBQVF5QixHQUFlTixFQUVwQ0EsRUFBZ0J4cUQsU0FBUzhxRCxFQUFZeHNELE9BQU8xUyxFQUFFLEdBQUssSUFBSyxJQUFNK0ssT0FBT20wRCxFQUFZcHdELE9BQU85TyxFQUFFLElBQzFGay9ELEVBQWVsL0QsRUFBSSxFQUFLSixLQUFLNCtELGtCQUFrQlUsRUFBWXB3RCxPQUFPLEVBQUc5TyxFQUFFLEdBQUksRUFBR20vRCxHQUFrQkUsRUFJakcsT0FBT3QwRCxPQUFPbTBELEdBQWVOLEdBRzlCOThELEVBQUVpTCxLQUFPLFNBQVNxRCxFQUFVdEQsR0FDM0IsT0FBT2xOLEtBQUt1TixVQUFnQyxpQkFBZixFQUEyQmlELEVBQVd4USxLQUFLNCtELGtCQUFrQnB1RCxJQUErQixJQUFuQnRELElBR3ZHaEwsRUFBRW82QyxLQUFPLFdBQ1IsT0FBT3Q4QyxLQUFLaU0sUUFBTyxJQUdwQi9KLEVBQUV5OUQsWUFBYyxTQUFTbnZELEVBQVV0RCxHQUNsQyxPQUFPbE4sS0FBS2dOLEtBQUt3RCxFQUFVdEQsSUFHNUJoTCxFQUFFMDlELFlBQWMsU0FBU3B2RCxFQUFVdEQsR0FDbEMsT0FBT2xOLEtBQUtvTixNQUFNb0QsRUFBVXRELElBRzdCaEwsRUFBRTBMLE9BQVMsU0FBU2pFLEVBQU11RCxFQUFnQlcsR0FDckM3TixLQUFLb00sS0FDUnBNLEtBQUsrTixVQUFTLEdBQU0sR0FFckIsSUFNQ1csRUFBT3VNLEVBQVlsSyxFQUFNNUosRUFBVTA0RCxFQUFlQyxFQUFZcEIsRUFBUzF1RCxFQUx2RW1MLEVBRFVuYixLQUNNZ00sTUFDaEJrMEMsRUFGVWxnRCxLQUVRbU0sT0FGUm5NLEtBRTZDMk4sZ0JBRjdDM04sS0FFdUJpTCxlQUNqQzgwRCxFQUhVLy9ELEtBR09rSixXQUNqQjgyRCxFQUpVaGdFLEtBSVdxTCxXQUNyQjQwRCxFQUxVamdFLEtBS1FzTSxRQUtuQixHQUhJNk8sSUFQT25iLEtBT1dnTSxRQUNyQnJDLEdBUlUzSixLQVFHZ00sTUFBUW1QLEdBUlhuYixLQVVGcStELFlBVkVyK0QsS0FVaUJvK0QsbUJBQXFCbHhELEVBQWdCLENBQ2hFLEdBQUl2RCxFQUFPd1IsRUFFVixJQURBek0sRUFaUzFPLEtBWUlvUSxPQUNOMUIsR0FBU0EsRUFBTXhGLFlBQWNTLElBQVNtMkQsR0FDdkNweEQsRUFBTTFELFdBQThCLFlBQWYwRCxFQUFNbEQsTUFBdUJrRCxFQUFNaUIsT0FBZ0MsSUFBckJqQixFQUFNeEYsWUFBMEMsSUFkaEhsSixLQWMrRndNLGVBQ3RHc3pELEVBQWFweEQsR0FFZEEsRUFBUUEsRUFBTWpDLFdBSWYsSUFEQWlDLEVBcEJTMU8sS0FvQkkwTSxNQUNOZ0MsR0FBU0EsRUFBTXhGLFlBQWNTLElBQVNtMkQsR0FDdkNweEQsRUFBTTFELFdBQThCLFlBQWYwRCxFQUFNbEQsTUFBc0JrRCxFQUFNbEMsYUFBZSxJQUMxRXN6RCxFQUFhcHhELEdBRWRBLEVBQVFBLEVBQU1tQyxNQUdaaXZELElBNUJNOS9ELEtBNkJKZ00sTUE3QkloTSxLQTZCU3VNLFdBQWE1QyxFQUFPbTJELEVBQVc1MkQsV0FDakQ4RyxFQTlCU2hRLEtBOEJRa0osWUE5QlJsSixLQThCMkJ5TCxVQTlCM0J6TCxLQThCNENnTCxVQUFZckIsRUFBT0EsR0E5Qi9EM0osS0E4QjRFcUwsWUFHdkYsR0FBSTFCLEdBQVF1MkMsRUE5YUQsTUE4YXdCdjJDLEdBQVEsRUFqQ2hDM0osS0FrQ0x1TSxXQWxDS3ZNLEtBa0NhZ00sTUFBUWswQyxFQWxDckJsZ0QsS0FtQ0F5TCxXQW5DQXpMLEtBbUNxQmtnRSxvQkFDOUJqbEQsR0FBYSxFQUNiOVQsRUFBVyxhQUNYMDRELElBdENTNy9ELEtBc0NjNE0sVUFBVXVELG1CQUNWLElBdkNkblEsS0F1Q0FnTCxZQUFzQnJCLEdBQVEsR0FBS0EsSUFwYm5DLE1BNllBM0osS0F1QzhEd00sYUFBZSxHQXBiN0UsT0E2WUF4TSxLQXVDdUZ3TSxlQXZDdkZ4TSxLQXVDMkh3TSxlQUFpQjdDLEdBdkM1STNKLEtBdUN5Sm9RLFNBQ2pLeXZELEdBQWdCLEVBeENSNy9ELEtBeUNDd00sYUF0YkQsT0F1YlByRixFQUFXLHVCQTFDSm5ILEtBOENMd00sYUE5Q0t4TSxLQThDZ0JnTCxZQUFja0MsR0FBa0J2RCxHQTlDaEQzSixLQThDNkR3TSxlQUFpQjdDLEVBQVFBLEVBM2J0RixLQTRiVkEsRUFBT3UyQyxFQUFXLFVBRVosR0FBSXYyQyxFQTliQSxLQXVjVixHQTFEVTNKLEtBa0RMdU0sV0FsREt2TSxLQWtEYWdNLE1BQVEsRUFDM0JyQyxHQWhjTSxPQWljVEEsRUFBTyxJQUVTLElBQWJ3UixHQUFzQyxJQXREaENuYixLQXNEa0JnTCxXQW5jbEIsT0E2WUFoTCxLQXNEMEN3TSxlQXREMUN4TSxLQXNENkV3TSxhQUFlLEdBQU03QyxFQUFPLEdBdER6RzNKLEtBc0RtSHdNLGNBQWdCLE1BQzVJckYsRUFBVyxvQkFDWDhULEVBeERTamIsS0F3RFN5TCxXQUVmOUIsRUFBTyxFQTFERDNKLEtBMkRKc0wsU0FBVSxFQTNETnRMLEtBNERBNE0sVUFBVXVELG9CQTVEVm5RLEtBNERxQ3lMLFdBQzdDbzBELEVBQWdCNWtELEdBQWEsRUFDN0I5VCxFQUFXLHFCQTlESG5ILEtBK0RPd00sY0FBZ0IsR0EvRHZCeE0sS0ErRGlDb1EsU0FDekN5dkQsR0FBZ0IsR0FoRVI3L0QsS0FrRUp3TSxhQUFlN0MsTUFDZCxDQUVOLEdBckVTM0osS0FvRUp3TSxhQXBFSXhNLEtBb0VpQmdMLFlBQWNrQyxHQUFrQnZELEdBcEVqRDNKLEtBb0U4RHdNLGVBQWlCN0MsRUFBUUEsRUFqZHZGLEtBa2RJLElBQVRBLEdBQWNzUixFQUVqQixJQURBdk0sRUF0RVExTyxLQXNFS29RLE9BQ04xQixHQUE4QixJQUFyQkEsRUFBTXhGLFlBQ2hCd0YsRUFBTTFELFlBQ1ZpUSxHQUFhLEdBRWR2TSxFQUFRQSxFQUFNakMsTUFHaEI5QyxFQUFPLEVBOUVFM0osS0ErRUNxTSxXQUNUd3pELEdBQWdCLFFBaEZSNy9ELEtBcUZMdU0sV0FyRkt2TSxLQXFGYWdNLE1BckZiaE0sS0FxRjBCd00sYUFBZTdDLEVBRXBELEdBdkZXM0osS0F1RkRnTSxRQUFVbVAsR0F2RlRuYixLQXVGMkJvUSxRQUFZdkMsR0FBVWd5RCxHQUFrQkMsRUFBOUUsQ0FlQSxHQXRHVzkvRCxLQXlGTXFNLFdBekZOck0sS0EwRkxxTSxVQUFXLEdBMUZOck0sS0E2RkRzTCxVQTdGQ3RMLEtBNkZrQnNNLFNBN0ZsQnRNLEtBNkZrQ2dNLFFBQVVtUCxHQUFZeFIsRUFBTyxJQTdGL0QzSixLQThGTHNMLFNBQVUsR0FHQyxJQUFiNlAsR0FqR09uYixLQWlHa0IrSyxLQUFLMkwsVUFBNEIsSUFqR25EMVcsS0FpR3lDZ00sT0FqR3pDaE0sS0FpRzhEZ0wsV0FBZ0JrQyxHQWpHOUVsTixLQWtHTDhPLFVBQVUsYUFHaEI0dkQsRUFyR1cxK0QsS0FxR0lnTSxRQUNBbVAsRUFFZCxJQURBek0sRUF2R1UxTyxLQXVHR29RLE9BQ04xQixJQUNOcUMsRUFBT3JDLEVBQU1qQyxNQUNUaXlELElBMUdLMStELEtBMEdZZ00sU0ExR1poTSxLQTBHMkJzTSxTQUFZMnpELE1BRXJDdnhELEVBQU1wRCxTQUFZb0QsRUFBTXhGLFlBQWN3MUQsSUFBWWh3RCxFQUFNcEMsVUFBWW9DLEVBQU10QyxPQUNoRjB6RCxJQUFlcHhELElBN0dYMU8sS0E4R0ZvTixRQTlHRXBOLEtBK0dGc1AsV0FBYVUsR0FFZHRCLEVBQU1qRCxVQUdWaUQsRUFBTWQsUUFBVWMsRUFBTXZDLE9BQWlDdUMsRUFBTWYsZ0JBQTdCZSxFQUFNekQsaUJBQTRDdEIsRUFBTytFLEVBQU14RixZQUFjd0YsRUFBTXJELFdBQWE2QixFQUFnQlcsR0FGaEphLEVBQU1kLFFBQVFqRSxFQUFPK0UsRUFBTXhGLFlBQWN3RixFQUFNckQsV0FBWTZCLEVBQWdCVyxJQUs3RWEsRUFBUXFDLE9BSVQsSUFEQXJDLEVBMUhVMU8sS0EwSEcwTSxNQUNOZ0MsSUFDTnFDLEVBQU9yQyxFQUFNbUMsTUFDVDZ0RCxJQTdISzErRCxLQTZIWWdNLFNBN0haaE0sS0E2SDJCc00sU0FBWTJ6RCxLQUZuQyxDQUlOLEdBQUl2eEQsRUFBTXBELFNBQVlvRCxFQUFNeEYsWUFBY2lTLElBQWF6TSxFQUFNcEMsVUFBWW9DLEVBQU10QyxJQUFNLENBQzNGLEdBQUkwekQsSUFBZXB4RCxFQUFPLENBRXpCLElBREFveEQsRUFBYXB4RCxFQUFNbUMsTUFDWml2RCxHQUFjQSxFQUFXandELFVBbEl6QjdQLEtBa0kwQ2dNLE9BQ2hEOHpELEVBQVdseUQsT0FBU2t5RCxFQUFXcjBELFVBQVlxMEQsRUFBV255RCxpQkFBb0JoRSxFQUFPbTJELEVBQVc1MkQsWUFBYzQyRCxFQUFXejBELFlBQWUxQixFQUFPbTJELEVBQVc1MkQsWUFBYzQyRCxFQUFXejBELFdBQWE2QixFQUFnQlcsR0FDNU1peUQsRUFBYUEsRUFBV2p2RCxNQUV6Qml2RCxFQUFhLEtBdElOOS9ELEtBdUlGb04sUUF2SUVwTixLQXdJRnNQLFdBQWFVLEVBRWR0QixFQUFNakQsVUFHVmlELEVBQU1kLFFBQVVjLEVBQU12QyxPQUFpQ3VDLEVBQU1mLGdCQUE3QmUsRUFBTXpELGlCQUE0Q3RCLEVBQU8rRSxFQUFNeEYsWUFBY3dGLEVBQU1yRCxXQUFhNkIsRUFBZ0JXLEdBRmhKYSxFQUFNZCxRQUFRakUsRUFBTytFLEVBQU14RixZQUFjd0YsRUFBTXJELFdBQVk2QixFQUFnQlcsR0FLN0VhLEVBQVFxQyxFQWhKQy9RLEtBb0pGMk0sWUFBZ0JPLElBQ3BCcUMsRUFBWW5NLFFBQ2ZvTSxJQXRKU3hQLEtBd0pMOE8sVUFBVSxjQUdaM0gsSUEzSk9uSCxLQTJKYW9NLEtBQVMyekQsSUEzSnRCLy9ELEtBMkp5Q2tKLFlBQWM4MkQsSUEzSnZEaGdFLEtBMko4RXFMLGFBQStCLElBM0o3R3JMLEtBMkptR2dNLE9BQWVrMEMsR0EzSmxIbGdELEtBMkptSTJOLG1CQUN6SXNOLElBQ0MxTCxFQUFZbk0sUUFDZm9NLElBOUpReFAsS0FnS0E0TSxVQUFVdUQsb0JBaEtWblEsS0FpS0grTixVQUFTLEdBQU8sR0FqS2IvTixLQW1LSnNMLFNBQVUsSUFFWDRCLEdBcktLbE4sS0FxS2tCK0ssS0FBSzVELElBckt2Qm5ILEtBc0tKOE8sVUFBVTNILE9BS2xCakYsRUFBRWcrRCxnQkFBa0IsV0FFbkIsSUFEQSxJQUFJeHhELEVBQVExTyxLQUFLb1EsT0FDVjFCLEdBQU8sQ0FDYixHQUFJQSxFQUFNcEMsU0FBYW9DLGFBQWlCa3ZELEdBQWlCbHZELEVBQU13eEQsa0JBQzlELE9BQU8sRUFFUnh4RCxFQUFRQSxFQUFNakMsTUFFZixPQUFPLEdBR1J2SyxFQUFFaStELFlBQWMsU0FBU0MsRUFBUS9uRCxFQUFRa3BDLEVBQVc4ZSxHQUNuREEsRUFBbUJBLElBQXFCLFdBSXhDLElBSEEsSUFBSXg5RCxFQUFJLEdBQ1A2TCxFQUFRMU8sS0FBS29RLE9BQ2Ird0MsRUFBTSxFQUNBenlDLEdBQ0ZBLEVBQU14RixXQUFhbTNELElBRVozeEQsYUFBaUJuTSxFQUFBLEdBQ1osSUFBWDhWLElBQ0h4VixFQUFFcytDLEtBQVN6eUMsS0FHTSxJQUFkNnlDLElBQ0gxK0MsRUFBRXMrQyxLQUFTenlDLElBRUcsSUFBWDB4RCxJQUVIamYsR0FEQXQrQyxFQUFJQSxFQUFFMkMsT0FBT2tKLEVBQU15eEQsYUFBWSxFQUFNOW5ELEVBQVFrcEMsS0FDckNuK0MsVUFHVnNMLEVBQVFBLEVBQU1qQyxNQUVmLE9BQU81SixHQUdSWCxFQUFFK1osWUFBYyxTQUFTbFYsRUFBUXE1RCxHQUNoQyxJQUdDL25ELEVBQVFqWSxFQUhMa2dFLEVBQVd0Z0UsS0FBS29NLElBQ25CdkosRUFBSSxHQUNKcytDLEVBQU0sRUFPUCxJQUxJbWYsR0FDSHRnRSxLQUFLK04sVUFBUyxHQUFNLEdBR3JCM04sR0FEQWlZLEVBQVM5VixFQUFBLEVBQVUwWixZQUFZbFYsSUFDcEIzRCxTQUNGaEQsR0FBSyxJQUNUaVksRUFBT2pZLEdBQUd5TSxXQUFhN00sTUFBU29nRSxHQUFVcGdFLEtBQUt1Z0UsVUFBVWxvRCxFQUFPalksT0FDbkV5QyxFQUFFcytDLEtBQVM5b0MsRUFBT2pZLElBTXBCLE9BSElrZ0UsR0FDSHRnRSxLQUFLK04sVUFBUyxHQUFPLEdBRWZsTCxHQUdSWCxFQUFFdzlELE9BQVMsV0FDVixPQUFPMS9ELEtBQUtxUSxTQUdibk8sRUFBRXErRCxVQUFZLFNBQVM3eEQsR0FFdEIsSUFEQSxJQUFJOUMsRUFBSzhDLEVBQU03QixTQUNSakIsR0FBSSxDQUNWLEdBQUlBLElBQU81TCxLQUNWLE9BQU8sRUFFUjRMLEVBQUtBLEVBQUdpQixTQUVULE9BQU8sR0FHUjNLLEVBQUVzK0QsY0FBZ0IsU0FBU3RoQixFQUFRdWhCLEVBQWNKLEdBQ2hEQSxFQUFtQkEsR0FBb0IsRUFJdkMsSUFIQSxJQUVDbitELEVBRkd3TSxFQUFRMU8sS0FBS29RLE9BQ2hCc3dELEVBQVMxZ0UsS0FBSzY5RCxRQUVSbnZELEdBQ0ZBLEVBQU14RixZQUFjbTNELElBQ3ZCM3hELEVBQU14RixZQUFjZzJDLEdBRXJCeHdDLEVBQVFBLEVBQU1qQyxNQUVmLEdBQUlnMEQsRUFDSCxJQUFLditELEtBQUt3K0QsRUFDTEEsRUFBT3grRCxJQUFNbStELElBQ2hCSyxFQUFPeCtELElBQU1nOUMsR0FJaEIsT0FBT2wvQyxLQUFLd08sVUFBUyxJQUd0QnRNLEVBQUVvTSxNQUFRLFNBQVN2RCxFQUFNaEUsR0FDeEIsSUFBS2dFLElBQVNoRSxFQUNiLE9BQU8vRyxLQUFLK04sVUFBUyxHQUFPLEdBSzdCLElBSEEsSUFBSXNLLEVBQVd0UixFQUFnRC9HLEtBQUtpYyxZQUFZbFYsR0FBdkQvRyxLQUFLbWdFLGFBQVksR0FBTSxHQUFNLEdBQ3JELy9ELEVBQUlpWSxFQUFPalYsT0FDWDRWLEdBQVUsSUFDRjVZLEdBQUssR0FDVGlZLEVBQU9qWSxHQUFHa08sTUFBTXZELEVBQU1oRSxLQUN6QmlTLEdBQVUsR0FHWixPQUFPQSxHQUdSOVcsRUFBRTR4QixNQUFRLFNBQVM0c0MsR0FDbEIsSUFBSXJvRCxFQUFTclksS0FBS21nRSxhQUFZLEdBQU8sR0FBTSxHQUMxQy8vRCxFQUFJaVksRUFBT2pWLE9BRVosSUFEQXBELEtBQUtnTSxNQUFRaE0sS0FBS3VNLFdBQWEsSUFDdEJuTSxHQUFLLEdBQ2JpWSxFQUFPalksR0FBRzJOLFVBQVMsR0FBTyxHQUszQixPQUhlLElBQVgyeUQsSUFDSDFnRSxLQUFLNjlELFFBQVUsSUFFVDc5RCxLQUFLd08sVUFBUyxJQUd0QnRNLEVBQUU0TCxXQUFhLFdBRWQsSUFEQSxJQUFJWSxFQUFRMU8sS0FBS29RLE9BQ1YxQixHQUNOQSxFQUFNWixhQUNOWSxFQUFRQSxFQUFNakMsTUFFZixPQUFPLElBQVV6SyxVQUFVOEwsV0FBV3ZOLEtBQUtQLE9BRzVDa0MsRUFBRTZMLFNBQVcsU0FBU0ksRUFBU0MsR0FDOUIsR0FBSUQsSUFBWW5PLEtBQUtvTSxJQUVwQixJQURBLElBQUlzQyxFQUFRMU8sS0FBS29RLE9BQ1YxQixHQUNOQSxFQUFNWCxTQUFTSSxHQUFTLEdBQ3hCTyxFQUFRQSxFQUFNakMsTUFHaEIsT0FBTyxJQUFlekssVUFBVStMLFNBQVN4TixLQUFLUCxLQUFNbU8sRUFBU0MsSUFHOURsTSxFQUFFcUwsVUFBWSxTQUFTNUQsRUFBTXVELEVBQWdCbUMsR0FDNUNyUCxLQUFLbytELGtCQUFtQixFQUN4QixJQUFJanJELEVBQU0sSUFBVW5SLFVBQVV1TCxVQUFVNUksTUFBTTNFLEtBQU1pSyxXQUVwRCxPQURBakssS0FBS28rRCxrQkFBbUIsRUFDakJqckQsR0FHUmpSLEVBQUU0SSxTQUFXLFNBQVN6SixHQUNyQixPQUFLNEksVUFBVTdHLFFBTVMsSUFBcEJwRCxLQUFLOEssWUFBOEIsSUFBVnpKLEdBQzVCckIsS0FBSytQLFVBQVUvUCxLQUFLZ0wsVUFBWTNKLEdBRTFCckIsT0FSRkEsS0FBS21NLFFBQ1JuTSxLQUFLMk4sZ0JBRUMzTixLQUFLZ0wsWUFRZDlJLEVBQUV5TCxjQUFnQixTQUFTdE0sR0FDMUIsSUFBSzRJLFVBQVU3RyxPQUFRLENBQ3RCLEdBQUlwRCxLQUFLbU0sT0FBUSxDQU1oQixJQUxBLElBSUM0MkIsRUFBTXp2QixFQUpIMGEsRUFBTSxFQUNUanVCLEVBQU9DLEtBQ1AwTyxFQUFRM08sRUFBSzJNLE1BQ2JxekQsRUFBWSxhQUVOcnhELEdBQ05xMEIsRUFBT3IwQixFQUFNbUMsTUFDVG5DLEVBQU12QyxRQUNUdUMsRUFBTWYsZ0JBRUhlLEVBQU14RixXQUFhNjJELEdBQWFoZ0UsRUFBSzZQLGdCQUFrQmxCLEVBQU1wQyxVQUFZdk0sRUFBSzRnRSxzQkFDakY1Z0UsRUFBSzRnRSxxQkFBdUIsRUFDNUI1Z0UsRUFBS2dNLElBQUkyQyxFQUFPQSxFQUFNeEYsV0FBYXdGLEVBQU14RCxRQUN6Q25MLEVBQUs0Z0UscUJBQXVCLEdBRTVCWixFQUFZcnhELEVBQU14RixXQUVmd0YsRUFBTXhGLFdBQWEsSUFBTXdGLEVBQU1wQyxVQUNsQzBoQixHQUFPdGYsRUFBTXhGLFdBQ1RuSixFQUFLNk0sVUFBVXdDLG9CQUNsQnJQLEVBQUttSixZQUFjd0YsRUFBTXhGLFdBQWFuSixFQUFLc0wsV0FDM0N0TCxFQUFLaU0sT0FBUzBDLEVBQU14RixXQUNwQm5KLEVBQUt3TSxZQUFjbUMsRUFBTXhGLFdBQ3pCbkosRUFBS3lNLGNBQWdCa0MsRUFBTXhGLFlBRTVCbkosRUFBS3lnRSxlQUFlOXhELEVBQU14RixZQUFZLEdBQVEsWUFDOUM2MkQsRUFBWSxJQUVienNELEVBQU01RSxFQUFNeEYsV0FBY3dGLEVBQU16RCxlQUFpQnlELEVBQU1yRCxZQUM3QzJpQixJQUNUQSxFQUFNMWEsR0FFUDVFLEVBQVFxMEIsRUFFVGhqQyxFQUFLaUwsVUFBWWpMLEVBQUtrTCxlQUFpQitpQixFQUN2Q2p1QixFQUFLb00sUUFBUyxFQUVmLE9BQU9uTSxLQUFLaUwsZUFFYixPQUFRNUosR0FBU3JCLEtBQUsyTixnQkFBbUIzTixLQUFLK1AsVUFBVS9QLEtBQUtpTCxlQUFpQjVKLEdBQVNyQixNQUd4RmtDLEVBQUUrSixPQUFTLFNBQVM1SyxHQUNuQixJQUFjLElBQVZBLEdBQW1CckIsS0FBS3NNLFFBRTNCLElBREEsSUFBSW9DLEVBQVExTyxLQUFLb1EsT0FDVjFCLEdBQ0ZBLEVBQU14RixhQUFlbEosS0FBS2dNLE9BQXdCLFlBQWYwQyxFQUFNbEQsT0FDNUNrRCxFQUFNbEMsYUFBZSxHQUV0QmtDLEVBQVFBLEVBQU1qQyxNQUdoQixPQUFPLElBQVV6SyxVQUFVaUssT0FBT3RILE1BQU0zRSxLQUFNaUssWUFHL0MvSCxFQUFFMCtELFdBQWEsV0FFZCxJQURBLElBQUloMUQsRUFBSzVMLEtBQUs0TSxVQUNQaEIsRUFBR2dCLFdBQ1RoQixFQUFLQSxFQUFHZ0IsVUFFVCxPQUFRaEIsSUFBTyxJQUFVRSxxQkFHMUI1SixFQUFFK0wsUUFBVSxTQUFTNHlELEdBQ3BCLE9BQVFBLElBQWdCN2dFLEtBQUtzTSxTQUFZdE0sS0FBS3MvQyxTQUFXdC9DLEtBQUsySixPQUFTLEdBQUszSixLQUFLMFAsZ0JBQWtCLEdBQU8xUCxLQUFLdU0sWUFBY3ZNLEtBQUtnTCxVQUFZaEwsS0FBS3UvQyxjQUFnQnYvQyxLQUFLc00sUUFBVXRNLEtBQUt1TSxZQUFjdk0sS0FBSzRNLFVBQVVxQixRQUFRNHlELEdBQWU3Z0UsS0FBS2tKLFlBQWNsSixLQUFLcUwsWUFHN1B1eUQsS0FFTCxHQUVHLElBQUksRUFBZSxJQUFRQTs7Ozs7Ozs7Ozs7R0N6ekJsQyxJQUFTaDVELFVBQVUsY0FBZSxDQUFDLGVBQWUsWUFBWSxnQkFBZ0IsV0FFNUUsSUFBSWs4RCxFQUFjLFNBQVMvMUQsR0FDekIsRUFBYXhLLEtBQUtQLEtBQU0rSyxHQUN4Qi9LLEtBQUtzL0MsUUFBVXQvQyxLQUFLK0ssS0FBS3NNLFFBQVUsRUFDbkNyWCxLQUFLdS9DLGFBQWV2L0MsS0FBSytLLEtBQUt1TSxhQUFlLEVBQzdDdFgsS0FBS28vQyxPQUFTLEVBQ2RwL0MsS0FBS3EvQyxRQUFVci9DLEtBQUsrSyxLQUFLcU0sS0FDekJwWCxLQUFLbU0sUUFBUyxHQUdmcXpDLEVBQXFCajlDLEVBQUEsRUFBVWlULFdBQy9CakcsRUFBY2l3QyxFQUFtQjlwQyxXQUNqQ2xHLEVBQWNnd0MsRUFBbUJybkMsV0FDakN4VixFQUFXLElBQVNpQyxVQUFVRSxRQUM5Qmk4RCxFQUFZLElBQUksSUFBSyxLQUFNLEtBQU0sRUFBRyxHQUNwQzcrRCxFQUFJNCtELEVBQVk5K0QsVUFBWSxJQUFJLEVBb2VqQyxPQWxlQUUsRUFBRTBJLFlBQWNrMkQsRUFDaEI1K0QsRUFBRXFNLE9BQU9uQyxLQUFNLEVBQ2YwMEQsRUFBWXh1RCxRQUFVLFFBRXRCcFEsRUFBRTRMLFdBQWEsV0FLZCxPQUpBOU4sS0FBS3EvQyxRQUFVci9DLEtBQUsrSyxLQUFLcU0sS0FDekJwWCxLQUFLcy9DLFFBQVV0L0MsS0FBSytLLEtBQUtzTSxRQUFVLEVBQ25DclgsS0FBS3UvQyxhQUFldi9DLEtBQUsrSyxLQUFLdU0sYUFBZSxFQUM3Q3RYLEtBQUt3TyxVQUFTLEdBQ1AsRUFBYXhNLFVBQVU4TCxXQUFXdk4sS0FBS1AsT0FHL0NrQyxFQUFFOCtELFlBQWMsU0FBUzc1RCxFQUFVcUosRUFBVTVCLEVBQVF4SCxHQUNwRCxPQUFPcEgsS0FBSytMLElBQUt4SixFQUFBLEVBQVV3WixZQUFZLEVBQUc1VSxFQUFVeUgsRUFBUXhILEdBQVFvSixJQUdyRXRPLEVBQUUrK0QsZUFBaUIsU0FBUzk1RCxFQUFVcUosR0FDckMsR0FBSXJKLEVBQ0gsR0FBZ0IsTUFBWnFKLEVBQ0h4USxLQUFLc08sTUFBTSxLQUFNbkgsUUFLakIsSUFIQSxJQUFJdEUsRUFBSTdDLEtBQUtpYyxZQUFZOVUsR0FBVSxHQUNsQy9HLEVBQUl5QyxFQUFFTyxPQUNOdUcsRUFBTzNKLEtBQUs0K0Qsa0JBQWtCcHVELEtBQ3RCcFEsR0FBSyxHQUNUeUMsRUFBRXpDLEdBQUc4SSxhQUFlUyxHQUN2QjlHLEVBQUV6QyxHQUFHMk4sVUFBUyxHQUFPLEdBS3pCLE9BQU8vTixNQUdSa0MsRUFBRWcvRCxZQUFjLFNBQVMxd0QsR0FDeEIsT0FBT3hRLEtBQUtpaEUsZUFBZSxFQUFhenJELFdBQVd3b0QsY0FBZXh0RCxJQUduRXRPLEVBQUVpL0QsUUFBVSxTQUFTM3dELEVBQVV6RixHQUM5QkEsRUFBT0EsR0FBUSxHQUNmLElBRUNELEVBQVU1SSxFQUFHWixFQUZWdU4sRUFBTyxDQUFDaEosS0FBS2s3RCxFQUFXbDFELFVBQVU3TCxLQUFLNGdFLGFBQWNyMUQsaUJBQWdCLEVBQU9pTSxNQUFLLEdBQ3BGOG1ELEVBQVV2ekQsRUFBS3NNLFFBQVUxVSxFQUFTdzhDLFVBQWE1OEMsRUFBQSxFQUVoRCxJQUFLTCxLQUFLNkksRUFDVDhELEVBQUszTSxHQUFLNkksRUFBSzdJLEdBY2hCLE9BWkEyTSxFQUFLbEYsS0FBTzNKLEtBQUs0K0Qsa0JBQWtCcHVELEdBQ25DMUYsRUFBWVosS0FBS2l2QixJQUFJaHVCLE9BQU8wRCxFQUFLbEYsTUFBUTNKLEtBQUtnTSxPQUFTaE0sS0FBS3FMLFlBQWUsS0FDM0UvSixFQUFJLElBQUlnOUQsRUFBT3QrRCxLQUFNOEssRUFBVStELEdBQy9CQSxFQUFLNkgsUUFBVSxXQUNkcFYsRUFBRXlGLE9BQU9rRixRQUFPLEdBQ1ozSyxFQUFFeUosS0FBS3BCLE9BQVNySSxFQUFFeUYsT0FBTzRDLFFBQVVtQixJQUFheEosRUFBRXdKLFlBQWV4SixFQUFFOC9ELFVBQ3RFOS9ELEVBQUV3SixTQUFVWixLQUFLaXZCLElBQUs3M0IsRUFBRXlKLEtBQUtwQixLQUFPckksRUFBRXlGLE9BQU80QyxRQUFVckksRUFBRXlGLE9BQU9zRSxZQUFhdUMsT0FBT3RNLEVBQUVxSSxRQUFRLEdBQU0sR0FFakdvQixFQUFLMkwsU0FDUjNMLEVBQUsyTCxRQUFRL1IsTUFBTW9HLEVBQUs2TCxjQUFnQjdMLEVBQUtpRSxlQUFpQjFOLEVBQUd5SixFQUFLNEwsZUFBaUIsS0FHbEZyVixHQUdSWSxFQUFFbS9ELFlBQWMsU0FBU0MsRUFBY0MsRUFBWXgyRCxHQUNsREEsRUFBT0EsR0FBUSxHQUNmdTJELEVBQWV0aEUsS0FBSzQrRCxrQkFBa0IwQyxHQUN0Q3YyRCxFQUFLdUwsUUFBVSxDQUFDSixXQUFXbFcsS0FBS21OLEtBQU1nSixpQkFBaUIsQ0FBQ21yRCxHQUFldHlELGNBQWNoUCxNQUNyRitLLEVBQUtRLGlCQUE0QyxJQUF6QlIsRUFBS1EsZ0JBQzdCLElBQUlqSyxFQUFJdEIsS0FBS21oRSxRQUFRSSxFQUFZeDJELEdBRWpDLE9BREF6SixFQUFFOC9ELFNBQVcsRUFDTjkvRCxFQUFFd0osU0FBVVosS0FBS2l2QixJQUFLNzNCLEVBQUV5SixLQUFLcEIsS0FBTzIzRCxHQUFnQnRoRSxLQUFLcUwsWUFBZSxPQUdoRm5KLEVBQUUwTCxPQUFTLFNBQVNqRSxFQUFNdUQsRUFBZ0JXLEdBQ3JDN04sS0FBS29NLEtBQ1JwTSxLQUFLK04sVUFBUyxHQUFNLEdBRXJCLElBVUNXLEVBQU91TSxFQUFZbEssRUFBTTVKLEVBQVUwNEQsRUFBZTVmLEVBQWU2ZixFQUFZcEIsRUFBUzF1RCxFQVR0Rm1MLEVBRFVuYixLQUNNZ00sTUFDaEJrMEMsRUFGVWxnRCxLQUVRbU0sT0FGUm5NLEtBRTZDMk4sZ0JBRjdDM04sS0FFdUJpTCxlQUNqQzZPLEVBSFU5WixLQUdDZ0wsVUFDWG0xQyxFQUpVbmdELEtBSVd1TSxXQUNyQnd6RCxFQUxVLy9ELEtBS09rSixXQUNqQjgyRCxFQU5VaGdFLEtBTVdxTCxXQUNyQitQLEVBUFVwYixLQU9hd00sYUFDdkJ5ekQsRUFSVWpnRSxLQVFRc00sUUFDbEI4ekMsRUFUVXBnRCxLQVNPby9DLE9BS2xCLEdBSElqa0MsSUFYT25iLEtBV1dnTSxRQUNyQnJDLEdBWlUzSixLQVlHZ00sTUFBUW1QLEdBRWxCeFIsR0FBUXUyQyxFQWpHRCxNQWlHd0J2MkMsR0FBUSxFQWRoQzNKLEtBZUF3aEUsVUFmQXhoRSxLQWdCSnVNLFdBQWEyekMsRUFoQlRsZ0QsS0FpQkpvL0MsT0FqQklwL0MsS0FpQlVzL0MsU0FqQlZ0L0MsS0FtQkF5TCxXQW5CQXpMLEtBbUJxQmtnRSxvQkFDOUJqbEQsR0FBYSxFQUNiOVQsRUFBVyxhQUNYMDRELElBdEJTNy9ELEtBc0JjNE0sVUFBVXVELG1CQUNWLElBdkJkblEsS0F1QkFnTCxZQUFzQnJCLEdBQVEsR0FBS0EsSUExR25DLE1BMEd5RHlSLEVBQWtCLEdBMUczRSxPQTBHZ0ZBLElBQWtDQSxJQUFvQnpSLEdBdkJ0STNKLEtBdUJtSm9RLFNBQzNKeXZELEdBQWdCLEVBQ1p6a0QsRUE1R0ksT0E2R1BqVSxFQUFXLHVCQTFCSm5ILEtBOEJMd00sYUE5Qkt4TSxLQThCZ0JnTCxZQUFja0MsR0FBa0J2RCxHQTlCaEQzSixLQThCNkR3TSxlQUFpQjdDLEVBQVFBLEVBakh0RixLQW1GQTNKLEtBK0JEcS9DLE9BQXdCLEVBL0J2QnIvQyxLQStCY28vQyxPQS9CZHAvQyxLQWdDSmdNLE1BQVFyQyxFQUFPLEdBaENYM0osS0FrQ0pnTSxNQUFROE4sRUFDYm5RLEVBQU9tUSxFQUFNLFdBR1IsR0FBSW5RLEVBekhBLEtBcUlWLEdBbERVM0osS0F1Q0F3aEUsVUF2Q0F4aEUsS0F3Q0p1TSxXQXhDSXZNLEtBd0Njby9DLE9BQVMsR0F4Q3ZCcC9DLEtBMENMZ00sTUFBUSxFQUNUckMsR0E5SE0sT0ErSFRBLEVBQU8sSUFFUyxJQUFid1IsR0FBMkIsSUFBUnJCLEdBakliLE9BaUkwQnNCLElBQWlDQSxFQUFrQixHQUFNelIsRUFBTyxHQUFLeVIsR0FBbUIsS0E5Q2xIcGIsS0E4QytId2hFLFdBQ3hJcjZELEVBQVcsb0JBQ1g4VCxFQWhEU2piLEtBZ0RTeUwsV0FFZjlCLEVBQU8sRUFsREQzSixLQW1ESnNMLFNBQVUsRUFuRE50TCxLQW9EQTRNLFVBQVV1RCxvQkFwRFZuUSxLQW9EcUN5TCxXQUM3Q28wRCxFQUFnQjVrRCxHQUFhLEVBQzdCOVQsRUFBVyxxQkFDRGlVLEdBQW1CLEdBdkRyQnBiLEtBdUQrQm9RLFNBQ3ZDeXZELEdBQWdCLEdBeERSNy9ELEtBMERKd00sYUFBZTdDLE1BQ2QsQ0FFTixHQTdEUzNKLEtBNERKd00sYUFBZ0JzTixJQUFRNU0sR0FBa0J2RCxHQTVEdEMzSixLQTREbUR3TSxlQUFpQjdDLEVBQVFBLEVBL0k1RSxLQWdKSSxJQUFUQSxHQUFjc1IsRUFFakIsSUFEQXZNLEVBOURRMU8sS0E4REtvUSxPQUNOMUIsR0FBOEIsSUFBckJBLEVBQU14RixZQUNoQndGLEVBQU0xRCxZQUNWaVEsR0FBYSxHQUVkdk0sRUFBUUEsRUFBTWpDLE1BR2hCOUMsRUFBTyxFQXRFRTNKLEtBdUVDcU0sV0FDVHd6RCxHQUFnQixRQUtOLElBQVIvbEQsR0FBYXNCLEVBQWtCLElBQ2xDeWtELEdBQWdCLEdBOUVQNy9ELEtBZ0ZMZ00sTUFoRktoTSxLQWdGUXdNLGFBQWU3QyxFQWhGdkIzSixLQWlGQXdoRSxVQWpGQXhoRSxLQWtGSnVNLFdBQWE1QyxFQUNHLElBbkZaM0osS0FtRkFzL0MsVUFDUlcsRUFBZ0JubUMsRUFwRlI5WixLQW9GbUJ1L0MsYUFwRm5Cdi9DLEtBcUZIby9DLE9BckZHcC9DLEtBcUZZdU0sV0FBYTB6QyxHQUFrQixFQXJGM0NqZ0QsS0FzRkNvL0MsUUF0RkRwL0MsS0FzRmtCby9DLFNBdEZsQnAvQyxLQXNGa0N1TSxXQUFhMHpDLEdBQWlCRSxHQUFpQngyQyxHQXRGakYzSixLQXVGRm8vQyxTQXZGRXAvQyxLQXlGSGdNLE1BekZHaE0sS0F5RlV1TSxXQXpGVnZNLEtBeUY2Qm8vQyxPQUFTYSxFQXpGdENqZ0QsS0EwRkNxL0MsT0FBeUIsRUExRjFCci9DLEtBMEZpQm8vQyxTQTFGakJwL0MsS0EyRkZnTSxNQUFROE4sRUEzRk45WixLQTJGaUJnTSxPQTNGakJoTSxLQTZGQ2dNLE1BQVE4TixHQTdGVDlaLEtBOEZGZ00sTUFBUThOLEVBQ2JuUSxFQUFPbVEsRUFBTSxNQS9GTjlaLEtBZ0dRZ00sTUFBUSxFQWhHaEJoTSxLQWlHRmdNLE1BQVFyQyxFQUFPLEVBRXBCQSxFQW5HTzNKLEtBbUdLZ00sUUFNaEIsR0F6R1doTSxLQXlHRnErRCxZQXpHRXIrRCxLQXlHaUJvK0QsbUJBQXFCbHhELEVBQWdCLENBRWhFLElBREF2RCxFQTFHVTNKLEtBMEdFZ00sT0FDRG1QLEdBM0dEbmIsS0EyR21Ccy9DLFNBQVdjLElBM0c5QnBnRCxLQTJHaURvL0MsT0FFMUQsSUFEQTF3QyxFQTVHUzFPLEtBNEdJb1EsT0FDTjFCLEdBQVNBLEVBQU14RixZQUFjUyxJQUFTbTJELEdBQ3ZDcHhELEVBQU0xRCxXQUE4QixZQUFmMEQsRUFBTWxELE1BQXVCa0QsRUFBTWlCLE9BQWdDLElBQXJCakIsRUFBTXhGLFlBQTBDLElBOUdoSGxKLEtBOEcrRndNLGVBQ3RHc3pELEVBQWFweEQsR0FFZEEsRUFBUUEsRUFBTWpDLFdBSWYsSUFEQWlDLEVBcEhTMU8sS0FvSEkwTSxNQUNOZ0MsR0FBU0EsRUFBTXhGLFlBQWNTLElBQVNtMkQsR0FDdkNweEQsRUFBTTFELFdBQThCLFlBQWYwRCxFQUFNbEQsTUFBc0JrRCxFQUFNbEMsYUFBZSxJQUMxRXN6RCxFQUFhcHhELEdBRWRBLEVBQVFBLEVBQU1tQyxNQUdaaXZELElBQ0g5dkQsRUE3SFNoUSxLQTZIUWtKLFlBN0hSbEosS0E2SDJCeUwsVUE3SDNCekwsS0E2SDRDZ0wsVUFBWTgwRCxFQUFXNTJELFdBQWE0MkQsRUFBVzUyRCxZQTdIM0ZsSixLQTZIOEdxTCxXQUNuSHkwRCxFQUFXNTJELFdBQWE0USxJQTlIbkI5WixLQStISGdNLE1BL0hHaE0sS0ErSFV3TSxhQUFlN0MsRUFBT20yRCxFQUFXNTJELFdBL0gzQ2xKLEtBZ0lIdU0sV0FBYTVDLEVBaElWM0osS0FnSXVCby9DLFFBaEl2QnAvQyxLQWdJc0NpTCxlQWhJdENqTCxLQWdJNER1L0MsZ0JBS3ZFLEdBcklXdi9DLEtBcUlGby9DLFNBQVdnQixJQXJJVHBnRCxLQXFJOEJ3aEUsUUFBUyxDQVNqRCxJQUFJQyxFQTlJTXpoRSxLQThJWXEvQyxPQUE2QixJQUFQLEVBQVplLEdBQy9CaGIsRUFBUXE4QixLQS9JQ3poRSxLQStJbUJxL0MsT0FBK0IsSUFBUCxFQS9JM0NyL0MsS0ErSWtDby9DLFNBQzNDc2lCLEVBaEpTMWhFLEtBZ0pXdU0sV0FDcEJvMUQsRUFqSlMzaEUsS0FpSk9vL0MsT0FDaEJ3aUIsRUFsSlM1aEUsS0FrSmF3TSxhQUN0QnExRCxFQW5KUzdoRSxLQW1KTWdNLE1Bc0JoQixHQXpLVWhNLEtBcUpMdU0sV0FBYTZ6QyxFQUFZdG1DLEVBckpwQjlaLEtBc0pEby9DLE9BQVNnQixFQUNqQnFoQixHQUFhQSxFQXZKSnpoRSxLQXlKSnVNLFlBQWN1TixFQXpKVjlaLEtBMkpMZ00sTUFBUW1QLEVBM0pIbmIsS0E2Skx3TSxhQUF3QixJQUFSc04sRUFBYXNCLEVBQWtCLEtBQVNBLEVBN0puRHBiLEtBOEpMby9DLE9BQVNnQixFQTlKSnBnRCxLQStKTHdoRSxTQUFVLEVBQ2ZybUQsRUFBVyxFQUFjLEVBQUlyQixFQWhLbkI5WixLQWlLTDROLE9BQU91TixFQUFVak8sRUFBeUIsSUFBUjRNLEdBQ2xDNU0sR0FsS0tsTixLQWtLcUJvTSxLQWxLckJwTSxLQW1LQStLLEtBQUtpTSxXQW5LTGhYLEtBb0tIby9DLE9BQVN1aUIsRUFwS04zaEUsS0FxS0h3aEUsU0FBVSxFQXJLUHhoRSxLQXNLSDhPLFVBQVUsYUFHYnFNLElBektNbmIsS0F5S1lnTSxNQUNyQixPQVNELEdBUElvNUIsSUE1S01wbEMsS0E2S0pvL0MsT0FBU2dCLEVBN0tMcGdELEtBOEtKd2hFLFNBQVUsRUFDZnJtRCxFQUFXLEVBQWNyQixFQUFNLE1BQVUsS0EvS2hDOVosS0FnTEo0TixPQUFPdU4sR0FBVSxHQUFNLElBaExuQm5iLEtBa0xMd2hFLFNBQVUsRUFsTEx4aEUsS0FtTERzTSxVQUFZMnpELEVBQ3BCLE9BcExTamdFLEtBc0xMZ00sTUFBUTYxRCxFQXRMSDdoRSxLQXVMTHVNLFdBQWFtMUQsRUF2TFIxaEUsS0F3TExvL0MsT0FBU3VpQixFQXhMSjNoRSxLQXlMTHdNLGFBQWVvMUQsRUFHckIsR0E1TFc1aEUsS0E0TERnTSxRQUFVbVAsR0E1TFRuYixLQTRMMkJvUSxRQUFZdkMsR0FBVWd5RCxHQUFrQkMsRUFBOUUsQ0FrQkEsR0E5TVc5L0QsS0FpTU1xTSxXQWpNTnJNLEtBa01McU0sVUFBVyxHQWxNTnJNLEtBcU1Ec0wsVUFyTUN0TCxLQXFNa0JzTSxTQXJNbEJ0TSxLQXFNa0N1TSxhQUFlNHpDLEdBQWlCeDJDLEVBQU8sSUFyTXpFM0osS0FzTUxzTCxTQUFVLEdBR00sSUFBbEI2MEMsR0F6TU9uZ0QsS0F5TXVCK0ssS0FBSzJMLFVBQWlDLElBek03RDFXLEtBeU04Q3VNLFlBek05Q3ZNLEtBeU13RWlMLGdCQUFxQmlDLEdBek03RmxOLEtBME1MOE8sVUFBVSxhQUdoQjR2RCxFQTdNVzErRCxLQTZNSWdNLFFBQ0FtUCxFQUVkLElBREF6TSxFQS9NVTFPLEtBK01Hb1EsT0FDTjFCLElBQ05xQyxFQUFPckMsRUFBTWpDLE1BQ1RpeUQsSUFsTksxK0QsS0FrTllnTSxTQWxOWmhNLEtBa04yQnNNLFNBQVkyekQsTUFFckN2eEQsRUFBTXBELFNBQVlvRCxFQUFNeEYsWUFwTjFCbEosS0FvTjZDZ00sUUFBVTBDLEVBQU1wQyxVQUFZb0MsRUFBTXRDLE9BQ25GMHpELElBQWVweEQsSUFyTlgxTyxLQXNORm9OLFFBdE5FcE4sS0F1TkZzUCxXQUFhVSxHQUVkdEIsRUFBTWpELFVBR1ZpRCxFQUFNZCxRQUFVYyxFQUFNdkMsT0FBaUN1QyxFQUFNZixnQkFBN0JlLEVBQU16RCxpQkFBNEN0QixFQUFPK0UsRUFBTXhGLFlBQWN3RixFQUFNckQsV0FBYTZCLEVBQWdCVyxHQUZoSmEsRUFBTWQsUUFBUWpFLEVBQU8rRSxFQUFNeEYsWUFBY3dGLEVBQU1yRCxXQUFZNkIsRUFBZ0JXLElBSzdFYSxFQUFRcUMsT0FJVCxJQURBckMsRUFsT1UxTyxLQWtPRzBNLE1BQ05nQyxJQUNOcUMsRUFBT3JDLEVBQU1tQyxNQUNUNnRELElBck9LMStELEtBcU9ZZ00sU0FyT1poTSxLQXFPMkJzTSxTQUFZMnpELEtBRm5DLENBSU4sR0FBSXZ4RCxFQUFNcEQsU0FBWW9ELEVBQU14RixZQUFjaVMsSUFBYXpNLEVBQU1wQyxVQUFZb0MsRUFBTXRDLElBQU0sQ0FDM0YsR0FBSTB6RCxJQUFlcHhELEVBQU8sQ0FFekIsSUFEQW94RCxFQUFhcHhELEVBQU1tQyxNQUNaaXZELEdBQWNBLEVBQVdqd0QsVUExT3pCN1AsS0EwTzBDZ00sT0FDaEQ4ekQsRUFBV2x5RCxPQUFTa3lELEVBQVdyMEQsVUFBWXEwRCxFQUFXbnlELGlCQUFvQmhFLEVBQU9tMkQsRUFBVzUyRCxZQUFjNDJELEVBQVd6MEQsWUFBZTFCLEVBQU9tMkQsRUFBVzUyRCxZQUFjNDJELEVBQVd6MEQsV0FBYTZCLEVBQWdCVyxHQUM1TWl5RCxFQUFhQSxFQUFXanZELE1BRXpCaXZELEVBQWEsS0E5T045L0QsS0ErT0ZvTixRQS9PRXBOLEtBZ1BGc1AsV0FBYVUsRUFFZHRCLEVBQU1qRCxVQUdWaUQsRUFBTWQsUUFBVWMsRUFBTXZDLE9BQWlDdUMsRUFBTWYsZ0JBQTdCZSxFQUFNekQsaUJBQTRDdEIsRUFBTytFLEVBQU14RixZQUFjd0YsRUFBTXJELFdBQWE2QixFQUFnQlcsR0FGaEphLEVBQU1kLFFBQVFqRSxFQUFPK0UsRUFBTXhGLFlBQWN3RixFQUFNckQsV0FBWTZCLEVBQWdCVyxHQUs3RWEsRUFBUXFDLEVBeFBDL1EsS0E0UEYyTSxZQUFnQk8sSUFDcEJxQyxFQUFZbk0sUUFDZm9NLElBOVBTeFAsS0FnUUw4TyxVQUFVLGNBRVozSCxJQWxRT25ILEtBa1Fhd2hFLFNBbFFieGhFLEtBa1FnQ29NLEtBQVMyekQsSUFsUXpDLy9ELEtBa1E0RGtKLFlBQWM4MkQsSUFsUTFFaGdFLEtBa1FpR3FMLGFBQStCLElBbFFoSXJMLEtBa1FzSGdNLE9BQWVrMEMsR0FsUXJJbGdELEtBa1FzSjJOLG1CQUM1SnNOLElBQ0MxTCxFQUFZbk0sUUFDZm9NLElBclFReFAsS0F1UUE0TSxVQUFVdUQsb0JBdlFWblEsS0F3UUgrTixVQUFTLEdBQU8sR0F4UWIvTixLQTBRSnNMLFNBQVUsSUFFWDRCLEdBNVFLbE4sS0E0UWtCK0ssS0FBSzVELElBNVF2Qm5ILEtBNlFKOE8sVUFBVTNILFVBaEZaZzVDLElBN0xNbmdELEtBNkxpQnVNLFlBN0xqQnZNLEtBNkxzQzJNLFlBQWdCTyxHQTdMdERsTixLQThMSjhPLFVBQVUsY0FvRmxCNU0sRUFBRTQvRCxVQUFZLFNBQVMxQixFQUFRL25ELEVBQVFrcEMsR0FDdEMsSUFJQ25oRCxFQUFHc08sRUFKQTdMLEVBQUksR0FDUGdWLEVBQU03WCxLQUFLbWdFLFlBQVlDLEdBQXFCLE1BQVZBLEVBQWlCL25ELEdBQXFCLE1BQVYrbkQsSUFBbUI3ZSxHQUNqRkosRUFBTSxFQUNOOWdELEVBQUl3WCxFQUFJelUsT0FFVCxJQUFLaEQsRUFBSSxFQUFHQSxFQUFJQyxFQUFHRCxLQUNsQnNPLEVBQVFtSixFQUFJelgsSUFDRjROLGFBQ1RuTCxFQUFFcytDLEtBQVN6eUMsR0FHYixPQUFPN0wsR0FJUlgsRUFBRTYvRCxjQUFnQixTQUFTcDRELEdBQ3JCQSxHQUFtQixJQUFUQSxJQUNkQSxFQUFPM0osS0FBS2dNLE9BRWIsSUFFQzVMLEVBRkdzZ0UsRUFBUzFnRSxLQUFLZ2lFLGlCQUNqQjNoRSxFQUFJcWdFLEVBQU90OUQsT0FFWixJQUFLaEQsRUFBSSxFQUFHQSxFQUFJQyxFQUFHRCxJQUNsQixHQUFJc2dFLEVBQU90Z0UsR0FBR3VKLEtBQU9BLEVBQ3BCLE9BQU8rMkQsRUFBT3RnRSxHQUFHTyxLQUduQixPQUFPLE1BR1J1QixFQUFFKy9ELGVBQWlCLFNBQVN0NEQsR0FDZixNQUFSQSxJQUNIQSxFQUFPM0osS0FBS2dNLE9BSWIsSUFGQSxJQUFJMDBELEVBQVMxZ0UsS0FBS2dpRSxpQkFDakI1aEUsRUFBSXNnRSxFQUFPdDlELFNBQ0hoRCxHQUFLLEdBQ2IsR0FBSXNnRSxFQUFPdGdFLEdBQUd1SixLQUFPQSxFQUNwQixPQUFPKzJELEVBQU90Z0UsR0FBR08sS0FHbkIsT0FBTyxNQUdSdUIsRUFBRTgvRCxlQUFpQixXQUNsQixJQUVDOS9ELEVBRkdXLEVBQUksR0FDUHMrQyxFQUFNLEVBRVAsSUFBS2ovQyxLQUFLbEMsS0FBSzY5RCxRQUNkaDdELEVBQUVzK0MsS0FBUyxDQUFDeDNDLEtBQUszSixLQUFLNjlELFFBQVEzN0QsR0FBSXZCLEtBQUt1QixHQUt4QyxPQUhBVyxFQUFFa2tCLE1BQUssU0FBU2xrQixFQUFFVSxHQUNqQixPQUFPVixFQUFFOEcsS0FBT3BHLEVBQUVvRyxRQUVaOUcsR0FHUlgsRUFBRTRMLFdBQWEsV0FFZCxPQURBOU4sS0FBS3doRSxTQUFVLEVBQ1IsRUFBYXgvRCxVQUFVOEwsV0FBV3ZOLEtBQUtQLE9BTS9Da0MsRUFBRXVOLFNBQVcsU0FBU3BPLEVBQU82TCxHQUM1QixPQUFTakQsVUFBVTdHLE9BQWdEcEQsS0FBS3VOLFVBQVd2TixLQUFLOEssWUFBZTlLLEtBQUtxL0MsT0FBK0IsSUFBUCxFQUFkci9DLEtBQUtvL0MsUUFBcUIsRUFBSS85QyxFQUFRQSxHQUFVckIsS0FBS28vQyxRQUFVcC9DLEtBQUtnTCxVQUFZaEwsS0FBS3UvQyxjQUFnQnJ5QyxHQUE3TGxOLEtBQUtnTSxNQUFRaE0sS0FBSzhLLFlBQWUsR0FHaEU1SSxFQUFFd04sY0FBZ0IsU0FBU3JPLEVBQU82TCxHQUNqQyxPQUFTakQsVUFBVTdHLE9BQTBEcEQsS0FBS3VOLFVBQVd2TixLQUFLMk4sZ0JBQWtCdE0sRUFBTzZMLEdBQTdGbE4sS0FBS3VNLFdBQWF2TSxLQUFLMk4saUJBQW9CLEdBRzFFekwsRUFBRXlMLGNBQWdCLFNBQVN0TSxHQUMxQixPQUFLNEksVUFBVTdHLFFBUVcsSUFBbEJwRCxLQUFLcy9DLFNBQW1CaitDLEVBQWdCckIsS0FBSytQLFVBQVcvUCxLQUFLMk4sZ0JBQWtCdE0sR0FBOUNyQixNQVBwQ0EsS0FBS21NLFNBQ1IsRUFBYW5LLFVBQVUyTCxjQUFjcE4sS0FBS1AsTUFFMUNBLEtBQUtpTCxnQkFBb0MsSUFBbEJqTCxLQUFLcy9DLFFBQWtCLGFBQWV0L0MsS0FBS2dMLFdBQWFoTCxLQUFLcy9DLFFBQVUsR0FBTXQvQyxLQUFLdS9DLGFBQWV2L0MsS0FBS3MvQyxTQUV2SHQvQyxLQUFLaUwsaUJBS2QvSSxFQUFFeUgsS0FBTyxTQUFTdEksRUFBTzZMLEdBQ3hCLElBQUtqRCxVQUFVN0csT0FDZCxPQUFPcEQsS0FBS2dNLE1BRVRoTSxLQUFLbU0sUUFDUm5NLEtBQUsyTixnQkFFTixJQUFJN0MsRUFBVzlLLEtBQUtnTCxVQUNuQnN6QyxFQUFRdCtDLEtBQUtvL0MsT0FDYjRDLEVBQVcxRCxHQUFTeHpDLEVBQVc5SyxLQUFLdS9DLGNBSXJDLE9BSElsK0MsRUFBUXlKLElBQ1h6SixFQUFReUosR0FFRjlLLEtBQUt1TixVQUFXdk4sS0FBS3EvQyxPQUFrQixFQUFSZixFQUFjeHpDLEVBQVd6SixFQUFRMmdELEVBQVdoaUQsS0FBS3MvQyxRQUFVaitDLEVBQVEyZ0QsRUFBVzNnRCxFQUFPNkwsSUFHNUhoTCxFQUFFbVYsT0FBUyxTQUFTaFcsR0FDbkIsT0FBSzRJLFVBQVU3RyxRQUdmcEQsS0FBS3MvQyxRQUFVaitDLEVBQ1JyQixLQUFLd08sVUFBUyxJQUhieE8sS0FBS3MvQyxTQU1kcDlDLEVBQUVvVixZQUFjLFNBQVNqVyxHQUN4QixPQUFLNEksVUFBVTdHLFFBR2ZwRCxLQUFLdS9DLGFBQWVsK0MsRUFDYnJCLEtBQUt3TyxVQUFTLElBSGJ4TyxLQUFLdS9DLGNBTWRyOUMsRUFBRWtWLEtBQU8sU0FBUy9WLEdBQ2pCLE9BQUs0SSxVQUFVN0csUUFHZnBELEtBQUtxL0MsTUFBUWgrQyxFQUNOckIsTUFIQ0EsS0FBS3EvQyxPQU1kbjlDLEVBQUVnZ0UsYUFBZSxTQUFTN2dFLEdBQ3pCLE9BQUs0SSxVQUFVN0csT0FHUnBELEtBQUttTixLQUFLOUwsR0FBTyxHQUZoQnJCLEtBQUtpaUUsZUFBZWppRSxLQUFLZ00sTUFyZXRCLE9BMGVMODBELEtBRUwsR0FFRyxJQUFJLEVBQWMsSUFBUUEsWUMxZjNCLEVBQVcsSUFBTTUyRCxLQUFLODZDLEdBQ3pCbWQsRUFBTSxHQUNOQyxFQUFNLEdBQ05DLEVBQU0sR0FDTkMsRUFBWSxHQUNaLEVBQVcsSUFBUzE5RCxVQUFVRSxRQUM5Qnk5RCxFQUFVLFNBQVMxL0QsRUFBR1UsRUFBRzlDLEVBQUdDLEdBQ3ZCRCxJQUFNQyxJQUNURCxFQUFJQyxHQUFLQSxFQUFJNkMsR0FBSyxLQUVmVixJQUFNVSxJQUNUQSxFQUFJVixHQUFLcEMsRUFBSW9DLEdBQUssS0FFbkI3QyxLQUFLNkMsRUFBSUEsRUFDVDdDLEtBQUt1RCxFQUFJQSxFQUNUdkQsS0FBS1MsRUFBSUEsRUFDVFQsS0FBS1UsRUFBSUEsRUFDVFYsS0FBS3dpRSxHQUFLOWhFLEVBQUltQyxFQUNkN0MsS0FBS3lpRSxHQUFLaGlFLEVBQUlvQyxFQUNkN0MsS0FBS3l2RCxHQUFLbHNELEVBQUlWLEdBR2Y2L0QsRUFBbUIsU0FBUzcvRCxFQUFHVSxFQUFHOUMsRUFBR0MsR0FDcEMsSUFBSWlpRSxFQUFLLENBQUM5L0QsRUFBRUEsR0FDWCsvRCxFQUFLLEdBQ0xDLEVBQUssR0FDTEMsRUFBSyxDQUFDcmlFLEVBQUVDLEdBQ1JxaUUsR0FBT2xnRSxFQUFJVSxHQUFLLEVBQ2hCeS9ELEdBQU96L0QsRUFBSTlDLEdBQUssRUFDaEJ3aUUsR0FBT3hpRSxFQUFJQyxHQUFLLEVBQ2hCd2lFLEdBQVFILEVBQU1DLEdBQU8sRUFDckJHLEdBQVFILEVBQU1DLEdBQU8sRUFDckJHLEdBQU1ELEVBQU9ELEdBQVEsRUFRdEIsT0FQQVAsRUFBR3AvRCxFQUFJdy9ELEdBQU9sZ0UsRUFBSWtnRSxHQUFPLEVBQ3pCSCxFQUFHci9ELEVBQUkyL0QsRUFBT0UsRUFDZFQsRUFBR2xpRSxFQUFJbWlFLEVBQUcvL0QsR0FBSzgvRCxFQUFHcC9ELEVBQUlxL0QsRUFBR3IvRCxHQUFLLEVBQzlCcS9ELEVBQUduaUUsRUFBSW9pRSxFQUFHaGdFLEdBQUtxZ0UsRUFBT0MsR0FBUSxFQUM5Qk4sRUFBR3QvRCxFQUFJNC9ELEVBQU9DLEVBQ2ROLEVBQUd2L0QsRUFBSTAvRCxHQUFPdmlFLEVBQUl1aUUsR0FBTyxFQUN6QkosRUFBR3BpRSxFQUFJcWlFLEVBQUdqZ0UsR0FBS2dnRSxFQUFHdC9ELEVBQUl1L0QsRUFBR3YvRCxHQUFLLEVBQ3ZCLENBQUNvL0QsRUFBSUMsRUFBSUMsRUFBSUMsSUFFckJPLEVBQTBCLFNBQVN4Z0UsRUFBR3lnRSxFQUFXQyxFQUFNQyxFQUFPQyxHQUM3RCxJQUdDcmpFLEVBQUdxaEIsRUFBSWlpRCxFQUFJQyxFQUFJQyxFQUFLMVgsRUFBSUMsRUFBSTBYLEVBQUlDLEVBQUtDLEVBQUluckQsRUFBSUMsRUFBSWpOLEVBSDlDdkwsRUFBSXdDLEVBQUVPLE9BQVMsRUFDbEI0Z0UsRUFBSyxFQUNMQyxFQUFNcGhFLEVBQUUsR0FBR0EsRUFFWixJQUFLekMsRUFBSSxFQUFHQSxFQUFJQyxFQUFHRCxJQUVsQnFoQixHQURBbWlELEVBQU0vZ0UsRUFBRW1oRSxJQUNDbmhFLEVBQ1Q2Z0UsRUFBS0UsRUFBSWxqRSxFQUNUaWpFLEVBQUs5Z0UsRUFBRW1oRSxFQUFHLEdBQUd0akUsRUFFVCtpRSxHQUNIN3FELEVBQUt1cEQsRUFBSS9oRSxHQUVUd0wsSUFEQWlOLEVBQUt1cEQsRUFBSWhpRSxJQUNHd1ksR0FBTTBxRCxFQUFZLEtBQVNFLEVBQVEsR0FBTW5CLEVBQUlqaUUsSUFBTSxJQUcvRHlqRSxFQUFLSCxJQUZMeFgsRUFBS3dYLEdBQU1BLEVBQUtqaUQsSUFBTytoRCxFQUFvQixHQUFaRixFQUEwQixJQUFQMXFELEVBQVdoTixFQUFLZ04sRUFBSyxPQUN2RXV6QyxFQUFLdVgsR0FBTUMsRUFBS0QsSUFBT0YsRUFBb0IsR0FBWkYsRUFBMEIsSUFBUHpxRCxFQUFXak4sRUFBS2lOLEVBQUssSUFDL0NxekMsSUFBYSxFQUFMdHpDLEdBQVVBLEVBQUtDLEdBQU8sSUFBTyxHQUFNLEtBSW5FZ3JELEVBQUtILElBRkx4WCxFQUFLd1gsR0FBTUEsRUFBS2ppRCxHQUFNNmhELEVBQVksS0FDbENuWCxFQUFLdVgsR0FBTUMsRUFBS0QsR0FBTUosRUFBWSxLQUNaLEVBRXZCcFgsR0FBTTJYLEVBQ04xWCxHQUFNMFgsRUFFTkQsRUFBSW5qRSxFQUFJcWpFLEVBQU01WCxFQUViMFgsRUFBSXJnRSxFQURLLElBQU5uRCxFQUNLNmpFLEVBRUFBLEVBQU1MLEVBQUkvZ0UsRUFBc0IsSUFBakIrZ0UsRUFBSW5qRSxFQUFJbWpFLEVBQUkvZ0UsR0FHcEMrZ0UsRUFBSXBCLEdBQUtrQixFQUFLamlELEVBQ2RtaUQsRUFBSW5CLEdBQUtxQixFQUFNcmlELEVBQ2ZtaUQsRUFBSW5VLEdBQUt3VSxFQUFNeGlELEVBRVg4aEQsR0FDSFEsRUFBS3JCLEVBQWlCamhELEVBQUl3aUQsRUFBS0gsRUFBS0osR0FDcEM3Z0UsRUFBRThFLE9BQU9xOEQsRUFBSSxFQUFHRCxFQUFHLEdBQUlBLEVBQUcsR0FBSUEsRUFBRyxHQUFJQSxFQUFHLElBQ3hDQyxHQUFNLEdBRU5BLElBR0RDLEVBQU05WCxHQUVQeVgsRUFBTS9nRSxFQUFFbWhFLElBQ0p6Z0UsRUFBSTBnRSxFQUNSTCxFQUFJbmpFLEVBQUl3akUsRUFBc0IsSUFBZkwsRUFBSWxqRSxFQUFJdWpFLEdBQ3ZCTCxFQUFJcEIsR0FBS29CLEVBQUlsakUsRUFBSWtqRSxFQUFJL2dFLEVBQ3JCK2dFLEVBQUluQixHQUFLbUIsRUFBSW5qRSxFQUFJbWpFLEVBQUkvZ0UsRUFDckIrZ0UsRUFBSW5VLEdBQUt3VSxFQUFNTCxFQUFJL2dFLEVBQ2YwZ0UsSUFDSFEsRUFBS3JCLEVBQWlCa0IsRUFBSS9nRSxFQUFHb2hFLEVBQUtMLEVBQUluakUsRUFBR21qRSxFQUFJbGpFLEdBQzdDbUMsRUFBRThFLE9BQU9xOEQsRUFBSSxFQUFHRCxFQUFHLEdBQUlBLEVBQUcsR0FBSUEsRUFBRyxHQUFJQSxFQUFHLE1BRzFDRyxFQUFnQixTQUFTaCtDLEVBQVFoa0IsRUFBR3VoRSxFQUFXVSxHQUM5QyxJQUNDOWpFLEVBQUdELEVBQUdxaEIsRUFBSWlpRCxFQUFJQyxFQUFJUyxFQURmdmhFLEVBQUksR0FFUixHQUFJc2hFLEVBR0gsSUFEQS9qRSxHQURBOGxCLEVBQVMsQ0FBQ2krQyxHQUFTMytELE9BQU8wZ0IsSUFDZjlpQixTQUNGaEQsR0FBSyxHQUMwQixpQkFBMUJna0UsRUFBTWwrQyxFQUFPOWxCLEdBQUc4QixLQUEwQyxNQUFsQmtpRSxFQUFJdHhELE9BQU8sS0FDL0RvVCxFQUFPOWxCLEdBQUc4QixHQUFLaWlFLEVBQVFqaUUsR0FBS2lKLE9BQU9pNUQsRUFBSXR4RCxPQUFPLEdBQUtzeEQsRUFBSWwxRCxPQUFPLEtBS2pFLElBREE3TyxFQUFJNmxCLEVBQU85aUIsT0FBUyxHQUNaLEVBRVAsT0FEQVAsRUFBRSxHQUFLLElBQUkwL0QsRUFBUXI4QyxFQUFPLEdBQUdoa0IsR0FBSSxFQUFHLEVBQUdna0IsRUFBTyxHQUFHaGtCLElBQzFDVyxFQUVSLElBQUt6QyxFQUFJLEVBQUdBLEVBQUlDLEVBQUdELElBQ2xCcWhCLEVBQUt5RSxFQUFPOWxCLEdBQUc4QixHQUNmd2hFLEVBQUt4OUMsRUFBTzlsQixFQUFFLEdBQUc4QixHQUNqQlcsRUFBRXpDLEdBQUssSUFBSW1pRSxFQUFROWdELEVBQUksRUFBRyxFQUFHaWlELEdBQ3pCRCxJQUNIRSxFQUFLejlDLEVBQU85bEIsRUFBRSxHQUFHOEIsR0FDakJpZ0UsRUFBSS9oRSxJQUFNK2hFLEVBQUkvaEUsSUFBTSxJQUFNc2pFLEVBQUtqaUQsSUFBT2lpRCxFQUFLamlELEdBQzNDMmdELEVBQUloaUUsSUFBTWdpRSxFQUFJaGlFLElBQU0sSUFBTXVqRSxFQUFLRCxJQUFPQyxFQUFLRCxJQUk3QyxPQURBN2dFLEVBQUV6QyxHQUFLLElBQUltaUUsRUFBUXI4QyxFQUFPOWxCLEdBQUc4QixHQUFJLEVBQUcsRUFBR2drQixFQUFPOWxCLEVBQUUsR0FBRzhCLElBQzVDVyxHQUVSd2hFLEVBQWdCLFNBQVNuK0MsRUFBUW85QyxFQUFXZ0IsRUFBV2QsRUFBT0MsRUFBV1UsR0FDeEUsSUFHQy9qRSxFQUFHOEIsRUFBR1csRUFBR29ELEVBQUcvRSxFQUFHYixFQUFHaUssRUFBVXlTLEVBSHpCcFosRUFBTSxHQUNUbVYsRUFBUSxHQUNSZ0UsRUFBUXFuRCxHQUFXaitDLEVBQU8sR0FNM0IsSUFBS2hrQixLQUpMdWhFLEVBQW1DLGlCQUFoQixFQUE0QixJQUFJQSxFQUFVLElBbEhqRCx3S0FtSEssTUFBYkgsSUFDSEEsRUFBWSxHQUVIcDlDLEVBQU8sR0FDaEJwTixFQUFNdFYsS0FBS3RCLEdBR1osR0FBSWdrQixFQUFPOWlCLE9BQVMsRUFBRyxDQUl0QixJQUhBMlosRUFBT21KLEVBQU9BLEVBQU85aUIsT0FBUyxHQUM5QmtILEdBQVcsRUFDWGxLLEVBQUkwWSxFQUFNMVYsU0FDRGhELEdBQUssR0FFYixHQURBOEIsRUFBSTRXLEVBQU0xWSxHQUNOOEosS0FBS2l2QixJQUFJcmMsRUFBTTVhLEdBQUs2YSxFQUFLN2EsSUFBTSxJQUFNLENBQ3hDb0ksR0FBVyxFQUNYLE1BR0VBLElBQ0g0YixFQUFTQSxFQUFPMWdCLFNBQ1oyK0QsR0FDSGorQyxFQUFPcStDLFFBQVFKLEdBRWhCaitDLEVBQU8xaUIsS0FBSzBpQixFQUFPLElBQ25CaStDLEVBQVVqK0MsRUFBT0EsRUFBTzlpQixPQUFTLElBS25DLElBRkErK0QsRUFBSS8rRCxPQUFTZy9ELEVBQUloL0QsT0FBU2kvRCxFQUFJai9ELE9BQVMsRUFDdkNoRCxFQUFJMFksRUFBTTFWLFNBQ0RoRCxHQUFLLEdBQ2I4QixFQUFJNFcsRUFBTTFZLEdBQ1ZraUUsRUFBVXBnRSxJQUF3QyxJQUFsQ3VoRSxFQUFVdDBELFFBQVEsSUFBSWpOLEVBQUUsS0FDeEN5QixFQUFJekIsR0FBS2dpRSxFQUFjaCtDLEVBQVFoa0IsRUFBR29nRSxFQUFVcGdFLEdBQUlpaUUsR0FHakQsSUFEQS9qRSxFQUFJK2hFLEVBQUkvK0QsU0FDQ2hELEdBQUssR0FDYitoRSxFQUFJL2hFLEdBQUs4SixLQUFLOCtCLEtBQUttNUIsRUFBSS9oRSxJQUN2QmdpRSxFQUFJaGlFLEdBQUs4SixLQUFLOCtCLEtBQUtvNUIsRUFBSWhpRSxJQUV4QixJQUFLb2pFLEVBQU8sQ0FFWCxJQURBcGpFLEVBQUkwWSxFQUFNMVYsU0FDRGhELEdBQUssR0FDYixHQUFJa2lFLEVBQVVwZ0UsR0FHYixJQURBN0IsR0FEQXdDLEVBQUljLEVBQUltVixFQUFNMVksS0FDUmdELE9BQVMsRUFDVjZDLEVBQUksRUFBR0EsRUFBSTVGLEVBQUc0RixJQUNsQi9FLEVBQUsyQixFQUFFb0QsRUFBRSxHQUFHdThELEdBQUtKLEVBQUluOEQsR0FBS3BELEVBQUVvRCxHQUFHdThELEdBQUtMLEVBQUlsOEQsSUFBTyxFQUMvQ284RCxFQUFJcDhELElBQU1vOEQsRUFBSXA4RCxJQUFNLEdBQUsvRSxFQUFJQSxFQUtoQyxJQURBZCxFQUFJaWlFLEVBQUlqL0QsU0FDQ2hELEdBQUssR0FDYmlpRSxFQUFJamlFLEdBQUs4SixLQUFLOCtCLEtBQUtxNUIsRUFBSWppRSxJQUt6QixJQUZBQSxFQUFJMFksRUFBTTFWLE9BQ1Y2QyxFQUFJcStELEVBQVksRUFBSSxJQUNYbGtFLEdBQUssR0FFYnlDLEVBQUljLEVBREp6QixFQUFJNFcsRUFBTTFZLElBRVZpakUsRUFBd0J4Z0UsRUFBR3lnRSxFQUFXZ0IsRUFBV2QsRUFBT2xCLEVBQVVwZ0UsSUFDOURvSSxJQUNIekgsRUFBRThFLE9BQU8sRUFBRzFCLEdBQ1pwRCxFQUFFOEUsT0FBTzlFLEVBQUVPLE9BQVM2QyxFQUFHQSxJQUd6QixPQUFPdEMsR0EwQ1I2Z0UsRUFBbUIsU0FBUzNoRSxFQUFHNGhFLEVBQU9DLEdBSXJDLElBSEEsSUFFQ2hrRSxFQUFHaWtFLEVBQUl4aUUsRUFBR3FnRSxFQUFJQyxFQUFJaFQsRUFBSXZ0RCxFQUFHOUIsRUFBRzQvQyxFQUFLNGtCLEVBQUtuOUQsRUFGbkMyMkIsRUFBTSxFQUFJc21DLEVBQ2J6K0QsRUFBSXBELEVBQUVPLFNBRUU2QyxHQUFLLEdBT2IsSUFMQTlELEdBREF5aUUsRUFBTS9oRSxFQUFFb0QsSUFDQXBELEVBQ1IyL0QsRUFBS29DLEVBQUlsa0UsRUFBSXlCLEVBQ2JzZ0UsRUFBS21DLEVBQUlua0UsRUFBSTBCLEVBQ2JzdEQsRUFBS21WLEVBQUlyaEUsRUFBSXBCLEVBQ2J6QixFQUFJaWtFLEVBQUssRUFDSnZrRSxFQUFJLEVBQUdBLEdBQUtza0UsRUFBWXRrRSxJQUc1Qk0sRUFBSWlrRSxHQUFNQSxJQUZWemlFLEVBQUlrOEIsRUFBTWgrQixHQUVVOEIsRUFBSXNnRSxFQUFLLEdBRDdCeGlCLEVBQU0sRUFBSTk5QyxJQUM4QkEsRUFBSXVnRSxFQUFLemlCLEVBQU15UCxJQUFPdnRELEdBRTlEdWlFLEVBREFoOUQsRUFBUXhCLEVBQUl5K0QsRUFBYXRrRSxFQUFJLElBQ2Jxa0UsRUFBTWg5RCxJQUFVLEdBQUsvRyxFQUFJQSxHQW9DNUNta0UsRUFBZSxJQUFTamdFLFVBQVU0VixPQUFPLENBQ3ZDMEMsU0FBVSxTQUNWNVYsVUFBVyxFQUNYZ0wsUUFBUyxRQUNUa0ssSUFBSyxFQUNMbGEsUUFBTyxFQUdQK0IsS0FBTSxTQUFTMEMsRUFBUWdFLEVBQU0yRCxHQUM1QjFPLEtBQUt5VCxRQUFVMU0sRUFDWGdFLGFBQWdCbkgsUUFDbkJtSCxFQUFPLENBQUNtYixPQUFPbmIsSUFFaEIvSyxLQUFLb0YsTUFBUSxHQUNicEYsS0FBSzJjLEtBQU8sR0FDWjNjLEtBQUs4a0UsT0FBUyxHQUNkOWtFLEtBQUsra0UsU0FBbUMsTUFBdkJoNkQsRUFBS2k2RCxlQUEwQixFQUFJeHdELFNBQVN6SixFQUFLaTZELGVBQWdCLElBQ2xGLElBSUM5aUUsRUFBRytpRSxFQUFRN2tFLEVBQUc2RixFQUFHaytELEVBSmRqK0MsRUFBU25iLEVBQUttYixRQUFVLEdBQzNCcEosRUFBUSxHQUNSb29ELEVBQVNoL0MsRUFBTyxHQUNoQjZuQyxFQUFhaGpELEVBQUtnakQsWUFBY3IvQyxFQUFNM0QsS0FBS282RCxlQUk1QyxJQUFLampFLEtBRExsQyxLQUFLb2xFLFlBQWNyWCxFQUFjQSxhQUFzQm5xRCxNQUFTbXFELEVBQWEsQ0FBQyxDQUFDLElBQUksSUFBSSxZQUE0QixJQUFmQSxFQUF1QixFQUFJNWlELE9BQU80aUQsSUFBZSxJQUFPLEtBQ2xKbVgsRUFDVGxsRSxLQUFLOGtFLE9BQU90aEUsS0FBS3RCLEdBSWxCLElBREE5QixFQUFJSixLQUFLOGtFLE9BQU8xaEUsU0FDUGhELEdBQUssR0FDYjhCLEVBQUlsQyxLQUFLOGtFLE9BQU8xa0UsR0FFaEJKLEtBQUs2YSxnQkFBZ0JyWCxLQUFLdEIsR0FDMUIraUUsRUFBU2psRSxLQUFLb0YsTUFBTWxELEdBQTRCLG1CQUFmNkUsRUFBTzdFLEdBQ3hDNGEsRUFBTTVhLEdBQU8raUUsRUFBa0NsK0QsRUFBVTdFLEVBQUVpTixRQUFRLFFBQWtELG1CQUFqQ3BJLEVBQU8sTUFBUTdFLEVBQUVnTixPQUFPLElBQXVCaE4sRUFBSSxNQUFRQSxFQUFFZ04sT0FBTyxNQUFqSXFGLFdBQVd4TixFQUFPN0UsSUFDcENpaUUsR0FBYXJuRCxFQUFNNWEsS0FBT2drQixFQUFPLEdBQUdoa0IsS0FDeENpaUUsRUFBVXJuRCxHQU1aLEdBSEE5YyxLQUFLcWxFLFNBQTBCLFVBQWR0NkQsRUFBSzdGLE1BQWtDLGNBQWQ2RixFQUFLN0YsTUFBc0MsU0FBZDZGLEVBQUs3RixLQUFtQm0vRCxFQUFjbitDLEVBQVE3USxNQUFNdEssRUFBS3U0RCxXQUFhLEVBQUl2NEQsRUFBS3U0RCxXQUFXLEVBQXNCLGNBQWR2NEQsRUFBSzdGLEtBQXVCNkYsRUFBSzA0RCxVQUFXVSxHQW5Jck0sU0FBU2orQyxFQUFRaGhCLEVBQU1pL0QsR0FFekMsSUFJQ3RoRSxFQUFHVSxFQUFHOUMsRUFBR0MsRUFBRzRELEVBQUtsRSxFQUFHNkYsRUFBRzVGLEVBQUc2QixFQUFHaS9DLEVBQUtpakIsRUFKL0J6Z0UsRUFBTSxHQUNUeTZCLEVBQWdCLFdBRmpCbDVCLEVBQU9BLEdBQVEsUUFFYSxFQUFJLEVBQy9Cb2dFLEVBQWlCLFNBQVRwZ0UsRUFDUjRULEVBQVEsR0FLVCxHQUhJd3NELEdBQVFuQixJQUNYaitDLEVBQVMsQ0FBQ2krQyxHQUFTMytELE9BQU8wZ0IsSUFFYixNQUFWQSxHQUFrQkEsRUFBTzlpQixPQUFTZzdCLEVBQU0sRUFBSyxLQUFNLHNCQUN2RCxJQUFLbDhCLEtBQUtna0IsRUFBTyxHQUNoQnBOLEVBQU10VixLQUFLdEIsR0FHWixJQURBOUIsRUFBSTBZLEVBQU0xVixTQUNEaEQsR0FBSyxHQUFHLENBS2hCLElBSEF1RCxFQURBekIsRUFBSTRXLEVBQU0xWSxJQUNEa0UsRUFBTSxHQUNmNjhDLEVBQU0sRUFDTjlnRCxFQUFJNmxCLEVBQU85aUIsT0FDTjZDLEVBQUksRUFBR0EsRUFBSTVGLEVBQUc0RixJQUNsQnBELEVBQWdCLE1BQVhzaEUsRUFBbUJqK0MsRUFBT2pnQixHQUFHL0QsR0FBeUMsaUJBQTFCa2lFLEVBQU1sK0MsRUFBT2pnQixHQUFHL0QsS0FBd0MsTUFBbEJraUUsRUFBSXR4RCxPQUFPLEdBQWNxeEQsRUFBUWppRSxHQUFLaUosT0FBT2k1RCxFQUFJdHhELE9BQU8sR0FBS3N4RCxFQUFJbDFELE9BQU8sSUFBTS9ELE9BQU9pNUQsR0FDeEtrQixHQUFVci9ELEVBQUksR0FBT0EsRUFBSTVGLEVBQUksSUFDaENpRSxFQUFJNjhDLE1BQVV0K0MsRUFBSXlCLEVBQUk2OEMsRUFBSSxJQUFNLEdBRWpDNzhDLEVBQUk2OEMsS0FBU3QrQyxFQUlkLElBRkF4QyxFQUFJOGdELEVBQU0vaUIsRUFBTSxFQUNoQitpQixFQUFNLEVBQ0RsN0MsRUFBSSxFQUFHQSxFQUFJNUYsRUFBRzRGLEdBQUttNEIsRUFDdkJ2N0IsRUFBSXlCLEVBQUkyQixHQUNSMUMsRUFBSWUsRUFBSTJCLEVBQUUsR0FDVnhGLEVBQUk2RCxFQUFJMkIsRUFBRSxHQUNWdkYsRUFBYSxJQUFSMDlCLEVBQWEsRUFBSTk1QixFQUFJMkIsRUFBRSxHQUM1QjNCLEVBQUk2OEMsS0FBU2lqQixFQUFlLElBQVJobUMsRUFBYSxJQUFJbWtDLEVBQVExL0QsRUFBR1UsRUFBRzlDLEVBQUdDLEdBQUssSUFBSTZoRSxFQUFRMS9ELEdBQUksRUFBSVUsRUFBSVYsR0FBSyxHQUFJLEVBQUlVLEVBQUk5QyxHQUFLLEVBQUdBLEdBRTdHNkQsRUFBSWxCLE9BQVMrOUMsRUFFZCxPQUFPeDlDLEVBNkYyTjRoRSxDQUFpQnIvQyxFQUFRbmIsRUFBSzdGLEtBQU00WCxHQUNwUTljLEtBQUt3bEUsVUFBWXhsRSxLQUFLcWxFLFNBQVNuakUsR0FBR2tCLE9BRTlCcEQsS0FBSytrRSxTQUFVLENBQ2xCLElBQUlVLEVBM0VXLFNBQVM5aEUsRUFBSytnRSxHQUVoQyxJQU9DeGlFLEVBQUc5QixFQUFHQyxFQUFHb0gsRUFQTjVFLEVBQUksR0FDUDZpRSxFQUFVLEdBQ1ZobEUsRUFBSSxFQUNKaWxFLEVBQVEsRUFDUjU3RCxHQUxEMjZELEVBQWFBLEdBQWMsR0FBSyxHQUtOLEVBQ3pCa0IsRUFBVyxHQUNYQyxFQUFRLEdBRVQsSUFBSzNqRSxLQUFLeUIsRUFDVDZnRSxFQUFpQjdnRSxFQUFJekIsR0FBSVcsRUFBRzZoRSxHQUc3QixJQURBcmtFLEVBQUl3QyxFQUFFTyxPQUNEaEQsRUFBSSxFQUFHQSxFQUFJQyxFQUFHRCxJQUNsQk0sR0FBS3dKLEtBQUs4K0IsS0FBS25tQyxFQUFFekMsSUFFakJ5bEUsRUFEQXArRCxFQUFRckgsRUFBSXNrRSxHQUNHaGtFLEVBQ1grRyxJQUFVc0MsSUFDYjQ3RCxHQUFTamxFLEVBRVRrbEUsRUFEQW4rRCxFQUFTckgsRUFBSXNrRSxHQUFlLEdBQ1ZtQixFQUNsQkgsRUFBUWorRCxHQUFTaytELEVBQ2pCamxFLEVBQUksRUFDSm1sRSxFQUFRLElBR1YsTUFBTyxDQUFDemlFLE9BQU91aUUsRUFBT0QsUUFBUUEsRUFBU0UsU0FBU0EsR0FnRHBDRSxDQUFpQjlsRSxLQUFLcWxFLFNBQVVybEUsS0FBSytrRSxVQUM5Qy9rRSxLQUFLK2xFLFFBQVVOLEVBQUdyaUUsT0FDbEJwRCxLQUFLZ21FLFNBQVdQLEVBQUdDLFFBQ25CMWxFLEtBQUtpbUUsVUFBWVIsRUFBR0csU0FDcEI1bEUsS0FBS2ttRSxJQUFNbG1FLEtBQUttbUUsSUFBTW5tRSxLQUFLb21FLElBQU1wbUUsS0FBS3FtRSxJQUFNLEVBQzVDcm1FLEtBQUtzbUUsSUFBTXRtRSxLQUFLZ21FLFNBQVMsR0FDekJobUUsS0FBS3VtRSxRQUFVdm1FLEtBQUtpbUUsVUFBVSxHQUM5QmptRSxLQUFLd21FLElBQU14bUUsS0FBS3VtRSxRQUFRLEdBQ3hCdm1FLEtBQUt5bUUsTUFBUSxFQUFJem1FLEtBQUt1bUUsUUFBUW5qRSxPQUcvQixHQUFLMnFELEVBQWEvdEQsS0FBS29sRSxZQU10QixJQUxBcGxFLEtBQUswbUUsa0JBQW9CLEdBQ25CM1ksRUFBVyxhQUFjbnFELFFBQzlCNUQsS0FBS29sRSxZQUFjclgsRUFBYSxDQUFDQSxJQUVsQzN0RCxFQUFJMnRELEVBQVczcUQsU0FDTmhELEdBQUssR0FBRyxDQUNoQixJQUFLNkYsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBQ2xCL0QsRUFBSTZyRCxFQUFXM3RELEdBQUc2RixHQUNsQmpHLEtBQUtvRixNQUFNbEQsR0FBNEIsbUJBQWY2RSxFQUFPN0UsSUFBc0I2RSxFQUFVN0UsRUFBRWlOLFFBQVEsUUFBa0QsbUJBQWpDcEksRUFBTyxNQUFRN0UsRUFBRWdOLE9BQU8sSUFBdUJoTixFQUFJLE1BQVFBLEVBQUVnTixPQUFPLElBRS9KaE4sRUFBSTZyRCxFQUFXM3RELEdBQUcsR0FDbEJKLEtBQUswbUUsa0JBQWtCdG1FLElBQU1KLEtBQUtvRixNQUFNbEQsR0FBS2xDLEtBQUtvRixNQUFNbEQsR0FBRzNCLEtBQUtQLEtBQUt5VCxTQUFXelQsS0FBS3lULFFBQVF2UixLQUFPLEVBQ3BHbEMsS0FBSzZhLGdCQUFnQnJYLEtBQUt0QixHQUk1QixPQURBbEMsS0FBSzJtRSxZQUFjajRELEVBQU0zRCxLQUFLc0wsYUFBZSxFQUFJLEdBQzFDLEdBSVIyRixJQUFLLFNBQVNqTixHQUNiLElBSUM2M0QsRUFBVTVtQixFQUFLNS9DLEVBQUc4QixFQUFHcUIsRUFBR2pDLEVBQUc2UixFQUFLOVMsRUFBR3FsRSxFQUFTbUIsRUFBUUMsRUFKakRsQixFQUFXNWxFLEtBQUt3bEUsVUFDbkJ4aEUsRUFBT2hFLEtBQUtvRixNQUNaMkIsRUFBUy9HLEtBQUt5VCxRQUNkc3pELEVBQVloNEQsSUFBTS9PLEtBQUsybUUsWUFFeEIsR0FBSzNtRSxLQUFLK2tFLFNBR0gsQ0FNTixHQUxBVyxFQUFVMWxFLEtBQUtnbUUsU0FDZmEsRUFBUzdtRSxLQUFLdW1FLFFBQ2RPLEVBQUsvM0QsRUFBSS9PLEtBQUsrbEUsUUFDZDNsRSxFQUFJSixLQUFLbW1FLElBRUxXLEVBQUs5bUUsS0FBS3NtRSxLQUFPbG1FLEVBQUl3bEUsRUFBVyxFQUFHLENBRXRDLElBREF2bEUsRUFBSXVsRSxFQUFXLEVBQ1J4bEUsRUFBSUMsSUFBTUwsS0FBS3NtRSxJQUFNWixJQUFVdGxFLEtBQU8wbUUsSUFDN0M5bUUsS0FBS2ttRSxJQUFNUixFQUFRdGxFLEVBQUUsR0FDckJKLEtBQUttbUUsSUFBTS9sRSxFQUNYSixLQUFLdW1FLFFBQVVNLEVBQVM3bUUsS0FBS2ltRSxVQUFVN2xFLEdBQ3ZDSixLQUFLd21FLElBQU1LLEVBQVE3bUUsS0FBS29tRSxJQUFNcG1FLEtBQUtxbUUsSUFBTSxRQUNuQyxHQUFJUyxFQUFLOW1FLEtBQUtrbUUsS0FBTzlsRSxFQUFJLEVBQUcsQ0FDbEMsS0FBT0EsRUFBSSxJQUFNSixLQUFLa21FLElBQU1SLElBQVV0bEUsS0FBTzBtRSxJQUNuQyxJQUFOMW1FLEdBQVcwbUUsRUFBSzltRSxLQUFLa21FLElBQ3hCbG1FLEtBQUtrbUUsSUFBTSxFQUVYOWxFLElBRURKLEtBQUtzbUUsSUFBTVosRUFBUXRsRSxHQUNuQkosS0FBS21tRSxJQUFNL2xFLEVBQ1hKLEtBQUt1bUUsUUFBVU0sRUFBUzdtRSxLQUFLaW1FLFVBQVU3bEUsR0FDdkNKLEtBQUtvbUUsSUFBTVMsR0FBUTdtRSxLQUFLcW1FLElBQU1RLEVBQU96akUsT0FBUyxHQUFLLElBQU0sRUFDekRwRCxLQUFLd21FLElBQU1LLEVBQU83bUUsS0FBS3FtRSxLQU14QixHQUpBTyxFQUFXeG1FLEVBRVgwbUUsR0FBTTltRSxLQUFLa21FLElBQ1g5bEUsRUFBSUosS0FBS3FtRSxJQUNMUyxFQUFLOW1FLEtBQUt3bUUsS0FBT3BtRSxFQUFJeW1FLEVBQU96akUsT0FBUyxFQUFHLENBRTNDLElBREEvQyxFQUFJd21FLEVBQU96akUsT0FBUyxFQUNiaEQsRUFBSUMsSUFBTUwsS0FBS3dtRSxJQUFNSyxJQUFTem1FLEtBQU8wbUUsSUFDNUM5bUUsS0FBS29tRSxJQUFNUyxFQUFPem1FLEVBQUUsR0FDcEJKLEtBQUtxbUUsSUFBTWptRSxPQUNMLEdBQUkwbUUsRUFBSzltRSxLQUFLb21FLEtBQU9obUUsRUFBSSxFQUFHLENBQ2xDLEtBQU9BLEVBQUksSUFBTUosS0FBS29tRSxJQUFNUyxJQUFTem1FLEtBQU8wbUUsSUFDbEMsSUFBTjFtRSxHQUFXMG1FLEVBQUs5bUUsS0FBS29tRSxJQUN4QnBtRSxLQUFLb21FLElBQU0sRUFFWGhtRSxJQUVESixLQUFLd21FLElBQU1LLEVBQU96bUUsR0FDbEJKLEtBQUtxbUUsSUFBTWptRSxFQUVaa0IsRUFBVyxJQUFOeU4sRUFBVyxHQUFNM08sR0FBSzBtRSxFQUFLOW1FLEtBQUtvbUUsTUFBUXBtRSxLQUFLd21FLElBQU14bUUsS0FBS29tRSxNQUFRcG1FLEtBQUt5bUUsT0FBVSxPQTlDcEZubEUsR0FBS3lOLEdBREw2M0QsRUFBWTczRCxFQUFJLEVBQUssRUFBS0EsR0FBSyxFQUFLNjJELEVBQVcsRUFBS0EsRUFBVzcyRCxHQUFNLElBQy9DLEVBQUk2MkQsSUFBY0EsRUFtRHpDLElBSEE1bEIsRUFBTSxFQUFJMStDLEVBRVZsQixFQUFJSixLQUFLOGtFLE9BQU8xaEUsU0FDUGhELEdBQUssR0FDYjhCLEVBQUlsQyxLQUFLOGtFLE9BQU8xa0UsR0FFaEIrUyxHQUFPN1IsRUFBSUEsR0FEWGlDLEVBQUl2RCxLQUFLcWxFLFNBQVNuakUsR0FBRzBrRSxJQUNKcEUsR0FBSyxFQUFJeGlCLEdBQU8xK0MsRUFBSWlDLEVBQUVrL0QsR0FBS3ppQixFQUFNejhDLEVBQUVrc0QsS0FBT251RCxFQUFJaUMsRUFBRVYsRUFDN0Q3QyxLQUFLMmMsS0FBS3phLEtBQ2JpUixFQUFNblQsS0FBSzJjLEtBQUt6YSxHQUFHaVIsRUFBS3BNLElBRXJCL0MsRUFBSzlCLEdBQ1I2RSxFQUFPN0UsR0FBR2lSLEdBRVZwTSxFQUFPN0UsR0FBS2lSLEVBSWQsR0FBSW5ULEtBQUtvbEUsWUFBYSxDQUNyQixJQUNDNEIsRUFBSUMsRUFBSUMsRUFBSTUrQixFQUFJNitCLEVBQUlwN0QsRUFBS3E3RCxFQUR0QkMsRUFBS3JuRSxLQUFLb2xFLFlBR2QsSUFEQWhsRSxFQUFJaW5FLEVBQUdqa0UsU0FDRWhELEdBQUssR0FDYjhCLEVBQUltbEUsRUFBR2puRSxHQUFHLEdBQ1YyTCxFQUFNczdELEVBQUdqbkUsR0FBRyxJQUFNLEVBQ2xCZ25FLEdBQXFCLElBQWJDLEVBQUdqbkUsR0FBRyxHQUFlLEVBQUksRUFDakNtRCxFQUFJdkQsS0FBS3FsRSxTQUFTZ0MsRUFBR2puRSxHQUFHLElBQ3hCNG1FLEVBQUtobkUsS0FBS3FsRSxTQUFTZ0MsRUFBR2puRSxHQUFHLElBRXJCbUQsR0FBS3lqRSxJQUNSempFLEVBQUlBLEVBQUVxakUsR0FDTkksRUFBS0EsRUFBR0osR0FFUkssRUFBSzFqRSxFQUFFVixHQUFLVSxFQUFFQSxFQUFJQSxFQUFFVixHQUFLdkIsRUFFekIybEUsS0FEQTMrQixFQUFLL2tDLEVBQUVBLEdBQUtBLEVBQUU5QyxFQUFJOEMsRUFBRUEsR0FBS2pDLEdBQ2IybEUsR0FBTTNsRSxFQUNsQmduQyxJQUFRL2tDLEVBQUU5QyxHQUFLOEMsRUFBRTdDLEVBQUk2QyxFQUFFOUMsR0FBS2EsRUFBS2duQyxHQUFNaG5DLEVBRXZDNGxFLEVBQUtGLEVBQUdua0UsR0FBS21rRSxFQUFHempFLEVBQUl5akUsRUFBR25rRSxHQUFLdkIsRUFFNUI0bEUsS0FEQUMsRUFBS0gsRUFBR3pqRSxHQUFLeWpFLEVBQUd2bUUsRUFBSXVtRSxFQUFHempFLEdBQUtqQyxHQUNoQjRsRSxHQUFNNWxFLEVBQ2xCNmxFLElBQVFILEVBQUd2bUUsR0FBS3VtRSxFQUFHdG1FLEVBQUlzbUUsRUFBR3ZtRSxHQUFLYSxFQUFLNmxFLEdBQU03bEUsRUFFMUM2UixFQUFNNHpELEVBQVc3OEQsS0FBS29zRCxNQUFNNlEsRUFBS0QsRUFBSTUrQixFQUFLMitCLEdBQU1HLEVBQU9yN0QsRUFBTS9MLEtBQUswbUUsa0JBQWtCdG1FLEdBRWhGSixLQUFLMmMsS0FBS3phLEtBQ2JpUixFQUFNblQsS0FBSzJjLEtBQUt6YSxHQUFHaVIsRUFBS3BNLElBR3JCL0MsRUFBSzlCLEdBQ1I2RSxFQUFPN0UsR0FBR2lSLEdBRVZwTSxFQUFPN0UsR0FBS2lSLE9BT25CLEVBQUkweEQsRUFBYTdpRTs7Ozs7Ozs7Ozs7SUFHbEI2aUUsRUFBYVIsY0FBZ0JBLEVBQzdCUSxFQUFhbkMsaUJBQW1CQSxFQUNoQ21DLEVBQWFucUQsVUFBVyxFQUN4Qm1xRCxFQUFheUMsaUJBQW1CLFNBQVN6a0UsRUFBR1UsRUFBRzlDLEdBQzlDLE9BQU8sSUFBSThoRSxFQUFRMS9ELEdBQUksRUFBSVUsRUFBSVYsR0FBSyxHQUFJLEVBQUlVLEVBQUk5QyxHQUFLLEVBQUdBLElBR3pEb2tFLEVBQWFqVSxhQUFlLFdBQzNCLElBQUl4TyxFQUFZLEVBQVNBLFVBQ3pCLEdBQUtBLEVBQUwsQ0FHQSxJQUFJNXNDLEVBQWE0c0MsRUFBVTVzQyxXQUMxQjI0QyxFQUFnQjM0QyxFQUFXMjRDLGNBQzNCTCxFQUFrQnQ0QyxFQUFXczRDLGdCQUM3QkksRUFBZTE0QyxFQUFXMDRDLGFBQzNCMTRDLEVBQVcrNkMsNEJBQTRCLFNBQVUsQ0FBQ0gsT0FBTyxTQUFTOXVELEVBQUcwRSxFQUFHNk8sRUFBTSs0QyxFQUFNeDZDLEVBQUlvSCxHQUNuRnhVLGFBQWFwQyxRQUNoQm9DLEVBQUksQ0FBQ2tnQixPQUFPbGdCLElBRWJ3VSxFQUFTLElBQUlxcUQsRUFDYixJQUlDemtFLEVBQUc4QixFQUFHc0osRUFKSDBhLEVBQVNsZ0IsRUFBRWtnQixPQUNkN2xCLEVBQUk2bEIsRUFBTzlpQixPQUFTLEVBQ3BCbWtFLEVBQWUsR0FDZng0RCxFQUFJLEdBRUwsR0FBSTFPLEVBQUksRUFDUCxPQUFPK1MsRUFFUixJQUFLaFQsRUFBSSxFQUFHQSxHQUFLQyxFQUFHRCxJQUNuQm9MLEVBQU8yaUQsRUFBYzdzRCxFQUFHNGtCLEVBQU85bEIsR0FBSXd0RCxFQUFNeDZDLEVBQUlvSCxFQUFTbmEsSUFBTUQsR0FDNURtbkUsRUFBYW5uRSxHQUFLb0wsRUFBSzhILElBRXhCLElBQUtwUixLQUFLOEQsRUFDVCtJLEVBQUU3TSxHQUFLOEQsRUFBRTlELEdBdUJWLE9BckJBNk0sRUFBRW1YLE9BQVNxaEQsR0FDWG4wRCxFQUFLLElBQUk4NkMsRUFBYTVzRCxFQUFHLFNBQVUsRUFBRyxFQUFHa0ssRUFBSzRILEdBQUksSUFDL0M1SCxLQUFPQSxFQUNWNEgsRUFBR29ILE9BQVNBLEVBQ1pwSCxFQUFHc0IsU0FBV281QyxFQUNPLElBQWpCLytDLEVBQUVnL0MsYUFDTGgvQyxFQUFFZy9DLFlBQWEsSUFFWmgvQyxFQUFFZy9DLFlBQWdCaC9DLEVBQUVnL0Msc0JBQXNCbnFELFFBQzdDeEQsR0FBc0IsSUFBakIyTyxFQUFFZy9DLFdBQXVCLEVBQUk1aUQsT0FBTzRELEVBQUVnL0MsWUFDM0NoL0MsRUFBRWcvQyxXQUErQixNQUFqQnZpRCxFQUFLOEgsSUFBSW93QixLQUFnQixDQUFDLENBQUMsT0FBTyxNQUFNLFdBQVd0akMsR0FBRSxJQUF5QixNQUFkb0wsRUFBSzhILElBQUl1aEIsR0FBYSxDQUFDLENBQUMsSUFBSSxJQUFJLFdBQVd6MEIsR0FBRSxLQUUxSDJPLEVBQUVnL0MsYUFDQUgsRUFBS1ksWUFDVFosRUFBSzRPLG1CQUFrQixHQUV4Qmh4RCxFQUFLdWlELFdBQWFILEVBQUtuNkMsUUFBUXkvQyxhQUMvQjFuRCxFQUFLOGlDLE1BQU02WixTQUFXMzhDLEVBQUt1aUQsV0FBVzVGLFVBQVksRUFDbER5RixFQUFLL3lDLGdCQUFnQnJYLEtBQUssYUFFM0JnWCxFQUFPRyxhQUFhblAsRUFBSzhpQyxNQUFPdi9CLEVBQUc2K0MsRUFBS3A2QyxRQUNqQ0osT0FJVCxFQUFFdUosS0FBTyxTQUFTRCxHQUlqQixJQUhBLElBRUN2SixFQUZHMEcsRUFBSzdaLEtBQUs2YSxnQkFDYnphLEVBQUl5WixFQUFHelcsU0FFQ2hELEdBQUssSUFDYitTLEVBQU11SixFQUFPN0MsRUFBR3paLE1BQ1csbUJBQVYsSUFDaEJKLEtBQUsyYyxLQUFLOUMsRUFBR3paLElBQU0rUyxJQUt0QixFQUFFN0UsTUFBUSxTQUFTb08sR0FDbEIsSUFDQ3hhLEVBQUc5QixFQURBeUMsRUFBSTdDLEtBQUs4a0UsT0FFYixJQUFLNWlFLEtBQUtsQyxLQUFLcWxFLFNBQ2QsR0FBSW5qRSxLQUFLd2EsRUFJUixXQUhPMWMsS0FBS3FsRSxTQUFTbmpFLFVBQ2RsQyxLQUFLb0YsTUFBTWxELEdBQ2xCOUIsRUFBSXlDLEVBQUVPLFNBQ0doRCxHQUFLLEdBQ1R5QyxFQUFFekMsS0FBTzhCLEdBQ1pXLEVBQUU4RSxPQUFPdkgsRUFBRyxHQU1oQixHQURBeUMsRUFBSTdDLEtBQUtvbEUsWUFHUixJQURBaGxFLEVBQUl5QyxFQUFFTyxTQUNHaEQsR0FBSyxHQUNUc2MsRUFBTzdaLEVBQUV6QyxHQUFHLEtBQ2Z5QyxFQUFFOEUsT0FBT3ZILEVBQUcsR0FJZixPQUFPSixLQUFLdWMsT0FBT2pPLE1BQU0vTixLQUFLUCxLQUFNMGM7Ozs7Ozs7Ozs7OztBQ3prQnZDLElBQVM5WCxVQUFVLGNBQWUsQ0FBQyxnQkFBZ0IsV0FFakQsSUE0RUM0aUUsRUFBYUMsRUFBZUMsRUFBV0MsRUE1RXBDdDZDLEVBQUssSUFBU3pxQixrQkFBb0IsSUFDckNTLEVBQUtncUIsRUFBRTFQLElBQUlDLFVBQ1hncUQsRUFBaUIsRUFBVjE5RCxLQUFLODZDLEdBQ1o2aUIsRUFBVzM5RCxLQUFLODZDLEdBQUssRUFDckJuZ0QsRUFBU3hCLEVBQUd3QixPQUNadS9CLEVBQVUsU0FBU3ZpQyxFQUFHMEksR0FDckIsSUFBSWdlLEVBQUkxakIsRUFBTyxVQUFZaEQsR0FBRyxlQUFjLEdBQzNDSyxFQUFJcW1CLEVBQUV2bUIsVUFBWSxJQUFJLElBR3ZCLE9BRkFFLEVBQUUwSSxZQUFjMmQsRUFDaEJybUIsRUFBRW1FLFNBQVdrRSxFQUNOZ2UsR0FFUjVpQixFQUFXLElBQUtDLFVBQVksYUFDNUJraUUsRUFBUSxTQUFTbm5FLEVBQU1vbkUsRUFBU0MsRUFBUUMsRUFBV0MsR0FDbEQsSUFBSTMvQyxFQUFJMWpCLEVBQU8sVUFBVWxFLEVBQU0sQ0FDOUJ3bkUsUUFBUSxJQUFJSixFQUNacmhFLE9BQU8sSUFBSXNoRSxFQUNYbmhFLFVBQVUsSUFBSW9oRSxJQUNaLEdBRUgsT0FEQXRpRSxFQUFTNGlCLEVBQUc1bkIsR0FDTDRuQixHQUVSNi9DLEVBQVksU0FBU3orRCxFQUFNdEksRUFBTzBQLEdBQ2pDL1EsS0FBS3NCLEVBQUlxSSxFQUNUM0osS0FBSytPLEVBQUkxTixFQUNMMFAsSUFDSC9RLEtBQUsrUSxLQUFPQSxFQUNaQSxFQUFLZ3lCLEtBQU8vaUMsS0FDWkEsS0FBS1MsRUFBSXNRLEVBQUtoQyxFQUFJMU4sRUFDbEJyQixLQUFLcW9FLElBQU10M0QsRUFBS3pQLEVBQUlxSSxJQUt0QjIrRCxFQUFjLFNBQVN6bUUsRUFBRzBJLEdBQ3pCLElBQUlnZSxFQUFJMWpCLEVBQU8sVUFBWWhELEdBQUcsU0FBUzBtRSxHQUNyQ3ZvRSxLQUFLd29FLElBQU9ELEdBQTJCLElBQWRBLEVBQW1CQSxFQUFZLFFBQ3hEdm9FLEtBQUt5b0UsSUFBaUIsTUFBWHpvRSxLQUFLd29FLE9BQ2QsR0FDSHRtRSxFQUFJcW1CLEVBQUV2bUIsVUFBWSxJQUFJLElBTXZCLE9BTEFFLEVBQUUwSSxZQUFjMmQsRUFDaEJybUIsRUFBRW1FLFNBQVdrRSxFQUNickksRUFBRStYLE9BQVMsU0FBU3N1RCxHQUNuQixPQUFPLElBQUloZ0QsRUFBRWdnRCxJQUVQaGdELEdBR1JtZ0QsRUFBT1osRUFBTSxPQUNaUSxFQUFZLFdBQVcsU0FBU3BtRSxHQUMvQixPQUFTQSxHQUFRLEdBQUtBLElBQU1sQyxLQUFLd29FLElBQU0sR0FBS3RtRSxFQUFJbEMsS0FBS3dvRSxLQUFPLEtBRTdERixFQUFZLFVBQVUsU0FBU3BtRSxHQUM5QixPQUFPQSxFQUFJQSxJQUFNbEMsS0FBS3dvRSxJQUFNLEdBQUt0bUUsRUFBSWxDLEtBQUt3b0UsUUFFM0NGLEVBQVksYUFBYSxTQUFTcG1FLEdBQ2pDLE9BQVNBLEdBQUssR0FBSyxFQUFLLEdBQU1BLEVBQUlBLElBQU1sQyxLQUFLeW9FLElBQU0sR0FBS3ZtRSxFQUFJbEMsS0FBS3lvRSxLQUFPLEtBQVF2bUUsR0FBSyxHQUFLQSxJQUFNbEMsS0FBS3lvRSxJQUFNLEdBQUt2bUUsRUFBSWxDLEtBQUt5b0UsS0FBTyxPQU1sSUUsRUFBUzlqRSxFQUFPLGlCQUFpQixTQUFTK2pFLEVBQWF6akUsRUFBTzBqRSxHQUM3RDFqRSxFQUFTQSxHQUFtQixJQUFWQSxFQUFlQSxFQUFRLEdBQ3RCLE1BQWZ5akUsRUFDSEEsRUFBYyxHQUNKQSxFQUFjLElBQ3hCQSxFQUFjLEdBRWY1b0UsS0FBSzhvRSxHQUFzQixJQUFoQkYsRUFBcUJ6akUsRUFBUSxFQUN4Q25GLEtBQUt3b0UsS0FBTyxFQUFJSSxHQUFlLEVBQy9CNW9FLEtBQUt5b0UsSUFBTUcsRUFDWDVvRSxLQUFLK29FLElBQU0vb0UsS0FBS3dvRSxJQUFNeG9FLEtBQUt5b0UsSUFDM0J6b0UsS0FBS3NHLFVBQXlCLElBQWJ1aUUsS0FDZixHQUNIM21FLEVBQUl5bUUsRUFBTzNtRSxVQUFZLElBQUksSUE0UTVCLE9BelFBRSxFQUFFMEksWUFBYys5RCxFQUNoQnptRSxFQUFFbUUsU0FBVyxTQUFTbkUsR0FDckIsSUFBSWhCLEVBQUlnQixHQUFLLEdBQU1BLEdBQUtsQyxLQUFLOG9FLEdBQzdCLE9BQUk1bUUsRUFBSWxDLEtBQUt3b0UsSUFDTHhvRSxLQUFLc0csU0FBVyxHQUFNcEUsRUFBSSxFQUFLQSxFQUFJbEMsS0FBS3dvRSxLQUFRdG1FLEVBQUtoQixHQUFNZ0IsRUFBSSxFQUFLQSxFQUFJbEMsS0FBS3dvRSxLQUFRdG1FLEVBQUlBLEVBQUlBLEVBQUloQixFQUM5RmdCLEVBQUlsQyxLQUFLK29FLElBQ1ovb0UsS0FBS3NHLFNBQWtCLElBQU5wRSxFQUFVLEVBQUksR0FBS0EsR0FBS0EsRUFBSWxDLEtBQUsrb0UsS0FBTy9vRSxLQUFLd29FLEtBQU90bUUsRUFBS2hCLEdBQU1nQixFQUFJaEIsSUFBTWdCLEdBQUtBLEVBQUlsQyxLQUFLK29FLEtBQU8vb0UsS0FBS3dvRSxLQUFPdG1FLEVBQUlBLEVBQUlBLEVBRXBJbEMsS0FBS3NHLFNBQVcsRUFBSXBGLEdBRTVCeW5FLEVBQU85aUUsS0FBTyxJQUFJOGlFLEVBQU8sR0FBSyxJQUU5QnptRSxFQUFFK1gsT0FBUzB1RCxFQUFPMXVELE9BQVMsU0FBUzJ1RCxFQUFhempFLEVBQU8wakUsR0FDdkQsT0FBTyxJQUFJRixFQUFPQyxFQUFhempFLEVBQU8wakUsS0FXdkMzbUUsR0FOQXNsRSxFQUFjM2lFLEVBQU8sc0JBQXNCLFNBQVM0L0QsRUFBT3VFLEdBQ3pEdkUsRUFBUUEsR0FBUyxFQUNqQnprRSxLQUFLd29FLElBQU0sRUFBSS9ELEVBQ2Z6a0UsS0FBS3lvRSxJQUFNaEUsR0FBU3VFLEVBQWlCLEVBQUksR0FDekNocEUsS0FBSytvRSxJQUFNQyxFQUFpQixFQUFJLEtBQzlCLElBQ1lobkUsVUFBWSxJQUFJLEtBQzlCNEksWUFBYzQ4RCxFQUNoQnRsRSxFQUFFbUUsU0FBVyxTQUFTbkUsR0FNckIsT0FMSUEsRUFBSSxFQUNQQSxFQUFJLEVBQ01BLEdBQUssSUFDZkEsRUFBSSxjQUVLbEMsS0FBS3lvRSxJQUFNdm1FLEVBQUssR0FBS2xDLEtBQUsrb0UsS0FBTy9vRSxLQUFLd29FLEtBRWpEdG1FLEVBQUUrWCxPQUFTdXRELEVBQVl2dEQsT0FBUyxTQUFTd3FELEVBQU91RSxHQUMvQyxPQUFPLElBQUl4QixFQUFZL0MsRUFBT3VFLEtBVy9COW1FLEdBTkF1bEUsRUFBZ0I1aUUsRUFBTyx3QkFBd0IsU0FBUzBPLEVBQU9ELEVBQUt6TixHQUNuRTdGLEtBQUt3b0UsSUFBTXQrRCxLQUFLdVQsSUFBSW5LLEVBQU1DLEdBQzFCdlQsS0FBS3lvRSxJQUFNbjFELEVBQU1DLEVBQ2pCdlQsS0FBSytvRSxJQUFNeDFELEVBQ1h2VCxLQUFLd1MsTUFBUTNNLEtBQ1gsSUFDZTdELFVBQVksSUFBSSxLQUNoQzRJLFlBQWM2OEQsRUFDaEJ2bEUsRUFBRW1FLFNBQVcsU0FBU25FLEdBSXJCLE9BSElsQyxLQUFLd1MsUUFDUnRRLEVBQUlsQyxLQUFLd1MsTUFBTW5NLFNBQVNuRSxLQUVqQmxDLEtBQUsrb0UsSUFBTTcrRCxLQUFLdVUsSUFBSXplLEtBQUt3b0UsSUFBTXRtRSxHQUFLbEMsS0FBSytvRSxLQUFPL29FLEtBQUt5b0UsS0FFOUR2bUUsRUFBRStYLE9BQVN3dEQsRUFBY3h0RCxPQUFTLFNBQVMxRyxFQUFPRCxFQUFLek4sR0FDdEQsT0FBTyxJQUFJNGhFLEVBQWNsMEQsRUFBT0QsRUFBS3pOLEtBK0R0QzNELEdBMURBd2xFLEVBQVk3aUUsRUFBTyxvQkFBb0IsU0FBU2tHLEdBWS9DLElBVkEsSUFTQzhwQixFQUFHbUksRUFBR2lzQyxFQUFNbFUsRUFBTXB4RCxFQUFLdWxFLEVBVHBCQyxHQURKcCtELEVBQU9BLEdBQVEsSUFDRW8rRCxPQUFTLE9BQ3pCdG1FLEVBQUksR0FDSnMrQyxFQUFNLEVBQ05pb0IsRUFBK0IsR0FBckJyK0QsRUFBS3ErRCxRQUFVLElBQ3pCaHBFLEVBQUlncEUsRUFDSkMsR0FBZ0MsSUFBbkJ0K0QsRUFBS3MrRCxVQUNsQkMsR0FBd0IsSUFBZnYrRCxFQUFLdStELE1BQ2RDLEVBQVl4K0QsRUFBS3crRCxvQkFBb0IsSUFBUXgrRCxFQUFLdytELFNBQVcsS0FDN0RDLEVBQXNDLGlCQUFuQnorRCxFQUFhLFNBQWtDLEdBQWhCQSxFQUFLeStELFNBQWlCLEtBRWhFcHBFLEdBQUssR0FDYnkwQixFQUFJdzBDLEVBQVluL0QsS0FBSzJqQixTQUFZLEVBQUl1N0MsRUFBVWhwRSxFQUMvQzQ4QixFQUFJdXNDLEVBQVdBLEVBQVNsakUsU0FBU3d1QixHQUFLQSxFQUVyQ28wQyxFQURhLFNBQVZFLEVBQ0lLLEVBQ2EsUUFBVkwsR0FDVnBVLEVBQU8sRUFBSWxnQyxHQUNHa2dDLEVBQU95VSxFQUNELE9BQVZMLEVBQ0h0MEMsRUFBSUEsRUFBSTIwQyxFQUNMMzBDLEVBQUksSUFDZGtnQyxFQUFXLEVBQUpsZ0MsR0FDT2tnQyxFQUFPLEdBQU15VSxHQUUzQnpVLEVBQWlCLEdBQVQsRUFBSWxnQyxJQUNFa2dDLEVBQU8sR0FBTXlVLEVBRXhCSCxFQUNIcnNDLEdBQU05eUIsS0FBSzJqQixTQUFXbzdDLEVBQWdCLEdBQVBBLEVBQ3JCN29FLEVBQUksRUFDZDQ4QixHQUFZLEdBQVBpc0MsRUFFTGpzQyxHQUFZLEdBQVBpc0MsRUFFRkssSUFDQ3RzQyxFQUFJLEVBQ1BBLEVBQUksRUFDTUEsRUFBSSxJQUNkQSxFQUFJLElBR05uNkIsRUFBRXMrQyxLQUFTLENBQUN0c0IsRUFBRUEsRUFBR21JLEVBQUVBLEdBUXBCLElBTkFuNkIsRUFBRWtrQixNQUFLLFNBQVNsa0IsRUFBR1UsR0FDbEIsT0FBT1YsRUFBRWd5QixFQUFJdHhCLEVBQUVzeEIsS0FHaEJxMEMsRUFBTSxJQUFJZCxFQUFVLEVBQUcsRUFBRyxNQUMxQmhvRSxFQUFJZ3BFLElBQ0tocEUsR0FBSyxHQUNidUQsRUFBTWQsRUFBRXpDLEdBQ1I4b0UsRUFBTSxJQUFJZCxFQUFVemtFLEVBQUlreEIsRUFBR2x4QixFQUFJcTVCLEVBQUdrc0MsR0FHbkNscEUsS0FBSzZRLE1BQVEsSUFBSXUzRCxFQUFVLEVBQUcsRUFBYyxJQUFWYyxFQUFJNW5FLEVBQVc0bkUsRUFBTUEsRUFBSW40RCxTQUN6RCxJQUNXL08sVUFBWSxJQUFJLEtBQzVCNEksWUFBYzg4RCxFQUNoQnhsRSxFQUFFbUUsU0FBVyxTQUFTbkUsR0FDckIsSUFBSWduRSxFQUFNbHBFLEtBQUs2USxNQUNmLEdBQUkzTyxFQUFJZ25FLEVBQUk1bkUsRUFBRyxDQUNkLEtBQU80bkUsRUFBSW40RCxNQUFRN08sR0FBS2duRSxFQUFJNW5FLEdBQzNCNG5FLEVBQU1BLEVBQUluNEQsS0FFWG00RCxFQUFNQSxFQUFJbm1DLFVBRVYsS0FBT21tQyxFQUFJbm1DLE1BQVE3Z0MsR0FBS2duRSxFQUFJNW5FLEdBQzNCNG5FLEVBQU1BLEVBQUlubUMsS0FJWixPQURBL2lDLEtBQUs2USxNQUFRcTRELEVBQ0xBLEVBQUluNkQsR0FBTTdNLEVBQUlnbkUsRUFBSTVuRSxHQUFLNG5FLEVBQUliLElBQU9hLEVBQUl6b0UsR0FFL0N5QixFQUFFK1gsT0FBUyxTQUFTbFAsR0FDbkIsT0FBTyxJQUFJMjhELEVBQVUzOEQsSUFFdEIyOEQsRUFBVTdoRSxLQUFPLElBQUk2aEUsRUFJckJJLEVBQU0sU0FDTDFqQyxFQUFRLGFBQWEsU0FBU2xpQyxHQUM3QixPQUFJQSxFQUFJLEVBQUksS0FDSixPQUFTQSxFQUFJQSxFQUNWQSxFQUFJLEVBQUksS0FDWCxRQUFVQSxHQUFLLElBQU0sTUFBUUEsRUFBSSxJQUM5QkEsRUFBSSxJQUFNLEtBQ2IsUUFBVUEsR0FBSyxLQUFPLE1BQVFBLEVBQUksTUFFbkMsUUFBVUEsR0FBSyxNQUFRLE1BQVFBLEVBQUksV0FFM0NraUMsRUFBUSxZQUFZLFNBQVNsaUMsR0FDNUIsT0FBS0EsRUFBSSxFQUFJQSxHQUFLLEVBQUksS0FDZCxFQUFLLE9BQVNBLEVBQUlBLEVBQ2ZBLEVBQUksRUFBSSxLQUNYLEdBQUssUUFBVUEsR0FBSyxJQUFNLE1BQVFBLEVBQUksS0FDbkNBLEVBQUksSUFBTSxLQUNiLEdBQUssUUFBVUEsR0FBSyxLQUFPLE1BQVFBLEVBQUksT0FFeEMsR0FBSyxRQUFVQSxHQUFLLE1BQVEsTUFBUUEsRUFBSSxZQUVoRGtpQyxFQUFRLGVBQWUsU0FBU2xpQyxHQUMvQixJQUFJdW5FLEVBQVV2bkUsRUFBSSxHQWVsQixPQWJDQSxFQURHdW5FLEVBQ0MsRUFBUyxFQUFKdm5FLEVBRUEsRUFBSkEsRUFBUyxHQUVQLEVBQUksS0FDWEEsR0FBSSxPQUFTQSxFQUViQSxFQURVQSxFQUFJLEVBQUksS0FDZCxRQUFVQSxHQUFLLElBQU0sTUFBUUEsRUFBSSxJQUMzQkEsRUFBSSxJQUFNLEtBQ2hCLFFBQVVBLEdBQUssS0FBTyxNQUFRQSxFQUFJLE1BRWxDLFFBQVVBLEdBQUssTUFBUSxNQUFRQSxFQUFJLFFBRWpDdW5FLEVBQW1CLElBQVQsRUFBSXZuRSxHQUFlLEdBQUpBLEVBQVUsT0FNNUM0bEUsRUFBTSxPQUNMMWpDLEVBQVEsV0FBVyxTQUFTbGlDLEdBQzNCLE9BQU9nSSxLQUFLOCtCLEtBQUssR0FBSzltQyxHQUFRLEdBQUtBLE1BRXBDa2lDLEVBQVEsVUFBVSxTQUFTbGlDLEdBQzFCLFFBQVNnSSxLQUFLOCtCLEtBQUssRUFBSzltQyxFQUFJQSxHQUFNLE1BRW5Da2lDLEVBQVEsYUFBYSxTQUFTbGlDLEdBQzdCLE9BQVNBLEdBQUcsR0FBSyxHQUFNLElBQU9nSSxLQUFLOCtCLEtBQUssRUFBSTltQyxFQUFJQSxHQUFLLEdBQUssSUFBT2dJLEtBQUs4K0IsS0FBSyxHQUFLOW1DLEdBQUssR0FBS0EsR0FBSyxPQXFCakc0bEUsRUFBTSxXQWZOSCxFQUFpQixTQUFTOWxFLEVBQUcwSSxFQUFHNmtCLEdBQy9CLElBQUk3RyxFQUFJMWpCLEVBQU8sVUFBWWhELEdBQUcsU0FBUzZuRSxFQUFXQyxHQUNoRDNwRSxLQUFLd29FLElBQU9rQixHQUFhLEVBQUtBLEVBQVksRUFDMUMxcEUsS0FBS3lvRSxLQUFPa0IsR0FBVXY2QyxJQUFRczZDLEVBQVksRUFBSUEsRUFBWSxHQUMxRDFwRSxLQUFLK29FLElBQU0vb0UsS0FBS3lvRSxJQUFNYixHQUFRMTlELEtBQUswL0QsS0FBSyxFQUFJNXBFLEtBQUt3b0UsTUFBUSxHQUN6RHhvRSxLQUFLeW9FLElBQU1iLEVBQU81bkUsS0FBS3lvRSxPQUNyQixHQUNIdm1FLEVBQUlxbUIsRUFBRXZtQixVQUFZLElBQUksSUFNdkIsT0FMQUUsRUFBRTBJLFlBQWMyZCxFQUNoQnJtQixFQUFFbUUsU0FBV2tFLEVBQ2JySSxFQUFFK1gsT0FBUyxTQUFTeXZELEVBQVdDLEdBQzlCLE9BQU8sSUFBSXBoRCxFQUFFbWhELEVBQVdDLElBRWxCcGhELElBR1EsY0FBYyxTQUFTcm1CLEdBQ3JDLE9BQU9sQyxLQUFLd29FLElBQU10K0QsS0FBS21SLElBQUksR0FBSSxHQUFLblosR0FBS2dJLEtBQUttckQsS0FBTW56RCxFQUFJbEMsS0FBSytvRSxLQUFPL29FLEtBQUt5b0UsS0FBUSxJQUMvRSxJQUNIZCxFQUFlLGFBQWEsU0FBU3psRSxHQUNwQyxPQUFTbEMsS0FBS3dvRSxJQUFNdCtELEtBQUttUixJQUFJLEVBQUcsSUFBTW5aLEdBQUssSUFBTWdJLEtBQUttckQsS0FBTW56RCxFQUFJbEMsS0FBSytvRSxLQUFPL29FLEtBQUt5b0UsT0FDL0UsSUFDSGQsRUFBZSxnQkFBZ0IsU0FBU3psRSxHQUN2QyxPQUFTQSxHQUFLLEdBQUssRUFBYWxDLEtBQUt3b0UsSUFBTXQrRCxLQUFLbVIsSUFBSSxFQUFHLElBQU1uWixHQUFLLElBQU1nSSxLQUFLbXJELEtBQU1uekQsRUFBSWxDLEtBQUsrb0UsS0FBTy9vRSxLQUFLeW9FLE1BQS9FLEdBQXVGem9FLEtBQUt3b0UsSUFBTXQrRCxLQUFLbVIsSUFBSSxHQUFJLElBQUtuWixHQUFLLElBQU1nSSxLQUFLbXJELEtBQU1uekQsRUFBSWxDLEtBQUsrb0UsS0FBTy9vRSxLQUFLeW9FLEtBQVEsR0FBTSxJQUNwTSxNQUtKWCxFQUFNLE9BQ0wxakMsRUFBUSxXQUFXLFNBQVNsaUMsR0FDM0IsT0FBTyxFQUFJZ0ksS0FBS21SLElBQUksR0FBSSxHQUFLblosTUFFOUJraUMsRUFBUSxVQUFVLFNBQVNsaUMsR0FDMUIsT0FBT2dJLEtBQUttUixJQUFJLEVBQUcsSUFBTW5aLEVBQUksSUFBTSxRQUVwQ2tpQyxFQUFRLGFBQWEsU0FBU2xpQyxHQUM3QixPQUFTQSxHQUFLLEdBQUssRUFBSyxHQUFNZ0ksS0FBS21SLElBQUksRUFBRyxJQUFNblosRUFBSSxJQUFNLElBQU8sRUFBSWdJLEtBQUttUixJQUFJLEdBQUksSUFBTW5aLEVBQUksU0FNOUY0bEUsRUFBTSxPQUNMMWpDLEVBQVEsV0FBVyxTQUFTbGlDLEdBQzNCLE9BQU9nSSxLQUFLbXJELElBQUluekQsRUFBSTJsRSxNQUVyQnpqQyxFQUFRLFVBQVUsU0FBU2xpQyxHQUMxQixPQUFpQyxFQUF6QmdJLEtBQUtrckQsSUFBSWx6RCxFQUFJMmxFLE1BRXRCempDLEVBQVEsYUFBYSxTQUFTbGlDLEdBQzdCLE9BQVEsSUFBT2dJLEtBQUtrckQsSUFBSWxyRCxLQUFLODZDLEdBQUs5aUQsR0FBSyxPQUl6QzJDLEVBQU8sb0JBQXFCLENBQzFCK2tCLEtBQUssU0FBU3puQixHQUNiLE9BQU8sSUFBS3VELElBQUl2RCxNQUVmLEdBR0p3RCxFQUFTMG5CLEVBQUVzN0MsT0FBUSxTQUFVLFNBQzdCaGpFLEVBQVMraEUsRUFBVyxZQUFhLFNBQ2pDL2hFLEVBQVM2aEUsRUFBYSxjQUFlLFNBRTlCa0IsS0FFTCxHQUVHLElBQUksRUFBTyxJQUFRQSxLQUNmbUIsRUFBVSxJQUFRQSxRQUNsQkMsRUFBUyxJQUFRQSxPQUNqQixFQUFZLElBQVFwQyxVQUNwQixFQUFTLElBQVFpQixPQUNqQixFQUFjLElBQVFuQixZQUN0QnVDLEVBQU8sSUFBUUEsS0FDZkMsRUFBTyxJQUFRQSxLQUNmQyxFQUFPLElBQVFBLEtBQ2YsRUFBZ0IsSUFBUXhDLGNDNVZ4QixFQUFXLEVBQ3RCLEVBQVN5QyxlQUFpQixDQUFDLEVBQWMsRUFBYSxFQUFXak4sRUFBWTRILEVBQWMzSCxFQUFrQk8sRUFBMkIsRUFBTW9NLEVBQVNDLEVBQVEsRUFBVyxFQUFRLEVBQWFDLEVBQU1DLEVBQU1DLEVBQU0sR0MxQjFNLElBQU1FLEVBQVksQ0FDckJDLGFBQWMsR0FFZEMsV0FBWSxHQUNaQyxhQUFjLEdBQ2RDLFVBQVcsSUFDWEMscUJBQXNCLEdBQ3RCQyxNQUFPLEVBQ1A1a0UsS0FBTSxpQkFDTjZrRSxtQkFBb0IsR0FDcEJDLGdCQUFpQixHQ1ZSQyxFQUFVLENBQ25CdlgsYUFBYyxTQUFTemlDLEVBQUlpNkMsR0FDdkIsT0FBSWo2QyxFQUFHd2lDLGFBQWF5WCxHQUNUajZDLEVBQUd5aUMsYUFBYXdYLEtBQ2hCajZDLEVBQUd3aUMsYUFBSCxlQUF3QnlYLEtBQ3hCajZDLEVBQUd5aUMsYUFBSCxlQUF3QndYLEtBSXZDelgsYUFBYyxTQUFTeGlDLEVBQUlpNkMsR0FDdkIsU0FBSWo2QyxFQUFHd2lDLGFBQWF5WCxLQUFRajZDLEVBQUd3aUMsYUFBSCxlQUF3QnlYLE1BS3hEQyxhQUFjLFNBQVNDLEdBQW1CLElBQWIvbkIsRUFBYSx1REFBSCxFQUUvQjNnRCxPQUFPMm9FLFlBQWMzb0UsT0FBTzRvRSxTQUFXdm9FLFNBQVM4a0QsS0FBS29DLGVBRXJENUcsRUFBVSxHQUVkLElBQU1rb0IsRUFBV0gsRUFBSzlyQix3QkFDdEIsT0FBT2lzQixFQUFTeG9CLElBQU1NLEdBQVczZ0QsT0FBTzJvRSxhQUFldG9FLFNBQVM0eEIsZ0JBQWdCaXpCLGVBRXBGNGpCLFVBQVcsU0FBU0MsR0FFaEIsSUFHSUMsRUFIT0QsRUFBV0UsVUFHTG5vRSxNQUFNLEtBRW5Cb29FLEVBQWMsR0FDbEJGLEVBQU10aEQsU0FBUSxTQUFDeWhELEdBQ1gsSUFBMkIsSUFBdkJBLEVBQUtyOEQsUUFBUSxLQUFhLENBQzFCLElBQUlzOEQsRUFBa0JELEVBQUtyb0UsTUFBTSxLQUNqQ3NvRSxFQUFnQjFoRCxTQUFRLFNBQUMyaEQsRUFBSXRyRSxHQUN6QixJQUFJdXJFLEVBQWNELEVBQ2R0ckUsSUFBTXFyRSxFQUFnQnJvRSxPQUFTLElBQy9CdW9FLEdBQWUsS0FFbkJKLEVBQVkvbkUsS0FBS21vRSxXQUdyQkosRUFBWS9uRSxLQUFLZ29FLE1BS3pCLElBQUlwSCxFQUFNLEdBQ1ZtSCxFQUFZeGhELFNBQVEsU0FBQ3loRCxHQUNqQixJQUFJSSxHQUFpQyxJQUF2QkosRUFBS3I4RCxRQUFRLEtBQWMsR0FBSyxJQUM5Q2kxRCxHQUFPLFNBQUosT0FBYW9ILEdBQWIsT0FBb0JJLEVBQXBCLGNBSVBSLEVBQVdTLFVBQVl6SCxFQUduQkEsRUFBTSxHQUFWLElBQ0kxaEIsRUFBTSxLQUNWMG9CLEVBQVd4NEQsaUJBQWlCLFFBQVFtWCxTQUFRLFNBQUN5aEQsR0FFN0IsT0FBUjlvQixJQUVBQSxFQUFNOG9CLEVBQUtNLFVBRVgxSCxFQUFNLHdEQUlOMWhCLEVBQU04b0IsRUFBS00sWUFFWDFILEdBQU8scUVBRVAxaEIsRUFBTThvQixFQUFLTSxXQUVmLElBQUlGLEdBQTJDLElBQWpDSixFQUFLRixVQUFVbjhELFFBQVEsS0FBYyxHQUFLLElBRXhEaTFELEdBQU9vSCxFQUFLRixVQUFZTSxLQUc1QnhILEdBQU8sVUFHUGdILEVBQVdTLFVBQVl6SCxJLDBLQ21KaEIySCxFLFdBbE9YLFdBQVluN0MsRUFBSW5wQixFQUFPdWtFLEVBQVFDLEdBcUIzQixHLDRGQXJCNEMsU0FDNUNqc0UsS0FBSzR3QixHQUFLQSxFQUNWNXdCLEtBQUt5SCxNQUFRQSxFQUNiekgsS0FBS2lzRSxnQkFBa0JBLEVBQ3ZCanNFLEtBQUtxcUUsV0FBYUYsRUFBVUUsV0FDeEJPLEVBQVF4WCxhQUFhcHpELEtBQUs0d0IsR0FBSSxxQkFDOUI1d0IsS0FBS3FxRSxXQUFhOTFELFdBQVdxMkQsRUFBUXZYLGFBQWFyekQsS0FBSzR3QixHQUFJLHFCQUUvRDV3QixLQUFLa3NFLFNBQVcvQixFQUFVRyxhQUN0Qk0sRUFBUXhYLGFBQWFwekQsS0FBSzR3QixHQUFJLHVCQUM5QjV3QixLQUFLa3NFLFNBQVczM0QsV0FBV3EyRCxFQUFRdlgsYUFBYXJ6RCxLQUFLNHdCLEdBQUksdUJBRTdENXdCLEtBQUt1cUUsVUFBWUosRUFBVUksVUFDdkJLLEVBQVF4WCxhQUFhcHpELEtBQUs0d0IsR0FBSSxvQkFDOUI1d0IsS0FBS3VxRSxVQUFZaDJELFdBQVdxMkQsRUFBUXZYLGFBQWFyekQsS0FBSzR3QixHQUFJLG9CQUU5RDV3QixLQUFLeXFFLE1BQVFOLEVBQVVNLE1BQ25CRyxFQUFReFgsYUFBYXB6RCxLQUFLNHdCLEdBQUksZUFDOUI1d0IsS0FBS3lxRSxNQUFRbDJELFdBQVdxMkQsRUFBUXZYLGFBQWFyekQsS0FBSzR3QixHQUFJLGVBRTFENXdCLEtBQUs2RixLQUFPeEQsT0FBTzhwRSxXQUFXdmlELEtBQUt1Z0QsRUFBVXRrRSxNQUN6QytrRSxFQUFReFgsYUFBYXB6RCxLQUFLNHdCLEdBQUksWUFBYSxDQUMzQyxJQUFNL3FCLEVBQU94RCxPQUFPOHBFLFdBQVd2aUQsS0FBS2doRCxFQUFRdlgsYUFBYXJ6RCxLQUFLNHdCLEdBQUksYUFDOUQvcUIsSUFDQTdGLEtBQUs2RixLQUFPQSxHQUdwQjdGLEtBQUswcUUsbUJBQXFCUCxFQUFVTyxtQkFDaENFLEVBQVF4WCxhQUFhcHpELEtBQUs0d0IsR0FBSSwrQkFDOUI1d0IsS0FBSzBxRSxtQkFBcUJuMkQsV0FBVzQxRCxFQUFVTyxxQkFFbkQxcUUsS0FBSzJxRSxnQkFBa0JSLEVBQVVRLGdCQUM3QkMsRUFBUXhYLGFBQWFwekQsS0FBSzR3QixHQUFJLDRCQUM5QjV3QixLQUFLMnFFLGdCQUFrQnAyRCxXQUFXNDFELEVBQVVRLGtCQUc1QzNxRSxLQUFLZ3NFLE9BRExBLEdBQTRCLGlCQUFYQSxHQUFrQyxLQUFYQSxFQUMxQkEsRUFFQSxPQUVsQmhzRSxLQUFLNHdCLEdBQUd0ZixNQUFNczBDLFFBQVUsRSx3REFHbkIsV0FJTCxHQURBdjdDLGFBQWFySyxLQUFLb3NFLGVBQ2J4QixFQUFRRSxhQUFhOXFFLEtBQUs0d0IsSUFBL0IsQ0FNQTV3QixLQUFLNHdCLEdBQUd0ZixNQUFNczBDLFFBQVUsS0FDeEIsSUFBTXltQixFQUFVcnNFLEtBQUtnc0UsT0FBTzdvRSxNQUFNLEtBQzVCbXBFLEVBQWFELEVBQVFFLFFBQ3JCQyxFQUFTSCxFQUFRM25FLEtBQUssS0FDVCxTQUFmNG5FLEVBQ0F0c0UsS0FBS3lzRSxLQUFLRCxHQUNZLFNBQWZGLEVBQ1B0c0UsS0FBSzI2RCxLQUFLNlIsR0FDWSxVQUFmRixHQUEwQkUsRUFDakN4c0UsS0FBSzBzRSxTQUFTRixHQUNRLFNBQWZGLEVBQ1B0c0UsS0FBSzJzRSxLQUFLSCxHQUVWeHNFLEtBQUs0c0UsS0FBS0osUUFsQlZ4c0UsS0FBS29zRSxjQUFnQjVoRSxZQUFXLFdBQzVCLEVBQUtxaUUsV0FDTixPLDJCQW9CTkMsR0FDRCxJQUFJQyxFQUFhLENBQUVsNEMsRUFBRyxFQUFHbUksRUFBRyxFQUFHNG9CLFFBQVMsR0FDeEMsR0FBeUIsaUJBQWRrbkIsRUFDUCxPQUFRQSxHQUNKLElBQUssT0FDREMsRUFBV2w0QyxFQUFJNzBCLEtBQUtrc0UsU0FDcEIsTUFDSixJQUFLLFFBQ0RhLEVBQVdsNEMsR0FBSzcwQixLQUFLa3NFLFNBQ3JCLE1BQ0osSUFBSyxPQUNEYSxFQUFXL3ZDLEdBQUtoOUIsS0FBS2tzRSxTQUNyQixNQUNKLElBQUssS0FDRGEsRUFBVy92QyxFQUFJaDlCLEtBQUtrc0UsU0FDcEIsTUFDSixRQUNJYSxFQUFXL3ZDLEVBQUksRUFHM0JtaUIsRUFBU3ZqQyxPQUFPNWIsS0FBSzR3QixHQUFJNXdCLEtBQUt5cUUsTUFBT3NDLEVBQVksQ0FDN0NubkIsUUFBUyxFQUNUNW9CLEVBQUcsRUFDSG5JLEVBQUcsRUFDSGh2QixLQUFNN0YsS0FBSzZGLEtBQ1h1RixPQUFRLEVBQUlwTCxLQUFLeUgsT0FBU3pILEtBQUtxcUUsV0FDL0JuMEQsV0FBWWxXLEtBQUtpc0UsZ0JBQ2pCZSxXQUFZLGtCLDZCQUlLLElBQXBCRixFQUFvQix1REFBUixPQUNUQyxFQUFhL3NFLEtBQUtpdEUsU0FBUyxLQUMzQkMsRUFBV2x0RSxLQUFLaXRFLFNBQVMsR0FDN0IsT0FBUUgsR0FDSixJQUFLLEtBQ0RDLEVBQWEvc0UsS0FBS2l0RSxTQUFTLElBQUssRUFBRyxFQUFHLEdBQ3RDQyxFQUFXbHRFLEtBQUtpdEUsU0FBUyxFQUFHLEVBQUcsRUFBRyxHQUNsQyxNQUNKLElBQUssT0FDREYsRUFBYS9zRSxLQUFLaXRFLFNBQVMsRUFBRyxFQUFHLElBQUssR0FDdENDLEVBQVdsdEUsS0FBS2l0RSxTQUFTLEVBQUcsRUFBRyxFQUFHLEdBQ2xDLE1BQ0osSUFBSyxPQUNERixFQUFhL3NFLEtBQUtpdEUsU0FBUyxFQUFHLEVBQUcsRUFBRyxLQUNwQ0MsRUFBV2x0RSxLQUFLaXRFLFNBQVMsRUFBRyxFQUFHLEVBQUcsR0FDbEMsTUFDSixJQUFLLFFBQ0wsUUFDSUYsRUFBYS9zRSxLQUFLaXRFLFNBQVMsRUFBRyxJQUFLLEdBQ25DQyxFQUFXbHRFLEtBQUtpdEUsU0FBUyxFQUFHLEVBQUcsR0FHdkNDLEVBQVM5aEUsT0FBUyxFQUFJcEwsS0FBS3lILE9BQVN6SCxLQUFLcXFFLFdBQ3pDNkMsRUFBU3JuRSxLQUFPN0YsS0FBSzZGLEtBQ3JCcW5FLEVBQVNoM0QsV0FBYWxXLEtBQUtpc0UsZ0JBQzNCOXNCLEVBQVN2akMsT0FBTzViLEtBQUs0d0IsR0FBSTV3QixLQUFLeXFFLE1BQU9zQyxFQUFZRyxLLDZCQUc5QixJQUFsQkosRUFBa0IsdURBQU4sS0FDUHRoRCxFQUFVeHJCLEtBQUs0d0IsR0FBR3U4QyxjQUV4QjNoRCxFQUFRbGEsTUFBTTg3RCxTQUFXLFNBQ3VCLFdBQTVDL21CLGlCQUFpQnJtRCxLQUFLNHdCLEdBQUksTUFBTXJDLFFBQ2hDL0MsRUFBUWxhLE1BQU1pZCxRQUFVLGVBRXhCL0MsRUFBUWxhLE1BQU1pZCxRQUFVODNCLGlCQUFpQnJtRCxLQUFLNHdCLEdBQUksTUFBTXJDLFFBRzFDLFFBQWR1K0MsRUFDQTN0QixFQUFTdmpDLE9BQ0w1YixLQUFLNHdCLEdBQ0w1d0IsS0FBS3lxRSxNQUNMLENBQUU3a0IsUUFBUyxFQUFHcVMsTUFBTyxHQUNyQixDQUNJclMsUUFBUyxFQUNUcVMsTUFBT2o0RCxLQUFLdXFFLFVBQ1puL0QsT0FBUSxFQUFJcEwsS0FBS3lILE9BQVN6SCxLQUFLcXFFLFdBQy9CbjBELFdBQVlsVyxLQUFLaXNFLGdCQUNqQnBtRSxLQUFNN0YsS0FBSzZGLEtBRVhtbkUsV0FBWSxZQUlwQjd0QixFQUFTdmpDLE9BQ0w1YixLQUFLNHdCLEdBQ0w1d0IsS0FBS3lxRSxNQUNMLENBQUU3a0IsUUFBUyxFQUFHcVMsTUFBT2o0RCxLQUFLdXFFLFdBQzFCLENBQ0kza0IsUUFBUyxFQUNUcVMsTUFBTyxFQUNQN3NELE9BQVEsRUFBSXBMLEtBQUt5SCxPQUFTekgsS0FBS3FxRSxXQUMvQm4wRCxXQUFZbFcsS0FBS2lzRSxnQkFDakJwbUUsS0FBTTdGLEtBQUs2RixLQUNYbW5FLFdBQVkscUIsMkJBTXZCUixHQUFRLFdBQ0hhLEVBQWtCcnRFLEtBQUs0d0IsR0FBR2k3QyxVQUNoQ2pCLEVBQVFPLFVBQVVuckUsS0FBSzR3QixJQUN2QixJQUFNMDhDLEVBQVF0dEUsS0FBSzR3QixHQUFHaGUsaUJBQWlCLGFBQ2pDNjNELEVBQVF6cUUsS0FBS3lxRSxNQUFRNkMsRUFBTWxxRSxPQUFTLEVBQ3BDbXFFLEdBQWlCLEVBQUl2dEUsS0FBS3lILE9BQVN6SCxLQUFLcXFFLFdBQzlDaUQsRUFBTXZqRCxTQUFRLFNBQUN5akQsRUFBTS9sRSxHQUNqQixJQUFJZ21FLEVBQWtCLEVBQ2hCQyxFQUFTRixFQUFLRyxjQUFjLG1CQUNsQ0gsRUFBS2w4RCxNQUFNaWQsUUFBVSxRQUNOLGNBQVhpK0MsSUFDQWdCLEVBQUtsOEQsTUFBTTg3RCxTQUFXLFNBQ3RCSyxFQUFrQixHQUV0QkMsRUFBT3A4RCxNQUFNaWQsUUFBVSxlQU92QjR3QixFQUFTdmpDLE9BQ0w4eEQsRUFDQWpELEVBQ0EsQ0FBRXp0QyxFQUFHMHdDLEVBQU85akIsYUFBZSxFQUFLK2dCLGdCQUFpQi9rQixRQUFTNm5CLEdBQzFELENBQ0k3bkIsUUFBUyxFQUNUNW9CLEVBQUcsRUFDSG5JLEVBQUcsRUFDSGh2QixLQUFNLEVBQUtBLEtBQ1h1RixNQUFPbWlFLEVBQWdCOWxFLEVBQVEsRUFBSzRpRSxXQUNwQ24wRCxXQWhCUyxTQUFDOVYsR0FDVkEsSUFBTWt0RSxFQUFNbHFFLE9BQVMsSUFDckIsRUFBS3d0QixHQUFHaTdDLFVBQVl3QixFQUNwQixFQUFLcEIsb0JBY0w5MUQsaUJBQWtCLENBQUMxTyxHQUNuQnVsRSxXQUFZLGEsaUNBTXVCLElBQTFDdHFCLEVBQTBDLHVEQUFwQyxFQUFHQyxFQUFpQyx1REFBekIsRUFBR0MsRUFBc0IsdURBQWIsRUFBR2xmLEVBQVUsdURBQUgsRUFDdENrcUMsRUFBUSxDQUNWWCxTQUFVLFNBQUYsT0FBV3ZxQixFQUFYLGFBQW1CQyxFQUFuQixhQUE2QkMsRUFBN0IsYUFBd0NsZixFQUF4QyxNQUVSbXFDLGVBQWdCLFNBQUYsT0FBV25yQixFQUFYLGFBQW1CQyxFQUFuQixhQUE2QkMsRUFBN0IsYUFBd0NsZixFQUF4QyxPQUVsQixPQUFPa3FDLEksK0JBR0ZqdEUsR0FBTSxXQUNYNkosWUFBVyxXQUNQLEVBQUtvbUIsR0FBR2s5QyxVQUFVL2hFLElBQUlwTCxHQUN0QixFQUFLc3JFLHFCQUNMLEVBQUlqc0UsS0FBS3lILE9BQVN6SCxLQUFLcXFFLGlCLGdDQ2pPdEIwRCxFQUFrQixDQUMzQixpQkFBa0IsU0FBQ245QyxHQUNmQSxFQUFHdGYsTUFBTXMwQyxRQUFVLEksMmZBSTNCbW9CLEVBQWdCLGdCQUFrQixTQUFDbjlDLEVBQUk0c0IsR0FDbkM1c0IsRUFBR3RmLE1BQU1zMEMsUUFBVSxFQUNuQmgxQixFQUFHdGYsTUFBTTA4RCxXQUFhLE9BQ3RCcDlDLEVBQUdrOUMsVUFBVS9oRSxJQUFJLG9CQUNqQjZrQixFQUFHazlDLFVBQVUvaEUsSUFBSSxhQUNqQixJQUFJMm9CLEVBQVEsRUFDUnU1QyxFQUFnQixFQUNkLzNELEVBQWEsYUFDZiszRCxJQUNzQnY1QyxJQUNsQjlELEVBQUdrOUMsVUFBVXBSLE9BQU8sYUFDcEI5ckMsRUFBR2s5QyxVQUFVL2hFLElBQUksa0JBR3pCeXhDLEVBQVN6ekIsU0FBUSxTQUFDeWpELEVBQU0vbEUsR0FDcEIsSUFBSXVrRSxFQUFTLEdBQ2J0M0MsSUFDSWsyQyxFQUFReFgsYUFBYW9hLEVBQU0sZ0JBQzNCeEIsRUFBU3BCLEVBQVF2WCxhQUFhbWEsRUFBTSxlQUU1QixJQUFJekIsRUFBV3lCLEVBQU0vbEUsRUFBT3VrRSxFQUFROTFELEdBQzVDMjJELGEsSUN1REdxQixFLFdBaEZYLFdBQVl0OUMsR0FBSSxZLDRGQUFBLFNBQ1o1d0IsS0FBSzR3QixHQUFLQSxFQUVOZzZDLEVBQVF4WCxhQUFhcHpELEtBQUs0d0IsR0FBSSwrQkFDOUI1d0IsS0FBS211RSxpQkFBbUI1NUQsV0FBV3EyRCxFQUFRdlgsYUFBYXJ6RCxLQUFLNHdCLEdBQUksZ0NBRWpFNXdCLEtBQUttdUUsaUJBQW1CaEUsRUFBVUsscUJBRXRDLElBQU00RCxFQUFTeDlDLEVBQUdoZSxpQkFBaUIscUNBQ25DNVMsS0FBS291RSxPQUFTLEVBQUlBLEdBQVF2NkQsUUFBTyxTQUFDdEQsR0FDOUIsT0FBT0EsRUFBTTJ0QyxRQUFRLHVCQUF5QixFQUFLdHRCLE1BRXZENXdCLEtBQUtxdUUsaUJBQW1CLEVBQ3hCcnVFLEtBQUtzdUUsYUFBYyxFQUVuQixJQUVNQyxFQUFtQixFQUZSdnVFLEtBQUs0d0IsR0FBR2hlLGlCQUFpQixrQ0FFSGlCLFFBQU8sU0FBQ3RELEdBQzNDLE9BQU9BLEVBQU0ydEMsUUFBUSx1QkFBeUIsRUFBS3R0QixNQUd2RDV3QixLQUFLdzlDLFNBQVcrd0IsRUFDaEJ2dUUsS0FBS3c5QyxTQUFTenpCLFNBQVEsU0FBQ3lqRCxFQUFNL2xFLEdBQ3JCbWpFLEVBQVF4WCxhQUFhb2EsRUFBTSxtQkFDM0JBLEVBQUtnQixNQUFRaDZELFNBQVNvMkQsRUFBUXZYLGFBQWFtYSxFQUFNLG9CQUVqREEsRUFBS2dCLE1BQVEsRUFBS2h4QixTQUFTcDZDLE9BQVNxRSxLQUc1Q3pILEtBQUt3OUMsU0FBU3oyQixNQUFLLFNBQUNsa0IsRUFBR1UsR0FBSixPQUFXVixFQUFFMnJFLE1BQVFqckUsRUFBRWlyRSxNQUFRLEdBQUssS0FDdkR4dUUsS0FBS3l1RSxTQUFXLFdBQ1osRUFBSzc5QyxHQUFHazlDLFVBQVUvaEUsSUFBSSxXQUV0QjYrRCxFQUFReFgsYUFBYXhpQyxFQUFJLFFBQ3VDLG1CQUFyRG05QyxFQUFnQm5ELEVBQVF2WCxhQUFhemlDLEVBQUksVUFDaEQ1d0IsS0FBS3l1RSxTQUFXVixFQUFnQm5ELEVBQVF2WCxhQUFhemlDLEVBQUksUyx1REFNN0RnNkMsRUFBUUUsYUFBYTlxRSxLQUFLNHdCLEdBQUl2dUIsT0FBTzJvRSxjQUNyQ2hyRSxLQUFLMHVFLGNBR0oxdUUsS0FBS3N1RSxhQUNOdHVFLEtBQUtxdUUsbUJBQXFCcnVFLEtBQUtvdUUsT0FBT2hyRSxRQUN0Q3duRSxFQUFRRSxhQUFhOXFFLEtBQUs0d0IsR0FBSXZ1QixPQUFPMm9FLGFBQWVockUsS0FBS211RSxtQkFFekRudUUsS0FBSzZzRSxXLCtCQUlKLFdBQ0w3c0UsS0FBS3N1RSxhQUFjLEVBQ25COWpFLFlBQVcsV0FDUCxFQUFLaWtFLFNBQVMsRUFBSzc5QyxHQUFJLEVBQUs0c0IsWUFDSixJQUF6QjJzQixFQUFVQyxnQix5Q0FJYnBxRSxLQUFLcXVFLG1CQUdMcnVFLEtBQUtvRSxVLG1DQUdJLFdBQ1RwRSxLQUFLb3VFLE9BQU9ya0QsU0FBUSxTQUFDNGtELEdBQ2pCLEdBQUkvRCxFQUFReFgsYUFBYXViLEVBQUssWUFBYSxDQUN2QyxJQUFNN2pELEVBQU04L0MsRUFBUXZYLGFBQWFzYixFQUFLLFlBQ3RDQSxFQUFJblksZ0JBQWdCLFlBQ3BCbVksRUFBSW5ZLGdCQUFnQixpQkFDcEJtWSxFQUFJem5FLGlCQUFpQixPQUFRLEVBQUswbkUsaUJBQWlCaHRFLEtBQUssSUFDeEQrc0UsRUFBSXpuRSxpQkFBaUIsUUFBUyxFQUFLMG5FLGlCQUFpQmh0RSxLQUFLLElBQ3pEK3NFLEVBQUlsYixhQUFhLE1BQU8zb0MsWSwwTUNyRHpCK2pELEUsV0F4QlgsYUFBYyxZLDRGQUFBLFNBQ1Y3dUUsS0FBSzJ4QixPQUFTLEdBQ2QzeEIsS0FBSzh1RSxTQUNMenNFLE9BQU82RSxpQkFBaUIsVUFBVSxXQUM5QixFQUFLOUMsV0FFVHBFLEtBQUtvRSxRLHVEQUlMcEUsS0FBSzJ4QixPQUFPNUgsU0FBUSxTQUFDeWpELEdBQ2pCQSxFQUFLcHBFLGEsK0JBSUosV0FDTHBFLEtBQUsrdUUsSUFBTXJzRSxTQUFTa1EsaUJBQWlCLGlFQUNyQzVTLEtBQUsrdUUsSUFBSWhsRCxTQUFRLFNBQUN5akQsR0FDZEEsRUFBSy9aLGFBQWEsa0JBQWtCLEdBQ3BDLEVBQUs5aEMsT0FBT251QixLQUFLLElBQUkwcUUsRUFBZVYsT0FFeEN4dEUsS0FBS29FLGEsZ0NDeEJiLGdRQUd3QixvQkFBYjFCLFVBQThDLG9CQUFYTCxTQUN0Q0EsT0FBT2cxQyxXQUFhQSxTQUFTcjFDLFVBQVUrbkIsVUFDdkNzdEIsU0FBU3IxQyxVQUFVK25CLFFBQVVubUIsTUFBTTVCLFVBQVUrbkIsU0FFakRpbEQsRUFBUzNzRSIsImZpbGUiOiJhbmktZnJpZW5kLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiYW5pLWZyaWVuZFwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJhbmktZnJpZW5kXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImFuaS1mcmllbmRcIl0gPSBmYWN0b3J5KCk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDI5MSk7XG4iLCIvKiFcbiAqIFZFUlNJT046IDIuMS4zXG4gKiBEQVRFOiAyMDE5LTA1LTE3XG4gKiBVUERBVEVTIEFORCBET0NTIEFUOiBodHRwOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwOC0yMDE5LCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIHdvcmsgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cDovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBzb2Z0d2FyZSBhZ3JlZW1lbnQgdGhhdCB3YXMgaXNzdWVkIHdpdGggeW91ciBtZW1iZXJzaGlwLlxuICpcbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4vKiBFUzYgY2hhbmdlczpcblx0LSBkZWNsYXJlIGFuZCBleHBvcnQgX2dzU2NvcGUgYXQgdG9wLlxuXHQtIHNldCB2YXIgVHdlZW5MaXRlID0gdGhlIHJlc3VsdCBvZiB0aGUgbWFpbiBmdW5jdGlvblxuXHQtIGV4cG9ydCBkZWZhdWx0IFR3ZWVuTGl0ZSBhdCB0aGUgYm90dG9tXG5cdC0gcmV0dXJuIFR3ZWVuTGl0ZSBhdCB0aGUgYm90dG9tIG9mIHRoZSBtYWluIGZ1bmN0aW9uXG5cdC0gcGFzcyBpbiBfZ3NTY29wZSBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyIG9mIHRoZSBtYWluIGZ1bmN0aW9uICh3aGljaCBpcyBhY3R1YWxseSBhdCB0aGUgYm90dG9tKVxuXHQtIHJlbW92ZSB0aGUgXCJleHBvcnQgdG8gbXVsdGlwbGUgZW52aXJvbm1lbnRzXCIgaW4gRGVmaW5pdGlvbigpLlxuICovXG5leHBvcnQgdmFyIF9nc1Njb3BlID0gKHR5cGVvZih3aW5kb3cpICE9PSBcInVuZGVmaW5lZFwiKSA/IHdpbmRvdyA6ICh0eXBlb2YobW9kdWxlKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cyAmJiB0eXBlb2YoZ2xvYmFsKSAhPT0gXCJ1bmRlZmluZWRcIikgPyBnbG9iYWwgOiB0aGlzIHx8IHt9O1xuXG5leHBvcnQgdmFyIFR3ZWVuTGl0ZSA9IChmdW5jdGlvbih3aW5kb3cpIHtcblxuXHRcdFwidXNlIHN0cmljdFwiO1xuXHRcdHZhciBfZXhwb3J0cyA9IHt9LFxuXHRcdFx0X2RvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0XHRcdF9nbG9iYWxzID0gd2luZG93LkdyZWVuU29ja0dsb2JhbHMgPSB3aW5kb3cuR3JlZW5Tb2NrR2xvYmFscyB8fCB3aW5kb3c7XG5cdFx0aWYgKF9nbG9iYWxzLlR3ZWVuTGl0ZSkge1xuXHRcdFx0cmV0dXJuIF9nbG9iYWxzLlR3ZWVuTGl0ZTsgLy9pbiBjYXNlIHRoZSBjb3JlIHNldCBvZiBjbGFzc2VzIGlzIGFscmVhZHkgbG9hZGVkLCBkb24ndCBpbnN0YW50aWF0ZSB0d2ljZS5cblx0XHR9XG5cdFx0dmFyIF9uYW1lc3BhY2UgPSBmdW5jdGlvbihucykge1xuXHRcdFx0XHR2YXIgYSA9IG5zLnNwbGl0KFwiLlwiKSxcblx0XHRcdFx0XHRwID0gX2dsb2JhbHMsIGk7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0cFthW2ldXSA9IHAgPSBwW2FbaV1dIHx8IHt9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBwO1xuXHRcdFx0fSxcblx0XHRcdGdzID0gX25hbWVzcGFjZShcImNvbS5ncmVlbnNvY2tcIiksXG5cdFx0XHRfdGlueU51bSA9IDAuMDAwMDAwMDEsXG5cdFx0XHRfc2xpY2UgPSBmdW5jdGlvbihhKSB7IC8vZG9uJ3QgdXNlIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRhcmdldCwgMCkgYmVjYXVzZSB0aGF0IGRvZXNuJ3Qgd29yayBpbiBJRTggd2l0aCBhIE5vZGVMaXN0IHRoYXQncyByZXR1cm5lZCBieSBxdWVyeVNlbGVjdG9yQWxsKClcblx0XHRcdFx0dmFyIGIgPSBbXSxcblx0XHRcdFx0XHRsID0gYS5sZW5ndGgsXG5cdFx0XHRcdFx0aTtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSAhPT0gbDsgYi5wdXNoKGFbaSsrXSkpIHt9XG5cdFx0XHRcdHJldHVybiBiO1xuXHRcdFx0fSxcblx0XHRcdF9lbXB0eUZ1bmMgPSBmdW5jdGlvbigpIHt9LFxuXHRcdFx0X2lzQXJyYXkgPSAoZnVuY3Rpb24oKSB7IC8vd29ya3MgYXJvdW5kIGlzc3VlcyBpbiBpZnJhbWUgZW52aXJvbm1lbnRzIHdoZXJlIHRoZSBBcnJheSBnbG9iYWwgaXNuJ3Qgc2hhcmVkLCB0aHVzIGlmIHRoZSBvYmplY3Qgb3JpZ2luYXRlcyBpbiBhIGRpZmZlcmVudCB3aW5kb3cvaWZyYW1lLCBcIihvYmogaW5zdGFuY2VvZiBBcnJheSlcIiB3aWxsIGV2YWx1YXRlIGZhbHNlLiBXZSBhZGRlZCBzb21lIHNwZWVkIG9wdGltaXphdGlvbnMgdG8gYXZvaWQgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCkgdW5sZXNzIGl0J3MgYWJzb2x1dGVseSBuZWNlc3NhcnkgYmVjYXVzZSBpdCdzIFZFUlkgc2xvdyAobGlrZSAyMHggc2xvd2VyKVxuXHRcdFx0XHR2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuXHRcdFx0XHRcdGFycmF5ID0gdG9TdHJpbmcuY2FsbChbXSk7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbihvYmopIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgKG9iaiBpbnN0YW5jZW9mIEFycmF5IHx8ICh0eXBlb2Yob2JqKSA9PT0gXCJvYmplY3RcIiAmJiAhIW9iai5wdXNoICYmIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gYXJyYXkpKTtcblx0XHRcdFx0fTtcblx0XHRcdH0oKSksXG5cdFx0XHRhLCBpLCBwLCBfdGlja2VyLCBfdGlja2VyQWN0aXZlLFxuXHRcdFx0X2RlZkxvb2t1cCA9IHt9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBjb25zdHJ1Y3RvclxuXHRcdFx0ICogRGVmaW5lcyBhIEdyZWVuU29jayBjbGFzcywgb3B0aW9uYWxseSB3aXRoIGFuIGFycmF5IG9mIGRlcGVuZGVuY2llcyB0aGF0IG11c3QgYmUgaW5zdGFudGlhdGVkIGZpcnN0IGFuZCBwYXNzZWQgaW50byB0aGUgZGVmaW5pdGlvbi5cblx0XHRcdCAqIFRoaXMgYWxsb3dzIHVzZXJzIHRvIGxvYWQgR3JlZW5Tb2NrIEpTIGZpbGVzIGluIGFueSBvcmRlciBldmVuIGlmIHRoZXkgaGF2ZSBpbnRlcmRlcGVuZGVuY2llcyAobGlrZSBDU1NQbHVnaW4gZXh0ZW5kcyBUd2VlblBsdWdpbiB3aGljaCBpc1xuXHRcdFx0ICogaW5zaWRlIFR3ZWVuTGl0ZS5qcywgYnV0IGlmIENTU1BsdWdpbiBpcyBsb2FkZWQgZmlyc3QsIGl0IHNob3VsZCB3YWl0IHRvIHJ1biBpdHMgY29kZSB1bnRpbCBUd2VlbkxpdGUuanMgbG9hZHMgYW5kIGluc3RhbnRpYXRlcyBUd2VlblBsdWdpblxuXHRcdFx0ICogYW5kIHRoZW4gcGFzcyBUd2VlblBsdWdpbiB0byBDU1NQbHVnaW4ncyBkZWZpbml0aW9uKS4gVGhpcyBpcyBhbGwgZG9uZSBhdXRvbWF0aWNhbGx5IGFuZCBpbnRlcm5hbGx5LlxuXHRcdFx0ICpcblx0XHRcdCAqIEV2ZXJ5IGRlZmluaXRpb24gd2lsbCBiZSBhZGRlZCB0byBhIFwiY29tLmdyZWVuc29ja1wiIGdsb2JhbCBvYmplY3QgKHR5cGljYWxseSB3aW5kb3csIGJ1dCBpZiBhIHdpbmRvdy5HcmVlblNvY2tHbG9iYWxzIG9iamVjdCBpcyBmb3VuZCxcblx0XHRcdCAqIGl0IHdpbGwgZ28gdGhlcmUgYXMgb2YgdjEuNykuIEZvciBleGFtcGxlLCBUd2VlbkxpdGUgd2lsbCBiZSBmb3VuZCBhdCB3aW5kb3cuY29tLmdyZWVuc29jay5Ud2VlbkxpdGUgYW5kIHNpbmNlIGl0J3MgYSBnbG9iYWwgY2xhc3MgdGhhdCBzaG91bGQgYmUgYXZhaWxhYmxlIGFueXdoZXJlLFxuXHRcdFx0ICogaXQgaXMgQUxTTyByZWZlcmVuY2VkIGF0IHdpbmRvdy5Ud2VlbkxpdGUuIEhvd2V2ZXIgc29tZSBjbGFzc2VzIGFyZW4ndCBjb25zaWRlcmVkIGdsb2JhbCwgbGlrZSB0aGUgYmFzZSBjb20uZ3JlZW5zb2NrLmNvcmUuQW5pbWF0aW9uIGNsYXNzLCBzb1xuXHRcdFx0ICogdGhvc2Ugd2lsbCBvbmx5IGJlIGF0IHRoZSBwYWNrYWdlIGxpa2Ugd2luZG93LmNvbS5ncmVlbnNvY2suY29yZS5BbmltYXRpb24uIEFnYWluLCBpZiB5b3UgZGVmaW5lIGEgR3JlZW5Tb2NrR2xvYmFscyBvYmplY3Qgb24gdGhlIHdpbmRvdywgZXZlcnl0aGluZ1xuXHRcdFx0ICogZ2V0cyB0dWNrZWQgbmVhdGx5IGluc2lkZSB0aGVyZSBpbnN0ZWFkIG9mIG9uIHRoZSB3aW5kb3cgZGlyZWN0bHkuIFRoaXMgYWxsb3dzIHlvdSB0byBkbyBhZHZhbmNlZCB0aGluZ3MgbGlrZSBsb2FkIG11bHRpcGxlIHZlcnNpb25zIG9mIEdyZWVuU29ja1xuXHRcdFx0ICogZmlsZXMgYW5kIHB1dCB0aGVtIGludG8gZGlzdGluY3Qgb2JqZWN0cyAoaW1hZ2luZSBhIGJhbm5lciBhZCB1c2VzIGEgbmV3ZXIgdmVyc2lvbiBidXQgdGhlIG1haW4gc2l0ZSB1c2VzIGFuIG9sZGVyIG9uZSkuIEluIHRoYXQgY2FzZSwgeW91IGNvdWxkXG5cdFx0XHQgKiBzYW5kYm94IHRoZSBiYW5uZXIgb25lIGxpa2U6XG5cdFx0XHQgKlxuXHRcdFx0ICogPHNjcmlwdD5cblx0XHRcdCAqICAgICB2YXIgZ3MgPSB3aW5kb3cuR3JlZW5Tb2NrR2xvYmFscyA9IHt9OyAvL3RoZSBuZXdlciB2ZXJzaW9uIHdlJ3JlIGFib3V0IHRvIGxvYWQgY291bGQgbm93IGJlIHJlZmVyZW5jZWQgaW4gYSBcImdzXCIgb2JqZWN0LCBsaWtlIGdzLlR3ZWVuTGl0ZS50byguLi4pLiBVc2Ugd2hhdGV2ZXIgYWxpYXMgeW91IHdhbnQgYXMgbG9uZyBhcyBpdCdzIHVuaXF1ZSwgXCJnc1wiIG9yIFwiYmFubmVyXCIgb3Igd2hhdGV2ZXIuXG5cdFx0XHQgKiA8L3NjcmlwdD5cblx0XHRcdCAqIDxzY3JpcHQgc3JjPVwianMvZ3JlZW5zb2NrL3YxLjcvVHdlZW5NYXguanNcIj48L3NjcmlwdD5cblx0XHRcdCAqIDxzY3JpcHQ+XG5cdFx0XHQgKiAgICAgd2luZG93LkdyZWVuU29ja0dsb2JhbHMgPSB3aW5kb3cuX2dzUXVldWUgPSB3aW5kb3cuX2dzRGVmaW5lID0gbnVsbDsgLy9yZXNldCBpdCBiYWNrIHRvIG51bGwgKGFsb25nIHdpdGggdGhlIHNwZWNpYWwgX2dzUXVldWUgdmFyaWFibGUpIHNvIHRoYXQgdGhlIG5leHQgbG9hZCBvZiBUd2Vlbk1heCBhZmZlY3RzIHRoZSB3aW5kb3cgYW5kIHdlIGNhbiByZWZlcmVuY2UgdGhpbmdzIGRpcmVjdGx5IGxpa2UgVHdlZW5MaXRlLnRvKC4uLilcblx0XHRcdCAqIDwvc2NyaXB0PlxuXHRcdFx0ICogPHNjcmlwdCBzcmM9XCJqcy9ncmVlbnNvY2svdjEuNi9Ud2Vlbk1heC5qc1wiPjwvc2NyaXB0PlxuXHRcdFx0ICogPHNjcmlwdD5cblx0XHRcdCAqICAgICBncy5Ud2VlbkxpdGUudG8oLi4uKTsgLy93b3VsZCB1c2UgdjEuN1xuXHRcdFx0ICogICAgIFR3ZWVuTGl0ZS50byguLi4pOyAvL3dvdWxkIHVzZSB2MS42XG5cdFx0XHQgKiA8L3NjcmlwdD5cblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IG5zIFRoZSBuYW1lc3BhY2Ugb2YgdGhlIGNsYXNzIGRlZmluaXRpb24sIGxlYXZpbmcgb2ZmIFwiY29tLmdyZWVuc29jay5cIiBhcyB0aGF0J3MgYXNzdW1lZC4gRm9yIGV4YW1wbGUsIFwiVHdlZW5MaXRlXCIgb3IgXCJwbHVnaW5zLkNTU1BsdWdpblwiIG9yIFwiZWFzaW5nLkJhY2tcIi5cblx0XHRcdCAqIEBwYXJhbSB7IUFycmF5LjxzdHJpbmc+fSBkZXBlbmRlbmNpZXMgQW4gYXJyYXkgb2YgZGVwZW5kZW5jaWVzIChkZXNjcmliZWQgYXMgdGhlaXIgbmFtZXNwYWNlcyBtaW51cyBcImNvbS5ncmVlbnNvY2suXCIgcHJlZml4KS4gRm9yIGV4YW1wbGUgW1wiVHdlZW5MaXRlXCIsXCJwbHVnaW5zLlR3ZWVuUGx1Z2luXCIsXCJjb3JlLkFuaW1hdGlvblwiXVxuXHRcdFx0ICogQHBhcmFtIHshZnVuY3Rpb24oKTpPYmplY3R9IGZ1bmMgVGhlIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCBhbmQgcGFzc2VkIHRoZSByZXNvbHZlZCBkZXBlbmRlbmNpZXMgd2hpY2ggd2lsbCByZXR1cm4gdGhlIGFjdHVhbCBjbGFzcyBmb3IgdGhpcyBkZWZpbml0aW9uLlxuXHRcdFx0ICogQHBhcmFtIHtib29sZWFuPX0gZ2xvYmFsIElmIHRydWUsIHRoZSBjbGFzcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBnbG9iYWwgc2NvcGUgKHR5cGljYWxseSB3aW5kb3cgdW5sZXNzIHlvdSBkZWZpbmUgYSB3aW5kb3cuR3JlZW5Tb2NrR2xvYmFscyBvYmplY3QpXG5cdFx0XHQgKi9cblx0XHRcdERlZmluaXRpb24gPSBmdW5jdGlvbihucywgZGVwZW5kZW5jaWVzLCBmdW5jLCBnbG9iYWwpIHtcblx0XHRcdFx0dGhpcy5zYyA9IChfZGVmTG9va3VwW25zXSkgPyBfZGVmTG9va3VwW25zXS5zYyA6IFtdOyAvL3N1YmNsYXNzZXNcblx0XHRcdFx0X2RlZkxvb2t1cFtuc10gPSB0aGlzO1xuXHRcdFx0XHR0aGlzLmdzQ2xhc3MgPSBudWxsO1xuXHRcdFx0XHR0aGlzLmZ1bmMgPSBmdW5jO1xuXHRcdFx0XHR2YXIgX2NsYXNzZXMgPSBbXTtcblx0XHRcdFx0dGhpcy5jaGVjayA9IGZ1bmN0aW9uKGluaXQpIHtcblx0XHRcdFx0XHR2YXIgaSA9IGRlcGVuZGVuY2llcy5sZW5ndGgsXG5cdFx0XHRcdFx0XHRtaXNzaW5nID0gaSxcblx0XHRcdFx0XHRcdGN1ciwgYSwgbiwgY2w7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRpZiAoKGN1ciA9IF9kZWZMb29rdXBbZGVwZW5kZW5jaWVzW2ldXSB8fCBuZXcgRGVmaW5pdGlvbihkZXBlbmRlbmNpZXNbaV0sIFtdKSkuZ3NDbGFzcykge1xuXHRcdFx0XHRcdFx0XHRfY2xhc3Nlc1tpXSA9IGN1ci5nc0NsYXNzO1xuXHRcdFx0XHRcdFx0XHRtaXNzaW5nLS07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGluaXQpIHtcblx0XHRcdFx0XHRcdFx0Y3VyLnNjLnB1c2godGhpcyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChtaXNzaW5nID09PSAwICYmIGZ1bmMpIHtcblx0XHRcdFx0XHRcdGEgPSAoXCJjb20uZ3JlZW5zb2NrLlwiICsgbnMpLnNwbGl0KFwiLlwiKTtcblx0XHRcdFx0XHRcdG4gPSBhLnBvcCgpO1xuXHRcdFx0XHRcdFx0Y2wgPSBfbmFtZXNwYWNlKGEuam9pbihcIi5cIikpW25dID0gdGhpcy5nc0NsYXNzID0gZnVuYy5hcHBseShmdW5jLCBfY2xhc3Nlcyk7XG5cblx0XHRcdFx0XHRcdC8vZXhwb3J0cyB0byBtdWx0aXBsZSBlbnZpcm9ubWVudHNcblx0XHRcdFx0XHRcdGlmIChnbG9iYWwpIHtcblx0XHRcdFx0XHRcdFx0X2dsb2JhbHNbbl0gPSBfZXhwb3J0c1tuXSA9IGNsOyAvL3Byb3ZpZGVzIGEgd2F5IHRvIGF2b2lkIGdsb2JhbCBuYW1lc3BhY2UgcG9sbHV0aW9uLiBCeSBkZWZhdWx0LCB0aGUgbWFpbiBjbGFzc2VzIGxpa2UgVHdlZW5MaXRlLCBQb3dlcjEsIFN0cm9uZywgZXRjLiBhcmUgYWRkZWQgdG8gd2luZG93IHVubGVzcyBhIEdyZWVuU29ja0dsb2JhbHMgaXMgZGVmaW5lZC4gU28gaWYgeW91IHdhbnQgdG8gaGF2ZSB0aGluZ3MgYWRkZWQgdG8gYSBjdXN0b20gb2JqZWN0IGluc3RlYWQsIGp1c3QgZG8gc29tZXRoaW5nIGxpa2Ugd2luZG93LkdyZWVuU29ja0dsb2JhbHMgPSB7fSBiZWZvcmUgbG9hZGluZyBhbnkgR3JlZW5Tb2NrIGZpbGVzLiBZb3UgY2FuIGV2ZW4gc2V0IHVwIGFuIGFsaWFzIGxpa2Ugd2luZG93LkdyZWVuU29ja0dsb2JhbHMgPSB3aW5kb3dzLmdzID0ge30gc28gdGhhdCB5b3UgY2FuIGFjY2VzcyBldmVyeXRoaW5nIGxpa2UgZ3MuVHdlZW5MaXRlLiBBbHNvIHJlbWVtYmVyIHRoYXQgQUxMIGNsYXNzZXMgYXJlIGFkZGVkIHRvIHRoZSB3aW5kb3cuY29tLmdyZWVuc29jayBvYmplY3QgKGluIHRoZWlyIHJlc3BlY3RpdmUgcGFja2FnZXMsIGxpa2UgY29tLmdyZWVuc29jay5lYXNpbmcuUG93ZXIxLCBjb20uZ3JlZW5zb2NrLlR3ZWVuTGl0ZSwgZXRjLilcblx0XHRcdFx0XHRcdFx0Lypcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZihtb2R1bGUpICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzKSB7IC8vbm9kZVxuXHRcdFx0XHRcdFx0XHRcdGlmIChucyA9PT0gbW9kdWxlTmFtZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlLmV4cG9ydHMgPSBfZXhwb3J0c1ttb2R1bGVOYW1lXSA9IGNsO1xuXHRcdFx0XHRcdFx0XHRcdFx0Zm9yIChpIGluIF9leHBvcnRzKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNsW2ldID0gX2V4cG9ydHNbaV07XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChfZXhwb3J0c1ttb2R1bGVOYW1lXSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0X2V4cG9ydHNbbW9kdWxlTmFtZV1bbl0gPSBjbDtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mKGRlZmluZSkgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKXsgLy9BTURcblx0XHRcdFx0XHRcdFx0XHRkZWZpbmUoKHdpbmRvdy5HcmVlblNvY2tBTURQYXRoID8gd2luZG93LkdyZWVuU29ja0FNRFBhdGggKyBcIi9cIiA6IFwiXCIpICsgbnMuc3BsaXQoXCIuXCIpLnBvcCgpLCBbXSwgZnVuY3Rpb24oKSB7IHJldHVybiBjbDsgfSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0Ki9cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCB0aGlzLnNjLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuc2NbaV0uY2hlY2soKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHRcdHRoaXMuY2hlY2sodHJ1ZSk7XG5cdFx0XHR9LFxuXG5cdFx0XHQvL3VzZWQgdG8gY3JlYXRlIERlZmluaXRpb24gaW5zdGFuY2VzICh3aGljaCBiYXNpY2FsbHkgcmVnaXN0ZXJzIGEgY2xhc3MgdGhhdCBoYXMgZGVwZW5kZW5jaWVzKS5cblx0XHRcdF9nc0RlZmluZSA9IHdpbmRvdy5fZ3NEZWZpbmUgPSBmdW5jdGlvbihucywgZGVwZW5kZW5jaWVzLCBmdW5jLCBnbG9iYWwpIHtcblx0XHRcdFx0cmV0dXJuIG5ldyBEZWZpbml0aW9uKG5zLCBkZXBlbmRlbmNpZXMsIGZ1bmMsIGdsb2JhbCk7XG5cdFx0XHR9LFxuXG5cdFx0XHQvL2EgcXVpY2sgd2F5IHRvIGNyZWF0ZSBhIGNsYXNzIHRoYXQgZG9lc24ndCBoYXZlIGFueSBkZXBlbmRlbmNpZXMuIFJldHVybnMgdGhlIGNsYXNzLCBidXQgZmlyc3QgcmVnaXN0ZXJzIGl0IGluIHRoZSBHcmVlblNvY2sgbmFtZXNwYWNlIHNvIHRoYXQgb3RoZXIgY2xhc3NlcyBjYW4gZ3JhYiBpdCAob3RoZXIgY2xhc3NlcyBtaWdodCBiZSBkZXBlbmRlbnQgb24gdGhlIGNsYXNzKS5cblx0XHRcdF9jbGFzcyA9IGdzLl9jbGFzcyA9IGZ1bmN0aW9uKG5zLCBmdW5jLCBnbG9iYWwpIHtcblx0XHRcdFx0ZnVuYyA9IGZ1bmMgfHwgZnVuY3Rpb24oKSB7fTtcblx0XHRcdFx0X2dzRGVmaW5lKG5zLCBbXSwgZnVuY3Rpb24oKXsgcmV0dXJuIGZ1bmM7IH0sIGdsb2JhbCk7XG5cdFx0XHRcdHJldHVybiBmdW5jO1xuXHRcdFx0fTtcblxuXHRcdF9nc0RlZmluZS5nbG9iYWxzID0gX2dsb2JhbHM7XG5cblxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRWFzZVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cdFx0dmFyIF9iYXNlUGFyYW1zID0gWzAsIDAsIDEsIDFdLFxuXHRcdFx0RWFzZSA9IF9jbGFzcyhcImVhc2luZy5FYXNlXCIsIGZ1bmN0aW9uKGZ1bmMsIGV4dHJhUGFyYW1zLCB0eXBlLCBwb3dlcikge1xuXHRcdFx0XHR0aGlzLl9mdW5jID0gZnVuYztcblx0XHRcdFx0dGhpcy5fdHlwZSA9IHR5cGUgfHwgMDtcblx0XHRcdFx0dGhpcy5fcG93ZXIgPSBwb3dlciB8fCAwO1xuXHRcdFx0XHR0aGlzLl9wYXJhbXMgPSBleHRyYVBhcmFtcyA/IF9iYXNlUGFyYW1zLmNvbmNhdChleHRyYVBhcmFtcykgOiBfYmFzZVBhcmFtcztcblx0XHRcdH0sIHRydWUpLFxuXHRcdFx0X2Vhc2VNYXAgPSBFYXNlLm1hcCA9IHt9LFxuXHRcdFx0X2Vhc2VSZWcgPSBFYXNlLnJlZ2lzdGVyID0gZnVuY3Rpb24oZWFzZSwgbmFtZXMsIHR5cGVzLCBjcmVhdGUpIHtcblx0XHRcdFx0dmFyIG5hID0gbmFtZXMuc3BsaXQoXCIsXCIpLFxuXHRcdFx0XHRcdGkgPSBuYS5sZW5ndGgsXG5cdFx0XHRcdFx0dGEgPSAodHlwZXMgfHwgXCJlYXNlSW4sZWFzZU91dCxlYXNlSW5PdXRcIikuc3BsaXQoXCIsXCIpLFxuXHRcdFx0XHRcdGUsIG5hbWUsIGosIHR5cGU7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdG5hbWUgPSBuYVtpXTtcblx0XHRcdFx0XHRlID0gY3JlYXRlID8gX2NsYXNzKFwiZWFzaW5nLlwiK25hbWUsIG51bGwsIHRydWUpIDogZ3MuZWFzaW5nW25hbWVdIHx8IHt9O1xuXHRcdFx0XHRcdGogPSB0YS5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKC0taiA+IC0xKSB7XG5cdFx0XHRcdFx0XHR0eXBlID0gdGFbal07XG5cdFx0XHRcdFx0XHRfZWFzZU1hcFtuYW1lICsgXCIuXCIgKyB0eXBlXSA9IF9lYXNlTWFwW3R5cGUgKyBuYW1lXSA9IGVbdHlwZV0gPSBlYXNlLmdldFJhdGlvID8gZWFzZSA6IGVhc2VbdHlwZV0gfHwgbmV3IGVhc2UoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRwID0gRWFzZS5wcm90b3R5cGU7XG5cdFx0cC5fY2FsY0VuZCA9IGZhbHNlO1xuXHRcdHAuZ2V0UmF0aW8gPSBmdW5jdGlvbihwKSB7XG5cdFx0XHRpZiAodGhpcy5fZnVuYykge1xuXHRcdFx0XHR0aGlzLl9wYXJhbXNbMF0gPSBwO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fZnVuYy5hcHBseShudWxsLCB0aGlzLl9wYXJhbXMpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHQgPSB0aGlzLl90eXBlLFxuXHRcdFx0XHRwdyA9IHRoaXMuX3Bvd2VyLFxuXHRcdFx0XHRyID0gKHQgPT09IDEpID8gMSAtIHAgOiAodCA9PT0gMikgPyBwIDogKHAgPCAwLjUpID8gcCAqIDIgOiAoMSAtIHApICogMjtcblx0XHRcdGlmIChwdyA9PT0gMSkge1xuXHRcdFx0XHRyICo9IHI7XG5cdFx0XHR9IGVsc2UgaWYgKHB3ID09PSAyKSB7XG5cdFx0XHRcdHIgKj0gciAqIHI7XG5cdFx0XHR9IGVsc2UgaWYgKHB3ID09PSAzKSB7XG5cdFx0XHRcdHIgKj0gciAqIHIgKiByO1xuXHRcdFx0fSBlbHNlIGlmIChwdyA9PT0gNCkge1xuXHRcdFx0XHRyICo9IHIgKiByICogciAqIHI7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gKHQgPT09IDEpID8gMSAtIHIgOiAodCA9PT0gMikgPyByIDogKHAgPCAwLjUpID8gciAvIDIgOiAxIC0gKHIgLyAyKTtcblx0XHR9O1xuXG5cdFx0Ly9jcmVhdGUgYWxsIHRoZSBzdGFuZGFyZCBlYXNlcyBsaWtlIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIGFuZCBQb3dlcjQgKGVhY2ggd2l0aCBlYXNlSW4sIGVhc2VPdXQsIGFuZCBlYXNlSW5PdXQpXG5cdFx0YSA9IFtcIkxpbmVhclwiLFwiUXVhZFwiLFwiQ3ViaWNcIixcIlF1YXJ0XCIsXCJRdWludCxTdHJvbmdcIl07XG5cdFx0aSA9IGEubGVuZ3RoO1xuXHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0cCA9IGFbaV0rXCIsUG93ZXJcIitpO1xuXHRcdFx0X2Vhc2VSZWcobmV3IEVhc2UobnVsbCxudWxsLDEsaSksIHAsIFwiZWFzZU91dFwiLCB0cnVlKTtcblx0XHRcdF9lYXNlUmVnKG5ldyBFYXNlKG51bGwsbnVsbCwyLGkpLCBwLCBcImVhc2VJblwiICsgKChpID09PSAwKSA/IFwiLGVhc2VOb25lXCIgOiBcIlwiKSk7XG5cdFx0XHRfZWFzZVJlZyhuZXcgRWFzZShudWxsLG51bGwsMyxpKSwgcCwgXCJlYXNlSW5PdXRcIik7XG5cdFx0fVxuXHRcdF9lYXNlTWFwLmxpbmVhciA9IGdzLmVhc2luZy5MaW5lYXIuZWFzZUluO1xuXHRcdF9lYXNlTWFwLnN3aW5nID0gZ3MuZWFzaW5nLlF1YWQuZWFzZUluT3V0OyAvL2ZvciBqUXVlcnkgZm9sa3NcblxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRXZlbnREaXNwYXRjaGVyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblx0XHR2YXIgRXZlbnREaXNwYXRjaGVyID0gX2NsYXNzKFwiZXZlbnRzLkV2ZW50RGlzcGF0Y2hlclwiLCBmdW5jdGlvbih0YXJnZXQpIHtcblx0XHRcdHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuXHRcdFx0dGhpcy5fZXZlbnRUYXJnZXQgPSB0YXJnZXQgfHwgdGhpcztcblx0XHR9KTtcblx0XHRwID0gRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZTtcblxuXHRcdHAuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGNhbGxiYWNrLCBzY29wZSwgdXNlUGFyYW0sIHByaW9yaXR5KSB7XG5cdFx0XHRwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0XHR2YXIgbGlzdCA9IHRoaXMuX2xpc3RlbmVyc1t0eXBlXSxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsaXN0ZW5lciwgaTtcblx0XHRcdGlmICh0aGlzID09PSBfdGlja2VyICYmICFfdGlja2VyQWN0aXZlKSB7XG5cdFx0XHRcdF90aWNrZXIud2FrZSgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGxpc3QgPT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLl9saXN0ZW5lcnNbdHlwZV0gPSBsaXN0ID0gW107XG5cdFx0XHR9XG5cdFx0XHRpID0gbGlzdC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0bGlzdGVuZXIgPSBsaXN0W2ldO1xuXHRcdFx0XHRpZiAobGlzdGVuZXIuYyA9PT0gY2FsbGJhY2sgJiYgbGlzdGVuZXIucyA9PT0gc2NvcGUpIHtcblx0XHRcdFx0XHRsaXN0LnNwbGljZShpLCAxKTtcblx0XHRcdFx0fSBlbHNlIGlmIChpbmRleCA9PT0gMCAmJiBsaXN0ZW5lci5wciA8IHByaW9yaXR5KSB7XG5cdFx0XHRcdFx0aW5kZXggPSBpICsgMTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bGlzdC5zcGxpY2UoaW5kZXgsIDAsIHtjOmNhbGxiYWNrLCBzOnNjb3BlLCB1cDp1c2VQYXJhbSwgcHI6cHJpb3JpdHl9KTtcblx0XHR9O1xuXG5cdFx0cC5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgY2FsbGJhY2spIHtcblx0XHRcdHZhciBsaXN0ID0gdGhpcy5fbGlzdGVuZXJzW3R5cGVdLCBpO1xuXHRcdFx0aWYgKGxpc3QpIHtcblx0XHRcdFx0aSA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRpZiAobGlzdFtpXS5jID09PSBjYWxsYmFjaykge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHAuZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRcdHZhciBsaXN0ID0gdGhpcy5fbGlzdGVuZXJzW3R5cGVdLFxuXHRcdFx0XHRpLCB0LCBsaXN0ZW5lcjtcblx0XHRcdGlmIChsaXN0KSB7XG5cdFx0XHRcdGkgPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0aWYgKGkgPiAxKSB7XG5cdFx0XHRcdFx0bGlzdCA9IGxpc3Quc2xpY2UoMCk7IC8vaW4gY2FzZSBhZGRFdmVudExpc3RlbmVyKCkgaXMgY2FsbGVkIGZyb20gd2l0aGluIGEgbGlzdGVuZXIvY2FsbGJhY2sgKG90aGVyd2lzZSB0aGUgaW5kZXggY291bGQgY2hhbmdlLCByZXN1bHRpbmcgaW4gYSBza2lwKVxuXHRcdFx0XHR9XG5cdFx0XHRcdHQgPSB0aGlzLl9ldmVudFRhcmdldDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0bGlzdGVuZXIgPSBsaXN0W2ldO1xuXHRcdFx0XHRcdGlmIChsaXN0ZW5lcikge1xuXHRcdFx0XHRcdFx0aWYgKGxpc3RlbmVyLnVwKSB7XG5cdFx0XHRcdFx0XHRcdGxpc3RlbmVyLmMuY2FsbChsaXN0ZW5lci5zIHx8IHQsIHt0eXBlOnR5cGUsIHRhcmdldDp0fSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRsaXN0ZW5lci5jLmNhbGwobGlzdGVuZXIucyB8fCB0KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUaWNrZXJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuIFx0XHR2YXIgX3JlcUFuaW1GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG5cdFx0XHRfY2FuY2VsQW5pbUZyYW1lID0gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lLFxuXHRcdFx0X2dldFRpbWUgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbigpIHtyZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7fSxcblx0XHRcdF9sYXN0VXBkYXRlID0gX2dldFRpbWUoKTtcblxuXHRcdC8vbm93IHRyeSB0byBkZXRlcm1pbmUgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSBhbmQgY2FuY2VsQW5pbWF0aW9uRnJhbWUgZnVuY3Rpb25zIGFuZCBpZiBub25lIGFyZSBmb3VuZCwgd2UnbGwgdXNlIGEgc2V0VGltZW91dCgpL2NsZWFyVGltZW91dCgpIHBvbHlmaWxsLlxuXHRcdGEgPSBbXCJtc1wiLFwibW96XCIsXCJ3ZWJraXRcIixcIm9cIl07XG5cdFx0aSA9IGEubGVuZ3RoO1xuXHRcdHdoaWxlICgtLWkgPiAtMSAmJiAhX3JlcUFuaW1GcmFtZSkge1xuXHRcdFx0X3JlcUFuaW1GcmFtZSA9IHdpbmRvd1thW2ldICsgXCJSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl07XG5cdFx0XHRfY2FuY2VsQW5pbUZyYW1lID0gd2luZG93W2FbaV0gKyBcIkNhbmNlbEFuaW1hdGlvbkZyYW1lXCJdIHx8IHdpbmRvd1thW2ldICsgXCJDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl07XG5cdFx0fVxuXG5cdFx0X2NsYXNzKFwiVGlja2VyXCIsIGZ1bmN0aW9uKGZwcywgdXNlUkFGKSB7XG5cdFx0XHR2YXIgX3NlbGYgPSB0aGlzLFxuXHRcdFx0XHRfc3RhcnRUaW1lID0gX2dldFRpbWUoKSxcblx0XHRcdFx0X3VzZVJBRiA9ICh1c2VSQUYgIT09IGZhbHNlICYmIF9yZXFBbmltRnJhbWUpID8gXCJhdXRvXCIgOiBmYWxzZSxcblx0XHRcdFx0X2xhZ1RocmVzaG9sZCA9IDUwMCxcblx0XHRcdFx0X2FkanVzdGVkTGFnID0gMzMsXG5cdFx0XHRcdF90aWNrV29yZCA9IFwidGlja1wiLCAvL2hlbHBzIHJlZHVjZSBnYyBidXJkZW5cblx0XHRcdFx0X2ZwcywgX3JlcSwgX2lkLCBfZ2FwLCBfbmV4dFRpbWUsXG5cdFx0XHRcdF90aWNrID0gZnVuY3Rpb24obWFudWFsKSB7XG5cdFx0XHRcdFx0dmFyIGVsYXBzZWQgPSBfZ2V0VGltZSgpIC0gX2xhc3RVcGRhdGUsXG5cdFx0XHRcdFx0XHRvdmVybGFwLCBkaXNwYXRjaDtcblx0XHRcdFx0XHRpZiAoZWxhcHNlZCA+IF9sYWdUaHJlc2hvbGQpIHtcblx0XHRcdFx0XHRcdF9zdGFydFRpbWUgKz0gZWxhcHNlZCAtIF9hZGp1c3RlZExhZztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0X2xhc3RVcGRhdGUgKz0gZWxhcHNlZDtcblx0XHRcdFx0XHRfc2VsZi50aW1lID0gKF9sYXN0VXBkYXRlIC0gX3N0YXJ0VGltZSkgLyAxMDAwO1xuXHRcdFx0XHRcdG92ZXJsYXAgPSBfc2VsZi50aW1lIC0gX25leHRUaW1lO1xuXHRcdFx0XHRcdGlmICghX2ZwcyB8fCBvdmVybGFwID4gMCB8fCBtYW51YWwgPT09IHRydWUpIHtcblx0XHRcdFx0XHRcdF9zZWxmLmZyYW1lKys7XG5cdFx0XHRcdFx0XHRfbmV4dFRpbWUgKz0gb3ZlcmxhcCArIChvdmVybGFwID49IF9nYXAgPyAwLjAwNCA6IF9nYXAgLSBvdmVybGFwKTtcblx0XHRcdFx0XHRcdGRpc3BhdGNoID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKG1hbnVhbCAhPT0gdHJ1ZSkgeyAvL21ha2Ugc3VyZSB0aGUgcmVxdWVzdCBpcyBtYWRlIGJlZm9yZSB3ZSBkaXNwYXRjaCB0aGUgXCJ0aWNrXCIgZXZlbnQgc28gdGhhdCB0aW1pbmcgaXMgbWFpbnRhaW5lZC4gT3RoZXJ3aXNlLCBpZiBwcm9jZXNzaW5nIHRoZSBcInRpY2tcIiByZXF1aXJlcyBhIGJ1bmNoIG9mIHRpbWUgKGxpa2UgMTVtcykgYW5kIHdlJ3JlIHVzaW5nIGEgc2V0VGltZW91dCgpIHRoYXQncyBiYXNlZCBvbiAxNi43bXMsIGl0J2QgdGVjaG5pY2FsbHkgdGFrZSAzMS43bXMgYmV0d2VlbiBmcmFtZXMgb3RoZXJ3aXNlLlxuXHRcdFx0XHRcdFx0X2lkID0gX3JlcShfdGljayk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChkaXNwYXRjaCkge1xuXHRcdFx0XHRcdFx0X3NlbGYuZGlzcGF0Y2hFdmVudChfdGlja1dvcmQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0RXZlbnREaXNwYXRjaGVyLmNhbGwoX3NlbGYpO1xuXHRcdFx0X3NlbGYudGltZSA9IF9zZWxmLmZyYW1lID0gMDtcblx0XHRcdF9zZWxmLnRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0X3RpY2sodHJ1ZSk7XG5cdFx0XHR9O1xuXG5cdFx0XHRfc2VsZi5sYWdTbW9vdGhpbmcgPSBmdW5jdGlvbih0aHJlc2hvbGQsIGFkanVzdGVkTGFnKSB7XG5cdFx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkgeyAvL2lmIGxhZ1Ntb290aGluZygpIGlzIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cywgdHJlYXQgaXQgbGlrZSBhIGdldHRlciB0aGF0IHJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgaXQncyBlbmFibGVkIG9yIG5vdC4gVGhpcyBpcyBwdXJwb3NlbHkgdW5kb2N1bWVudGVkIGFuZCBpcyBmb3IgaW50ZXJuYWwgdXNlLlxuXHRcdFx0XHRcdHJldHVybiAoX2xhZ1RocmVzaG9sZCA8IDEgLyBfdGlueU51bSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0X2xhZ1RocmVzaG9sZCA9IHRocmVzaG9sZCB8fCAoMSAvIF90aW55TnVtKTsgLy96ZXJvIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBiYXNpY2FsbHkgdW5saW1pdGVkXG5cdFx0XHRcdF9hZGp1c3RlZExhZyA9IE1hdGgubWluKGFkanVzdGVkTGFnLCBfbGFnVGhyZXNob2xkLCAwKTtcblx0XHRcdH07XG5cblx0XHRcdF9zZWxmLnNsZWVwID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmIChfaWQgPT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIV91c2VSQUYgfHwgIV9jYW5jZWxBbmltRnJhbWUpIHtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQoX2lkKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRfY2FuY2VsQW5pbUZyYW1lKF9pZCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0X3JlcSA9IF9lbXB0eUZ1bmM7XG5cdFx0XHRcdF9pZCA9IG51bGw7XG5cdFx0XHRcdGlmIChfc2VsZiA9PT0gX3RpY2tlcikge1xuXHRcdFx0XHRcdF90aWNrZXJBY3RpdmUgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0X3NlbGYud2FrZSA9IGZ1bmN0aW9uKHNlYW1sZXNzKSB7XG5cdFx0XHRcdGlmIChfaWQgIT09IG51bGwpIHtcblx0XHRcdFx0XHRfc2VsZi5zbGVlcCgpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHNlYW1sZXNzKSB7XG5cdFx0XHRcdFx0X3N0YXJ0VGltZSArPSAtX2xhc3RVcGRhdGUgKyAoX2xhc3RVcGRhdGUgPSBfZ2V0VGltZSgpKTtcblx0XHRcdFx0fSBlbHNlIGlmIChfc2VsZi5mcmFtZSA+IDEwKSB7IC8vZG9uJ3QgdHJpZ2dlciBsYWdTbW9vdGhpbmcgaWYgd2UncmUganVzdCB3YWtpbmcgdXAsIGFuZCBtYWtlIHN1cmUgdGhhdCBhdCBsZWFzdCAxMCBmcmFtZXMgaGF2ZSBlbGFwc2VkIGJlY2F1c2Ugb2YgdGhlIGlPUyBidWcgdGhhdCB3ZSB3b3JrIGFyb3VuZCBiZWxvdyB3aXRoIHRoZSAxLjUtc2Vjb25kIHNldFRpbW91dCgpLlxuXHRcdFx0XHRcdF9sYXN0VXBkYXRlID0gX2dldFRpbWUoKSAtIF9sYWdUaHJlc2hvbGQgKyA1O1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9yZXEgPSAoX2ZwcyA9PT0gMCkgPyBfZW1wdHlGdW5jIDogKCFfdXNlUkFGIHx8ICFfcmVxQW5pbUZyYW1lKSA/IGZ1bmN0aW9uKGYpIHsgcmV0dXJuIHNldFRpbWVvdXQoZiwgKChfbmV4dFRpbWUgLSBfc2VsZi50aW1lKSAqIDEwMDAgKyAxKSB8IDApOyB9IDogX3JlcUFuaW1GcmFtZTtcblx0XHRcdFx0aWYgKF9zZWxmID09PSBfdGlja2VyKSB7XG5cdFx0XHRcdFx0X3RpY2tlckFjdGl2ZSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0X3RpY2soMik7XG5cdFx0XHR9O1xuXG5cdFx0XHRfc2VsZi5mcHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm4gX2Zwcztcblx0XHRcdFx0fVxuXHRcdFx0XHRfZnBzID0gdmFsdWU7XG5cdFx0XHRcdF9nYXAgPSAxIC8gKF9mcHMgfHwgNjApO1xuXHRcdFx0XHRfbmV4dFRpbWUgPSB0aGlzLnRpbWUgKyBfZ2FwO1xuXHRcdFx0XHRfc2VsZi53YWtlKCk7XG5cdFx0XHR9O1xuXG5cdFx0XHRfc2VsZi51c2VSQUYgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm4gX3VzZVJBRjtcblx0XHRcdFx0fVxuXHRcdFx0XHRfc2VsZi5zbGVlcCgpO1xuXHRcdFx0XHRfdXNlUkFGID0gdmFsdWU7XG5cdFx0XHRcdF9zZWxmLmZwcyhfZnBzKTtcblx0XHRcdH07XG5cdFx0XHRfc2VsZi5mcHMoZnBzKTtcblxuXHRcdFx0Ly9hIGJ1ZyBpbiBpT1MgNiBTYWZhcmkgb2NjYXNpb25hbGx5IHByZXZlbnRzIHRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgZnJvbSB3b3JraW5nIGluaXRpYWxseSwgc28gd2UgdXNlIGEgMS41LXNlY29uZCB0aW1lb3V0IHRoYXQgYXV0b21hdGljYWxseSBmYWxscyBiYWNrIHRvIHNldFRpbWVvdXQoKSBpZiBpdCBzZW5zZXMgdGhpcyBjb25kaXRpb24uXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoX3VzZVJBRiA9PT0gXCJhdXRvXCIgJiYgX3NlbGYuZnJhbWUgPCA1ICYmIChfZG9jIHx8IHt9KS52aXNpYmlsaXR5U3RhdGUgIT09IFwiaGlkZGVuXCIpIHtcblx0XHRcdFx0XHRfc2VsZi51c2VSQUYoZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCAxNTAwKTtcblx0XHR9KTtcblxuXHRcdHAgPSBncy5UaWNrZXIucHJvdG90eXBlID0gbmV3IGdzLmV2ZW50cy5FdmVudERpc3BhdGNoZXIoKTtcblx0XHRwLmNvbnN0cnVjdG9yID0gZ3MuVGlja2VyO1xuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBbmltYXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRcdHZhciBBbmltYXRpb24gPSBfY2xhc3MoXCJjb3JlLkFuaW1hdGlvblwiLCBmdW5jdGlvbihkdXJhdGlvbiwgdmFycykge1xuXHRcdFx0XHR0aGlzLnZhcnMgPSB2YXJzID0gdmFycyB8fCB7fTtcblx0XHRcdFx0dGhpcy5fZHVyYXRpb24gPSB0aGlzLl90b3RhbER1cmF0aW9uID0gZHVyYXRpb24gfHwgMDtcblx0XHRcdFx0dGhpcy5fZGVsYXkgPSBOdW1iZXIodmFycy5kZWxheSkgfHwgMDtcblx0XHRcdFx0dGhpcy5fdGltZVNjYWxlID0gMTtcblx0XHRcdFx0dGhpcy5fYWN0aXZlID0gISF2YXJzLmltbWVkaWF0ZVJlbmRlcjtcblx0XHRcdFx0dGhpcy5kYXRhID0gdmFycy5kYXRhO1xuXHRcdFx0XHR0aGlzLl9yZXZlcnNlZCA9ICEhdmFycy5yZXZlcnNlZDtcblxuXHRcdFx0XHRpZiAoIV9yb290VGltZWxpbmUpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFfdGlja2VyQWN0aXZlKSB7IC8vc29tZSBicm93c2VycyAobGlrZSBpT1MgNiBTYWZhcmkpIHNodXQgZG93biBKYXZhU2NyaXB0IGV4ZWN1dGlvbiB3aGVuIHRoZSB0YWIgaXMgZGlzYWJsZWQgYW5kIHRoZXkgW29jY2FzaW9uYWxseV0gbmVnbGVjdCB0byBzdGFydCB1cCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgYWdhaW4gd2hlbiByZXR1cm5pbmcgLSB0aGlzIGNvZGUgZW5zdXJlcyB0aGF0IHRoZSBlbmdpbmUgc3RhcnRzIHVwIGFnYWluIHByb3Blcmx5LlxuXHRcdFx0XHRcdF90aWNrZXIud2FrZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHRsID0gdGhpcy52YXJzLnVzZUZyYW1lcyA/IF9yb290RnJhbWVzVGltZWxpbmUgOiBfcm9vdFRpbWVsaW5lO1xuXHRcdFx0XHR0bC5hZGQodGhpcywgdGwuX3RpbWUpO1xuXG5cdFx0XHRcdGlmICh0aGlzLnZhcnMucGF1c2VkKSB7XG5cdFx0XHRcdFx0dGhpcy5wYXVzZWQodHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0X3RpY2tlciA9IEFuaW1hdGlvbi50aWNrZXIgPSBuZXcgZ3MuVGlja2VyKCk7XG5cdFx0cCA9IEFuaW1hdGlvbi5wcm90b3R5cGU7XG5cdFx0cC5fZGlydHkgPSBwLl9nYyA9IHAuX2luaXR0ZWQgPSBwLl9wYXVzZWQgPSBmYWxzZTtcblx0XHRwLl90b3RhbFRpbWUgPSBwLl90aW1lID0gMDtcblx0XHRwLl9yYXdQcmV2VGltZSA9IC0xO1xuXHRcdHAuX25leHQgPSBwLl9sYXN0ID0gcC5fb25VcGRhdGUgPSBwLl90aW1lbGluZSA9IHAudGltZWxpbmUgPSBudWxsO1xuXHRcdHAuX3BhdXNlZCA9IGZhbHNlO1xuXG5cblx0XHQvL3NvbWUgYnJvd3NlcnMgKGxpa2UgaU9TKSBvY2Nhc2lvbmFsbHkgZHJvcCB0aGUgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGV2ZW50IHdoZW4gdGhlIHVzZXIgc3dpdGNoZXMgdG8gYSBkaWZmZXJlbnQgdGFiIGFuZCB0aGVuIGNvbWVzIGJhY2sgYWdhaW4sIHNvIHdlIHVzZSBhIDItc2Vjb25kIHNldFRpbWVvdXQoKSB0byBzZW5zZSBpZi93aGVuIHRoYXQgY29uZGl0aW9uIG9jY3VycyBhbmQgdGhlbiB3YWtlKCkgdGhlIHRpY2tlci5cblx0XHR2YXIgX2NoZWNrVGltZW91dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoX3RpY2tlckFjdGl2ZSAmJiBfZ2V0VGltZSgpIC0gX2xhc3RVcGRhdGUgPiAyMDAwICYmICgoX2RvYyB8fCB7fSkudmlzaWJpbGl0eVN0YXRlICE9PSBcImhpZGRlblwiIHx8ICFfdGlja2VyLmxhZ1Ntb290aGluZygpKSkgeyAvL25vdGU6IGlmIHRoZSB0YWIgaXMgaGlkZGVuLCB3ZSBzaG91bGQgc3RpbGwgd2FrZSBpZiBsYWdTbW9vdGhpbmcgaGFzIGJlZW4gZGlzYWJsZWQuXG5cdFx0XHRcdFx0X3RpY2tlci53YWtlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIHQgPSBzZXRUaW1lb3V0KF9jaGVja1RpbWVvdXQsIDIwMDApO1xuXHRcdFx0XHRpZiAodC51bnJlZikge1xuXHRcdFx0XHRcdC8vIGFsbG93cyBhIG5vZGUgcHJvY2VzcyB0byBleGl0IGV2ZW4gaWYgdGhlIHRpbWVvdXTigJlzIGNhbGxiYWNrIGhhc24ndCBiZWVuIGludm9rZWQuIFdpdGhvdXQgaXQsIHRoZSBub2RlIHByb2Nlc3MgY291bGQgaGFuZyBhcyB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBldmVyeSB0d28gc2Vjb25kcy5cblx0XHRcdFx0XHR0LnVucmVmKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0X2NoZWNrVGltZW91dCgpO1xuXG5cblx0XHRwLnBsYXkgPSBmdW5jdGlvbihmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0aWYgKGZyb20gIT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLnNlZWsoZnJvbSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSk7XG5cdFx0fTtcblxuXHRcdHAucGF1c2UgPSBmdW5jdGlvbihhdFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRpZiAoYXRUaW1lICE9IG51bGwpIHtcblx0XHRcdFx0dGhpcy5zZWVrKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMucGF1c2VkKHRydWUpO1xuXHRcdH07XG5cblx0XHRwLnJlc3VtZSA9IGZ1bmN0aW9uKGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRpZiAoZnJvbSAhPSBudWxsKSB7XG5cdFx0XHRcdHRoaXMuc2Vlayhmcm9tLCBzdXBwcmVzc0V2ZW50cyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXVzZWQoZmFsc2UpO1xuXHRcdH07XG5cblx0XHRwLnNlZWsgPSBmdW5jdGlvbih0aW1lLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0cmV0dXJuIHRoaXMudG90YWxUaW1lKE51bWJlcih0aW1lKSwgc3VwcHJlc3NFdmVudHMgIT09IGZhbHNlKTtcblx0XHR9O1xuXG5cdFx0cC5yZXN0YXJ0ID0gZnVuY3Rpb24oaW5jbHVkZURlbGF5LCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0cmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSkudG90YWxUaW1lKGluY2x1ZGVEZWxheSA/IC10aGlzLl9kZWxheSA6IDAsIChzdXBwcmVzc0V2ZW50cyAhPT0gZmFsc2UpLCB0cnVlKTtcblx0XHR9O1xuXG5cdFx0cC5yZXZlcnNlID0gZnVuY3Rpb24oZnJvbSwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdGlmIChmcm9tICE9IG51bGwpIHtcblx0XHRcdFx0dGhpcy5zZWVrKChmcm9tIHx8IHRoaXMudG90YWxEdXJhdGlvbigpKSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMucmV2ZXJzZWQodHJ1ZSkucGF1c2VkKGZhbHNlKTtcblx0XHR9O1xuXG5cdFx0cC5yZW5kZXIgPSBmdW5jdGlvbih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcblx0XHRcdC8vc3R1YiAtIHdlIG92ZXJyaWRlIHRoaXMgbWV0aG9kIGluIHN1YmNsYXNzZXMuXG5cdFx0fTtcblxuXHRcdHAuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5fdGltZSA9IHRoaXMuX3RvdGFsVGltZSA9IDA7XG5cdFx0XHR0aGlzLl9pbml0dGVkID0gdGhpcy5fZ2MgPSBmYWxzZTtcblx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gLTE7XG5cdFx0XHRpZiAodGhpcy5fZ2MgfHwgIXRoaXMudGltZWxpbmUpIHtcblx0XHRcdFx0dGhpcy5fZW5hYmxlZCh0cnVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLmlzQWN0aXZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGwgPSB0aGlzLl90aW1lbGluZSwgLy90aGUgMiByb290IHRpbWVsaW5lcyB3b24ndCBoYXZlIGEgX3RpbWVsaW5lOyB0aGV5J3JlIGFsd2F5cyBhY3RpdmUuXG5cdFx0XHRcdHN0YXJ0VGltZSA9IHRoaXMuX3N0YXJ0VGltZSxcblx0XHRcdFx0cmF3VGltZTtcblx0XHRcdHJldHVybiAoIXRsIHx8ICghdGhpcy5fZ2MgJiYgIXRoaXMuX3BhdXNlZCAmJiB0bC5pc0FjdGl2ZSgpICYmIChyYXdUaW1lID0gdGwucmF3VGltZSh0cnVlKSkgPj0gc3RhcnRUaW1lICYmIHJhd1RpbWUgPCBzdGFydFRpbWUgKyB0aGlzLnRvdGFsRHVyYXRpb24oKSAvIHRoaXMuX3RpbWVTY2FsZSAtIF90aW55TnVtKSk7XG5cdFx0fTtcblxuXHRcdHAuX2VuYWJsZWQgPSBmdW5jdGlvbiAoZW5hYmxlZCwgaWdub3JlVGltZWxpbmUpIHtcblx0XHRcdGlmICghX3RpY2tlckFjdGl2ZSkge1xuXHRcdFx0XHRfdGlja2VyLndha2UoKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2djID0gIWVuYWJsZWQ7XG5cdFx0XHR0aGlzLl9hY3RpdmUgPSB0aGlzLmlzQWN0aXZlKCk7XG5cdFx0XHRpZiAoaWdub3JlVGltZWxpbmUgIT09IHRydWUpIHtcblx0XHRcdFx0aWYgKGVuYWJsZWQgJiYgIXRoaXMudGltZWxpbmUpIHtcblx0XHRcdFx0XHR0aGlzLl90aW1lbGluZS5hZGQodGhpcywgdGhpcy5fc3RhcnRUaW1lIC0gdGhpcy5fZGVsYXkpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCFlbmFibGVkICYmIHRoaXMudGltZWxpbmUpIHtcblx0XHRcdFx0XHR0aGlzLl90aW1lbGluZS5fcmVtb3ZlKHRoaXMsIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXG5cdFx0cC5fa2lsbCA9IGZ1bmN0aW9uKHZhcnMsIHRhcmdldCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHR9O1xuXG5cdFx0cC5raWxsID0gZnVuY3Rpb24odmFycywgdGFyZ2V0KSB7XG5cdFx0XHR0aGlzLl9raWxsKHZhcnMsIHRhcmdldCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5fdW5jYWNoZSA9IGZ1bmN0aW9uKGluY2x1ZGVTZWxmKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSBpbmNsdWRlU2VsZiA/IHRoaXMgOiB0aGlzLnRpbWVsaW5lO1xuXHRcdFx0d2hpbGUgKHR3ZWVuKSB7XG5cdFx0XHRcdHR3ZWVuLl9kaXJ0eSA9IHRydWU7XG5cdFx0XHRcdHR3ZWVuID0gdHdlZW4udGltZWxpbmU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5fc3dhcFNlbGZJblBhcmFtcyA9IGZ1bmN0aW9uKHBhcmFtcykge1xuXHRcdFx0dmFyIGkgPSBwYXJhbXMubGVuZ3RoLFxuXHRcdFx0XHRjb3B5ID0gcGFyYW1zLmNvbmNhdCgpO1xuXHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdGlmIChwYXJhbXNbaV0gPT09IFwie3NlbGZ9XCIpIHtcblx0XHRcdFx0XHRjb3B5W2ldID0gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNvcHk7XG5cdFx0fTtcblxuXHRcdHAuX2NhbGxiYWNrID0gZnVuY3Rpb24odHlwZSkge1xuXHRcdFx0dmFyIHYgPSB0aGlzLnZhcnMsXG5cdFx0XHRcdGNhbGxiYWNrID0gdlt0eXBlXSxcblx0XHRcdFx0cGFyYW1zID0gdlt0eXBlICsgXCJQYXJhbXNcIl0sXG5cdFx0XHRcdHNjb3BlID0gdlt0eXBlICsgXCJTY29wZVwiXSB8fCB2LmNhbGxiYWNrU2NvcGUgfHwgdGhpcyxcblx0XHRcdFx0bCA9IHBhcmFtcyA/IHBhcmFtcy5sZW5ndGggOiAwO1xuXHRcdFx0c3dpdGNoIChsKSB7IC8vc3BlZWQgb3B0aW1pemF0aW9uOyBjYWxsKCkgaXMgZmFzdGVyIHRoYW4gYXBwbHkoKSBzbyB1c2UgaXQgd2hlbiB0aGVyZSBhcmUgb25seSBhIGZldyBwYXJhbWV0ZXJzICh3aGljaCBpcyBieSBmYXIgbW9zdCBjb21tb24pLiBQcmV2aW91c2x5IHdlIHNpbXBseSBkaWQgdmFyIHYgPSB0aGlzLnZhcnM7IHZbdHlwZV0uYXBwbHkodlt0eXBlICsgXCJTY29wZVwiXSB8fCB2LmNhbGxiYWNrU2NvcGUgfHwgdGhpcywgdlt0eXBlICsgXCJQYXJhbXNcIl0gfHwgX2JsYW5rQXJyYXkpO1xuXHRcdFx0XHRjYXNlIDA6IGNhbGxiYWNrLmNhbGwoc2NvcGUpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAxOiBjYWxsYmFjay5jYWxsKHNjb3BlLCBwYXJhbXNbMF0pOyBicmVhaztcblx0XHRcdFx0Y2FzZSAyOiBjYWxsYmFjay5jYWxsKHNjb3BlLCBwYXJhbXNbMF0sIHBhcmFtc1sxXSk7IGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OiBjYWxsYmFjay5hcHBseShzY29wZSwgcGFyYW1zKTtcblx0XHRcdH1cblx0XHR9O1xuXG4vLy0tLS1BbmltYXRpb24gZ2V0dGVycy9zZXR0ZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHRwLmV2ZW50Q2FsbGJhY2sgPSBmdW5jdGlvbih0eXBlLCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSkge1xuXHRcdFx0aWYgKCh0eXBlIHx8IFwiXCIpLnN1YnN0cigwLDIpID09PSBcIm9uXCIpIHtcblx0XHRcdFx0dmFyIHYgPSB0aGlzLnZhcnM7XG5cdFx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZbdHlwZV07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGNhbGxiYWNrID09IG51bGwpIHtcblx0XHRcdFx0XHRkZWxldGUgdlt0eXBlXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2W3R5cGVdID0gY2FsbGJhY2s7XG5cdFx0XHRcdFx0dlt0eXBlICsgXCJQYXJhbXNcIl0gPSAoX2lzQXJyYXkocGFyYW1zKSAmJiBwYXJhbXMuam9pbihcIlwiKS5pbmRleE9mKFwie3NlbGZ9XCIpICE9PSAtMSkgPyB0aGlzLl9zd2FwU2VsZkluUGFyYW1zKHBhcmFtcykgOiBwYXJhbXM7XG5cdFx0XHRcdFx0dlt0eXBlICsgXCJTY29wZVwiXSA9IHNjb3BlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0eXBlID09PSBcIm9uVXBkYXRlXCIpIHtcblx0XHRcdFx0XHR0aGlzLl9vblVwZGF0ZSA9IGNhbGxiYWNrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5kZWxheSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2RlbGF5O1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nKSB7XG5cdFx0XHRcdHRoaXMuc3RhcnRUaW1lKCB0aGlzLl9zdGFydFRpbWUgKyB2YWx1ZSAtIHRoaXMuX2RlbGF5ICk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9kZWxheSA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHAuZHVyYXRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHRoaXMuX2RpcnR5ID0gZmFsc2U7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9kdXJhdGlvbjtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2R1cmF0aW9uID0gdGhpcy5fdG90YWxEdXJhdGlvbiA9IHZhbHVlO1xuXHRcdFx0dGhpcy5fdW5jYWNoZSh0cnVlKTsgLy90cnVlIGluIGNhc2UgaXQncyBhIFR3ZWVuTWF4IG9yIFRpbWVsaW5lTWF4IHRoYXQgaGFzIGEgcmVwZWF0IC0gd2UnbGwgbmVlZCB0byByZWZyZXNoIHRoZSB0b3RhbER1cmF0aW9uLlxuXHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nKSBpZiAodGhpcy5fdGltZSA+IDApIGlmICh0aGlzLl90aW1lIDwgdGhpcy5fZHVyYXRpb24pIGlmICh2YWx1ZSAhPT0gMCkge1xuXHRcdFx0XHR0aGlzLnRvdGFsVGltZSh0aGlzLl90b3RhbFRpbWUgKiAodmFsdWUgLyB0aGlzLl9kdXJhdGlvbiksIHRydWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHAudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0cmV0dXJuICghYXJndW1lbnRzLmxlbmd0aCkgPyB0aGlzLl90b3RhbER1cmF0aW9uIDogdGhpcy5kdXJhdGlvbih2YWx1ZSk7XG5cdFx0fTtcblxuXHRcdHAudGltZSA9IGZ1bmN0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl90aW1lO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX2RpcnR5KSB7XG5cdFx0XHRcdHRoaXMudG90YWxEdXJhdGlvbigpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMudG90YWxUaW1lKCh2YWx1ZSA+IHRoaXMuX2R1cmF0aW9uKSA/IHRoaXMuX2R1cmF0aW9uIDogdmFsdWUsIHN1cHByZXNzRXZlbnRzKTtcblx0XHR9O1xuXG5cdFx0cC50b3RhbFRpbWUgPSBmdW5jdGlvbih0aW1lLCBzdXBwcmVzc0V2ZW50cywgdW5jYXBwZWQpIHtcblx0XHRcdGlmICghX3RpY2tlckFjdGl2ZSkge1xuXHRcdFx0XHRfdGlja2VyLndha2UoKTtcblx0XHRcdH1cblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fdG90YWxUaW1lO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdGlmICh0aW1lIDwgMCAmJiAhdW5jYXBwZWQpIHtcblx0XHRcdFx0XHR0aW1lICs9IHRoaXMudG90YWxEdXJhdGlvbigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLl90aW1lbGluZS5zbW9vdGhDaGlsZFRpbWluZykge1xuXHRcdFx0XHRcdGlmICh0aGlzLl9kaXJ0eSkge1xuXHRcdFx0XHRcdFx0dGhpcy50b3RhbER1cmF0aW9uKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciB0b3RhbER1cmF0aW9uID0gdGhpcy5fdG90YWxEdXJhdGlvbixcblx0XHRcdFx0XHRcdHRsID0gdGhpcy5fdGltZWxpbmU7XG5cdFx0XHRcdFx0aWYgKHRpbWUgPiB0b3RhbER1cmF0aW9uICYmICF1bmNhcHBlZCkge1xuXHRcdFx0XHRcdFx0dGltZSA9IHRvdGFsRHVyYXRpb247XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0VGltZSA9ICh0aGlzLl9wYXVzZWQgPyB0aGlzLl9wYXVzZVRpbWUgOiB0bC5fdGltZSkgLSAoKCF0aGlzLl9yZXZlcnNlZCA/IHRpbWUgOiB0b3RhbER1cmF0aW9uIC0gdGltZSkgLyB0aGlzLl90aW1lU2NhbGUpO1xuXHRcdFx0XHRcdGlmICghdGwuX2RpcnR5KSB7IC8vZm9yIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LiBJZiB0aGUgcGFyZW50J3MgY2FjaGUgaXMgYWxyZWFkeSBkaXJ0eSwgaXQgYWxyZWFkeSB0b29rIGNhcmUgb2YgbWFya2luZyB0aGUgYW5jZXN0b3JzIGFzIGRpcnR5IHRvbywgc28gc2tpcCB0aGUgZnVuY3Rpb24gY2FsbCBoZXJlLlxuXHRcdFx0XHRcdFx0dGhpcy5fdW5jYWNoZShmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9yIHRpbWVsaW5lcyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQsIHdlIHNob3VsZCByZXNldCB0aGVpciB0b3RhbFRpbWUoKSB3aGljaCB3aWxsIGFsc28gZW5zdXJlIHRoYXQgdGhleSdyZSBsaW5lZCB1cCBwcm9wZXJseSBhbmQgZW5hYmxlZC4gU2tpcCBmb3IgYW5pbWF0aW9ucyB0aGF0IGFyZSBvbiB0aGUgcm9vdCAod2FzdGVmdWwpLiBFeGFtcGxlOiBhIFRpbWVsaW5lTGl0ZS5leHBvcnRSb290KCkgaXMgcGVyZm9ybWVkIHdoZW4gdGhlcmUncyBhIHBhdXNlZCB0d2VlbiBvbiB0aGUgcm9vdCwgdGhlIGV4cG9ydCB3aWxsIG5vdCBjb21wbGV0ZSB1bnRpbCB0aGF0IHR3ZWVuIGlzIHVucGF1c2VkLCBidXQgaW1hZ2luZSBhIGNoaWxkIGdldHMgcmVzdGFydGVkIGxhdGVyLCBhZnRlciBhbGwgW3VucGF1c2VkXSB0d2VlbnMgaGF2ZSBjb21wbGV0ZWQuIFRoZSBzdGFydFRpbWUgb2YgdGhhdCBjaGlsZCB3b3VsZCBnZXQgcHVzaGVkIG91dCwgYnV0IG9uZSBvZiB0aGUgYW5jZXN0b3JzIG1heSBoYXZlIGNvbXBsZXRlZC5cblx0XHRcdFx0XHRpZiAodGwuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAodGwuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdFx0XHRcdGlmICh0bC5fdGltZWxpbmUuX3RpbWUgIT09ICh0bC5fc3RhcnRUaW1lICsgdGwuX3RvdGFsVGltZSkgLyB0bC5fdGltZVNjYWxlKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGwudG90YWxUaW1lKHRsLl90b3RhbFRpbWUsIHRydWUpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRsID0gdGwuX3RpbWVsaW5lO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5fZ2MpIHtcblx0XHRcdFx0XHR0aGlzLl9lbmFibGVkKHRydWUsIGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5fdG90YWxUaW1lICE9PSB0aW1lIHx8IHRoaXMuX2R1cmF0aW9uID09PSAwKSB7XG5cdFx0XHRcdFx0aWYgKF9sYXp5VHdlZW5zLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0X2xhenlSZW5kZXIoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZhbHNlKTtcblx0XHRcdFx0XHRpZiAoX2xhenlUd2VlbnMubGVuZ3RoKSB7IC8vaW4gY2FzZSByZW5kZXJpbmcgY2F1c2VkIGFueSB0d2VlbnMgdG8gbGF6eS1pbml0LCB3ZSBzaG91bGQgcmVuZGVyIHRoZW0gYmVjYXVzZSB0eXBpY2FsbHkgd2hlbiBzb21lb25lIGNhbGxzIHNlZWsoKSBvciB0aW1lKCkgb3IgcHJvZ3Jlc3MoKSwgdGhleSBleHBlY3QgYW4gaW1tZWRpYXRlIHJlbmRlci5cblx0XHRcdFx0XHRcdF9sYXp5UmVuZGVyKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5wcm9ncmVzcyA9IHAudG90YWxQcm9ncmVzcyA9IGZ1bmN0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0dmFyIGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpO1xuXHRcdFx0cmV0dXJuICghYXJndW1lbnRzLmxlbmd0aCkgPyAoZHVyYXRpb24gPyB0aGlzLl90aW1lIC8gZHVyYXRpb24gOiB0aGlzLnJhdGlvKSA6IHRoaXMudG90YWxUaW1lKGR1cmF0aW9uICogdmFsdWUsIHN1cHByZXNzRXZlbnRzKTtcblx0XHR9O1xuXG5cdFx0cC5zdGFydFRpbWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9zdGFydFRpbWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAodmFsdWUgIT09IHRoaXMuX3N0YXJ0VGltZSkge1xuXHRcdFx0XHR0aGlzLl9zdGFydFRpbWUgPSB2YWx1ZTtcblx0XHRcdFx0aWYgKHRoaXMudGltZWxpbmUpIGlmICh0aGlzLnRpbWVsaW5lLl9zb3J0Q2hpbGRyZW4pIHtcblx0XHRcdFx0XHR0aGlzLnRpbWVsaW5lLmFkZCh0aGlzLCB2YWx1ZSAtIHRoaXMuX2RlbGF5KTsgLy9lbnN1cmVzIHRoYXQgYW55IG5lY2Vzc2FyeSByZS1zZXF1ZW5jaW5nIG9mIEFuaW1hdGlvbnMgaW4gdGhlIHRpbWVsaW5lIG9jY3VycyB0byBtYWtlIHN1cmUgdGhlIHJlbmRlcmluZyBvcmRlciBpcyBjb3JyZWN0LlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5lbmRUaW1lID0gZnVuY3Rpb24oaW5jbHVkZVJlcGVhdHMpIHtcblx0XHRcdHJldHVybiB0aGlzLl9zdGFydFRpbWUgKyAoKGluY2x1ZGVSZXBlYXRzICE9IGZhbHNlKSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5kdXJhdGlvbigpKSAvIHRoaXMuX3RpbWVTY2FsZTtcblx0XHR9O1xuXG5cdFx0cC50aW1lU2NhbGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl90aW1lU2NhbGU7XG5cdFx0XHR9XG5cdFx0XHR2YXIgcGF1c2VUaW1lLCB0O1xuXHRcdFx0dmFsdWUgPSB2YWx1ZSB8fCBfdGlueU51bTsgLy9jYW4ndCBhbGxvdyB6ZXJvIGJlY2F1c2UgaXQnbGwgdGhyb3cgdGhlIG1hdGggb2ZmXG5cdFx0XHRpZiAodGhpcy5fdGltZWxpbmUgJiYgdGhpcy5fdGltZWxpbmUuc21vb3RoQ2hpbGRUaW1pbmcpIHtcblx0XHRcdFx0cGF1c2VUaW1lID0gdGhpcy5fcGF1c2VUaW1lO1xuXHRcdFx0XHR0ID0gKHBhdXNlVGltZSB8fCBwYXVzZVRpbWUgPT09IDApID8gcGF1c2VUaW1lIDogdGhpcy5fdGltZWxpbmUudG90YWxUaW1lKCk7XG5cdFx0XHRcdHRoaXMuX3N0YXJ0VGltZSA9IHQgLSAoKHQgLSB0aGlzLl9zdGFydFRpbWUpICogdGhpcy5fdGltZVNjYWxlIC8gdmFsdWUpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fdGltZVNjYWxlID0gdmFsdWU7XG5cdFx0XHR0ID0gdGhpcy50aW1lbGluZTtcblx0XHRcdHdoaWxlICh0ICYmIHQudGltZWxpbmUpIHsgLy9tdXN0IHVwZGF0ZSB0aGUgZHVyYXRpb24vdG90YWxEdXJhdGlvbiBvZiBhbGwgYW5jZXN0b3IgdGltZWxpbmVzIGltbWVkaWF0ZWx5IGluIGNhc2UgaW4gdGhlIG1pZGRsZSBvZiBhIHJlbmRlciBsb29wLCBvbmUgdHdlZW4gYWx0ZXJzIGFub3RoZXIgdHdlZW4ncyB0aW1lU2NhbGUgd2hpY2ggc2hvdmVzIGl0cyBzdGFydFRpbWUgYmVmb3JlIDAsIGZvcmNpbmcgdGhlIHBhcmVudCB0aW1lbGluZSB0byBzaGlmdCBhcm91bmQgYW5kIHNoaWZ0Q2hpbGRyZW4oKSB3aGljaCBjb3VsZCBhZmZlY3QgdGhhdCBuZXh0IHR3ZWVuJ3MgcmVuZGVyIChzdGFydFRpbWUpLiBEb2Vzbid0IG1hdHRlciBmb3IgdGhlIHJvb3QgdGltZWxpbmUgdGhvdWdoLlxuXHRcdFx0XHR0Ll9kaXJ0eSA9IHRydWU7XG5cdFx0XHRcdHQudG90YWxEdXJhdGlvbigpO1xuXHRcdFx0XHR0ID0gdC50aW1lbGluZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLnJldmVyc2VkID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fcmV2ZXJzZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAodmFsdWUgIT0gdGhpcy5fcmV2ZXJzZWQpIHtcblx0XHRcdFx0dGhpcy5fcmV2ZXJzZWQgPSB2YWx1ZTtcblx0XHRcdFx0dGhpcy50b3RhbFRpbWUoKCh0aGlzLl90aW1lbGluZSAmJiAhdGhpcy5fdGltZWxpbmUuc21vb3RoQ2hpbGRUaW1pbmcpID8gdGhpcy50b3RhbER1cmF0aW9uKCkgLSB0aGlzLl90b3RhbFRpbWUgOiB0aGlzLl90b3RhbFRpbWUpLCB0cnVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLnBhdXNlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3BhdXNlZDtcblx0XHRcdH1cblx0XHRcdHZhciB0bCA9IHRoaXMuX3RpbWVsaW5lLFxuXHRcdFx0XHRyYXcsIGVsYXBzZWQ7XG5cdFx0XHRpZiAodmFsdWUgIT0gdGhpcy5fcGF1c2VkKSBpZiAodGwpIHtcblx0XHRcdFx0aWYgKCFfdGlja2VyQWN0aXZlICYmICF2YWx1ZSkge1xuXHRcdFx0XHRcdF90aWNrZXIud2FrZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJhdyA9IHRsLnJhd1RpbWUoKTtcblx0XHRcdFx0ZWxhcHNlZCA9IHJhdyAtIHRoaXMuX3BhdXNlVGltZTtcblx0XHRcdFx0aWYgKCF2YWx1ZSAmJiB0bC5zbW9vdGhDaGlsZFRpbWluZykge1xuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0VGltZSArPSBlbGFwc2VkO1xuXHRcdFx0XHRcdHRoaXMuX3VuY2FjaGUoZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX3BhdXNlVGltZSA9IHZhbHVlID8gcmF3IDogbnVsbDtcblx0XHRcdFx0dGhpcy5fcGF1c2VkID0gdmFsdWU7XG5cdFx0XHRcdHRoaXMuX2FjdGl2ZSA9IHRoaXMuaXNBY3RpdmUoKTtcblx0XHRcdFx0aWYgKCF2YWx1ZSAmJiBlbGFwc2VkICE9PSAwICYmIHRoaXMuX2luaXR0ZWQgJiYgdGhpcy5kdXJhdGlvbigpKSB7XG5cdFx0XHRcdFx0cmF3ID0gdGwuc21vb3RoQ2hpbGRUaW1pbmcgPyB0aGlzLl90b3RhbFRpbWUgOiAocmF3IC0gdGhpcy5fc3RhcnRUaW1lKSAvIHRoaXMuX3RpbWVTY2FsZTtcblx0XHRcdFx0XHR0aGlzLnJlbmRlcihyYXcsIChyYXcgPT09IHRoaXMuX3RvdGFsVGltZSksIHRydWUpOyAvL2luIGNhc2UgdGhlIHRhcmdldCdzIHByb3BlcnRpZXMgY2hhbmdlZCB2aWEgc29tZSBvdGhlciB0d2VlbiBvciBtYW51YWwgdXBkYXRlIGJ5IHRoZSB1c2VyLCB3ZSBzaG91bGQgZm9yY2UgYSByZW5kZXIuXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLl9nYyAmJiAhdmFsdWUpIHtcblx0XHRcdFx0dGhpcy5fZW5hYmxlZCh0cnVlLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBTaW1wbGVUaW1lbGluZVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cdFx0dmFyIFNpbXBsZVRpbWVsaW5lID0gX2NsYXNzKFwiY29yZS5TaW1wbGVUaW1lbGluZVwiLCBmdW5jdGlvbih2YXJzKSB7XG5cdFx0XHRBbmltYXRpb24uY2FsbCh0aGlzLCAwLCB2YXJzKTtcblx0XHRcdHRoaXMuYXV0b1JlbW92ZUNoaWxkcmVuID0gdGhpcy5zbW9vdGhDaGlsZFRpbWluZyA9IHRydWU7XG5cdFx0fSk7XG5cblx0XHRwID0gU2ltcGxlVGltZWxpbmUucHJvdG90eXBlID0gbmV3IEFuaW1hdGlvbigpO1xuXHRcdHAuY29uc3RydWN0b3IgPSBTaW1wbGVUaW1lbGluZTtcblx0XHRwLmtpbGwoKS5fZ2MgPSBmYWxzZTtcblx0XHRwLl9maXJzdCA9IHAuX2xhc3QgPSBwLl9yZWNlbnQgPSBudWxsO1xuXHRcdHAuX3NvcnRDaGlsZHJlbiA9IGZhbHNlO1xuXG5cdFx0cC5hZGQgPSBwLmluc2VydCA9IGZ1bmN0aW9uKGNoaWxkLCBwb3NpdGlvbiwgYWxpZ24sIHN0YWdnZXIpIHtcblx0XHRcdHZhciBwcmV2VHdlZW4sIHN0O1xuXHRcdFx0Y2hpbGQuX3N0YXJ0VGltZSA9IE51bWJlcihwb3NpdGlvbiB8fCAwKSArIGNoaWxkLl9kZWxheTtcblx0XHRcdGlmIChjaGlsZC5fcGF1c2VkKSBpZiAodGhpcyAhPT0gY2hpbGQuX3RpbWVsaW5lKSB7IC8vd2Ugb25seSBhZGp1c3QgdGhlIF9wYXVzZVRpbWUgaWYgaXQgd2Fzbid0IGluIHRoaXMgdGltZWxpbmUgYWxyZWFkeS4gUmVtZW1iZXIsIHNvbWV0aW1lcyBhIHR3ZWVuIHdpbGwgYmUgaW5zZXJ0ZWQgYWdhaW4gaW50byB0aGUgc2FtZSB0aW1lbGluZSB3aGVuIGl0cyBzdGFydFRpbWUgaXMgY2hhbmdlZCBzbyB0aGF0IHRoZSB0d2VlbnMgaW4gdGhlIFRpbWVsaW5lTGl0ZS9NYXggYXJlIHJlLW9yZGVyZWQgcHJvcGVybHkgaW4gdGhlIGxpbmtlZCBsaXN0IChzbyBldmVyeXRoaW5nIHJlbmRlcnMgaW4gdGhlIHByb3BlciBvcmRlcikuXG5cdFx0XHRcdGNoaWxkLl9wYXVzZVRpbWUgPSB0aGlzLnJhd1RpbWUoKSAtIChjaGlsZC5fdGltZWxpbmUucmF3VGltZSgpIC0gY2hpbGQuX3BhdXNlVGltZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY2hpbGQudGltZWxpbmUpIHtcblx0XHRcdFx0Y2hpbGQudGltZWxpbmUuX3JlbW92ZShjaGlsZCwgdHJ1ZSk7IC8vcmVtb3ZlcyBmcm9tIGV4aXN0aW5nIHRpbWVsaW5lIHNvIHRoYXQgaXQgY2FuIGJlIHByb3Blcmx5IGFkZGVkIHRvIHRoaXMgb25lLlxuXHRcdFx0fVxuXHRcdFx0Y2hpbGQudGltZWxpbmUgPSBjaGlsZC5fdGltZWxpbmUgPSB0aGlzO1xuXHRcdFx0aWYgKGNoaWxkLl9nYykge1xuXHRcdFx0XHRjaGlsZC5fZW5hYmxlZCh0cnVlLCB0cnVlKTtcblx0XHRcdH1cblx0XHRcdHByZXZUd2VlbiA9IHRoaXMuX2xhc3Q7XG5cdFx0XHRpZiAodGhpcy5fc29ydENoaWxkcmVuKSB7XG5cdFx0XHRcdHN0ID0gY2hpbGQuX3N0YXJ0VGltZTtcblx0XHRcdFx0d2hpbGUgKHByZXZUd2VlbiAmJiBwcmV2VHdlZW4uX3N0YXJ0VGltZSA+IHN0KSB7XG5cdFx0XHRcdFx0cHJldlR3ZWVuID0gcHJldlR3ZWVuLl9wcmV2O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAocHJldlR3ZWVuKSB7XG5cdFx0XHRcdGNoaWxkLl9uZXh0ID0gcHJldlR3ZWVuLl9uZXh0O1xuXHRcdFx0XHRwcmV2VHdlZW4uX25leHQgPSBjaGlsZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNoaWxkLl9uZXh0ID0gdGhpcy5fZmlyc3Q7XG5cdFx0XHRcdHRoaXMuX2ZpcnN0ID0gY2hpbGQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY2hpbGQuX25leHQpIHtcblx0XHRcdFx0Y2hpbGQuX25leHQuX3ByZXYgPSBjaGlsZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX2xhc3QgPSBjaGlsZDtcblx0XHRcdH1cblx0XHRcdGNoaWxkLl9wcmV2ID0gcHJldlR3ZWVuO1xuXHRcdFx0dGhpcy5fcmVjZW50ID0gY2hpbGQ7XG5cdFx0XHRpZiAodGhpcy5fdGltZWxpbmUpIHtcblx0XHRcdFx0dGhpcy5fdW5jYWNoZSh0cnVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLl9yZW1vdmUgPSBmdW5jdGlvbih0d2Vlbiwgc2tpcERpc2FibGUpIHtcblx0XHRcdGlmICh0d2Vlbi50aW1lbGluZSA9PT0gdGhpcykge1xuXHRcdFx0XHRpZiAoIXNraXBEaXNhYmxlKSB7XG5cdFx0XHRcdFx0dHdlZW4uX2VuYWJsZWQoZmFsc2UsIHRydWUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHR3ZWVuLl9wcmV2KSB7XG5cdFx0XHRcdFx0dHdlZW4uX3ByZXYuX25leHQgPSB0d2Vlbi5fbmV4dDtcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLl9maXJzdCA9PT0gdHdlZW4pIHtcblx0XHRcdFx0XHR0aGlzLl9maXJzdCA9IHR3ZWVuLl9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0d2Vlbi5fbmV4dCkge1xuXHRcdFx0XHRcdHR3ZWVuLl9uZXh0Ll9wcmV2ID0gdHdlZW4uX3ByZXY7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5fbGFzdCA9PT0gdHdlZW4pIHtcblx0XHRcdFx0XHR0aGlzLl9sYXN0ID0gdHdlZW4uX3ByZXY7XG5cdFx0XHRcdH1cblx0XHRcdFx0dHdlZW4uX25leHQgPSB0d2Vlbi5fcHJldiA9IHR3ZWVuLnRpbWVsaW5lID0gbnVsbDtcblx0XHRcdFx0aWYgKHR3ZWVuID09PSB0aGlzLl9yZWNlbnQpIHtcblx0XHRcdFx0XHR0aGlzLl9yZWNlbnQgPSB0aGlzLl9sYXN0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdFx0dGhpcy5fdW5jYWNoZSh0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHAucmVuZGVyID0gZnVuY3Rpb24odGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLl9maXJzdCxcblx0XHRcdFx0bmV4dDtcblx0XHRcdHRoaXMuX3RvdGFsVGltZSA9IHRoaXMuX3RpbWUgPSB0aGlzLl9yYXdQcmV2VGltZSA9IHRpbWU7XG5cdFx0XHR3aGlsZSAodHdlZW4pIHtcblx0XHRcdFx0bmV4dCA9IHR3ZWVuLl9uZXh0OyAvL3JlY29yZCBpdCBoZXJlIGJlY2F1c2UgdGhlIHZhbHVlIGNvdWxkIGNoYW5nZSBhZnRlciByZW5kZXJpbmcuLi5cblx0XHRcdFx0aWYgKHR3ZWVuLl9hY3RpdmUgfHwgKHRpbWUgPj0gdHdlZW4uX3N0YXJ0VGltZSAmJiAhdHdlZW4uX3BhdXNlZCAmJiAhdHdlZW4uX2djKSkge1xuXHRcdFx0XHRcdGlmICghdHdlZW4uX3JldmVyc2VkKSB7XG5cdFx0XHRcdFx0XHR0d2Vlbi5yZW5kZXIoKHRpbWUgLSB0d2Vlbi5fc3RhcnRUaW1lKSAqIHR3ZWVuLl90aW1lU2NhbGUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHR3ZWVuLnJlbmRlcigoKCF0d2Vlbi5fZGlydHkpID8gdHdlZW4uX3RvdGFsRHVyYXRpb24gOiB0d2Vlbi50b3RhbER1cmF0aW9uKCkpIC0gKCh0aW1lIC0gdHdlZW4uX3N0YXJ0VGltZSkgKiB0d2Vlbi5fdGltZVNjYWxlKSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0dHdlZW4gPSBuZXh0O1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRwLnJhd1RpbWUgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICghX3RpY2tlckFjdGl2ZSkge1xuXHRcdFx0XHRfdGlja2VyLndha2UoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLl90b3RhbFRpbWU7XG5cdFx0fTtcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFR3ZWVuTGl0ZVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cdFx0dmFyIFR3ZWVuTGl0ZSA9IF9jbGFzcyhcIlR3ZWVuTGl0ZVwiLCBmdW5jdGlvbih0YXJnZXQsIGR1cmF0aW9uLCB2YXJzKSB7XG5cdFx0XHRcdEFuaW1hdGlvbi5jYWxsKHRoaXMsIGR1cmF0aW9uLCB2YXJzKTtcblx0XHRcdFx0dGhpcy5yZW5kZXIgPSBUd2VlbkxpdGUucHJvdG90eXBlLnJlbmRlcjsgLy9zcGVlZCBvcHRpbWl6YXRpb24gKGF2b2lkIHByb3RvdHlwZSBsb29rdXAgb24gdGhpcyBcImhvdFwiIG1ldGhvZClcblxuXHRcdFx0XHRpZiAodGFyZ2V0ID09IG51bGwpIHtcblx0XHRcdFx0XHR0aHJvdyBcIkNhbm5vdCB0d2VlbiBhIG51bGwgdGFyZ2V0LlwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy50YXJnZXQgPSB0YXJnZXQgPSAodHlwZW9mKHRhcmdldCkgIT09IFwic3RyaW5nXCIpID8gdGFyZ2V0IDogVHdlZW5MaXRlLnNlbGVjdG9yKHRhcmdldCkgfHwgdGFyZ2V0O1xuXG5cdFx0XHRcdHZhciBpc1NlbGVjdG9yID0gKHRhcmdldC5qcXVlcnkgfHwgKHRhcmdldC5sZW5ndGggJiYgdGFyZ2V0ICE9PSB3aW5kb3cgJiYgdGFyZ2V0WzBdICYmICh0YXJnZXRbMF0gPT09IHdpbmRvdyB8fCAodGFyZ2V0WzBdLm5vZGVUeXBlICYmIHRhcmdldFswXS5zdHlsZSAmJiAhdGFyZ2V0Lm5vZGVUeXBlKSkpKSxcblx0XHRcdFx0XHRvdmVyd3JpdGUgPSB0aGlzLnZhcnMub3ZlcndyaXRlLFxuXHRcdFx0XHRcdGksIHRhcmcsIHRhcmdldHM7XG5cblx0XHRcdFx0dGhpcy5fb3ZlcndyaXRlID0gb3ZlcndyaXRlID0gKG92ZXJ3cml0ZSA9PSBudWxsKSA/IF9vdmVyd3JpdGVMb29rdXBbVHdlZW5MaXRlLmRlZmF1bHRPdmVyd3JpdGVdIDogKHR5cGVvZihvdmVyd3JpdGUpID09PSBcIm51bWJlclwiKSA/IG92ZXJ3cml0ZSA+PiAwIDogX292ZXJ3cml0ZUxvb2t1cFtvdmVyd3JpdGVdO1xuXG5cdFx0XHRcdGlmICgoaXNTZWxlY3RvciB8fCB0YXJnZXQgaW5zdGFuY2VvZiBBcnJheSB8fCAodGFyZ2V0LnB1c2ggJiYgX2lzQXJyYXkodGFyZ2V0KSkpICYmIHR5cGVvZih0YXJnZXRbMF0pICE9PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdFx0dGhpcy5fdGFyZ2V0cyA9IHRhcmdldHMgPSBfc2xpY2UodGFyZ2V0KTsgIC8vZG9uJ3QgdXNlIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRhcmdldCwgMCkgYmVjYXVzZSB0aGF0IGRvZXNuJ3Qgd29yayBpbiBJRTggd2l0aCBhIE5vZGVMaXN0IHRoYXQncyByZXR1cm5lZCBieSBxdWVyeVNlbGVjdG9yQWxsKClcblx0XHRcdFx0XHR0aGlzLl9wcm9wTG9va3VwID0gW107XG5cdFx0XHRcdFx0dGhpcy5fc2libGluZ3MgPSBbXTtcblx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0dGFyZyA9IHRhcmdldHNbaV07XG5cdFx0XHRcdFx0XHRpZiAoIXRhcmcpIHtcblx0XHRcdFx0XHRcdFx0dGFyZ2V0cy5zcGxpY2UoaS0tLCAxKTtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZih0YXJnKSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdFx0XHR0YXJnID0gdGFyZ2V0c1tpLS1dID0gVHdlZW5MaXRlLnNlbGVjdG9yKHRhcmcpOyAvL2luIGNhc2UgaXQncyBhbiBhcnJheSBvZiBzdHJpbmdzXG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YodGFyZykgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0XHRcdFx0XHR0YXJnZXRzLnNwbGljZShpKzEsIDEpOyAvL3RvIGF2b2lkIGFuIGVuZGxlc3MgbG9vcCAoY2FuJ3QgaW1hZ2luZSB3aHkgdGhlIHNlbGVjdG9yIHdvdWxkIHJldHVybiBhIHN0cmluZywgYnV0IGp1c3QgaW4gY2FzZSlcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodGFyZy5sZW5ndGggJiYgdGFyZyAhPT0gd2luZG93ICYmIHRhcmdbMF0gJiYgKHRhcmdbMF0gPT09IHdpbmRvdyB8fCAodGFyZ1swXS5ub2RlVHlwZSAmJiB0YXJnWzBdLnN0eWxlICYmICF0YXJnLm5vZGVUeXBlKSkpIHsgLy9pbiBjYXNlIHRoZSB1c2VyIGlzIHBhc3NpbmcgaW4gYW4gYXJyYXkgb2Ygc2VsZWN0b3Igb2JqZWN0cyAobGlrZSBqUXVlcnkgb2JqZWN0cyksIHdlIG5lZWQgdG8gY2hlY2sgb25lIG1vcmUgbGV2ZWwgYW5kIHB1bGwgdGhpbmdzIG91dCBpZiBuZWNlc3NhcnkuIEFsc28gbm90ZSB0aGF0IDxzZWxlY3Q+IGVsZW1lbnRzIHBhc3MgYWxsIHRoZSBjcml0ZXJpYSByZWdhcmRpbmcgbGVuZ3RoIGFuZCB0aGUgZmlyc3QgY2hpbGQgaGF2aW5nIHN0eWxlLCBzbyB3ZSBtdXN0IGFsc28gY2hlY2sgdG8gZW5zdXJlIHRoZSB0YXJnZXQgaXNuJ3QgYW4gSFRNTCBub2RlIGl0c2VsZi5cblx0XHRcdFx0XHRcdFx0dGFyZ2V0cy5zcGxpY2UoaS0tLCAxKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5fdGFyZ2V0cyA9IHRhcmdldHMgPSB0YXJnZXRzLmNvbmNhdChfc2xpY2UodGFyZykpO1xuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRoaXMuX3NpYmxpbmdzW2ldID0gX3JlZ2lzdGVyKHRhcmcsIHRoaXMsIGZhbHNlKTtcblx0XHRcdFx0XHRcdGlmIChvdmVyd3JpdGUgPT09IDEpIGlmICh0aGlzLl9zaWJsaW5nc1tpXS5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdFx0XHRcdF9hcHBseU92ZXJ3cml0ZSh0YXJnLCB0aGlzLCBudWxsLCAxLCB0aGlzLl9zaWJsaW5nc1tpXSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fcHJvcExvb2t1cCA9IHt9O1xuXHRcdFx0XHRcdHRoaXMuX3NpYmxpbmdzID0gX3JlZ2lzdGVyKHRhcmdldCwgdGhpcywgZmFsc2UpO1xuXHRcdFx0XHRcdGlmIChvdmVyd3JpdGUgPT09IDEpIGlmICh0aGlzLl9zaWJsaW5ncy5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdFx0XHRfYXBwbHlPdmVyd3JpdGUodGFyZ2V0LCB0aGlzLCBudWxsLCAxLCB0aGlzLl9zaWJsaW5ncyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLnZhcnMuaW1tZWRpYXRlUmVuZGVyIHx8IChkdXJhdGlvbiA9PT0gMCAmJiB0aGlzLl9kZWxheSA9PT0gMCAmJiB0aGlzLnZhcnMuaW1tZWRpYXRlUmVuZGVyICE9PSBmYWxzZSkpIHtcblx0XHRcdFx0XHR0aGlzLl90aW1lID0gLV90aW55TnVtOyAvL2ZvcmNlcyBhIHJlbmRlciB3aXRob3V0IGhhdmluZyB0byBzZXQgdGhlIHJlbmRlcigpIFwiZm9yY2VcIiBwYXJhbWV0ZXIgdG8gdHJ1ZSBiZWNhdXNlIHdlIHdhbnQgdG8gYWxsb3cgbGF6eWluZyBieSBkZWZhdWx0ICh1c2luZyB0aGUgXCJmb3JjZVwiIHBhcmFtZXRlciBhbHdheXMgZm9yY2VzIGFuIGltbWVkaWF0ZSBmdWxsIHJlbmRlcilcblx0XHRcdFx0XHR0aGlzLnJlbmRlcihNYXRoLm1pbigwLCAtdGhpcy5fZGVsYXkpKTsgLy9pbiBjYXNlIGRlbGF5IGlzIG5lZ2F0aXZlXG5cdFx0XHRcdH1cblx0XHRcdH0sIHRydWUpLFxuXHRcdFx0X2lzU2VsZWN0b3IgPSBmdW5jdGlvbih2KSB7XG5cdFx0XHRcdHJldHVybiAodiAmJiB2Lmxlbmd0aCAmJiB2ICE9PSB3aW5kb3cgJiYgdlswXSAmJiAodlswXSA9PT0gd2luZG93IHx8ICh2WzBdLm5vZGVUeXBlICYmIHZbMF0uc3R5bGUgJiYgIXYubm9kZVR5cGUpKSk7IC8vd2UgY2Fubm90IGNoZWNrIFwibm9kZVR5cGVcIiBpZiB0aGUgdGFyZ2V0IGlzIHdpbmRvdyBmcm9tIHdpdGhpbiBhbiBpZnJhbWUsIG90aGVyd2lzZSBpdCB3aWxsIHRyaWdnZXIgYSBzZWN1cml0eSBlcnJvciBpbiBzb21lIGJyb3dzZXJzIGxpa2UgRmlyZWZveC5cblx0XHRcdH0sXG5cdFx0XHRfYXV0b0NTUyA9IGZ1bmN0aW9uKHZhcnMsIHRhcmdldCkge1xuXHRcdFx0XHR2YXIgY3NzID0ge30sXG5cdFx0XHRcdFx0cDtcblx0XHRcdFx0Zm9yIChwIGluIHZhcnMpIHtcblx0XHRcdFx0XHRpZiAoIV9yZXNlcnZlZFByb3BzW3BdICYmICghKHAgaW4gdGFyZ2V0KSB8fCBwID09PSBcInRyYW5zZm9ybVwiIHx8IHAgPT09IFwieFwiIHx8IHAgPT09IFwieVwiIHx8IHAgPT09IFwid2lkdGhcIiB8fCBwID09PSBcImhlaWdodFwiIHx8IHAgPT09IFwiY2xhc3NOYW1lXCIgfHwgcCA9PT0gXCJib3JkZXJcIikgJiYgKCFfcGx1Z2luc1twXSB8fCAoX3BsdWdpbnNbcF0gJiYgX3BsdWdpbnNbcF0uX2F1dG9DU1MpKSkgeyAvL25vdGU6IDxpbWc+IGVsZW1lbnRzIGNvbnRhaW4gcmVhZC1vbmx5IFwieFwiIGFuZCBcInlcIiBwcm9wZXJ0aWVzLiBXZSBzaG91bGQgYWxzbyBwcmlvcml0aXplIGVkaXRpbmcgY3NzIHdpZHRoL2hlaWdodCByYXRoZXIgdGhhbiB0aGUgZWxlbWVudCdzIHByb3BlcnRpZXMuXG5cdFx0XHRcdFx0XHRjc3NbcF0gPSB2YXJzW3BdO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIHZhcnNbcF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHZhcnMuY3NzID0gY3NzO1xuXHRcdFx0fTtcblxuXHRcdHAgPSBUd2VlbkxpdGUucHJvdG90eXBlID0gbmV3IEFuaW1hdGlvbigpO1xuXHRcdHAuY29uc3RydWN0b3IgPSBUd2VlbkxpdGU7XG5cdFx0cC5raWxsKCkuX2djID0gZmFsc2U7XG5cbi8vLS0tLVR3ZWVuTGl0ZSBkZWZhdWx0cywgb3ZlcndyaXRlIG1hbmFnZW1lbnQsIGFuZCByb290IHVwZGF0ZXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdFx0cC5yYXRpbyA9IDA7XG5cdFx0cC5fZmlyc3RQVCA9IHAuX3RhcmdldHMgPSBwLl9vdmVyd3JpdHRlblByb3BzID0gcC5fc3RhcnRBdCA9IG51bGw7XG5cdFx0cC5fbm90aWZ5UGx1Z2luc09mRW5hYmxlZCA9IHAuX2xhenkgPSBmYWxzZTtcblxuXHRcdFR3ZWVuTGl0ZS52ZXJzaW9uID0gXCIyLjEuM1wiO1xuXHRcdFR3ZWVuTGl0ZS5kZWZhdWx0RWFzZSA9IHAuX2Vhc2UgPSBuZXcgRWFzZShudWxsLCBudWxsLCAxLCAxKTtcblx0XHRUd2VlbkxpdGUuZGVmYXVsdE92ZXJ3cml0ZSA9IFwiYXV0b1wiO1xuXHRcdFR3ZWVuTGl0ZS50aWNrZXIgPSBfdGlja2VyO1xuXHRcdFR3ZWVuTGl0ZS5hdXRvU2xlZXAgPSAxMjA7XG5cdFx0VHdlZW5MaXRlLmxhZ1Ntb290aGluZyA9IGZ1bmN0aW9uKHRocmVzaG9sZCwgYWRqdXN0ZWRMYWcpIHtcblx0XHRcdF90aWNrZXIubGFnU21vb3RoaW5nKHRocmVzaG9sZCwgYWRqdXN0ZWRMYWcpO1xuXHRcdH07XG5cblx0XHRUd2VlbkxpdGUuc2VsZWN0b3IgPSB3aW5kb3cuJCB8fCB3aW5kb3cualF1ZXJ5IHx8IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBzZWxlY3RvciA9IHdpbmRvdy4kIHx8IHdpbmRvdy5qUXVlcnk7XG5cdFx0XHRpZiAoc2VsZWN0b3IpIHtcblx0XHRcdFx0VHdlZW5MaXRlLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdHJldHVybiBzZWxlY3RvcihlKTtcblx0XHRcdH1cblx0XHRcdGlmICghX2RvYykgeyAvL2luIHNvbWUgZGV2IGVudmlyb25tZW50cyAobGlrZSBBbmd1bGFyIDYpLCBHU0FQIGdldHMgbG9hZGVkIGJlZm9yZSB0aGUgZG9jdW1lbnQgaXMgZGVmaW5lZCEgU28gcmUtcXVlcnkgaXQgaGVyZSBpZi93aGVuIG5lY2Vzc2FyeS5cblx0XHRcdFx0X2RvYyA9IHdpbmRvdy5kb2N1bWVudDtcblx0XHRcdH1cblx0XHRcdHJldHVybiAoIV9kb2MpID8gZSA6IChfZG9jLnF1ZXJ5U2VsZWN0b3JBbGwgPyBfZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoZSkgOiBfZG9jLmdldEVsZW1lbnRCeUlkKChlLmNoYXJBdCgwKSA9PT0gXCIjXCIpID8gZS5zdWJzdHIoMSkgOiBlKSk7XG5cdFx0fTtcblxuXHRcdHZhciBfbGF6eVR3ZWVucyA9IFtdLFxuXHRcdFx0X2xhenlMb29rdXAgPSB7fSxcblx0XHRcdF9udW1iZXJzRXhwID0gLyg/OigtfC09fFxcKz0pP1xcZCpcXC4/XFxkKig/OmVbXFwtK10/XFxkKyk/KVswLTldL2lnLFxuXHRcdFx0X3JlbEV4cCA9IC9bXFwrLV09LT9bXFwuXFxkXS8sXG5cdFx0XHQvL19ub25OdW1iZXJzRXhwID0gLyg/OihbXFwtK10oPyEoXFxkfD0pKSl8W15cXGRcXC0rPWVdfChlKD8hW1xcLStdW1xcZF0pKSkrL2lnLFxuXHRcdFx0X3NldFJhdGlvID0gZnVuY3Rpb24odikge1xuXHRcdFx0XHR2YXIgcHQgPSB0aGlzLl9maXJzdFBULFxuXHRcdFx0XHRcdG1pbiA9IDAuMDAwMDAxLFxuXHRcdFx0XHRcdHZhbDtcblx0XHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdFx0dmFsID0gIXB0LmJsb2IgPyBwdC5jICogdiArIHB0LnMgOiAodiA9PT0gMSAmJiB0aGlzLmVuZCAhPSBudWxsKSA/IHRoaXMuZW5kIDogdiA/IHRoaXMuam9pbihcIlwiKSA6IHRoaXMuc3RhcnQ7XG5cdFx0XHRcdFx0aWYgKHB0Lm0pIHtcblx0XHRcdFx0XHRcdHZhbCA9IHB0Lm0uY2FsbCh0aGlzLl90d2VlbiwgdmFsLCB0aGlzLl90YXJnZXQgfHwgcHQudCwgdGhpcy5fdHdlZW4pO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodmFsIDwgbWluKSBpZiAodmFsID4gLW1pbiAmJiAhcHQuYmxvYikgeyAvL3ByZXZlbnRzIGlzc3VlcyB3aXRoIGNvbnZlcnRpbmcgdmVyeSBzbWFsbCBudW1iZXJzIHRvIHN0cmluZ3MgaW4gdGhlIGJyb3dzZXJcblx0XHRcdFx0XHRcdHZhbCA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICghcHQuZikge1xuXHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHZhbDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHB0LmZwKSB7XG5cdFx0XHRcdFx0XHRwdC50W3B0LnBdKHB0LmZwLCB2YWwpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRwdC50W3B0LnBdKHZhbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRfYmxvYlJvdW5kID0gZnVuY3Rpb24odikge1xuXHRcdFx0XHRyZXR1cm4gKCgodiAqIDEwMDApIHwgMCkgLyAxMDAwKSArIFwiXCI7XG5cdFx0XHR9LFxuXHRcdFx0Ly9jb21wYXJlcyB0d28gc3RyaW5ncyAoc3RhcnQvZW5kKSwgZmluZHMgdGhlIG51bWJlcnMgdGhhdCBhcmUgZGlmZmVyZW50IGFuZCBzcGl0cyBiYWNrIGFuIGFycmF5IHJlcHJlc2VudGluZyB0aGUgd2hvbGUgdmFsdWUgYnV0IHdpdGggdGhlIGNoYW5naW5nIHZhbHVlcyBpc29sYXRlZCBhcyBlbGVtZW50cy4gRm9yIGV4YW1wbGUsIFwicmdiKDAsMCwwKVwiIGFuZCBcInJnYigxMDAsNTAsMClcIiB3b3VsZCBiZWNvbWUgW1wicmdiKFwiLCAwLCBcIixcIiwgNTAsIFwiLDApXCJdLiBOb3RpY2UgaXQgbWVyZ2VzIHRoZSBwYXJ0cyB0aGF0IGFyZSBpZGVudGljYWwgKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbikuIFRoZSBhcnJheSBhbHNvIGhhcyBhIGxpbmtlZCBsaXN0IG9mIFByb3BUd2VlbnMgYXR0YWNoZWQgc3RhcnRpbmcgd2l0aCBfZmlyc3RQVCB0aGF0IGNvbnRhaW4gdGhlIHR3ZWVuaW5nIGRhdGEgKHQsIHAsIHMsIGMsIGYsIGV0Yy4pLiBJdCBhbHNvIHN0b3JlcyB0aGUgc3RhcnRpbmcgdmFsdWUgYXMgYSBcInN0YXJ0XCIgcHJvcGVydHkgc28gdGhhdCB3ZSBjYW4gcmV2ZXJ0IHRvIGl0IGlmL3doZW4gbmVjZXNzYXJ5LCBsaWtlIHdoZW4gYSB0d2VlbiByZXdpbmRzIGZ1bGx5LiBJZiB0aGUgcXVhbnRpdHkgb2YgbnVtYmVycyBkaWZmZXJzIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQsIGl0IHdpbGwgYWx3YXlzIHByaW9yaXRpemUgdGhlIGVuZCB2YWx1ZShzKS4gVGhlIHB0IHBhcmFtZXRlciBpcyBvcHRpb25hbCAtIGl0J3MgZm9yIGEgUHJvcFR3ZWVuIHRoYXQgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgZW5kIG9mIHRoZSBsaW5rZWQgbGlzdCBhbmQgaXMgdHlwaWNhbGx5IGZvciBhY3R1YWxseSBzZXR0aW5nIHRoZSB2YWx1ZSBhZnRlciBhbGwgb2YgdGhlIGVsZW1lbnRzIGhhdmUgYmVlbiB1cGRhdGVkICh3aXRoIGFycmF5LmpvaW4oXCJcIikpLlxuXHRcdFx0X2Jsb2JEaWYgPSBmdW5jdGlvbihzdGFydCwgZW5kLCBmaWx0ZXIsIHB0KSB7XG5cdFx0XHRcdHZhciBhID0gW10sXG5cdFx0XHRcdFx0Y2hhckluZGV4ID0gMCxcblx0XHRcdFx0XHRzID0gXCJcIixcblx0XHRcdFx0XHRjb2xvciA9IDAsXG5cdFx0XHRcdFx0c3RhcnROdW1zLCBlbmROdW1zLCBudW0sIGksIGwsIG5vbk51bWJlcnMsIGN1cnJlbnROdW07XG5cdFx0XHRcdGEuc3RhcnQgPSBzdGFydDtcblx0XHRcdFx0YS5lbmQgPSBlbmQ7XG5cdFx0XHRcdHN0YXJ0ID0gYVswXSA9IHN0YXJ0ICsgXCJcIjsgLy9lbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cdFx0XHRcdGVuZCA9IGFbMV0gPSBlbmQgKyBcIlwiO1xuXHRcdFx0XHRpZiAoZmlsdGVyKSB7XG5cdFx0XHRcdFx0ZmlsdGVyKGEpOyAvL3Bhc3MgYW4gYXJyYXkgd2l0aCB0aGUgc3RhcnRpbmcgYW5kIGVuZGluZyB2YWx1ZXMgYW5kIGxldCB0aGUgZmlsdGVyIGRvIHdoYXRldmVyIGl0IG5lZWRzIHRvIHRoZSB2YWx1ZXMuXG5cdFx0XHRcdFx0c3RhcnQgPSBhWzBdO1xuXHRcdFx0XHRcdGVuZCA9IGFbMV07XG5cdFx0XHRcdH1cblx0XHRcdFx0YS5sZW5ndGggPSAwO1xuXHRcdFx0XHRzdGFydE51bXMgPSBzdGFydC5tYXRjaChfbnVtYmVyc0V4cCkgfHwgW107XG5cdFx0XHRcdGVuZE51bXMgPSBlbmQubWF0Y2goX251bWJlcnNFeHApIHx8IFtdO1xuXHRcdFx0XHRpZiAocHQpIHtcblx0XHRcdFx0XHRwdC5fbmV4dCA9IG51bGw7XG5cdFx0XHRcdFx0cHQuYmxvYiA9IDE7XG5cdFx0XHRcdFx0YS5fZmlyc3RQVCA9IGEuX2FwcGx5UFQgPSBwdDsgLy9hcHBseSBsYXN0IGluIHRoZSBsaW5rZWQgbGlzdCAod2hpY2ggbWVhbnMgaW5zZXJ0aW5nIGl0IGZpcnN0KVxuXHRcdFx0XHR9XG5cdFx0XHRcdGwgPSBlbmROdW1zLmxlbmd0aDtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdGN1cnJlbnROdW0gPSBlbmROdW1zW2ldO1xuXHRcdFx0XHRcdG5vbk51bWJlcnMgPSBlbmQuc3Vic3RyKGNoYXJJbmRleCwgZW5kLmluZGV4T2YoY3VycmVudE51bSwgY2hhckluZGV4KS1jaGFySW5kZXgpO1xuXHRcdFx0XHRcdHMgKz0gKG5vbk51bWJlcnMgfHwgIWkpID8gbm9uTnVtYmVycyA6IFwiLFwiOyAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cblx0XHRcdFx0XHRjaGFySW5kZXggKz0gbm9uTnVtYmVycy5sZW5ndGg7XG5cdFx0XHRcdFx0aWYgKGNvbG9yKSB7IC8vc2Vuc2UgcmdiYSgpIHZhbHVlcyBhbmQgcm91bmQgdGhlbS5cblx0XHRcdFx0XHRcdGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAobm9uTnVtYmVycy5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIpIHtcblx0XHRcdFx0XHRcdGNvbG9yID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGN1cnJlbnROdW0gPT09IHN0YXJ0TnVtc1tpXSB8fCBzdGFydE51bXMubGVuZ3RoIDw9IGkpIHtcblx0XHRcdFx0XHRcdHMgKz0gY3VycmVudE51bTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKHMpIHtcblx0XHRcdFx0XHRcdFx0YS5wdXNoKHMpO1xuXHRcdFx0XHRcdFx0XHRzID0gXCJcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG51bSA9IHBhcnNlRmxvYXQoc3RhcnROdW1zW2ldKTtcblx0XHRcdFx0XHRcdGEucHVzaChudW0pO1xuXHRcdFx0XHRcdFx0YS5fZmlyc3RQVCA9IHtfbmV4dDogYS5fZmlyc3RQVCwgdDphLCBwOiBhLmxlbmd0aC0xLCBzOm51bSwgYzooKGN1cnJlbnROdW0uY2hhckF0KDEpID09PSBcIj1cIikgPyBwYXJzZUludChjdXJyZW50TnVtLmNoYXJBdCgwKSArIFwiMVwiLCAxMCkgKiBwYXJzZUZsb2F0KGN1cnJlbnROdW0uc3Vic3RyKDIpKSA6IChwYXJzZUZsb2F0KGN1cnJlbnROdW0pIC0gbnVtKSkgfHwgMCwgZjowLCBtOihjb2xvciAmJiBjb2xvciA8IDQpID8gTWF0aC5yb3VuZCA6IF9ibG9iUm91bmR9OyAvL2xpbWl0aW5nIHRvIDMgZGVjaW1hbCBwbGFjZXMgYW5kIGNhc3RpbmcgYXMgYSBzdHJpbmcgY2FuIHJlYWxseSBoZWxwIHBlcmZvcm1hbmNlIHdoZW4gYXJyYXkuam9pbigpIGlzIGNhbGxlZCFcblx0XHRcdFx0XHRcdC8vbm90ZTogd2UgZG9uJ3Qgc2V0IF9wcmV2IGJlY2F1c2Ugd2UnbGwgbmV2ZXIgbmVlZCB0byByZW1vdmUgaW5kaXZpZHVhbCBQcm9wVHdlZW5zIGZyb20gdGhpcyBsaXN0LlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjaGFySW5kZXggKz0gY3VycmVudE51bS5sZW5ndGg7XG5cdFx0XHRcdH1cblx0XHRcdFx0cyArPSBlbmQuc3Vic3RyKGNoYXJJbmRleCk7XG5cdFx0XHRcdGlmIChzKSB7XG5cdFx0XHRcdFx0YS5wdXNoKHMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGEuc2V0UmF0aW8gPSBfc2V0UmF0aW87XG5cdFx0XHRcdGlmIChfcmVsRXhwLnRlc3QoZW5kKSkgeyAvL2lmIHRoZSBlbmQgc3RyaW5nIGNvbnRhaW5zIHJlbGF0aXZlIHZhbHVlcywgZGVsZXRlIGl0IHNvIHRoYXQgb24gdGhlIGZpbmFsIHJlbmRlciAoaW4gX3NldFJhdGlvKCkpLCB3ZSBkb24ndCBhY3R1YWxseSBzZXQgaXQgdG8gdGhlIHN0cmluZyB3aXRoICs9IG9yIC09IGNoYXJhY3RlcnMgKGZvcmNlcyBpdCB0byB1c2UgdGhlIGNhbGN1bGF0ZWQgdmFsdWUpLlxuXHRcdFx0XHRcdGEuZW5kID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gYTtcblx0XHRcdH0sXG5cdFx0XHQvL25vdGU6IFwiZnVuY1BhcmFtXCIgaXMgb25seSBuZWNlc3NhcnkgZm9yIGZ1bmN0aW9uLWJhc2VkIGdldHRlcnMvc2V0dGVycyB0aGF0IHJlcXVpcmUgYW4gZXh0cmEgcGFyYW1ldGVyIGxpa2UgZ2V0QXR0cmlidXRlKFwid2lkdGhcIikgYW5kIHNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHZhbHVlKS4gSW4gdGhpcyBleGFtcGxlLCBmdW5jUGFyYW0gd291bGQgYmUgXCJ3aWR0aFwiLiBVc2VkIGJ5IEF0dHJQbHVnaW4gZm9yIGV4YW1wbGUuXG5cdFx0XHRfYWRkUHJvcFR3ZWVuID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBvdmVyd3JpdGVQcm9wLCBtb2QsIGZ1bmNQYXJhbSwgc3RyaW5nRmlsdGVyLCBpbmRleCkge1xuXHRcdFx0XHRpZiAodHlwZW9mKGVuZCkgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdGVuZCA9IGVuZChpbmRleCB8fCAwLCB0YXJnZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciB0eXBlID0gdHlwZW9mKHRhcmdldFtwcm9wXSksXG5cdFx0XHRcdFx0Z2V0dGVyTmFtZSA9ICh0eXBlICE9PSBcImZ1bmN0aW9uXCIpID8gXCJcIiA6ICgocHJvcC5pbmRleE9mKFwic2V0XCIpIHx8IHR5cGVvZih0YXJnZXRbXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXSkgIT09IFwiZnVuY3Rpb25cIikgPyBwcm9wIDogXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpKSxcblx0XHRcdFx0XHRzID0gKHN0YXJ0ICE9PSBcImdldFwiKSA/IHN0YXJ0IDogIWdldHRlck5hbWUgPyB0YXJnZXRbcHJvcF0gOiBmdW5jUGFyYW0gPyB0YXJnZXRbZ2V0dGVyTmFtZV0oZnVuY1BhcmFtKSA6IHRhcmdldFtnZXR0ZXJOYW1lXSgpLFxuXHRcdFx0XHRcdGlzUmVsYXRpdmUgPSAodHlwZW9mKGVuZCkgPT09IFwic3RyaW5nXCIgJiYgZW5kLmNoYXJBdCgxKSA9PT0gXCI9XCIpLFxuXHRcdFx0XHRcdHB0ID0ge3Q6dGFyZ2V0LCBwOnByb3AsIHM6cywgZjoodHlwZSA9PT0gXCJmdW5jdGlvblwiKSwgcGc6MCwgbjpvdmVyd3JpdGVQcm9wIHx8IHByb3AsIG06KCFtb2QgPyAwIDogKHR5cGVvZihtb2QpID09PSBcImZ1bmN0aW9uXCIpID8gbW9kIDogTWF0aC5yb3VuZCksIHByOjAsIGM6aXNSZWxhdGl2ZSA/IHBhcnNlSW50KGVuZC5jaGFyQXQoMCkgKyBcIjFcIiwgMTApICogcGFyc2VGbG9hdChlbmQuc3Vic3RyKDIpKSA6IChwYXJzZUZsb2F0KGVuZCkgLSBzKSB8fCAwfSxcblx0XHRcdFx0XHRibG9iO1xuXG5cdFx0XHRcdGlmICh0eXBlb2YocykgIT09IFwibnVtYmVyXCIgfHwgKHR5cGVvZihlbmQpICE9PSBcIm51bWJlclwiICYmICFpc1JlbGF0aXZlKSkge1xuXHRcdFx0XHRcdGlmIChmdW5jUGFyYW0gfHwgaXNOYU4ocykgfHwgKCFpc1JlbGF0aXZlICYmIGlzTmFOKGVuZCkpIHx8IHR5cGVvZihzKSA9PT0gXCJib29sZWFuXCIgfHwgdHlwZW9mKGVuZCkgPT09IFwiYm9vbGVhblwiKSB7XG5cdFx0XHRcdFx0XHQvL2EgYmxvYiAoc3RyaW5nIHRoYXQgaGFzIG11bHRpcGxlIG51bWJlcnMgaW4gaXQpXG5cdFx0XHRcdFx0XHRwdC5mcCA9IGZ1bmNQYXJhbTtcblx0XHRcdFx0XHRcdGJsb2IgPSBfYmxvYkRpZihzLCAoaXNSZWxhdGl2ZSA/IChwYXJzZUZsb2F0KHB0LnMpICsgcHQuYykgKyAocHQucyArIFwiXCIpLnJlcGxhY2UoL1swLTlcXC1cXC5dL2csIFwiXCIpIDogZW5kKSwgc3RyaW5nRmlsdGVyIHx8IFR3ZWVuTGl0ZS5kZWZhdWx0U3RyaW5nRmlsdGVyLCBwdCk7XG5cdFx0XHRcdFx0XHRwdCA9IHt0OiBibG9iLCBwOiBcInNldFJhdGlvXCIsIHM6IDAsIGM6IDEsIGY6IDIsIHBnOiAwLCBuOiBvdmVyd3JpdGVQcm9wIHx8IHByb3AsIHByOiAwLCBtOiAwfTsgLy9cIjJcIiBpbmRpY2F0ZXMgaXQncyBhIEJsb2IgcHJvcGVydHkgdHdlZW4uIE5lZWRlZCBmb3IgUm91bmRQcm9wc1BsdWdpbiBmb3IgZXhhbXBsZS5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cHQucyA9IHBhcnNlRmxvYXQocyk7XG5cdFx0XHRcdFx0XHRpZiAoIWlzUmVsYXRpdmUpIHtcblx0XHRcdFx0XHRcdFx0cHQuYyA9IChwYXJzZUZsb2F0KGVuZCkgLSBwdC5zKSB8fCAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocHQuYykgeyAvL29ubHkgYWRkIGl0IHRvIHRoZSBsaW5rZWQgbGlzdCBpZiB0aGVyZSdzIGEgY2hhbmdlLlxuXHRcdFx0XHRcdGlmICgocHQuX25leHQgPSB0aGlzLl9maXJzdFBUKSkge1xuXHRcdFx0XHRcdFx0cHQuX25leHQuX3ByZXYgPSBwdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fZmlyc3RQVCA9IHB0O1xuXHRcdFx0XHRcdHJldHVybiBwdDtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdF9pbnRlcm5hbHMgPSBUd2VlbkxpdGUuX2ludGVybmFscyA9IHtpc0FycmF5Ol9pc0FycmF5LCBpc1NlbGVjdG9yOl9pc1NlbGVjdG9yLCBsYXp5VHdlZW5zOl9sYXp5VHdlZW5zLCBibG9iRGlmOl9ibG9iRGlmfSwgLy9naXZlcyB1cyBhIHdheSB0byBleHBvc2UgY2VydGFpbiBwcml2YXRlIHZhbHVlcyB0byBvdGhlciBHcmVlblNvY2sgY2xhc3NlcyB3aXRob3V0IGNvbnRhbWluYXRpbmcgdGhhIG1haW4gVHdlZW5MaXRlIG9iamVjdC5cblx0XHRcdF9wbHVnaW5zID0gVHdlZW5MaXRlLl9wbHVnaW5zID0ge30sXG5cdFx0XHRfdHdlZW5Mb29rdXAgPSBfaW50ZXJuYWxzLnR3ZWVuTG9va3VwID0ge30sXG5cdFx0XHRfdHdlZW5Mb29rdXBOdW0gPSAwLFxuXHRcdFx0X3Jlc2VydmVkUHJvcHMgPSBfaW50ZXJuYWxzLnJlc2VydmVkUHJvcHMgPSB7ZWFzZToxLCBkZWxheToxLCBvdmVyd3JpdGU6MSwgb25Db21wbGV0ZToxLCBvbkNvbXBsZXRlUGFyYW1zOjEsIG9uQ29tcGxldGVTY29wZToxLCB1c2VGcmFtZXM6MSwgcnVuQmFja3dhcmRzOjEsIHN0YXJ0QXQ6MSwgb25VcGRhdGU6MSwgb25VcGRhdGVQYXJhbXM6MSwgb25VcGRhdGVTY29wZToxLCBvblN0YXJ0OjEsIG9uU3RhcnRQYXJhbXM6MSwgb25TdGFydFNjb3BlOjEsIG9uUmV2ZXJzZUNvbXBsZXRlOjEsIG9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zOjEsIG9uUmV2ZXJzZUNvbXBsZXRlU2NvcGU6MSwgb25SZXBlYXQ6MSwgb25SZXBlYXRQYXJhbXM6MSwgb25SZXBlYXRTY29wZToxLCBlYXNlUGFyYW1zOjEsIHlveW86MSwgaW1tZWRpYXRlUmVuZGVyOjEsIHJlcGVhdDoxLCByZXBlYXREZWxheToxLCBkYXRhOjEsIHBhdXNlZDoxLCByZXZlcnNlZDoxLCBhdXRvQ1NTOjEsIGxhenk6MSwgb25PdmVyd3JpdGU6MSwgY2FsbGJhY2tTY29wZToxLCBzdHJpbmdGaWx0ZXI6MSwgaWQ6MSwgeW95b0Vhc2U6MSwgc3RhZ2dlcjoxfSxcblx0XHRcdF9vdmVyd3JpdGVMb29rdXAgPSB7bm9uZTowLCBhbGw6MSwgYXV0bzoyLCBjb25jdXJyZW50OjMsIGFsbE9uU3RhcnQ6NCwgcHJlZXhpc3Rpbmc6NSwgXCJ0cnVlXCI6MSwgXCJmYWxzZVwiOjB9LFxuXHRcdFx0X3Jvb3RGcmFtZXNUaW1lbGluZSA9IEFuaW1hdGlvbi5fcm9vdEZyYW1lc1RpbWVsaW5lID0gbmV3IFNpbXBsZVRpbWVsaW5lKCksXG5cdFx0XHRfcm9vdFRpbWVsaW5lID0gQW5pbWF0aW9uLl9yb290VGltZWxpbmUgPSBuZXcgU2ltcGxlVGltZWxpbmUoKSxcblx0XHRcdF9uZXh0R0NGcmFtZSA9IDMwLFxuXHRcdFx0X2xhenlSZW5kZXIgPSBfaW50ZXJuYWxzLmxhenlSZW5kZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGwgPSBfbGF6eVR3ZWVucy5sZW5ndGgsXG5cdFx0XHRcdFx0aSwgdHdlZW47XG5cdFx0XHRcdF9sYXp5TG9va3VwID0ge307XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHR0d2VlbiA9IF9sYXp5VHdlZW5zW2ldO1xuXHRcdFx0XHRcdGlmICh0d2VlbiAmJiB0d2Vlbi5fbGF6eSAhPT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdHR3ZWVuLnJlbmRlcih0d2Vlbi5fbGF6eVswXSwgdHdlZW4uX2xhenlbMV0sIHRydWUpO1xuXHRcdFx0XHRcdFx0dHdlZW4uX2xhenkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0X2xhenlUd2VlbnMubGVuZ3RoID0gMDtcblx0XHRcdH07XG5cblx0XHRfcm9vdFRpbWVsaW5lLl9zdGFydFRpbWUgPSBfdGlja2VyLnRpbWU7XG5cdFx0X3Jvb3RGcmFtZXNUaW1lbGluZS5fc3RhcnRUaW1lID0gX3RpY2tlci5mcmFtZTtcblx0XHRfcm9vdFRpbWVsaW5lLl9hY3RpdmUgPSBfcm9vdEZyYW1lc1RpbWVsaW5lLl9hY3RpdmUgPSB0cnVlO1xuXHRcdHNldFRpbWVvdXQoX2xhenlSZW5kZXIsIDEpOyAvL29uIHNvbWUgbW9iaWxlIGRldmljZXMsIHRoZXJlIGlzbid0IGEgXCJ0aWNrXCIgYmVmb3JlIGNvZGUgcnVucyB3aGljaCBtZWFucyBhbnkgbGF6eSByZW5kZXJzIHdvdWxkbid0IHJ1biBiZWZvcmUgdGhlIG5leHQgb2ZmaWNpYWwgXCJ0aWNrXCIuXG5cblx0XHRBbmltYXRpb24uX3VwZGF0ZVJvb3QgPSBUd2VlbkxpdGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBpLCBhLCBwO1xuXHRcdFx0XHRpZiAoX2xhenlUd2VlbnMubGVuZ3RoKSB7IC8vaWYgY29kZSBpcyBydW4gb3V0c2lkZSBvZiB0aGUgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGxvb3AsIHRoZXJlIG1heSBiZSB0d2VlbnMgcXVldWVkIEFGVEVSIHRoZSBlbmdpbmUgcmVmcmVzaGVkLCBzbyB3ZSBuZWVkIHRvIGVuc3VyZSBhbnkgcGVuZGluZyByZW5kZXJzIG9jY3VyIGJlZm9yZSB3ZSByZWZyZXNoIGFnYWluLlxuXHRcdFx0XHRcdF9sYXp5UmVuZGVyKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0X3Jvb3RUaW1lbGluZS5yZW5kZXIoKF90aWNrZXIudGltZSAtIF9yb290VGltZWxpbmUuX3N0YXJ0VGltZSkgKiBfcm9vdFRpbWVsaW5lLl90aW1lU2NhbGUsIGZhbHNlLCBmYWxzZSk7XG5cdFx0XHRcdF9yb290RnJhbWVzVGltZWxpbmUucmVuZGVyKChfdGlja2VyLmZyYW1lIC0gX3Jvb3RGcmFtZXNUaW1lbGluZS5fc3RhcnRUaW1lKSAqIF9yb290RnJhbWVzVGltZWxpbmUuX3RpbWVTY2FsZSwgZmFsc2UsIGZhbHNlKTtcblx0XHRcdFx0aWYgKF9sYXp5VHdlZW5zLmxlbmd0aCkge1xuXHRcdFx0XHRcdF9sYXp5UmVuZGVyKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKF90aWNrZXIuZnJhbWUgPj0gX25leHRHQ0ZyYW1lKSB7IC8vZHVtcCBnYXJiYWdlIGV2ZXJ5IDEyMCBmcmFtZXMgb3Igd2hhdGV2ZXIgdGhlIHVzZXIgc2V0cyBUd2VlbkxpdGUuYXV0b1NsZWVwIHRvXG5cdFx0XHRcdFx0X25leHRHQ0ZyYW1lID0gX3RpY2tlci5mcmFtZSArIChwYXJzZUludChUd2VlbkxpdGUuYXV0b1NsZWVwLCAxMCkgfHwgMTIwKTtcblx0XHRcdFx0XHRmb3IgKHAgaW4gX3R3ZWVuTG9va3VwKSB7XG5cdFx0XHRcdFx0XHRhID0gX3R3ZWVuTG9va3VwW3BdLnR3ZWVucztcblx0XHRcdFx0XHRcdGkgPSBhLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoYVtpXS5fZ2MpIHtcblx0XHRcdFx0XHRcdFx0XHRhLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGEubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSBfdHdlZW5Mb29rdXBbcF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vaWYgdGhlcmUgYXJlIG5vIG1vcmUgdHdlZW5zIGluIHRoZSByb290IHRpbWVsaW5lcywgb3IgaWYgdGhleSdyZSBhbGwgcGF1c2VkLCBtYWtlIHRoZSBfdGltZXIgc2xlZXAgdG8gcmVkdWNlIGxvYWQgb24gdGhlIENQVSBzbGlnaHRseVxuXHRcdFx0XHRcdHAgPSBfcm9vdFRpbWVsaW5lLl9maXJzdDtcblx0XHRcdFx0XHRpZiAoIXAgfHwgcC5fcGF1c2VkKSBpZiAoVHdlZW5MaXRlLmF1dG9TbGVlcCAmJiAhX3Jvb3RGcmFtZXNUaW1lbGluZS5fZmlyc3QgJiYgX3RpY2tlci5fbGlzdGVuZXJzLnRpY2subGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAocCAmJiBwLl9wYXVzZWQpIHtcblx0XHRcdFx0XHRcdFx0cCA9IHAuX25leHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIXApIHtcblx0XHRcdFx0XHRcdFx0X3RpY2tlci5zbGVlcCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdF90aWNrZXIuYWRkRXZlbnRMaXN0ZW5lcihcInRpY2tcIiwgQW5pbWF0aW9uLl91cGRhdGVSb290KTtcblxuXHRcdHZhciBfcmVnaXN0ZXIgPSBmdW5jdGlvbih0YXJnZXQsIHR3ZWVuLCBzY3J1Yikge1xuXHRcdFx0XHR2YXIgaWQgPSB0YXJnZXQuX2dzVHdlZW5JRCwgYSwgaTtcblx0XHRcdFx0aWYgKCFfdHdlZW5Mb29rdXBbaWQgfHwgKHRhcmdldC5fZ3NUd2VlbklEID0gaWQgPSBcInRcIiArIChfdHdlZW5Mb29rdXBOdW0rKykpXSkge1xuXHRcdFx0XHRcdF90d2Vlbkxvb2t1cFtpZF0gPSB7dGFyZ2V0OnRhcmdldCwgdHdlZW5zOltdfTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodHdlZW4pIHtcblx0XHRcdFx0XHRhID0gX3R3ZWVuTG9va3VwW2lkXS50d2VlbnM7XG5cdFx0XHRcdFx0YVsoaSA9IGEubGVuZ3RoKV0gPSB0d2Vlbjtcblx0XHRcdFx0XHRpZiAoc2NydWIpIHtcblx0XHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoYVtpXSA9PT0gdHdlZW4pIHtcblx0XHRcdFx0XHRcdFx0XHRhLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gX3R3ZWVuTG9va3VwW2lkXS50d2VlbnM7XG5cdFx0XHR9LFxuXHRcdFx0X29uT3ZlcndyaXRlID0gZnVuY3Rpb24ob3ZlcndyaXR0ZW5Ud2Vlbiwgb3ZlcndyaXRpbmdUd2VlbiwgdGFyZ2V0LCBraWxsZWRQcm9wcykge1xuXHRcdFx0XHR2YXIgZnVuYyA9IG92ZXJ3cml0dGVuVHdlZW4udmFycy5vbk92ZXJ3cml0ZSwgcjEsIHIyO1xuXHRcdFx0XHRpZiAoZnVuYykge1xuXHRcdFx0XHRcdHIxID0gZnVuYyhvdmVyd3JpdHRlblR3ZWVuLCBvdmVyd3JpdGluZ1R3ZWVuLCB0YXJnZXQsIGtpbGxlZFByb3BzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmdW5jID0gVHdlZW5MaXRlLm9uT3ZlcndyaXRlO1xuXHRcdFx0XHRpZiAoZnVuYykge1xuXHRcdFx0XHRcdHIyID0gZnVuYyhvdmVyd3JpdHRlblR3ZWVuLCBvdmVyd3JpdGluZ1R3ZWVuLCB0YXJnZXQsIGtpbGxlZFByb3BzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gKHIxICE9PSBmYWxzZSAmJiByMiAhPT0gZmFsc2UpO1xuXHRcdFx0fSxcblx0XHRcdF9hcHBseU92ZXJ3cml0ZSA9IGZ1bmN0aW9uKHRhcmdldCwgdHdlZW4sIHByb3BzLCBtb2RlLCBzaWJsaW5ncykge1xuXHRcdFx0XHR2YXIgaSwgY2hhbmdlZCwgY3VyVHdlZW4sIGw7XG5cdFx0XHRcdGlmIChtb2RlID09PSAxIHx8IG1vZGUgPj0gNCkge1xuXHRcdFx0XHRcdGwgPSBzaWJsaW5ncy5sZW5ndGg7XG5cdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdFx0aWYgKChjdXJUd2VlbiA9IHNpYmxpbmdzW2ldKSAhPT0gdHdlZW4pIHtcblx0XHRcdFx0XHRcdFx0aWYgKCFjdXJUd2Vlbi5fZ2MpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY3VyVHdlZW4uX2tpbGwobnVsbCwgdGFyZ2V0LCB0d2VlbikpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChtb2RlID09PSA1KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gY2hhbmdlZDtcblx0XHRcdFx0fVxuXHRcdFx0XHQvL05PVEU6IEFkZCB0aW55IGFtb3VudCB0byBvdmVyY29tZSBmbG9hdGluZyBwb2ludCBlcnJvcnMgdGhhdCBjYW4gY2F1c2UgdGhlIHN0YXJ0VGltZSB0byBiZSBWRVJZIHNsaWdodGx5IG9mZiAod2hlbiBhIHR3ZWVuJ3MgdGltZSgpIGlzIHNldCBmb3IgZXhhbXBsZSlcblx0XHRcdFx0dmFyIHN0YXJ0VGltZSA9IHR3ZWVuLl9zdGFydFRpbWUgKyBfdGlueU51bSxcblx0XHRcdFx0XHRvdmVybGFwcyA9IFtdLFxuXHRcdFx0XHRcdG9Db3VudCA9IDAsXG5cdFx0XHRcdFx0emVyb0R1ciA9ICh0d2Vlbi5fZHVyYXRpb24gPT09IDApLFxuXHRcdFx0XHRcdGdsb2JhbFN0YXJ0O1xuXHRcdFx0XHRpID0gc2libGluZ3MubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRpZiAoKGN1clR3ZWVuID0gc2libGluZ3NbaV0pID09PSB0d2VlbiB8fCBjdXJUd2Vlbi5fZ2MgfHwgY3VyVHdlZW4uX3BhdXNlZCkge1xuXHRcdFx0XHRcdFx0Ly9pZ25vcmVcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGN1clR3ZWVuLl90aW1lbGluZSAhPT0gdHdlZW4uX3RpbWVsaW5lKSB7XG5cdFx0XHRcdFx0XHRnbG9iYWxTdGFydCA9IGdsb2JhbFN0YXJ0IHx8IF9jaGVja092ZXJsYXAodHdlZW4sIDAsIHplcm9EdXIpO1xuXHRcdFx0XHRcdFx0aWYgKF9jaGVja092ZXJsYXAoY3VyVHdlZW4sIGdsb2JhbFN0YXJ0LCB6ZXJvRHVyKSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRvdmVybGFwc1tvQ291bnQrK10gPSBjdXJUd2Vlbjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2UgaWYgKGN1clR3ZWVuLl9zdGFydFRpbWUgPD0gc3RhcnRUaW1lKSBpZiAoY3VyVHdlZW4uX3N0YXJ0VGltZSArIGN1clR3ZWVuLnRvdGFsRHVyYXRpb24oKSAvIGN1clR3ZWVuLl90aW1lU2NhbGUgPiBzdGFydFRpbWUpIGlmICghKCh6ZXJvRHVyIHx8ICFjdXJUd2Vlbi5faW5pdHRlZCkgJiYgc3RhcnRUaW1lIC0gY3VyVHdlZW4uX3N0YXJ0VGltZSA8PSBfdGlueU51bSAqIDIpKSB7XG5cdFx0XHRcdFx0XHRvdmVybGFwc1tvQ291bnQrK10gPSBjdXJUd2Vlbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpID0gb0NvdW50O1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRjdXJUd2VlbiA9IG92ZXJsYXBzW2ldO1xuXHRcdFx0XHRcdGwgPSBjdXJUd2Vlbi5fZmlyc3RQVDsgLy93ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgdGhlcmUgd2VyZSBwcm9wZXJ0eSB0d2VlbnMgb3JpZ2luYWxseTsgaWYgdGhleSBhbGwgZ2V0IHJlbW92ZWQgaW4gdGhlIG5leHQgbGluZSdzIF9raWxsKCkgY2FsbCwgdGhlIHR3ZWVuIHNob3VsZCBiZSBraWxsZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dyZWVuU29jay1KUy9pc3N1ZXMvMjc4XG5cdFx0XHRcdFx0aWYgKG1vZGUgPT09IDIpIGlmIChjdXJUd2Vlbi5fa2lsbChwcm9wcywgdGFyZ2V0LCB0d2VlbikpIHtcblx0XHRcdFx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAobW9kZSAhPT0gMiB8fCAoIWN1clR3ZWVuLl9maXJzdFBUICYmIGN1clR3ZWVuLl9pbml0dGVkICYmIGwpKSB7XG5cdFx0XHRcdFx0XHRpZiAobW9kZSAhPT0gMiAmJiAhX29uT3ZlcndyaXRlKGN1clR3ZWVuLCB0d2VlbikpIHtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoY3VyVHdlZW4uX2VuYWJsZWQoZmFsc2UsIGZhbHNlKSkgeyAvL2lmIGFsbCBwcm9wZXJ0eSB0d2VlbnMgaGF2ZSBiZWVuIG92ZXJ3cml0dGVuLCBraWxsIHRoZSB0d2Vlbi5cblx0XHRcdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBjaGFuZ2VkO1xuXHRcdFx0fSxcblx0XHRcdF9jaGVja092ZXJsYXAgPSBmdW5jdGlvbih0d2VlbiwgcmVmZXJlbmNlLCB6ZXJvRHVyKSB7XG5cdFx0XHRcdHZhciB0bCA9IHR3ZWVuLl90aW1lbGluZSxcblx0XHRcdFx0XHR0cyA9IHRsLl90aW1lU2NhbGUsXG5cdFx0XHRcdFx0dCA9IHR3ZWVuLl9zdGFydFRpbWU7XG5cdFx0XHRcdHdoaWxlICh0bC5fdGltZWxpbmUpIHtcblx0XHRcdFx0XHR0ICs9IHRsLl9zdGFydFRpbWU7XG5cdFx0XHRcdFx0dHMgKj0gdGwuX3RpbWVTY2FsZTtcblx0XHRcdFx0XHRpZiAodGwuX3BhdXNlZCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIC0xMDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRsID0gdGwuX3RpbWVsaW5lO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHQgLz0gdHM7XG5cdFx0XHRcdHJldHVybiAodCA+IHJlZmVyZW5jZSkgPyB0IC0gcmVmZXJlbmNlIDogKCh6ZXJvRHVyICYmIHQgPT09IHJlZmVyZW5jZSkgfHwgKCF0d2Vlbi5faW5pdHRlZCAmJiB0IC0gcmVmZXJlbmNlIDwgMiAqIF90aW55TnVtKSkgPyBfdGlueU51bSA6ICgodCArPSB0d2Vlbi50b3RhbER1cmF0aW9uKCkgLyB0d2Vlbi5fdGltZVNjYWxlIC8gdHMpID4gcmVmZXJlbmNlICsgX3RpbnlOdW0pID8gMCA6IHQgLSByZWZlcmVuY2UgLSBfdGlueU51bTtcblx0XHRcdH07XG5cblxuLy8tLS0tIFR3ZWVuTGl0ZSBpbnN0YW5jZSBtZXRob2RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHRwLl9pbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdiA9IHRoaXMudmFycyxcblx0XHRcdFx0b3AgPSB0aGlzLl9vdmVyd3JpdHRlblByb3BzLFxuXHRcdFx0XHRkdXIgPSB0aGlzLl9kdXJhdGlvbixcblx0XHRcdFx0aW1tZWRpYXRlID0gISF2LmltbWVkaWF0ZVJlbmRlcixcblx0XHRcdFx0ZWFzZSA9IHYuZWFzZSxcblx0XHRcdFx0c3RhcnRBdCA9IHRoaXMuX3N0YXJ0QXQsXG5cdFx0XHRcdGksIGluaXRQbHVnaW5zLCBwdCwgcCwgc3RhcnRWYXJzLCBsO1xuXHRcdFx0aWYgKHYuc3RhcnRBdCkge1xuXHRcdFx0XHRpZiAoc3RhcnRBdCkge1xuXHRcdFx0XHRcdHN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKTsgLy9pZiB3ZSd2ZSBydW4gYSBzdGFydEF0IHByZXZpb3VzbHkgKHdoZW4gdGhlIHR3ZWVuIGluc3RhbnRpYXRlZCksIHdlIHNob3VsZCByZXZlcnQgaXQgc28gdGhhdCB0aGUgdmFsdWVzIHJlLWluc3RhbnRpYXRlIGNvcnJlY3RseSBwYXJ0aWN1bGFybHkgZm9yIHJlbGF0aXZlIHR3ZWVucy4gV2l0aG91dCB0aGlzLCBhIFR3ZWVuTGl0ZS5mcm9tVG8ob2JqLCAxLCB7eDpcIis9MTAwXCJ9LCB7eDpcIi09MTAwXCJ9KSwgZm9yIGV4YW1wbGUsIHdvdWxkIGFjdHVhbGx5IGp1bXAgdG8gKz0yMDAgYmVjYXVzZSB0aGUgc3RhcnRBdCB3b3VsZCBydW4gdHdpY2UsIGRvdWJsaW5nIHRoZSByZWxhdGl2ZSBjaGFuZ2UuXG5cdFx0XHRcdFx0c3RhcnRBdC5raWxsKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RhcnRWYXJzID0ge307XG5cdFx0XHRcdGZvciAocCBpbiB2LnN0YXJ0QXQpIHsgLy9jb3B5IHRoZSBwcm9wZXJ0aWVzL3ZhbHVlcyBpbnRvIGEgbmV3IG9iamVjdCB0byBhdm9pZCBjb2xsaXNpb25zLCBsaWtlIHZhciB0byA9IHt4OjB9LCBmcm9tID0ge3g6NTAwfTsgdGltZWxpbmUuZnJvbVRvKGUsIDEsIGZyb20sIHRvKS5mcm9tVG8oZSwgMSwgdG8sIGZyb20pO1xuXHRcdFx0XHRcdHN0YXJ0VmFyc1twXSA9IHYuc3RhcnRBdFtwXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzdGFydFZhcnMuZGF0YSA9IFwiaXNTdGFydFwiO1xuXHRcdFx0XHRzdGFydFZhcnMub3ZlcndyaXRlID0gZmFsc2U7XG5cdFx0XHRcdHN0YXJ0VmFycy5pbW1lZGlhdGVSZW5kZXIgPSB0cnVlO1xuXHRcdFx0XHRzdGFydFZhcnMubGF6eSA9IChpbW1lZGlhdGUgJiYgdi5sYXp5ICE9PSBmYWxzZSk7XG5cdFx0XHRcdHN0YXJ0VmFycy5zdGFydEF0ID0gc3RhcnRWYXJzLmRlbGF5ID0gbnVsbDsgLy9ubyBuZXN0aW5nIG9mIHN0YXJ0QXQgb2JqZWN0cyBhbGxvd2VkIChvdGhlcndpc2UgaXQgY291bGQgY2F1c2UgYW4gaW5maW5pdGUgbG9vcCkuXG5cdFx0XHRcdHN0YXJ0VmFycy5vblVwZGF0ZSA9IHYub25VcGRhdGU7XG5cdFx0XHRcdHN0YXJ0VmFycy5vblVwZGF0ZVBhcmFtcyA9IHYub25VcGRhdGVQYXJhbXM7XG5cdFx0XHRcdHN0YXJ0VmFycy5vblVwZGF0ZVNjb3BlID0gdi5vblVwZGF0ZVNjb3BlIHx8IHYuY2FsbGJhY2tTY29wZSB8fCB0aGlzO1xuXHRcdFx0XHR0aGlzLl9zdGFydEF0ID0gVHdlZW5MaXRlLnRvKHRoaXMudGFyZ2V0IHx8IHt9LCAwLCBzdGFydFZhcnMpO1xuXHRcdFx0XHRpZiAoaW1tZWRpYXRlKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMuX3RpbWUgPiAwKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9zdGFydEF0ID0gbnVsbDsgLy90d2VlbnMgdGhhdCByZW5kZXIgaW1tZWRpYXRlbHkgKGxpa2UgbW9zdCBmcm9tKCkgYW5kIGZyb21UbygpIHR3ZWVucykgc2hvdWxkbid0IHJldmVydCB3aGVuIHRoZWlyIHBhcmVudCB0aW1lbGluZSdzIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgcGFzdCB0aGUgc3RhcnRUaW1lIGJlY2F1c2UgdGhlIGluaXRpYWwgcmVuZGVyIGNvdWxkIGhhdmUgaGFwcGVuZWQgYW55dGltZSBhbmQgaXQgc2hvdWxkbid0IGJlIGRpcmVjdGx5IGNvcnJlbGF0ZWQgdG8gdGhpcyB0d2VlbidzIHN0YXJ0VGltZS4gSW1hZ2luZSBzZXR0aW5nIHVwIGEgY29tcGxleCBhbmltYXRpb24gd2hlcmUgdGhlIGJlZ2lubmluZyBzdGF0ZXMgb2YgdmFyaW91cyBvYmplY3RzIGFyZSByZW5kZXJlZCBpbW1lZGlhdGVseSBidXQgdGhlIHR3ZWVuIGRvZXNuJ3QgaGFwcGVuIGZvciBxdWl0ZSBzb21lIHRpbWUgLSBpZiB3ZSByZXZlcnQgdG8gdGhlIHN0YXJ0aW5nIHZhbHVlcyBhcyBzb29uIGFzIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIHBhc3QgdGhlIHR3ZWVuJ3Mgc3RhcnRUaW1lLCBpdCB3aWxsIHRocm93IHRoaW5ncyBvZmYgdmlzdWFsbHkuIFJldmVyc2lvbiBzaG91bGQgb25seSBoYXBwZW4gaW4gVGltZWxpbmVMaXRlL01heCBpbnN0YW5jZXMgd2hlcmUgaW1tZWRpYXRlUmVuZGVyIHdhcyBmYWxzZSAod2hpY2ggaXMgdGhlIGRlZmF1bHQgaW4gdGhlIGNvbnZlbmllbmNlIG1ldGhvZHMgbGlrZSBmcm9tKCkpLlxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZHVyICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47IC8vd2Ugc2tpcCBpbml0aWFsaXphdGlvbiBoZXJlIHNvIHRoYXQgb3ZlcndyaXRpbmcgZG9lc24ndCBvY2N1ciB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zLiBPdGhlcndpc2UsIGlmIHlvdSBjcmVhdGUgc2V2ZXJhbCBpbW1lZGlhdGVSZW5kZXI6dHJ1ZSB0d2VlbnMgb2YgdGhlIHNhbWUgdGFyZ2V0L3Byb3BlcnRpZXMgdG8gZHJvcCBpbnRvIGEgVGltZWxpbmVMaXRlIG9yIFRpbWVsaW5lTWF4LCB0aGUgbGFzdCBvbmUgY3JlYXRlZCB3b3VsZCBvdmVyd3JpdGUgdGhlIGZpcnN0IG9uZXMgYmVjYXVzZSB0aGV5IGRpZG4ndCBnZXQgcGxhY2VkIGludG8gdGhlIHRpbWVsaW5lIHlldCBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlciBvY2N1cnMgYW5kIGtpY2tzIGluIG92ZXJ3cml0aW5nLlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICh2LnJ1bkJhY2t3YXJkcyAmJiBkdXIgIT09IDApIHtcblx0XHRcdFx0Ly9mcm9tKCkgdHdlZW5zIG11c3QgYmUgaGFuZGxlZCB1bmlxdWVseTogdGhlaXIgYmVnaW5uaW5nIHZhbHVlcyBtdXN0IGJlIHJlbmRlcmVkIGJ1dCB3ZSBkb24ndCB3YW50IG92ZXJ3cml0aW5nIHRvIG9jY3VyIHlldCAod2hlbiB0aW1lIGlzIHN0aWxsIDApLiBXYWl0IHVudGlsIHRoZSB0d2VlbiBhY3R1YWxseSBiZWdpbnMgYmVmb3JlIGRvaW5nIGFsbCB0aGUgcm91dGluZXMgbGlrZSBvdmVyd3JpdGluZy4gQXQgdGhhdCB0aW1lLCB3ZSBzaG91bGQgcmVuZGVyIGF0IHRoZSBFTkQgb2YgdGhlIHR3ZWVuIHRvIGVuc3VyZSB0aGF0IHRoaW5ncyBpbml0aWFsaXplIGNvcnJlY3RseSAocmVtZW1iZXIsIGZyb20oKSB0d2VlbnMgZ28gYmFja3dhcmRzKVxuXHRcdFx0XHRpZiAoc3RhcnRBdCkge1xuXHRcdFx0XHRcdHN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKTtcblx0XHRcdFx0XHRzdGFydEF0LmtpbGwoKTtcblx0XHRcdFx0XHR0aGlzLl9zdGFydEF0ID0gbnVsbDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAodGhpcy5fdGltZSAhPT0gMCkgeyAvL2luIHJhcmUgY2FzZXMgKGxpa2UgaWYgYSBmcm9tKCkgdHdlZW4gcnVucyBhbmQgdGhlbiBpcyBpbnZhbGlkYXRlKCktZWQpLCBpbW1lZGlhdGVSZW5kZXIgY291bGQgYmUgdHJ1ZSBidXQgdGhlIGluaXRpYWwgZm9yY2VkLXJlbmRlciBnZXRzIHNraXBwZWQsIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSB0aGUgcmVuZGVyIGluIHRoaXMgY29udGV4dCB3aGVuIHRoZSBfdGltZSBpcyBncmVhdGVyIHRoYW4gMFxuXHRcdFx0XHRcdFx0aW1tZWRpYXRlID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0ID0ge307XG5cdFx0XHRcdFx0Zm9yIChwIGluIHYpIHsgLy9jb3B5IHByb3BzIGludG8gYSBuZXcgb2JqZWN0IGFuZCBza2lwIGFueSByZXNlcnZlZCBwcm9wcywgb3RoZXJ3aXNlIG9uQ29tcGxldGUgb3Igb25VcGRhdGUgb3Igb25TdGFydCBjb3VsZCBmaXJlLiBXZSBzaG91bGQsIGhvd2V2ZXIsIHBlcm1pdCBhdXRvQ1NTIHRvIGdvIHRocm91Z2guXG5cdFx0XHRcdFx0XHRpZiAoIV9yZXNlcnZlZFByb3BzW3BdIHx8IHAgPT09IFwiYXV0b0NTU1wiKSB7XG5cdFx0XHRcdFx0XHRcdHB0W3BdID0gdltwXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHQub3ZlcndyaXRlID0gMDtcblx0XHRcdFx0XHRwdC5kYXRhID0gXCJpc0Zyb21TdGFydFwiOyAvL3dlIHRhZyB0aGUgdHdlZW4gd2l0aCBhcyBcImlzRnJvbVN0YXJ0XCIgc28gdGhhdCBpZiBbaW5zaWRlIGEgcGx1Z2luXSB3ZSBuZWVkIHRvIG9ubHkgZG8gc29tZXRoaW5nIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuLCB3ZSBoYXZlIGEgd2F5IG9mIGlkZW50aWZ5aW5nIHRoaXMgdHdlZW4gYXMgbWVyZWx5IHRoZSBvbmUgdGhhdCdzIHNldHRpbmcgdGhlIGJlZ2lubmluZyB2YWx1ZXMgZm9yIGEgXCJmcm9tKClcIiB0d2Vlbi4gRm9yIGV4YW1wbGUsIGNsZWFyUHJvcHMgaW4gQ1NTUGx1Z2luIHNob3VsZCBvbmx5IGdldCBhcHBsaWVkIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuIGFuZCB3aXRob3V0IHRoaXMgdGFnLCBmcm9tKC4uLntoZWlnaHQ6MTAwLCBjbGVhclByb3BzOlwiaGVpZ2h0XCIsIGRlbGF5OjF9KSB3b3VsZCB3aXBlIHRoZSBoZWlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gYW5kIGFmdGVyIDEgc2Vjb25kLCBpdCdkIGtpY2sgYmFjayBpbi5cblx0XHRcdFx0XHRwdC5sYXp5ID0gKGltbWVkaWF0ZSAmJiB2LmxhenkgIT09IGZhbHNlKTtcblx0XHRcdFx0XHRwdC5pbW1lZGlhdGVSZW5kZXIgPSBpbW1lZGlhdGU7IC8vemVyby1kdXJhdGlvbiB0d2VlbnMgcmVuZGVyIGltbWVkaWF0ZWx5IGJ5IGRlZmF1bHQsIGJ1dCBpZiB3ZSdyZSBub3Qgc3BlY2lmaWNhbGx5IGluc3RydWN0ZWQgdG8gcmVuZGVyIHRoaXMgdHdlZW4gaW1tZWRpYXRlbHksIHdlIHNob3VsZCBza2lwIHRoaXMgYW5kIG1lcmVseSBfaW5pdCgpIHRvIHJlY29yZCB0aGUgc3RhcnRpbmcgdmFsdWVzIChyZW5kZXJpbmcgdGhlbSBpbW1lZGlhdGVseSB3b3VsZCBwdXNoIHRoZW0gdG8gY29tcGxldGlvbiB3aGljaCBpcyB3YXN0ZWZ1bCBpbiB0aGF0IGNhc2UgLSB3ZSdkIGhhdmUgdG8gcmVuZGVyKC0xKSBpbW1lZGlhdGVseSBhZnRlcilcblx0XHRcdFx0XHR0aGlzLl9zdGFydEF0ID0gVHdlZW5MaXRlLnRvKHRoaXMudGFyZ2V0LCAwLCBwdCk7XG5cdFx0XHRcdFx0aWYgKCFpbW1lZGlhdGUpIHtcblx0XHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQuX2luaXQoKTsgLy9lbnN1cmVzIHRoYXQgdGhlIGluaXRpYWwgdmFsdWVzIGFyZSByZWNvcmRlZFxuXHRcdFx0XHRcdFx0dGhpcy5fc3RhcnRBdC5fZW5hYmxlZChmYWxzZSk7IC8vbm8gbmVlZCB0byBoYXZlIHRoZSB0d2VlbiByZW5kZXIgb24gdGhlIG5leHQgY3ljbGUuIERpc2FibGUgaXQgYmVjYXVzZSB3ZSdsbCBhbHdheXMgbWFudWFsbHkgY29udHJvbCB0aGUgcmVuZGVycyBvZiB0aGUgX3N0YXJ0QXQgdHdlZW4uXG5cdFx0XHRcdFx0XHRpZiAodGhpcy52YXJzLmltbWVkaWF0ZVJlbmRlcikge1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9zdGFydEF0ID0gbnVsbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuX3RpbWUgPT09IDApIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMuX2Vhc2UgPSBlYXNlID0gKCFlYXNlKSA/IFR3ZWVuTGl0ZS5kZWZhdWx0RWFzZSA6IChlYXNlIGluc3RhbmNlb2YgRWFzZSkgPyBlYXNlIDogKHR5cGVvZihlYXNlKSA9PT0gXCJmdW5jdGlvblwiKSA/IG5ldyBFYXNlKGVhc2UsIHYuZWFzZVBhcmFtcykgOiBfZWFzZU1hcFtlYXNlXSB8fCBUd2VlbkxpdGUuZGVmYXVsdEVhc2U7XG5cdFx0XHRpZiAodi5lYXNlUGFyYW1zIGluc3RhbmNlb2YgQXJyYXkgJiYgZWFzZS5jb25maWcpIHtcblx0XHRcdFx0dGhpcy5fZWFzZSA9IGVhc2UuY29uZmlnLmFwcGx5KGVhc2UsIHYuZWFzZVBhcmFtcyk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9lYXNlVHlwZSA9IHRoaXMuX2Vhc2UuX3R5cGU7XG5cdFx0XHR0aGlzLl9lYXNlUG93ZXIgPSB0aGlzLl9lYXNlLl9wb3dlcjtcblx0XHRcdHRoaXMuX2ZpcnN0UFQgPSBudWxsO1xuXG5cdFx0XHRpZiAodGhpcy5fdGFyZ2V0cykge1xuXHRcdFx0XHRsID0gdGhpcy5fdGFyZ2V0cy5sZW5ndGg7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMuX2luaXRQcm9wcyggdGhpcy5fdGFyZ2V0c1tpXSwgKHRoaXMuX3Byb3BMb29rdXBbaV0gPSB7fSksIHRoaXMuX3NpYmxpbmdzW2ldLCAob3AgPyBvcFtpXSA6IG51bGwpLCBpKSApIHtcblx0XHRcdFx0XHRcdGluaXRQbHVnaW5zID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGluaXRQbHVnaW5zID0gdGhpcy5faW5pdFByb3BzKHRoaXMudGFyZ2V0LCB0aGlzLl9wcm9wTG9va3VwLCB0aGlzLl9zaWJsaW5ncywgb3AsIDApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaW5pdFBsdWdpbnMpIHtcblx0XHRcdFx0VHdlZW5MaXRlLl9vblBsdWdpbkV2ZW50KFwiX29uSW5pdEFsbFByb3BzXCIsIHRoaXMpOyAvL3Jlb3JkZXJzIHRoZSBhcnJheSBpbiBvcmRlciBvZiBwcmlvcml0eS4gVXNlcyBhIHN0YXRpYyBUd2VlblBsdWdpbiBtZXRob2QgaW4gb3JkZXIgdG8gbWluaW1pemUgZmlsZSBzaXplIGluIFR3ZWVuTGl0ZVxuXHRcdFx0fVxuXHRcdFx0aWYgKG9wKSBpZiAoIXRoaXMuX2ZpcnN0UFQpIGlmICh0eXBlb2YodGhpcy50YXJnZXQpICE9PSBcImZ1bmN0aW9uXCIpIHsgLy9pZiBhbGwgdHdlZW5pbmcgcHJvcGVydGllcyBoYXZlIGJlZW4gb3ZlcndyaXR0ZW4sIGtpbGwgdGhlIHR3ZWVuLiBJZiB0aGUgdGFyZ2V0IGlzIGEgZnVuY3Rpb24sIGl0J3MgcHJvYmFibHkgYSBkZWxheWVkQ2FsbCBzbyBsZXQgaXQgbGl2ZS5cblx0XHRcdFx0dGhpcy5fZW5hYmxlZChmYWxzZSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHYucnVuQmFja3dhcmRzKSB7XG5cdFx0XHRcdHB0ID0gdGhpcy5fZmlyc3RQVDtcblx0XHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdFx0cHQucyArPSBwdC5jO1xuXHRcdFx0XHRcdHB0LmMgPSAtcHQuYztcblx0XHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9vblVwZGF0ZSA9IHYub25VcGRhdGU7XG5cdFx0XHR0aGlzLl9pbml0dGVkID0gdHJ1ZTtcblx0XHR9O1xuXG5cdFx0cC5faW5pdFByb3BzID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wTG9va3VwLCBzaWJsaW5ncywgb3ZlcndyaXR0ZW5Qcm9wcywgaW5kZXgpIHtcblx0XHRcdHZhciBwLCBpLCBpbml0UGx1Z2lucywgcGx1Z2luLCBwdCwgdjtcblx0XHRcdGlmICh0YXJnZXQgPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRpZiAoX2xhenlMb29rdXBbdGFyZ2V0Ll9nc1R3ZWVuSURdKSB7XG5cdFx0XHRcdF9sYXp5UmVuZGVyKCk7IC8vaWYgb3RoZXIgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldCBoYXZlIHJlY2VudGx5IGluaXR0ZWQgYnV0IGhhdmVuJ3QgcmVuZGVyZWQgeWV0LCB3ZSd2ZSBnb3QgdG8gZm9yY2UgdGhlIHJlbmRlciBzbyB0aGF0IHRoZSBzdGFydGluZyB2YWx1ZXMgYXJlIGNvcnJlY3QgKGltYWdpbmUgcG9wdWxhdGluZyBhIHRpbWVsaW5lIHdpdGggYSBidW5jaCBvZiBzZXF1ZW50aWFsIHR3ZWVucyBhbmQgdGhlbiBqdW1waW5nIHRvIHRoZSBlbmQpXG5cdFx0XHR9XG5cblx0XHRcdGlmICghdGhpcy52YXJzLmNzcykgaWYgKHRhcmdldC5zdHlsZSkgaWYgKHRhcmdldCAhPT0gd2luZG93ICYmIHRhcmdldC5ub2RlVHlwZSkgaWYgKF9wbHVnaW5zLmNzcykgaWYgKHRoaXMudmFycy5hdXRvQ1NTICE9PSBmYWxzZSkgeyAvL2l0J3Mgc28gY29tbW9uIHRvIHVzZSBUd2VlbkxpdGUvTWF4IHRvIGFuaW1hdGUgdGhlIGNzcyBvZiBET00gZWxlbWVudHMsIHdlIGFzc3VtZSB0aGF0IGlmIHRoZSB0YXJnZXQgaXMgYSBET00gZWxlbWVudCwgdGhhdCdzIHdoYXQgaXMgaW50ZW5kZWQgKGEgY29udmVuaWVuY2Ugc28gdGhhdCB1c2VycyBkb24ndCBoYXZlIHRvIHdyYXAgdGhpbmdzIGluIGNzczp7fSwgYWx0aG91Z2ggd2Ugc3RpbGwgcmVjb21tZW5kIGl0IGZvciBhIHNsaWdodCBwZXJmb3JtYW5jZSBib29zdCBhbmQgYmV0dGVyIHNwZWNpZmljaXR5KS4gTm90ZTogd2UgY2Fubm90IGNoZWNrIFwibm9kZVR5cGVcIiBvbiB0aGUgd2luZG93IGluc2lkZSBhbiBpZnJhbWUuXG5cdFx0XHRcdF9hdXRvQ1NTKHRoaXMudmFycywgdGFyZ2V0KTtcblx0XHRcdH1cblx0XHRcdGZvciAocCBpbiB0aGlzLnZhcnMpIHtcblx0XHRcdFx0diA9IHRoaXMudmFyc1twXTtcblx0XHRcdFx0aWYgKF9yZXNlcnZlZFByb3BzW3BdKSB7XG5cdFx0XHRcdFx0aWYgKHYpIGlmICgodiBpbnN0YW5jZW9mIEFycmF5KSB8fCAodi5wdXNoICYmIF9pc0FycmF5KHYpKSkgaWYgKHYuam9pbihcIlwiKS5pbmRleE9mKFwie3NlbGZ9XCIpICE9PSAtMSkge1xuXHRcdFx0XHRcdFx0dGhpcy52YXJzW3BdID0gdiA9IHRoaXMuX3N3YXBTZWxmSW5QYXJhbXModiwgdGhpcyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSBpZiAoX3BsdWdpbnNbcF0gJiYgKHBsdWdpbiA9IG5ldyBfcGx1Z2luc1twXSgpKS5fb25Jbml0VHdlZW4odGFyZ2V0LCB0aGlzLnZhcnNbcF0sIHRoaXMsIGluZGV4KSkge1xuXG5cdFx0XHRcdFx0Ly90IC0gdGFyZ2V0IFx0XHRbb2JqZWN0XVxuXHRcdFx0XHRcdC8vcCAtIHByb3BlcnR5IFx0XHRbc3RyaW5nXVxuXHRcdFx0XHRcdC8vcyAtIHN0YXJ0XHRcdFx0W251bWJlcl1cblx0XHRcdFx0XHQvL2MgLSBjaGFuZ2VcdFx0W251bWJlcl1cblx0XHRcdFx0XHQvL2YgLSBpc0Z1bmN0aW9uXHRbYm9vbGVhbl1cblx0XHRcdFx0XHQvL24gLSBuYW1lXHRcdFx0W3N0cmluZ11cblx0XHRcdFx0XHQvL3BnIC0gaXNQbHVnaW4gXHRbYm9vbGVhbl1cblx0XHRcdFx0XHQvL3ByIC0gcHJpb3JpdHlcdFx0W251bWJlcl1cblx0XHRcdFx0XHQvL20gLSBtb2QgICAgICAgICAgIFtmdW5jdGlvbiB8IDBdXG5cdFx0XHRcdFx0dGhpcy5fZmlyc3RQVCA9IHB0ID0ge19uZXh0OnRoaXMuX2ZpcnN0UFQsIHQ6cGx1Z2luLCBwOlwic2V0UmF0aW9cIiwgczowLCBjOjEsIGY6MSwgbjpwLCBwZzoxLCBwcjpwbHVnaW4uX3ByaW9yaXR5LCBtOjB9O1xuXHRcdFx0XHRcdGkgPSBwbHVnaW4uX292ZXJ3cml0ZVByb3BzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdHByb3BMb29rdXBbcGx1Z2luLl9vdmVyd3JpdGVQcm9wc1tpXV0gPSB0aGlzLl9maXJzdFBUO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocGx1Z2luLl9wcmlvcml0eSB8fCBwbHVnaW4uX29uSW5pdEFsbFByb3BzKSB7XG5cdFx0XHRcdFx0XHRpbml0UGx1Z2lucyA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwbHVnaW4uX29uRGlzYWJsZSB8fCBwbHVnaW4uX29uRW5hYmxlKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9ub3RpZnlQbHVnaW5zT2ZFbmFibGVkID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHB0Ll9uZXh0KSB7XG5cdFx0XHRcdFx0XHRwdC5fbmV4dC5fcHJldiA9IHB0O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHByb3BMb29rdXBbcF0gPSBfYWRkUHJvcFR3ZWVuLmNhbGwodGhpcywgdGFyZ2V0LCBwLCBcImdldFwiLCB2LCBwLCAwLCBudWxsLCB0aGlzLnZhcnMuc3RyaW5nRmlsdGVyLCBpbmRleCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKG92ZXJ3cml0dGVuUHJvcHMpIGlmICh0aGlzLl9raWxsKG92ZXJ3cml0dGVuUHJvcHMsIHRhcmdldCkpIHsgLy9hbm90aGVyIHR3ZWVuIG1heSBoYXZlIHRyaWVkIHRvIG92ZXJ3cml0ZSBwcm9wZXJ0aWVzIG9mIHRoaXMgdHdlZW4gYmVmb3JlIGluaXQoKSB3YXMgY2FsbGVkIChsaWtlIGlmIHR3byB0d2VlbnMgc3RhcnQgYXQgdGhlIHNhbWUgdGltZSwgdGhlIG9uZSBjcmVhdGVkIHNlY29uZCB3aWxsIHJ1biBmaXJzdClcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2luaXRQcm9wcyh0YXJnZXQsIHByb3BMb29rdXAsIHNpYmxpbmdzLCBvdmVyd3JpdHRlblByb3BzLCBpbmRleCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5fb3ZlcndyaXRlID4gMSkgaWYgKHRoaXMuX2ZpcnN0UFQpIGlmIChzaWJsaW5ncy5sZW5ndGggPiAxKSBpZiAoX2FwcGx5T3ZlcndyaXRlKHRhcmdldCwgdGhpcywgcHJvcExvb2t1cCwgdGhpcy5fb3ZlcndyaXRlLCBzaWJsaW5ncykpIHtcblx0XHRcdFx0dGhpcy5fa2lsbChwcm9wTG9va3VwLCB0YXJnZXQpO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5faW5pdFByb3BzKHRhcmdldCwgcHJvcExvb2t1cCwgc2libGluZ3MsIG92ZXJ3cml0dGVuUHJvcHMsIGluZGV4KTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLl9maXJzdFBUKSBpZiAoKHRoaXMudmFycy5sYXp5ICE9PSBmYWxzZSAmJiB0aGlzLl9kdXJhdGlvbikgfHwgKHRoaXMudmFycy5sYXp5ICYmICF0aGlzLl9kdXJhdGlvbikpIHsgLy96ZXJvIGR1cmF0aW9uIHR3ZWVucyBkb24ndCBsYXp5IHJlbmRlciBieSBkZWZhdWx0OyBldmVyeXRoaW5nIGVsc2UgZG9lcy5cblx0XHRcdFx0X2xhenlMb29rdXBbdGFyZ2V0Ll9nc1R3ZWVuSURdID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBpbml0UGx1Z2lucztcblx0XHR9O1xuXG5cdFx0cC5yZW5kZXIgPSBmdW5jdGlvbih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRcdFx0cHJldlRpbWUgPSBzZWxmLl90aW1lLFxuXHRcdFx0XHRkdXJhdGlvbiA9IHNlbGYuX2R1cmF0aW9uLFxuXHRcdFx0XHRwcmV2UmF3UHJldlRpbWUgPSBzZWxmLl9yYXdQcmV2VGltZSxcblx0XHRcdFx0aXNDb21wbGV0ZSwgY2FsbGJhY2ssIHB0LCByYXdQcmV2VGltZTtcblx0XHRcdGlmICh0aW1lID49IGR1cmF0aW9uIC0gX3RpbnlOdW0gJiYgdGltZSA+PSAwKSB7IC8vdG8gd29yayBhcm91bmQgb2NjYXNpb25hbCBmbG9hdGluZyBwb2ludCBtYXRoIGFydGlmYWN0cy5cblx0XHRcdFx0c2VsZi5fdG90YWxUaW1lID0gc2VsZi5fdGltZSA9IGR1cmF0aW9uO1xuXHRcdFx0XHRzZWxmLnJhdGlvID0gc2VsZi5fZWFzZS5fY2FsY0VuZCA/IHNlbGYuX2Vhc2UuZ2V0UmF0aW8oMSkgOiAxO1xuXHRcdFx0XHRpZiAoIXNlbGYuX3JldmVyc2VkICkge1xuXHRcdFx0XHRcdGlzQ29tcGxldGUgPSB0cnVlO1xuXHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvbkNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0Zm9yY2UgPSAoZm9yY2UgfHwgc2VsZi5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuKTsgLy9vdGhlcndpc2UsIGlmIHRoZSBhbmltYXRpb24gaXMgdW5wYXVzZWQvYWN0aXZhdGVkIGFmdGVyIGl0J3MgYWxyZWFkeSBmaW5pc2hlZCwgaXQgZG9lc24ndCBnZXQgcmVtb3ZlZCBmcm9tIHRoZSBwYXJlbnQgdGltZWxpbmUuXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGR1cmF0aW9uID09PSAwKSBpZiAoc2VsZi5faW5pdHRlZCB8fCAhc2VsZi52YXJzLmxhenkgfHwgZm9yY2UpIHsgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyBhcmUgdHJpY2t5IGJlY2F1c2Ugd2UgbXVzdCBkaXNjZXJuIHRoZSBtb21lbnR1bS9kaXJlY3Rpb24gb2YgdGltZSBpbiBvcmRlciB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgc3RhcnRpbmcgdmFsdWVzIHNob3VsZCBiZSByZW5kZXJlZCBvciB0aGUgZW5kaW5nIHZhbHVlcy4gSWYgdGhlIFwicGxheWhlYWRcIiBvZiBpdHMgdGltZWxpbmUgZ29lcyBwYXN0IHRoZSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIGluIHRoZSBmb3J3YXJkIGRpcmVjdGlvbiBvciBsYW5kcyBkaXJlY3RseSBvbiBpdCwgdGhlIGVuZCB2YWx1ZXMgc2hvdWxkIGJlIHJlbmRlcmVkLCBidXQgaWYgdGhlIHRpbWVsaW5lJ3MgXCJwbGF5aGVhZFwiIG1vdmVzIHBhc3QgaXQgaW4gdGhlIGJhY2t3YXJkIGRpcmVjdGlvbiAoZnJvbSBhIHBvc3RpdGl2ZSB0aW1lIHRvIGEgbmVnYXRpdmUgdGltZSksIHRoZSBzdGFydGluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZC5cblx0XHRcdFx0XHRpZiAoc2VsZi5fc3RhcnRUaW1lID09PSBzZWxmLl90aW1lbGluZS5fZHVyYXRpb24pIHsgLy9pZiBhIHplcm8tZHVyYXRpb24gdHdlZW4gaXMgYXQgdGhlIFZFUlkgZW5kIG9mIGEgdGltZWxpbmUgYW5kIHRoYXQgdGltZWxpbmUgcmVuZGVycyBhdCBpdHMgZW5kLCBpdCB3aWxsIHR5cGljYWxseSBhZGQgYSB0aW55IGJpdCBvZiBjdXNoaW9uIHRvIHRoZSByZW5kZXIgdGltZSB0byBwcmV2ZW50IHJvdW5kaW5nIGVycm9ycyBmcm9tIGdldHRpbmcgaW4gdGhlIHdheSBvZiB0d2VlbnMgcmVuZGVyaW5nIHRoZWlyIFZFUlkgZW5kLiBJZiB3ZSB0aGVuIHJldmVyc2UoKSB0aGF0IHRpbWVsaW5lLCB0aGUgemVyby1kdXJhdGlvbiB0d2VlbiB3aWxsIHRyaWdnZXIgaXRzIG9uUmV2ZXJzZUNvbXBsZXRlIGV2ZW4gdGhvdWdoIHRlY2huaWNhbGx5IHRoZSBwbGF5aGVhZCBkaWRuJ3QgcGFzcyBvdmVyIGl0IGFnYWluLiBJdCdzIGEgdmVyeSBzcGVjaWZpYyBlZGdlIGNhc2Ugd2UgbXVzdCBhY2NvbW1vZGF0ZS5cblx0XHRcdFx0XHRcdHRpbWUgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocHJldlJhd1ByZXZUaW1lIDwgMCB8fCAodGltZSA8PSAwICYmIHRpbWUgPj0gLV90aW55TnVtKSB8fCAocHJldlJhd1ByZXZUaW1lID09PSBfdGlueU51bSAmJiBzZWxmLmRhdGEgIT09IFwiaXNQYXVzZVwiKSkgaWYgKHByZXZSYXdQcmV2VGltZSAhPT0gdGltZSkgeyAvL25vdGU6IHdoZW4gdGhpcy5kYXRhIGlzIFwiaXNQYXVzZVwiLCBpdCdzIGEgY2FsbGJhY2sgYWRkZWQgYnkgYWRkUGF1c2UoKSBvbiBhIHRpbWVsaW5lIHRoYXQgd2Ugc2hvdWxkIG5vdCBiZSB0cmlnZ2VyZWQgd2hlbiBMRUFWSU5HIGl0cyBleGFjdCBzdGFydCB0aW1lLiBJbiBvdGhlciB3b3JkcywgdGwuYWRkUGF1c2UoMSkucGxheSgxKSBzaG91bGRuJ3QgcGF1c2UuXG5cdFx0XHRcdFx0XHRmb3JjZSA9IHRydWU7XG5cdFx0XHRcdFx0XHRpZiAocHJldlJhd1ByZXZUaW1lID4gX3RpbnlOdW0pIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uUmV2ZXJzZUNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNlbGYuX3Jhd1ByZXZUaW1lID0gcmF3UHJldlRpbWUgPSAoIXN1cHByZXNzRXZlbnRzIHx8IHRpbWUgfHwgcHJldlJhd1ByZXZUaW1lID09PSB0aW1lKSA/IHRpbWUgOiBfdGlueU51bTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC4gV2Ugc2V0IHRoZSBfcmF3UHJldlRpbWUgdG8gYmUgYSBwcmVjaXNlIHRpbnkgbnVtYmVyIHRvIGluZGljYXRlIHRoaXMgc2NlbmFyaW8gcmF0aGVyIHRoYW4gdXNpbmcgYW5vdGhlciBwcm9wZXJ0eS92YXJpYWJsZSB3aGljaCB3b3VsZCBpbmNyZWFzZSBtZW1vcnkgdXNhZ2UuIFRoaXMgdGVjaG5pcXVlIGlzIGxlc3MgcmVhZGFibGUsIGJ1dCBtb3JlIGVmZmljaWVudC5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKHRpbWUgPCBfdGlueU51bSkgeyAvL3RvIHdvcmsgYXJvdW5kIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgbWF0aCBhcnRpZmFjdHMsIHJvdW5kIHN1cGVyIHNtYWxsIHZhbHVlcyB0byAwLlxuXHRcdFx0XHRzZWxmLl90b3RhbFRpbWUgPSBzZWxmLl90aW1lID0gMDtcblx0XHRcdFx0c2VsZi5yYXRpbyA9IHNlbGYuX2Vhc2UuX2NhbGNFbmQgPyBzZWxmLl9lYXNlLmdldFJhdGlvKDApIDogMDtcblx0XHRcdFx0aWYgKHByZXZUaW1lICE9PSAwIHx8IChkdXJhdGlvbiA9PT0gMCAmJiBwcmV2UmF3UHJldlRpbWUgPiAwKSkge1xuXHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvblJldmVyc2VDb21wbGV0ZVwiO1xuXHRcdFx0XHRcdGlzQ29tcGxldGUgPSBzZWxmLl9yZXZlcnNlZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGltZSA+IC1fdGlueU51bSkge1xuXHRcdFx0XHRcdHRpbWUgPSAwO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRpbWUgPCAwKSB7XG5cdFx0XHRcdFx0c2VsZi5fYWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdFx0aWYgKGR1cmF0aW9uID09PSAwKSBpZiAoc2VsZi5faW5pdHRlZCB8fCAhc2VsZi52YXJzLmxhenkgfHwgZm9yY2UpIHsgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyBhcmUgdHJpY2t5IGJlY2F1c2Ugd2UgbXVzdCBkaXNjZXJuIHRoZSBtb21lbnR1bS9kaXJlY3Rpb24gb2YgdGltZSBpbiBvcmRlciB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgc3RhcnRpbmcgdmFsdWVzIHNob3VsZCBiZSByZW5kZXJlZCBvciB0aGUgZW5kaW5nIHZhbHVlcy4gSWYgdGhlIFwicGxheWhlYWRcIiBvZiBpdHMgdGltZWxpbmUgZ29lcyBwYXN0IHRoZSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIGluIHRoZSBmb3J3YXJkIGRpcmVjdGlvbiBvciBsYW5kcyBkaXJlY3RseSBvbiBpdCwgdGhlIGVuZCB2YWx1ZXMgc2hvdWxkIGJlIHJlbmRlcmVkLCBidXQgaWYgdGhlIHRpbWVsaW5lJ3MgXCJwbGF5aGVhZFwiIG1vdmVzIHBhc3QgaXQgaW4gdGhlIGJhY2t3YXJkIGRpcmVjdGlvbiAoZnJvbSBhIHBvc3RpdGl2ZSB0aW1lIHRvIGEgbmVnYXRpdmUgdGltZSksIHRoZSBzdGFydGluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZC5cblx0XHRcdFx0XHRcdGlmIChwcmV2UmF3UHJldlRpbWUgPj0gMCAmJiAhKHByZXZSYXdQcmV2VGltZSA9PT0gX3RpbnlOdW0gJiYgc2VsZi5kYXRhID09PSBcImlzUGF1c2VcIikpIHtcblx0XHRcdFx0XHRcdFx0Zm9yY2UgPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0c2VsZi5fcmF3UHJldlRpbWUgPSByYXdQcmV2VGltZSA9ICghc3VwcHJlc3NFdmVudHMgfHwgdGltZSB8fCBwcmV2UmF3UHJldlRpbWUgPT09IHRpbWUpID8gdGltZSA6IF90aW55TnVtOyAvL3doZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LiBXZSBzZXQgdGhlIF9yYXdQcmV2VGltZSB0byBiZSBhIHByZWNpc2UgdGlueSBudW1iZXIgdG8gaW5kaWNhdGUgdGhpcyBzY2VuYXJpbyByYXRoZXIgdGhhbiB1c2luZyBhbm90aGVyIHByb3BlcnR5L3ZhcmlhYmxlIHdoaWNoIHdvdWxkIGluY3JlYXNlIG1lbW9yeSB1c2FnZS4gVGhpcyB0ZWNobmlxdWUgaXMgbGVzcyByZWFkYWJsZSwgYnV0IG1vcmUgZWZmaWNpZW50LlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXNlbGYuX2luaXR0ZWQgfHwgKHNlbGYuX3N0YXJ0QXQgJiYgc2VsZi5fc3RhcnRBdC5wcm9ncmVzcygpKSkgeyAvL2lmIHdlIHJlbmRlciB0aGUgdmVyeSBiZWdpbm5pbmcgKHRpbWUgPT0gMCkgb2YgYSBmcm9tVG8oKSwgd2UgbXVzdCBmb3JjZSB0aGUgcmVuZGVyIChub3JtYWwgdHdlZW5zIHdvdWxkbid0IG5lZWQgdG8gcmVuZGVyIGF0IGEgdGltZSBvZiAwIHdoZW4gdGhlIHByZXZUaW1lIHdhcyBhbHNvIDApLiBUaGlzIGlzIGFsc28gbWFuZGF0b3J5IHRvIG1ha2Ugc3VyZSBvdmVyd3JpdGluZyBraWNrcyBpbiBpbW1lZGlhdGVseS4gQWxzbywgd2UgY2hlY2sgcHJvZ3Jlc3MoKSBiZWNhdXNlIGlmIHN0YXJ0QXQgaGFzIGFscmVhZHkgcmVuZGVyZWQgYXQgaXRzIGVuZCwgd2Ugc2hvdWxkIGZvcmNlIGEgcmVuZGVyIGF0IGl0cyBiZWdpbm5pbmcuIE90aGVyd2lzZSwgaWYgeW91IHB1dCB0aGUgcGxheWhlYWQgZGlyZWN0bHkgb24gdG9wIG9mIHdoZXJlIGEgZnJvbVRvKHtpbW1lZGlhdGVSZW5kZXI6ZmFsc2V9KSBzdGFydHMsIGFuZCB0aGVuIG1vdmUgaXQgYmFja3dhcmRzLCB0aGUgZnJvbSgpIHdvbid0IHJldmVydCBpdHMgdmFsdWVzLlxuXHRcdFx0XHRcdGZvcmNlID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5fdG90YWxUaW1lID0gc2VsZi5fdGltZSA9IHRpbWU7XG5cblx0XHRcdFx0aWYgKHNlbGYuX2Vhc2VUeXBlKSB7XG5cdFx0XHRcdFx0dmFyIHIgPSB0aW1lIC8gZHVyYXRpb24sIHR5cGUgPSBzZWxmLl9lYXNlVHlwZSwgcG93ID0gc2VsZi5fZWFzZVBvd2VyO1xuXHRcdFx0XHRcdGlmICh0eXBlID09PSAxIHx8ICh0eXBlID09PSAzICYmIHIgPj0gMC41KSkge1xuXHRcdFx0XHRcdFx0ciA9IDEgLSByO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodHlwZSA9PT0gMykge1xuXHRcdFx0XHRcdFx0ciAqPSAyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocG93ID09PSAxKSB7XG5cdFx0XHRcdFx0XHRyICo9IHI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwb3cgPT09IDIpIHtcblx0XHRcdFx0XHRcdHIgKj0gciAqIHI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwb3cgPT09IDMpIHtcblx0XHRcdFx0XHRcdHIgKj0gciAqIHIgKiByO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocG93ID09PSA0KSB7XG5cdFx0XHRcdFx0XHRyICo9IHIgKiByICogciAqIHI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNlbGYucmF0aW8gPSAodHlwZSA9PT0gMSkgPyAxIC0gciA6ICh0eXBlID09PSAyKSA/IHIgOiAodGltZSAvIGR1cmF0aW9uIDwgMC41KSA/IHIgLyAyIDogMSAtIChyIC8gMik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5yYXRpbyA9IHNlbGYuX2Vhc2UuZ2V0UmF0aW8odGltZSAvIGR1cmF0aW9uKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc2VsZi5fdGltZSA9PT0gcHJldlRpbWUgJiYgIWZvcmNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSBpZiAoIXNlbGYuX2luaXR0ZWQpIHtcblx0XHRcdFx0c2VsZi5faW5pdCgpO1xuXHRcdFx0XHRpZiAoIXNlbGYuX2luaXR0ZWQgfHwgc2VsZi5fZ2MpIHsgLy9pbW1lZGlhdGVSZW5kZXIgdHdlZW5zIHR5cGljYWxseSB3b24ndCBpbml0aWFsaXplIHVudGlsIHRoZSBwbGF5aGVhZCBhZHZhbmNlcyAoX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDApIGluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IG92ZXJ3cml0aW5nIG9jY3VycyBwcm9wZXJseS4gQWxzbywgaWYgYWxsIG9mIHRoZSB0d2VlbmluZyBwcm9wZXJ0aWVzIGhhdmUgYmVlbiBvdmVyd3JpdHRlbiAod2hpY2ggd291bGQgY2F1c2UgX2djIHRvIGJlIHRydWUsIGFzIHNldCBpbiBfaW5pdCgpKSwgd2Ugc2hvdWxkbid0IGNvbnRpbnVlIG90aGVyd2lzZSBhbiBvblN0YXJ0IGNhbGxiYWNrIGNvdWxkIGJlIGNhbGxlZCBmb3IgZXhhbXBsZS5cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH0gZWxzZSBpZiAoIWZvcmNlICYmIHNlbGYuX2ZpcnN0UFQgJiYgKChzZWxmLnZhcnMubGF6eSAhPT0gZmFsc2UgJiYgc2VsZi5fZHVyYXRpb24pIHx8IChzZWxmLnZhcnMubGF6eSAmJiAhc2VsZi5fZHVyYXRpb24pKSkge1xuXHRcdFx0XHRcdHNlbGYuX3RpbWUgPSBzZWxmLl90b3RhbFRpbWUgPSBwcmV2VGltZTtcblx0XHRcdFx0XHRzZWxmLl9yYXdQcmV2VGltZSA9IHByZXZSYXdQcmV2VGltZTtcblx0XHRcdFx0XHRfbGF6eVR3ZWVucy5wdXNoKHNlbGYpO1xuXHRcdFx0XHRcdHNlbGYuX2xhenkgPSBbdGltZSwgc3VwcHJlc3NFdmVudHNdO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQvL19lYXNlIGlzIGluaXRpYWxseSBzZXQgdG8gZGVmYXVsdEVhc2UsIHNvIG5vdyB0aGF0IGluaXQoKSBoYXMgcnVuLCBfZWFzZSBpcyBzZXQgcHJvcGVybHkgYW5kIHdlIG5lZWQgdG8gcmVjYWxjdWxhdGUgdGhlIHJhdGlvLiBPdmVyYWxsIHRoaXMgaXMgZmFzdGVyIHRoYW4gdXNpbmcgY29uZGl0aW9uYWwgbG9naWMgZWFybGllciBpbiB0aGUgbWV0aG9kIHRvIGF2b2lkIGhhdmluZyB0byBzZXQgcmF0aW8gdHdpY2UgYmVjYXVzZSB3ZSBvbmx5IGluaXQoKSBvbmNlIGJ1dCByZW5kZXJUaW1lKCkgZ2V0cyBjYWxsZWQgVkVSWSBmcmVxdWVudGx5LlxuXHRcdFx0XHRpZiAoc2VsZi5fdGltZSAmJiAhaXNDb21wbGV0ZSkge1xuXHRcdFx0XHRcdHNlbGYucmF0aW8gPSBzZWxmLl9lYXNlLmdldFJhdGlvKHNlbGYuX3RpbWUgLyBkdXJhdGlvbik7XG5cdFx0XHRcdH0gZWxzZSBpZiAoaXNDb21wbGV0ZSAmJiBzZWxmLl9lYXNlLl9jYWxjRW5kKSB7XG5cdFx0XHRcdFx0c2VsZi5yYXRpbyA9IHNlbGYuX2Vhc2UuZ2V0UmF0aW8oKHNlbGYuX3RpbWUgPT09IDApID8gMCA6IDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoc2VsZi5fbGF6eSAhPT0gZmFsc2UpIHsgLy9pbiBjYXNlIGEgbGF6eSByZW5kZXIgaXMgcGVuZGluZywgd2Ugc2hvdWxkIGZsdXNoIGl0IGJlY2F1c2UgdGhlIG5ldyByZW5kZXIgaXMgb2NjdXJyaW5nIG5vdyAoaW1hZ2luZSBhIGxhenkgdHdlZW4gaW5zdGFudGlhdGluZyBhbmQgdGhlbiBpbW1lZGlhdGVseSB0aGUgdXNlciBjYWxscyB0d2Vlbi5zZWVrKHR3ZWVuLmR1cmF0aW9uKCkpLCBza2lwcGluZyB0byB0aGUgZW5kIC0gdGhlIGVuZCByZW5kZXIgd291bGQgYmUgZm9yY2VkLCBhbmQgdGhlbiBpZiB3ZSBkaWRuJ3QgZmx1c2ggdGhlIGxhenkgcmVuZGVyLCBpdCdkIGZpcmUgQUZURVIgdGhlIHNlZWsoKSwgcmVuZGVyaW5nIGl0IGF0IHRoZSB3cm9uZyB0aW1lLlxuXHRcdFx0XHRzZWxmLl9sYXp5ID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIXNlbGYuX2FjdGl2ZSkgaWYgKCFzZWxmLl9wYXVzZWQgJiYgc2VsZi5fdGltZSAhPT0gcHJldlRpbWUgJiYgdGltZSA+PSAwKSB7XG5cdFx0XHRcdHNlbGYuX2FjdGl2ZSA9IHRydWU7ICAvL3NvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyBhIHR3ZWVuIChhcyBvcHBvc2VkIHRvIHRoZSB0aW1lbGluZSByZW5kZXJpbmcgaXQpLCB0aGUgdGltZWxpbmUgaXMgZm9yY2VkIHRvIHJlLXJlbmRlciBhbmQgYWxpZ24gaXQgd2l0aCB0aGUgcHJvcGVyIHRpbWUvZnJhbWUgb24gdGhlIG5leHQgcmVuZGVyaW5nIGN5Y2xlLiBNYXliZSB0aGUgdHdlZW4gYWxyZWFkeSBmaW5pc2hlZCBidXQgdGhlIHVzZXIgbWFudWFsbHkgcmUtcmVuZGVycyBpdCBhcyBoYWxmd2F5IGRvbmUuXG5cdFx0XHR9XG5cdFx0XHRpZiAocHJldlRpbWUgPT09IDApIHtcblx0XHRcdFx0aWYgKHNlbGYuX3N0YXJ0QXQpIHtcblx0XHRcdFx0XHRpZiAodGltZSA+PSAwKSB7XG5cdFx0XHRcdFx0XHRzZWxmLl9zdGFydEF0LnJlbmRlcih0aW1lLCB0cnVlLCBmb3JjZSk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICghY2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gXCJfZHVtbXlHU1wiOyAvL2lmIG5vIGNhbGxiYWNrIGlzIGRlZmluZWQsIHVzZSBhIGR1bW15IHZhbHVlIGp1c3Qgc28gdGhhdCB0aGUgY29uZGl0aW9uIGF0IHRoZSBlbmQgZXZhbHVhdGVzIGFzIHRydWUgYmVjYXVzZSBfc3RhcnRBdCBzaG91bGQgcmVuZGVyIEFGVEVSIHRoZSBub3JtYWwgcmVuZGVyIGxvb3Agd2hlbiB0aGUgdGltZSBpcyBuZWdhdGl2ZS4gV2UgY291bGQgaGFuZGxlIHRoaXMgaW4gYSBtb3JlIGludHVpdGl2ZSB3YXksIG9mIGNvdXJzZSwgYnV0IHRoZSByZW5kZXIgbG9vcCBpcyB0aGUgTU9TVCBpbXBvcnRhbnQgdGhpbmcgdG8gb3B0aW1pemUsIHNvIHRoaXMgdGVjaG5pcXVlIGFsbG93cyB1cyB0byBhdm9pZCBhZGRpbmcgZXh0cmEgY29uZGl0aW9uYWwgbG9naWMgaW4gYSBoaWdoLWZyZXF1ZW5jeSBhcmVhLlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoc2VsZi52YXJzLm9uU3RhcnQpIGlmIChzZWxmLl90aW1lICE9PSAwIHx8IGR1cmF0aW9uID09PSAwKSBpZiAoIXN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRcdFx0c2VsZi5fY2FsbGJhY2soXCJvblN0YXJ0XCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRwdCA9IHNlbGYuX2ZpcnN0UFQ7XG5cdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0aWYgKHB0LmYpIHtcblx0XHRcdFx0XHRwdC50W3B0LnBdKHB0LmMgKiBzZWxmLnJhdGlvICsgcHQucyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LmMgKiBzZWxmLnJhdGlvICsgcHQucztcblx0XHRcdFx0fVxuXHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc2VsZi5fb25VcGRhdGUpIHtcblx0XHRcdFx0aWYgKHRpbWUgPCAwKSBpZiAoc2VsZi5fc3RhcnRBdCAmJiB0aW1lICE9PSAtMC4wMDAxKSB7IC8vaWYgdGhlIHR3ZWVuIGlzIHBvc2l0aW9uZWQgYXQgdGhlIFZFUlkgYmVnaW5uaW5nIChfc3RhcnRUaW1lIDApIG9mIGl0cyBwYXJlbnQgdGltZWxpbmUsIGl0J3MgaWxsZWdhbCBmb3IgdGhlIHBsYXloZWFkIHRvIGdvIGJhY2sgZnVydGhlciwgc28gd2Ugc2hvdWxkIG5vdCByZW5kZXIgdGhlIHJlY29yZGVkIHN0YXJ0QXQgdmFsdWVzLlxuXHRcdFx0XHRcdHNlbGYuX3N0YXJ0QXQucmVuZGVyKHRpbWUsIHRydWUsIGZvcmNlKTsgLy9ub3RlOiBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgdHVjayB0aGlzIGNvbmRpdGlvbmFsIGxvZ2ljIGluc2lkZSBsZXNzIHRyYXZlbGVkIGFyZWFzIChtb3N0IHR3ZWVucyBkb24ndCBoYXZlIGFuIG9uVXBkYXRlKS4gV2UnZCBqdXN0IGhhdmUgaXQgYXQgdGhlIGVuZCBiZWZvcmUgdGhlIG9uQ29tcGxldGUsIGJ1dCB0aGUgdmFsdWVzIHNob3VsZCBiZSB1cGRhdGVkIGJlZm9yZSBhbnkgb25VcGRhdGUgaXMgY2FsbGVkLCBzbyB3ZSBBTFNPIHB1dCBpdCBoZXJlIGFuZCB0aGVuIGlmIGl0J3Mgbm90IGNhbGxlZCwgd2UgZG8gc28gbGF0ZXIgbmVhciB0aGUgb25Db21wbGV0ZS5cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXN1cHByZXNzRXZlbnRzKSBpZiAoc2VsZi5fdGltZSAhPT0gcHJldlRpbWUgfHwgaXNDb21wbGV0ZSB8fCBmb3JjZSkge1xuXHRcdFx0XHRcdHNlbGYuX2NhbGxiYWNrKFwib25VcGRhdGVcIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChjYWxsYmFjaykgaWYgKCFzZWxmLl9nYyB8fCBmb3JjZSkgeyAvL2NoZWNrIF9nYyBiZWNhdXNlIHRoZXJlJ3MgYSBjaGFuY2UgdGhhdCBraWxsKCkgY291bGQgYmUgY2FsbGVkIGluIGFuIG9uVXBkYXRlXG5cdFx0XHRcdGlmICh0aW1lIDwgMCAmJiBzZWxmLl9zdGFydEF0ICYmICFzZWxmLl9vblVwZGF0ZSAmJiB0aW1lICE9PSAtMC4wMDAxKSB7IC8vLTAuMDAwMSBpcyBhIHNwZWNpYWwgdmFsdWUgdGhhdCB3ZSB1c2Ugd2hlbiBsb29waW5nIGJhY2sgdG8gdGhlIGJlZ2lubmluZyBvZiBhIHJlcGVhdGVkIFRpbWVsaW5lTWF4LCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZG4ndCByZW5kZXIgdGhlIF9zdGFydEF0IHZhbHVlcy5cblx0XHRcdFx0XHRzZWxmLl9zdGFydEF0LnJlbmRlcih0aW1lLCB0cnVlLCBmb3JjZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGlzQ29tcGxldGUpIHtcblx0XHRcdFx0XHRpZiAoc2VsZi5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuKSB7XG5cdFx0XHRcdFx0XHRzZWxmLl9lbmFibGVkKGZhbHNlLCBmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNlbGYuX2FjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghc3VwcHJlc3NFdmVudHMgJiYgc2VsZi52YXJzW2NhbGxiYWNrXSkge1xuXHRcdFx0XHRcdHNlbGYuX2NhbGxiYWNrKGNhbGxiYWNrKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZHVyYXRpb24gPT09IDAgJiYgc2VsZi5fcmF3UHJldlRpbWUgPT09IF90aW55TnVtICYmIHJhd1ByZXZUaW1lICE9PSBfdGlueU51bSkgeyAvL3RoZSBvbkNvbXBsZXRlIG9yIG9uUmV2ZXJzZUNvbXBsZXRlIGNvdWxkIHRyaWdnZXIgbW92ZW1lbnQgb2YgdGhlIHBsYXloZWFkIGFuZCBmb3IgemVyby1kdXJhdGlvbiB0d2VlbnMgKHdoaWNoIG11c3QgZGlzY2VybiBkaXJlY3Rpb24pIHRoYXQgbGFuZCBkaXJlY3RseSBiYWNrIG9uIHRoZWlyIHN0YXJ0IHRpbWUsIHdlIGRvbid0IHdhbnQgdG8gZmlyZSBhZ2FpbiBvbiB0aGUgbmV4dCByZW5kZXIuIFRoaW5rIG9mIHNldmVyYWwgYWRkUGF1c2UoKSdzIGluIGEgdGltZWxpbmUgdGhhdCBmb3JjZXMgdGhlIHBsYXloZWFkIHRvIGEgY2VydGFpbiBzcG90LCBidXQgd2hhdCBpZiBpdCdzIGFscmVhZHkgcGF1c2VkIGFuZCBhbm90aGVyIHR3ZWVuIGlzIHR3ZWVuaW5nIHRoZSBcInRpbWVcIiBvZiB0aGUgdGltZWxpbmU/IEVhY2ggdGltZSBpdCBtb3ZlcyBbZm9yd2FyZF0gcGFzdCB0aGF0IHNwb3QsIGl0IHdvdWxkIG1vdmUgYmFjaywgYW5kIHNpbmNlIHN1cHByZXNzRXZlbnRzIGlzIHRydWUsIGl0J2QgcmVzZXQgX3Jhd1ByZXZUaW1lIHRvIF90aW55TnVtIHNvIHRoYXQgd2hlbiBpdCBiZWdpbnMgYWdhaW4sIHRoZSBjYWxsYmFjayB3b3VsZCBmaXJlIChzbyB1bHRpbWF0ZWx5IGl0IGNvdWxkIGJvdW5jZSBiYWNrIGFuZCBmb3J0aCBkdXJpbmcgdGhhdCB0d2VlbikuIEFnYWluLCB0aGlzIGlzIGEgdmVyeSB1bmNvbW1vbiBzY2VuYXJpbywgYnV0IHBvc3NpYmxlIG5vbmV0aGVsZXNzLlxuXHRcdFx0XHRcdHNlbGYuX3Jhd1ByZXZUaW1lID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRwLl9raWxsID0gZnVuY3Rpb24odmFycywgdGFyZ2V0LCBvdmVyd3JpdGluZ1R3ZWVuKSB7XG5cdFx0XHRpZiAodmFycyA9PT0gXCJhbGxcIikge1xuXHRcdFx0XHR2YXJzID0gbnVsbDtcblx0XHRcdH1cblx0XHRcdGlmICh2YXJzID09IG51bGwpIGlmICh0YXJnZXQgPT0gbnVsbCB8fCB0YXJnZXQgPT09IHRoaXMudGFyZ2V0KSB7XG5cdFx0XHRcdHRoaXMuX2xhenkgPSBmYWxzZTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdH1cblx0XHRcdHRhcmdldCA9ICh0eXBlb2YodGFyZ2V0KSAhPT0gXCJzdHJpbmdcIikgPyAodGFyZ2V0IHx8IHRoaXMuX3RhcmdldHMgfHwgdGhpcy50YXJnZXQpIDogVHdlZW5MaXRlLnNlbGVjdG9yKHRhcmdldCkgfHwgdGFyZ2V0O1xuXHRcdFx0dmFyIHNpbXVsdGFuZW91c092ZXJ3cml0ZSA9IChvdmVyd3JpdGluZ1R3ZWVuICYmIHRoaXMuX3RpbWUgJiYgb3ZlcndyaXRpbmdUd2Vlbi5fc3RhcnRUaW1lID09PSB0aGlzLl9zdGFydFRpbWUgJiYgdGhpcy5fdGltZWxpbmUgPT09IG92ZXJ3cml0aW5nVHdlZW4uX3RpbWVsaW5lKSxcblx0XHRcdFx0Zmlyc3RQVCA9IHRoaXMuX2ZpcnN0UFQsXG5cdFx0XHRcdGksIG92ZXJ3cml0dGVuUHJvcHMsIHAsIHB0LCBwcm9wTG9va3VwLCBjaGFuZ2VkLCBraWxsUHJvcHMsIHJlY29yZCwga2lsbGVkO1xuXHRcdFx0aWYgKChfaXNBcnJheSh0YXJnZXQpIHx8IF9pc1NlbGVjdG9yKHRhcmdldCkpICYmIHR5cGVvZih0YXJnZXRbMF0pICE9PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdGkgPSB0YXJnZXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5fa2lsbCh2YXJzLCB0YXJnZXRbaV0sIG92ZXJ3cml0aW5nVHdlZW4pKSB7XG5cdFx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICh0aGlzLl90YXJnZXRzKSB7XG5cdFx0XHRcdFx0aSA9IHRoaXMuX3RhcmdldHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0aWYgKHRhcmdldCA9PT0gdGhpcy5fdGFyZ2V0c1tpXSkge1xuXHRcdFx0XHRcdFx0XHRwcm9wTG9va3VwID0gdGhpcy5fcHJvcExvb2t1cFtpXSB8fCB7fTtcblx0XHRcdFx0XHRcdFx0dGhpcy5fb3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX292ZXJ3cml0dGVuUHJvcHMgfHwgW107XG5cdFx0XHRcdFx0XHRcdG92ZXJ3cml0dGVuUHJvcHMgPSB0aGlzLl9vdmVyd3JpdHRlblByb3BzW2ldID0gdmFycyA/IHRoaXMuX292ZXJ3cml0dGVuUHJvcHNbaV0gfHwge30gOiBcImFsbFwiO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAodGFyZ2V0ICE9PSB0aGlzLnRhcmdldCkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwcm9wTG9va3VwID0gdGhpcy5fcHJvcExvb2t1cDtcblx0XHRcdFx0XHRvdmVyd3JpdHRlblByb3BzID0gdGhpcy5fb3ZlcndyaXR0ZW5Qcm9wcyA9IHZhcnMgPyB0aGlzLl9vdmVyd3JpdHRlblByb3BzIHx8IHt9IDogXCJhbGxcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChwcm9wTG9va3VwKSB7XG5cdFx0XHRcdFx0a2lsbFByb3BzID0gdmFycyB8fCBwcm9wTG9va3VwO1xuXHRcdFx0XHRcdHJlY29yZCA9ICh2YXJzICE9PSBvdmVyd3JpdHRlblByb3BzICYmIG92ZXJ3cml0dGVuUHJvcHMgIT09IFwiYWxsXCIgJiYgdmFycyAhPT0gcHJvcExvb2t1cCAmJiAodHlwZW9mKHZhcnMpICE9PSBcIm9iamVjdFwiIHx8ICF2YXJzLl90ZW1wS2lsbCkpOyAvL190ZW1wS2lsbCBpcyBhIHN1cGVyLXNlY3JldCB3YXkgdG8gZGVsZXRlIGEgcGFydGljdWxhciB0d2VlbmluZyBwcm9wZXJ0eSBidXQgTk9UIGhhdmUgaXQgcmVtZW1iZXJlZCBhcyBhbiBvZmZpY2lhbCBvdmVyd3JpdHRlbiBwcm9wZXJ0eSAobGlrZSBpbiBCZXppZXJQbHVnaW4pXG5cdFx0XHRcdFx0aWYgKG92ZXJ3cml0aW5nVHdlZW4gJiYgKFR3ZWVuTGl0ZS5vbk92ZXJ3cml0ZSB8fCB0aGlzLnZhcnMub25PdmVyd3JpdGUpKSB7XG5cdFx0XHRcdFx0XHRmb3IgKHAgaW4ga2lsbFByb3BzKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChwcm9wTG9va3VwW3BdKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFraWxsZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGtpbGxlZCA9IFtdO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRraWxsZWQucHVzaChwKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKChraWxsZWQgfHwgIXZhcnMpICYmICFfb25PdmVyd3JpdGUodGhpcywgb3ZlcndyaXRpbmdUd2VlbiwgdGFyZ2V0LCBraWxsZWQpKSB7IC8vaWYgdGhlIG9uT3ZlcndyaXRlIHJldHVybmVkIGZhbHNlLCB0aGF0IG1lYW5zIHRoZSB1c2VyIHdhbnRzIHRvIG92ZXJyaWRlIHRoZSBvdmVyd3JpdGluZyAoY2FuY2VsIGl0KS5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGZvciAocCBpbiBraWxsUHJvcHMpIHtcblx0XHRcdFx0XHRcdGlmICgocHQgPSBwcm9wTG9va3VwW3BdKSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoc2ltdWx0YW5lb3VzT3ZlcndyaXRlKSB7IC8vaWYgYW5vdGhlciB0d2VlbiBvdmVyd3JpdGVzIHRoaXMgb25lIGFuZCB0aGV5IGJvdGggc3RhcnQgYXQgZXhhY3RseSB0aGUgc2FtZSB0aW1lLCB5ZXQgdGhpcyB0d2VlbiBoYXMgYWxyZWFkeSByZW5kZXJlZCBvbmNlIChmb3IgZXhhbXBsZSwgYXQgMC4wMDEpIGJlY2F1c2UgaXQncyBmaXJzdCBpbiB0aGUgcXVldWUsIHdlIHNob3VsZCByZXZlcnQgdGhlIHZhbHVlcyB0byB3aGVyZSB0aGV5IHdlcmUgYXQgMCBzbyB0aGF0IHRoZSBzdGFydGluZyB2YWx1ZXMgYXJlbid0IGNvbnRhbWluYXRlZCBvbiB0aGUgb3ZlcndyaXRpbmcgdHdlZW4uXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHB0LmYpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHB0LnRbcHQucF0ocHQucyk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSBwdC5zO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAocHQucGcgJiYgcHQudC5fa2lsbChraWxsUHJvcHMpKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7IC8vc29tZSBwbHVnaW5zIG5lZWQgdG8gYmUgbm90aWZpZWQgc28gdGhleSBjYW4gcGVyZm9ybSBjbGVhbnVwIHRhc2tzIGZpcnN0XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKCFwdC5wZyB8fCBwdC50Ll9vdmVyd3JpdGVQcm9wcy5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAocHQuX3ByZXYpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHB0Ll9wcmV2Ll9uZXh0ID0gcHQuX25leHQ7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChwdCA9PT0gdGhpcy5fZmlyc3RQVCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5fZmlyc3RQVCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRpZiAocHQuX25leHQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHB0Ll9uZXh0Ll9wcmV2ID0gcHQuX3ByZXY7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHB0Ll9uZXh0ID0gcHQuX3ByZXYgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSBwcm9wTG9va3VwW3BdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHJlY29yZCkge1xuXHRcdFx0XHRcdFx0XHRvdmVyd3JpdHRlblByb3BzW3BdID0gMTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCF0aGlzLl9maXJzdFBUICYmIHRoaXMuX2luaXR0ZWQgJiYgZmlyc3RQVCkgeyAvL2lmIGFsbCB0d2VlbmluZyBwcm9wZXJ0aWVzIGFyZSBraWxsZWQsIGtpbGwgdGhlIHR3ZWVuLiBXaXRob3V0IHRoaXMgbGluZSwgaWYgdGhlcmUncyBhIHR3ZWVuIHdpdGggbXVsdGlwbGUgdGFyZ2V0cyBhbmQgdGhlbiB5b3Uga2lsbFR3ZWVuc09mKCkgZWFjaCB0YXJnZXQgaW5kaXZpZHVhbGx5LCB0aGUgdHdlZW4gd291bGQgdGVjaG5pY2FsbHkgc3RpbGwgcmVtYWluIGFjdGl2ZSBhbmQgZmlyZSBpdHMgb25Db21wbGV0ZSBldmVuIHRob3VnaCB0aGVyZSBhcmVuJ3QgYW55IG1vcmUgcHJvcGVydGllcyB0d2VlbmluZy5cblx0XHRcdFx0XHRcdHRoaXMuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBjaGFuZ2VkO1xuXHRcdH07XG5cblx0XHRwLmludmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICh0aGlzLl9ub3RpZnlQbHVnaW5zT2ZFbmFibGVkKSB7XG5cdFx0XHRcdFR3ZWVuTGl0ZS5fb25QbHVnaW5FdmVudChcIl9vbkRpc2FibGVcIiwgdGhpcyk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgdCA9IHRoaXMuX3RpbWU7XG5cdFx0XHR0aGlzLl9maXJzdFBUID0gdGhpcy5fb3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX3N0YXJ0QXQgPSB0aGlzLl9vblVwZGF0ZSA9IG51bGw7XG5cdFx0XHR0aGlzLl9ub3RpZnlQbHVnaW5zT2ZFbmFibGVkID0gdGhpcy5fYWN0aXZlID0gdGhpcy5fbGF6eSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fcHJvcExvb2t1cCA9ICh0aGlzLl90YXJnZXRzKSA/IHt9IDogW107XG5cdFx0XHRBbmltYXRpb24ucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzKTtcblx0XHRcdGlmICh0aGlzLnZhcnMuaW1tZWRpYXRlUmVuZGVyKSB7XG5cdFx0XHRcdHRoaXMuX3RpbWUgPSAtX3RpbnlOdW07IC8vZm9yY2VzIGEgcmVuZGVyIHdpdGhvdXQgaGF2aW5nIHRvIHNldCB0aGUgcmVuZGVyKCkgXCJmb3JjZVwiIHBhcmFtZXRlciB0byB0cnVlIGJlY2F1c2Ugd2Ugd2FudCB0byBhbGxvdyBsYXp5aW5nIGJ5IGRlZmF1bHQgKHVzaW5nIHRoZSBcImZvcmNlXCIgcGFyYW1ldGVyIGFsd2F5cyBmb3JjZXMgYW4gaW1tZWRpYXRlIGZ1bGwgcmVuZGVyKVxuXHRcdFx0XHR0aGlzLnJlbmRlcih0LCBmYWxzZSwgdGhpcy52YXJzLmxhenkgIT09IGZhbHNlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLl9lbmFibGVkID0gZnVuY3Rpb24oZW5hYmxlZCwgaWdub3JlVGltZWxpbmUpIHtcblx0XHRcdGlmICghX3RpY2tlckFjdGl2ZSkge1xuXHRcdFx0XHRfdGlja2VyLndha2UoKTtcblx0XHRcdH1cblx0XHRcdGlmIChlbmFibGVkICYmIHRoaXMuX2djKSB7XG5cdFx0XHRcdHZhciB0YXJnZXRzID0gdGhpcy5fdGFyZ2V0cyxcblx0XHRcdFx0XHRpO1xuXHRcdFx0XHRpZiAodGFyZ2V0cykge1xuXHRcdFx0XHRcdGkgPSB0YXJnZXRzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdHRoaXMuX3NpYmxpbmdzW2ldID0gX3JlZ2lzdGVyKHRhcmdldHNbaV0sIHRoaXMsIHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl9zaWJsaW5ncyA9IF9yZWdpc3Rlcih0aGlzLnRhcmdldCwgdGhpcywgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdEFuaW1hdGlvbi5wcm90b3R5cGUuX2VuYWJsZWQuY2FsbCh0aGlzLCBlbmFibGVkLCBpZ25vcmVUaW1lbGluZSk7XG5cdFx0XHRpZiAodGhpcy5fbm90aWZ5UGx1Z2luc09mRW5hYmxlZCkgaWYgKHRoaXMuX2ZpcnN0UFQpIHtcblx0XHRcdFx0cmV0dXJuIFR3ZWVuTGl0ZS5fb25QbHVnaW5FdmVudCgoZW5hYmxlZCA/IFwiX29uRW5hYmxlXCIgOiBcIl9vbkRpc2FibGVcIiksIHRoaXMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblxuLy8tLS0tVHdlZW5MaXRlIHN0YXRpYyBtZXRob2RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHRUd2VlbkxpdGUudG8gPSBmdW5jdGlvbih0YXJnZXQsIGR1cmF0aW9uLCB2YXJzKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFR3ZWVuTGl0ZSh0YXJnZXQsIGR1cmF0aW9uLCB2YXJzKTtcblx0XHR9O1xuXG5cdFx0VHdlZW5MaXRlLmZyb20gPSBmdW5jdGlvbih0YXJnZXQsIGR1cmF0aW9uLCB2YXJzKSB7XG5cdFx0XHR2YXJzLnJ1bkJhY2t3YXJkcyA9IHRydWU7XG5cdFx0XHR2YXJzLmltbWVkaWF0ZVJlbmRlciA9ICh2YXJzLmltbWVkaWF0ZVJlbmRlciAhPSBmYWxzZSk7XG5cdFx0XHRyZXR1cm4gbmV3IFR3ZWVuTGl0ZSh0YXJnZXQsIGR1cmF0aW9uLCB2YXJzKTtcblx0XHR9O1xuXG5cdFx0VHdlZW5MaXRlLmZyb21UbyA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMpIHtcblx0XHRcdHRvVmFycy5zdGFydEF0ID0gZnJvbVZhcnM7XG5cdFx0XHR0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyID0gKHRvVmFycy5pbW1lZGlhdGVSZW5kZXIgIT0gZmFsc2UgJiYgZnJvbVZhcnMuaW1tZWRpYXRlUmVuZGVyICE9IGZhbHNlKTtcblx0XHRcdHJldHVybiBuZXcgVHdlZW5MaXRlKHRhcmdldCwgZHVyYXRpb24sIHRvVmFycyk7XG5cdFx0fTtcblxuXHRcdFR3ZWVuTGl0ZS5kZWxheWVkQ2FsbCA9IGZ1bmN0aW9uKGRlbGF5LCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSwgdXNlRnJhbWVzKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFR3ZWVuTGl0ZShjYWxsYmFjaywgMCwge2RlbGF5OmRlbGF5LCBvbkNvbXBsZXRlOmNhbGxiYWNrLCBvbkNvbXBsZXRlUGFyYW1zOnBhcmFtcywgY2FsbGJhY2tTY29wZTpzY29wZSwgb25SZXZlcnNlQ29tcGxldGU6Y2FsbGJhY2ssIG9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zOnBhcmFtcywgaW1tZWRpYXRlUmVuZGVyOmZhbHNlLCBsYXp5OmZhbHNlLCB1c2VGcmFtZXM6dXNlRnJhbWVzLCBvdmVyd3JpdGU6MH0pO1xuXHRcdH07XG5cblx0XHRUd2VlbkxpdGUuc2V0ID0gZnVuY3Rpb24odGFyZ2V0LCB2YXJzKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFR3ZWVuTGl0ZSh0YXJnZXQsIDAsIHZhcnMpO1xuXHRcdH07XG5cblx0XHRUd2VlbkxpdGUuZ2V0VHdlZW5zT2YgPSBmdW5jdGlvbih0YXJnZXQsIG9ubHlBY3RpdmUpIHtcblx0XHRcdGlmICh0YXJnZXQgPT0gbnVsbCkgeyByZXR1cm4gW107IH1cblx0XHRcdHRhcmdldCA9ICh0eXBlb2YodGFyZ2V0KSAhPT0gXCJzdHJpbmdcIikgPyB0YXJnZXQgOiBUd2VlbkxpdGUuc2VsZWN0b3IodGFyZ2V0KSB8fCB0YXJnZXQ7XG5cdFx0XHR2YXIgaSwgYSwgaiwgdDtcblx0XHRcdGlmICgoX2lzQXJyYXkodGFyZ2V0KSB8fCBfaXNTZWxlY3Rvcih0YXJnZXQpKSAmJiB0eXBlb2YodGFyZ2V0WzBdKSAhPT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHRpID0gdGFyZ2V0Lmxlbmd0aDtcblx0XHRcdFx0YSA9IFtdO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRhID0gYS5jb25jYXQoVHdlZW5MaXRlLmdldFR3ZWVuc09mKHRhcmdldFtpXSwgb25seUFjdGl2ZSkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGkgPSBhLmxlbmd0aDtcblx0XHRcdFx0Ly9ub3cgZ2V0IHJpZCBvZiBhbnkgZHVwbGljYXRlcyAodHdlZW5zIG9mIGFycmF5cyBvZiBvYmplY3RzIGNvdWxkIGNhdXNlIGR1cGxpY2F0ZXMpXG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdHQgPSBhW2ldO1xuXHRcdFx0XHRcdGogPSBpO1xuXHRcdFx0XHRcdHdoaWxlICgtLWogPiAtMSkge1xuXHRcdFx0XHRcdFx0aWYgKHQgPT09IGFbal0pIHtcblx0XHRcdFx0XHRcdFx0YS5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHRhcmdldC5fZ3NUd2VlbklEKSB7XG5cdFx0XHRcdGEgPSBfcmVnaXN0ZXIodGFyZ2V0KS5jb25jYXQoKTtcblx0XHRcdFx0aSA9IGEubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRpZiAoYVtpXS5fZ2MgfHwgKG9ubHlBY3RpdmUgJiYgIWFbaV0uaXNBY3RpdmUoKSkpIHtcblx0XHRcdFx0XHRcdGEuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGEgfHwgW107XG5cdFx0fTtcblxuXHRcdFR3ZWVuTGl0ZS5raWxsVHdlZW5zT2YgPSBUd2VlbkxpdGUua2lsbERlbGF5ZWRDYWxsc1RvID0gZnVuY3Rpb24odGFyZ2V0LCBvbmx5QWN0aXZlLCB2YXJzKSB7XG5cdFx0XHRpZiAodHlwZW9mKG9ubHlBY3RpdmUpID09PSBcIm9iamVjdFwiKSB7XG5cdFx0XHRcdHZhcnMgPSBvbmx5QWN0aXZlOyAvL2ZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSAoYmVmb3JlIFwib25seUFjdGl2ZVwiIHBhcmFtZXRlciB3YXMgaW5zZXJ0ZWQpXG5cdFx0XHRcdG9ubHlBY3RpdmUgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBhID0gVHdlZW5MaXRlLmdldFR3ZWVuc09mKHRhcmdldCwgb25seUFjdGl2ZSksXG5cdFx0XHRcdGkgPSBhLmxlbmd0aDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRhW2ldLl9raWxsKHZhcnMsIHRhcmdldCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUd2VlblBsdWdpbiAgIChjb3VsZCBlYXNpbHkgYmUgc3BsaXQgb3V0IGFzIGEgc2VwYXJhdGUgZmlsZS9jbGFzcywgYnV0IGluY2x1ZGVkIGZvciBlYXNlIG9mIHVzZSAoc28gdGhhdCBwZW9wbGUgZG9uJ3QgbmVlZCB0byBpbmNsdWRlIGFub3RoZXIgc2NyaXB0IGNhbGwgYmVmb3JlIGxvYWRpbmcgcGx1Z2lucyB3aGljaCBpcyBlYXN5IHRvIGZvcmdldClcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRcdHZhciBUd2VlblBsdWdpbiA9IF9jbGFzcyhcInBsdWdpbnMuVHdlZW5QbHVnaW5cIiwgZnVuY3Rpb24ocHJvcHMsIHByaW9yaXR5KSB7XG5cdFx0XHRcdFx0dGhpcy5fb3ZlcndyaXRlUHJvcHMgPSAocHJvcHMgfHwgXCJcIikuc3BsaXQoXCIsXCIpO1xuXHRcdFx0XHRcdHRoaXMuX3Byb3BOYW1lID0gdGhpcy5fb3ZlcndyaXRlUHJvcHNbMF07XG5cdFx0XHRcdFx0dGhpcy5fcHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdFx0XHRcdHRoaXMuX3N1cGVyID0gVHdlZW5QbHVnaW4ucHJvdG90eXBlO1xuXHRcdFx0XHR9LCB0cnVlKTtcblxuXHRcdHAgPSBUd2VlblBsdWdpbi5wcm90b3R5cGU7XG5cdFx0VHdlZW5QbHVnaW4udmVyc2lvbiA9IFwiMS4xOS4wXCI7XG5cdFx0VHdlZW5QbHVnaW4uQVBJID0gMjtcblx0XHRwLl9maXJzdFBUID0gbnVsbDtcblx0XHRwLl9hZGRUd2VlbiA9IF9hZGRQcm9wVHdlZW47XG5cdFx0cC5zZXRSYXRpbyA9IF9zZXRSYXRpbztcblxuXHRcdHAuX2tpbGwgPSBmdW5jdGlvbihsb29rdXApIHtcblx0XHRcdHZhciBhID0gdGhpcy5fb3ZlcndyaXRlUHJvcHMsXG5cdFx0XHRcdHB0ID0gdGhpcy5fZmlyc3RQVCxcblx0XHRcdFx0aTtcblx0XHRcdGlmIChsb29rdXBbdGhpcy5fcHJvcE5hbWVdICE9IG51bGwpIHtcblx0XHRcdFx0dGhpcy5fb3ZlcndyaXRlUHJvcHMgPSBbXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGkgPSBhLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0aWYgKGxvb2t1cFthW2ldXSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0XHRhLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHRpZiAobG9va3VwW3B0Lm5dICE9IG51bGwpIHtcblx0XHRcdFx0XHRpZiAocHQuX25leHQpIHtcblx0XHRcdFx0XHRcdHB0Ll9uZXh0Ll9wcmV2ID0gcHQuX3ByZXY7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwdC5fcHJldikge1xuXHRcdFx0XHRcdFx0cHQuX3ByZXYuX25leHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0XHRcdHB0Ll9wcmV2ID0gbnVsbDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuX2ZpcnN0UFQgPT09IHB0KSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9maXJzdFBUID0gcHQuX25leHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHRcdHAuX21vZCA9IHAuX3JvdW5kUHJvcHMgPSBmdW5jdGlvbihsb29rdXApIHtcblx0XHRcdHZhciBwdCA9IHRoaXMuX2ZpcnN0UFQsXG5cdFx0XHRcdHZhbDtcblx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHR2YWwgPSBsb29rdXBbdGhpcy5fcHJvcE5hbWVdIHx8IChwdC5uICE9IG51bGwgJiYgbG9va3VwWyBwdC5uLnNwbGl0KHRoaXMuX3Byb3BOYW1lICsgXCJfXCIpLmpvaW4oXCJcIikgXSk7XG5cdFx0XHRcdGlmICh2YWwgJiYgdHlwZW9mKHZhbCkgPT09IFwiZnVuY3Rpb25cIikgeyAvL3NvbWUgcHJvcGVydGllcyB0aGF0IGFyZSB2ZXJ5IHBsdWdpbi1zcGVjaWZpYyBhZGQgYSBwcmVmaXggbmFtZWQgYWZ0ZXIgdGhlIF9wcm9wTmFtZSBwbHVzIGFuIHVuZGVyc2NvcmUsIHNvIHdlIG5lZWQgdG8gaWdub3JlIHRoYXQgZXh0cmEgc3R1ZmYgaGVyZS5cblx0XHRcdFx0XHRpZiAocHQuZiA9PT0gMikge1xuXHRcdFx0XHRcdFx0cHQudC5fYXBwbHlQVC5tID0gdmFsO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRwdC5tID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRUd2VlbkxpdGUuX29uUGx1Z2luRXZlbnQgPSBmdW5jdGlvbih0eXBlLCB0d2Vlbikge1xuXHRcdFx0dmFyIHB0ID0gdHdlZW4uX2ZpcnN0UFQsXG5cdFx0XHRcdGNoYW5nZWQsIHB0MiwgZmlyc3QsIGxhc3QsIG5leHQ7XG5cdFx0XHRpZiAodHlwZSA9PT0gXCJfb25Jbml0QWxsUHJvcHNcIikge1xuXHRcdFx0XHQvL3NvcnRzIHRoZSBQcm9wVHdlZW4gbGlua2VkIGxpc3QgaW4gb3JkZXIgb2YgcHJpb3JpdHkgYmVjYXVzZSBzb21lIHBsdWdpbnMgbmVlZCB0byByZW5kZXIgZWFybGllci9sYXRlciB0aGFuIG90aGVycywgbGlrZSBNb3Rpb25CbHVyUGx1Z2luIGFwcGxpZXMgaXRzIGVmZmVjdHMgYWZ0ZXIgYWxsIHgveS9hbHBoYSB0d2VlbnMgaGF2ZSByZW5kZXJlZCBvbiBlYWNoIGZyYW1lLlxuXHRcdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0XHRuZXh0ID0gcHQuX25leHQ7XG5cdFx0XHRcdFx0cHQyID0gZmlyc3Q7XG5cdFx0XHRcdFx0d2hpbGUgKHB0MiAmJiBwdDIucHIgPiBwdC5wcikge1xuXHRcdFx0XHRcdFx0cHQyID0gcHQyLl9uZXh0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoKHB0Ll9wcmV2ID0gcHQyID8gcHQyLl9wcmV2IDogbGFzdCkpIHtcblx0XHRcdFx0XHRcdHB0Ll9wcmV2Ll9uZXh0ID0gcHQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGZpcnN0ID0gcHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICgocHQuX25leHQgPSBwdDIpKSB7XG5cdFx0XHRcdFx0XHRwdDIuX3ByZXYgPSBwdDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bGFzdCA9IHB0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdCA9IG5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0cHQgPSB0d2Vlbi5fZmlyc3RQVCA9IGZpcnN0O1xuXHRcdFx0fVxuXHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdGlmIChwdC5wZykgaWYgKHR5cGVvZihwdC50W3R5cGVdKSA9PT0gXCJmdW5jdGlvblwiKSBpZiAocHQudFt0eXBlXSgpKSB7XG5cdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0cHQgPSBwdC5fbmV4dDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjaGFuZ2VkO1xuXHRcdH07XG5cblx0XHRUd2VlblBsdWdpbi5hY3RpdmF0ZSA9IGZ1bmN0aW9uKHBsdWdpbnMpIHtcblx0XHRcdHZhciBpID0gcGx1Z2lucy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0aWYgKHBsdWdpbnNbaV0uQVBJID09PSBUd2VlblBsdWdpbi5BUEkpIHtcblx0XHRcdFx0XHRfcGx1Z2luc1sobmV3IHBsdWdpbnNbaV0oKSkuX3Byb3BOYW1lXSA9IHBsdWdpbnNbaV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH07XG5cblx0XHQvL3Byb3ZpZGVzIGEgbW9yZSBjb25jaXNlIHdheSB0byBkZWZpbmUgcGx1Z2lucyB0aGF0IGhhdmUgbm8gZGVwZW5kZW5jaWVzIGJlc2lkZXMgVHdlZW5QbHVnaW4gYW5kIFR3ZWVuTGl0ZSwgd3JhcHBpbmcgY29tbW9uIGJvaWxlcnBsYXRlIHN0dWZmIGludG8gb25lIGZ1bmN0aW9uIChhZGRlZCBpbiAxLjkuMCkuIFlvdSBkb24ndCBORUVEIHRvIHVzZSB0aGlzIHRvIGRlZmluZSBhIHBsdWdpbiAtIHRoZSBvbGQgd2F5IHN0aWxsIHdvcmtzIGFuZCBjYW4gYmUgdXNlZnVsIGluIGNlcnRhaW4gKHJhcmUpIHNpdHVhdGlvbnMuXG5cdFx0X2dzRGVmaW5lLnBsdWdpbiA9IGZ1bmN0aW9uKGNvbmZpZykge1xuXHRcdFx0aWYgKCFjb25maWcgfHwgIWNvbmZpZy5wcm9wTmFtZSB8fCAhY29uZmlnLmluaXQgfHwgIWNvbmZpZy5BUEkpIHsgdGhyb3cgXCJpbGxlZ2FsIHBsdWdpbiBkZWZpbml0aW9uLlwiOyB9XG5cdFx0XHR2YXIgcHJvcE5hbWUgPSBjb25maWcucHJvcE5hbWUsXG5cdFx0XHRcdHByaW9yaXR5ID0gY29uZmlnLnByaW9yaXR5IHx8IDAsXG5cdFx0XHRcdG92ZXJ3cml0ZVByb3BzID0gY29uZmlnLm92ZXJ3cml0ZVByb3BzLFxuXHRcdFx0XHRtYXAgPSB7aW5pdDpcIl9vbkluaXRUd2VlblwiLCBzZXQ6XCJzZXRSYXRpb1wiLCBraWxsOlwiX2tpbGxcIiwgcm91bmQ6XCJfbW9kXCIsIG1vZDpcIl9tb2RcIiwgaW5pdEFsbDpcIl9vbkluaXRBbGxQcm9wc1wifSxcblx0XHRcdFx0UGx1Z2luID0gX2NsYXNzKFwicGx1Z2lucy5cIiArIHByb3BOYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcE5hbWUuc3Vic3RyKDEpICsgXCJQbHVnaW5cIixcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFR3ZWVuUGx1Z2luLmNhbGwodGhpcywgcHJvcE5hbWUsIHByaW9yaXR5KTtcblx0XHRcdFx0XHRcdHRoaXMuX292ZXJ3cml0ZVByb3BzID0gb3ZlcndyaXRlUHJvcHMgfHwgW107XG5cdFx0XHRcdFx0fSwgKGNvbmZpZy5nbG9iYWwgPT09IHRydWUpKSxcblx0XHRcdFx0cCA9IFBsdWdpbi5wcm90b3R5cGUgPSBuZXcgVHdlZW5QbHVnaW4ocHJvcE5hbWUpLFxuXHRcdFx0XHRwcm9wO1xuXHRcdFx0cC5jb25zdHJ1Y3RvciA9IFBsdWdpbjtcblx0XHRcdFBsdWdpbi5BUEkgPSBjb25maWcuQVBJO1xuXHRcdFx0Zm9yIChwcm9wIGluIG1hcCkge1xuXHRcdFx0XHRpZiAodHlwZW9mKGNvbmZpZ1twcm9wXSkgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdHBbbWFwW3Byb3BdXSA9IGNvbmZpZ1twcm9wXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0UGx1Z2luLnZlcnNpb24gPSBjb25maWcudmVyc2lvbjtcblx0XHRcdFR3ZWVuUGx1Z2luLmFjdGl2YXRlKFtQbHVnaW5dKTtcblx0XHRcdHJldHVybiBQbHVnaW47XG5cdFx0fTtcblxuXG5cdFx0Ly9ub3cgcnVuIHRocm91Z2ggYWxsIHRoZSBkZXBlbmRlbmNpZXMgZGlzY292ZXJlZCBhbmQgaWYgYW55IGFyZSBtaXNzaW5nLCBsb2cgdGhhdCB0byB0aGUgY29uc29sZSBhcyBhIHdhcm5pbmcuIFRoaXMgaXMgd2h5IGl0J3MgYmVzdCB0byBoYXZlIFR3ZWVuTGl0ZSBsb2FkIGxhc3QgLSBpdCBjYW4gY2hlY2sgYWxsIHRoZSBkZXBlbmRlbmNpZXMgZm9yIHlvdS5cblx0XHRhID0gd2luZG93Ll9nc1F1ZXVlO1xuXHRcdGlmIChhKSB7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRhW2ldKCk7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHAgaW4gX2RlZkxvb2t1cCkge1xuXHRcdFx0XHRpZiAoIV9kZWZMb29rdXBbcF0uZnVuYykge1xuXHRcdFx0XHRcdHdpbmRvdy5jb25zb2xlLmxvZyhcIkdTQVAgZW5jb3VudGVyZWQgbWlzc2luZyBkZXBlbmRlbmN5OiBcIiArIHApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0X3RpY2tlckFjdGl2ZSA9IGZhbHNlOyAvL2Vuc3VyZXMgdGhhdCB0aGUgZmlyc3Qgb2ZmaWNpYWwgYW5pbWF0aW9uIGZvcmNlcyBhIHRpY2tlci50aWNrKCkgdG8gdXBkYXRlIHRoZSB0aW1lIHdoZW4gaXQgaXMgaW5zdGFudGlhdGVkXG5cblx0XHRyZXR1cm4gVHdlZW5MaXRlO1xuXG59KShfZ3NTY29wZSwgXCJUd2VlbkxpdGVcIik7XG5cbmV4cG9ydCB2YXIgZ2xvYmFscyA9IF9nc1Njb3BlLkdyZWVuU29ja0dsb2JhbHM7XG52YXIgbm9uR2xvYmFscyA9IGdsb2JhbHMuY29tLmdyZWVuc29jaztcbmV4cG9ydCB7IFR3ZWVuTGl0ZSBhcyBkZWZhdWx0IH07XG5leHBvcnQgdmFyIFNpbXBsZVRpbWVsaW5lID0gbm9uR2xvYmFscy5jb3JlLlNpbXBsZVRpbWVsaW5lO1xuZXhwb3J0IHZhciBBbmltYXRpb24gPSBub25HbG9iYWxzLmNvcmUuQW5pbWF0aW9uO1xuZXhwb3J0IHZhciBFYXNlID0gZ2xvYmFscy5FYXNlO1xuZXhwb3J0IHZhciBMaW5lYXIgPSBnbG9iYWxzLkxpbmVhcjtcbmV4cG9ydCB2YXIgUG93ZXIwID0gTGluZWFyO1xuZXhwb3J0IHZhciBQb3dlcjEgPSBnbG9iYWxzLlBvd2VyMTtcbmV4cG9ydCB2YXIgUG93ZXIyID0gZ2xvYmFscy5Qb3dlcjI7XG5leHBvcnQgdmFyIFBvd2VyMyA9IGdsb2JhbHMuUG93ZXIzO1xuZXhwb3J0IHZhciBQb3dlcjQgPSBnbG9iYWxzLlBvd2VyNDtcbmV4cG9ydCB2YXIgVHdlZW5QbHVnaW4gPSBnbG9iYWxzLlR3ZWVuUGx1Z2luO1xuZXhwb3J0IHZhciBFdmVudERpc3BhdGNoZXIgPSBub25HbG9iYWxzLmV2ZW50cy5FdmVudERpc3BhdGNoZXI7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi45JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG5hdmlnYXRvciA9IGdsb2JhbC5uYXZpZ2F0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSk7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTtcbn0gOiAkZXhwbTE7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiAvLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBhdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciB3cyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCkge1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xuICB2YXIgaSA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IgKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnJlcXVpcmUoJy4vX2V4cG9ydCcpKHtcbiAgdGFyZ2V0OiAnUmVnRXhwJyxcbiAgcHJvdG86IHRydWUsXG4gIGZvcmNlZDogcmVnZXhwRXhlYyAhPT0gLy4vLmV4ZWNcbn0sIHtcbiAgZXhlYzogcmVnZXhwRXhlY1xufSk7XG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgJFByb21pc2UgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKVxuICAgICAgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlXG4gICAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAgIC8vIHdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxuICAgICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBtYXkgdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgdGhyb3cgcmVzdWx0LnY7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHJldHVybiBwcm9taXNlLl9oICE9PSAxICYmIChwcm9taXNlLl9hIHx8IHByb21pc2UuX2MpLmxlbmd0aCA9PT0gMDtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgJGluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0laRSA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICB2YXIgZW50cnk7XG4gIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgIGlmIChlbnRyeS5rID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wKSBlbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBOQU1FLCBJU19NQVApIHtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGdldFdlYWsgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2VhaztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbnZhciAkaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG52YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAodGhhdCkge1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59O1xuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmICh+aW5kZXgpIHRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIScpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIFJlZmxlY3QgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ09QTi5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XG4gIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gIHZhciBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoTywga2V5KSkge1xuICAgICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCJyZXF1aXJlKFwiLi9saWIvbm9Db25mbGljdFwiKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9lczZcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL2FycmF5L2luY2x1ZGVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9hcnJheS9mbGF0LW1hcFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1zdGFydFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1lbmRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy90cmltLXN0YXJ0XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1lbmRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N5bWJvbC9hc3luYy1pdGVyYXRvclwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC92YWx1ZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC9lbnRyaWVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9wcm9taXNlL2ZpbmFsbHlcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3dlYlwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTsiLCJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNicnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5leHBtMScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguaW11bCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5sb2cyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC50YW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5iaWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS5ub3cnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJEdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicgJiYgISEkR09QUy5mO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAkR09QUy5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9ICRmYWlscyhmdW5jdGlvbiAoKSB7ICRHT1BTLmYoMSk7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIEZBSUxTX09OX1BSSU1JVElWRVMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuICRHT1BTLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG4iLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbiAoJGlzU2VhbGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpIH0pO1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7XG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSBaRVJPO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmID4gMCkge1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSB9KTtcbiIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xuIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykgfSk7XG4iLCIvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJykgfSk7XG4iLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAoYUxlbiA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG4iLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnO1xudmFyICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4yIFN0cmluZy5wcm90b3R5cGUuYW5jaG9yKG5hbWUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy44IFN0cmluZy5wcm90b3R5cGUuZm9udHNpemUoc2l6ZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRzaXplJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSksICdEYXRlJywge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTtcbiIsIi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi9fZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcbiIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKTtcbnZhciBwcm90byA9IERhdGUucHJvdG90eXBlO1xuXG5pZiAoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKSByZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcbiIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xudmFyIHRlc3QgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciAkbmF0aXZlID0gW10uaW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpO1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpO1xudmFyIEtFWSA9ICdmaW5kSW5kZXgnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkbWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc2FtZVZhbHVlID0gcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc2VhcmNoXG4gICAgZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkc2VhcmNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIHByZXZpb3VzTGFzdEluZGV4ID0gcngubGFzdEluZGV4O1xuICAgICAgaWYgKCFzYW1lVmFsdWUocHJldmlvdXNMYXN0SW5kZXgsIDApKSByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgaWYgKCFzYW1lVmFsdWUocngubGFzdEluZGV4LCBwcmV2aW91c0xhc3RJbmRleCkpIHJ4Lmxhc3RJbmRleCA9IHByZXZpb3VzTGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gbnVsbCA/IC0xIDogcmVzdWx0LmluZGV4O1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY2FsbFJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkbWluID0gTWF0aC5taW47XG52YXIgJHB1c2ggPSBbXS5wdXNoO1xudmFyICRTUExJVCA9ICdzcGxpdCc7XG52YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xudmFyIE1BWF9VSU5UMzIgPSAweGZmZmZmZmZmO1xuXG4vLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ3gnLCAneScpIC0+IC94L3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyIFNVUFBPUlRTX1kgPSAhZmFpbHMoZnVuY3Rpb24gKCkgeyBSZWdFeHAoTUFYX1VJTlQzMiwgJ3knKTsgfSk7XG5cbi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuICRzcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6ICRzcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9ICRzcGxpdDtcbiAgfVxuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3BsaXRcbiAgICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgc3BsaXR0ZXIgPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICAgIHJldHVybiBzcGxpdHRlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gc3BsaXR0ZXIuY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KVxuICAgICAgICA6IGludGVybmFsU3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzcGxpdFxuICAgIC8vXG4gICAgLy8gTk9URTogVGhpcyBjYW5ub3QgYmUgcHJvcGVybHkgcG9seWZpbGxlZCBpbiBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydFxuICAgIC8vIHRoZSAneScgZmxhZy5cbiAgICBmdW5jdGlvbiAocmVnZXhwLCBsaW1pdCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShpbnRlcm5hbFNwbGl0LCByZWdleHAsIHRoaXMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSAkc3BsaXQpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChTVVBQT1JUU19ZID8gJ3knIDogJ2cnKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFNVUFBPUlRTX1kgPyByeCA6ICdeKD86JyArIHJ4LnNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFNVUFBPUlRTX1kgPyBxIDogMDtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgU1VQUE9SVFNfWSA/IFMgOiBTLnNsaWNlKHEpKTtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB6ID09PSBudWxsIHx8XG4gICAgICAgICAgKGUgPSAkbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChTVVBQT1JUU19ZID8gMCA6IHEpKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQS5wdXNoKFMuc2xpY2UocCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgQS5wdXNoKHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEEucHVzaChTLnNsaWNlKHApKTtcbiAgICAgIHJldHVybiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNFVCA9ICdTZXQnO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIFNFVCksIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgSVNfSUUxMSA9ICFnbG9iYWwuQWN0aXZlWE9iamVjdCAmJiAnQWN0aXZlWE9iamVjdCcgaW4gZ2xvYmFsO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoTkFUSVZFX1dFQUtfTUFQICYmIElTX0lFMTEpIHtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciByQXBwbHkgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHk7XG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBrZXlzID0gdGhhdC5faztcbiAgdmFyIGtleTtcbiAgZG8ge1xuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuIiwiLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG8gPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKTtcblxuaWYgKHNldFByb3RvKSAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmluY2x1ZGVzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5mbGF0TWFwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXBcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiwgQTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdE1hcCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkU3RhcnQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkRW5kO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciBXRUJLSVRfQlVHID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogV0VCS0lUX0JVRywgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcudHJpbUxlZnQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy50cmltUmlnaHQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltUmlnaHQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XG4gIH07XG59LCAndHJpbUVuZCcpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuL19vd24ta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXREZXNjID0gZ09QRC5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXksIGRlc2M7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaSkge1xuICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QudmFsdWVzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmVudHJpZXM7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUHJvbWlzZVsnZmluYWxseSddO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJyk7XG4iLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24gKHNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGZhbHNlO1xuICAgIHJldHVybiBzZXQoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGZuLCB0aW1lKTtcbiAgfTtcbn07XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJmdW5jdGlvbiBwb2x5ZmlsbCh3aW5kb3cpIHtcbiAgdmFyIEVsZW1lbnRQcm90b3R5cGUgPSB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGU7XG5cbiAgaWYgKHR5cGVvZiBFbGVtZW50UHJvdG90eXBlLm1hdGNoZXMgIT09ICdmdW5jdGlvbicpIHtcbiAgICBFbGVtZW50UHJvdG90eXBlLm1hdGNoZXMgPSBFbGVtZW50UHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnRQcm90b3R5cGUubW96TWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnRQcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGZ1bmN0aW9uIG1hdGNoZXMoc2VsZWN0b3IpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcztcbiAgICAgIHZhciBlbGVtZW50cyA9IChlbGVtZW50LmRvY3VtZW50IHx8IGVsZW1lbnQub3duZXJEb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuXG4gICAgICB3aGlsZSAoZWxlbWVudHNbaW5kZXhdICYmIGVsZW1lbnRzW2luZGV4XSAhPT0gZWxlbWVudCkge1xuICAgICAgICArK2luZGV4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQm9vbGVhbihlbGVtZW50c1tpbmRleF0pO1xuICAgIH07XG4gIH1cblxuICBpZiAodHlwZW9mIEVsZW1lbnRQcm90b3R5cGUuY2xvc2VzdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIEVsZW1lbnRQcm90b3R5cGUuY2xvc2VzdCA9IGZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcztcblxuICAgICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICBpZiAoZWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBwb2x5ZmlsbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiIsIi8qIVxuICogVkVSU0lPTjogMi4xLjNcbiAqIERBVEU6IDIwMTktMDUtMTdcbiAqIFVQREFURVMgQU5EIERPQ1MgQVQ6IGh0dHA6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDA4LTIwMTksIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgd29yayBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIHNvZnR3YXJlIGFncmVlbWVudCB0aGF0IHdhcyBpc3N1ZWQgd2l0aCB5b3VyIG1lbWJlcnNoaXAuXG4gKiBcbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuICoqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cblxuaW1wb3J0IFR3ZWVuTGl0ZSwgeyBfZ3NTY29wZSwgZ2xvYmFscywgQW5pbWF0aW9uLCBTaW1wbGVUaW1lbGluZSwgRWFzZSwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciAgfSBmcm9tIFwiLi9Ud2VlbkxpdGUuanNcIjtcblxuXG5fZ3NTY29wZS5fZ3NEZWZpbmUoXCJUd2Vlbk1heFwiLCBbXCJjb3JlLkFuaW1hdGlvblwiLFwiY29yZS5TaW1wbGVUaW1lbGluZVwiLFwiVHdlZW5MaXRlXCJdLCBmdW5jdGlvbigpIHtcblxuXHRcdHZhciBfc2xpY2UgPSBmdW5jdGlvbihhKSB7IC8vZG9uJ3QgdXNlIFtdLnNsaWNlIGJlY2F1c2UgdGhhdCBkb2Vzbid0IHdvcmsgaW4gSUU4IHdpdGggYSBOb2RlTGlzdCB0aGF0J3MgcmV0dXJuZWQgYnkgcXVlcnlTZWxlY3RvckFsbCgpXG5cdFx0XHRcdHZhciBiID0gW10sXG5cdFx0XHRcdFx0bCA9IGEubGVuZ3RoLFxuXHRcdFx0XHRcdGk7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgIT09IGw7IGIucHVzaChhW2krK10pKTtcblx0XHRcdFx0cmV0dXJuIGI7XG5cdFx0XHR9LFxuXHRcdFx0X2FwcGx5Q3ljbGUgPSBmdW5jdGlvbih2YXJzLCB0YXJnZXRzLCBpKSB7XG5cdFx0XHRcdHZhciBhbHQgPSB2YXJzLmN5Y2xlLFxuXHRcdFx0XHRcdHAsIHZhbDtcblx0XHRcdFx0Zm9yIChwIGluIGFsdCkge1xuXHRcdFx0XHRcdHZhbCA9IGFsdFtwXTtcblx0XHRcdFx0XHR2YXJzW3BdID0gKHR5cGVvZih2YWwpID09PSBcImZ1bmN0aW9uXCIpID8gdmFsKGksIHRhcmdldHNbaV0sIHRhcmdldHMpIDogdmFsW2kgJSB2YWwubGVuZ3RoXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWxldGUgdmFycy5jeWNsZTtcblx0XHRcdH0sXG5cdFx0XHQvL2ZvciBkaXN0cmlidXRpbmcgdmFsdWVzIGFjcm9zcyBhbiBhcnJheS4gQ2FuIGFjY2VwdCBhIG51bWJlciwgYSBmdW5jdGlvbiBvciAobW9zdCBjb21tb25seSkgYSBmdW5jdGlvbiB3aGljaCBjYW4gY29udGFpbiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6IHtiYXNlLCBhbW91bnQsIGZyb20sIGVhc2UsIGdyaWQsIGF4aXMsIGxlbmd0aCwgZWFjaH0uIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGV4cGVjdHMgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOiBpbmRleCwgdGFyZ2V0LCBhcnJheS4gUmVjb2duaXplcyB0aGUgZm9sbG93aW5nXG5cdFx0XHRfZGlzdHJpYnV0ZSA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0aWYgKHR5cGVvZih2KSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHY7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIHZhcnMgPSAodHlwZW9mKHYpID09PSBcIm9iamVjdFwiKSA/IHYgOiB7ZWFjaDp2fSwgLy9uOjEgaXMganVzdCB0byBpbmRpY2F0ZSB2IHdhcyBhIG51bWJlcjsgd2UgbGV2ZXJhZ2UgdGhhdCBsYXRlciB0byBzZXQgdiBhY2NvcmRpbmcgdG8gdGhlIGxlbmd0aCB3ZSBnZXQuIElmIGEgbnVtYmVyIGlzIHBhc3NlZCBpbiwgd2UgdHJlYXQgaXQgbGlrZSB0aGUgb2xkIHN0YWdnZXIgdmFsdWUgd2hlcmUgMC4xLCBmb3IgZXhhbXBsZSwgd291bGQgbWVhbiB0aGF0IHRoaW5ncyB3b3VsZCBiZSBkaXN0cmlidXRlZCB3aXRoIDAuMSBiZXR3ZWVuIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkgcmF0aGVyIHRoYW4gYSB0b3RhbCBcImFtb3VudFwiIHRoYXQncyBjaHVua2VkIG91dCBhbW9uZyB0aGVtIGFsbC5cblx0XHRcdFx0XHRlYXNlID0gdmFycy5lYXNlLFxuXHRcdFx0XHRcdGZyb20gPSB2YXJzLmZyb20gfHwgMCxcblx0XHRcdFx0XHRiYXNlID0gdmFycy5iYXNlIHx8IDAsXG5cdFx0XHRcdFx0Y2FjaGUgPSB7fSxcblx0XHRcdFx0XHRpc0Zyb21LZXl3b3JkID0gaXNOYU4oZnJvbSksXG5cdFx0XHRcdFx0YXhpcyA9IHZhcnMuYXhpcyxcblx0XHRcdFx0XHRyYXRpbyA9IHtjZW50ZXI6MC41LCBlbmQ6MX1bZnJvbV0gfHwgMDtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGksIHRhcmdldCwgYSkge1xuXHRcdFx0XHRcdHZhciBsID0gKGEgfHwgdmFycykubGVuZ3RoLFxuXHRcdFx0XHRcdFx0ZGlzdGFuY2VzID0gY2FjaGVbbF0sXG5cdFx0XHRcdFx0XHRvcmlnaW5YLCBvcmlnaW5ZLCB4LCB5LCBkLCBqLCBtYXgsIG1pbiwgd3JhcDtcblx0XHRcdFx0XHRpZiAoIWRpc3RhbmNlcykge1xuXHRcdFx0XHRcdFx0d3JhcCA9ICh2YXJzLmdyaWQgPT09IFwiYXV0b1wiKSA/IDAgOiAodmFycy5ncmlkIHx8IFtJbmZpbml0eV0pWzBdO1xuXHRcdFx0XHRcdFx0aWYgKCF3cmFwKSB7XG5cdFx0XHRcdFx0XHRcdG1heCA9IC1JbmZpbml0eTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKG1heCA8IChtYXggPSBhW3dyYXArK10uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCkgJiYgd3JhcCA8IGwpIHsgfVxuXHRcdFx0XHRcdFx0XHR3cmFwLS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRkaXN0YW5jZXMgPSBjYWNoZVtsXSA9IFtdO1xuXHRcdFx0XHRcdFx0b3JpZ2luWCA9IGlzRnJvbUtleXdvcmQgPyAoTWF0aC5taW4od3JhcCwgbCkgKiByYXRpbykgLSAwLjUgOiBmcm9tICUgd3JhcDtcblx0XHRcdFx0XHRcdG9yaWdpblkgPSBpc0Zyb21LZXl3b3JkID8gbCAqIHJhdGlvIC8gd3JhcCAtIDAuNSA6IChmcm9tIC8gd3JhcCkgfCAwO1xuXHRcdFx0XHRcdFx0bWF4ID0gMDtcblx0XHRcdFx0XHRcdG1pbiA9IEluZmluaXR5O1xuXHRcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IGw7IGorKykge1xuXHRcdFx0XHRcdFx0XHR4ID0gKGogJSB3cmFwKSAtIG9yaWdpblg7XG5cdFx0XHRcdFx0XHRcdHkgPSBvcmlnaW5ZIC0gKChqIC8gd3JhcCkgfCAwKTtcblx0XHRcdFx0XHRcdFx0ZGlzdGFuY2VzW2pdID0gZCA9ICFheGlzID8gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpIDogTWF0aC5hYnMoKGF4aXMgPT09IFwieVwiKSA/IHkgOiB4KTtcblx0XHRcdFx0XHRcdFx0aWYgKGQgPiBtYXgpIHtcblx0XHRcdFx0XHRcdFx0XHRtYXggPSBkO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChkIDwgbWluKSB7XG5cdFx0XHRcdFx0XHRcdFx0bWluID0gZDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZGlzdGFuY2VzLm1heCA9IG1heCAtIG1pbjtcblx0XHRcdFx0XHRcdGRpc3RhbmNlcy5taW4gPSBtaW47XG5cdFx0XHRcdFx0XHRkaXN0YW5jZXMudiA9IGwgPSB2YXJzLmFtb3VudCB8fCAodmFycy5lYWNoICogKHdyYXAgPiBsID8gbCAtIDEgOiAhYXhpcyA/IE1hdGgubWF4KHdyYXAsIGwgLyB3cmFwKSA6IGF4aXMgPT09IFwieVwiID8gbCAvIHdyYXAgOiB3cmFwKSkgfHwgMDtcblx0XHRcdFx0XHRcdGRpc3RhbmNlcy5iID0gKGwgPCAwKSA/IGJhc2UgLSBsIDogYmFzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bCA9IChkaXN0YW5jZXNbaV0gLSBkaXN0YW5jZXMubWluKSAvIGRpc3RhbmNlcy5tYXg7XG5cdFx0XHRcdFx0cmV0dXJuIGRpc3RhbmNlcy5iICsgKGVhc2UgPyBlYXNlLmdldFJhdGlvKGwpIDogbCkgKiBkaXN0YW5jZXMudjtcblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cdFx0XHRUd2Vlbk1heCA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpIHtcblx0XHRcdFx0VHdlZW5MaXRlLmNhbGwodGhpcywgdGFyZ2V0LCBkdXJhdGlvbiwgdmFycyk7XG5cdFx0XHRcdHRoaXMuX2N5Y2xlID0gMDtcblx0XHRcdFx0dGhpcy5feW95byA9ICh0aGlzLnZhcnMueW95byA9PT0gdHJ1ZSB8fCAhIXRoaXMudmFycy55b3lvRWFzZSk7XG5cdFx0XHRcdHRoaXMuX3JlcGVhdCA9IHRoaXMudmFycy5yZXBlYXQgfHwgMDtcblx0XHRcdFx0dGhpcy5fcmVwZWF0RGVsYXkgPSB0aGlzLnZhcnMucmVwZWF0RGVsYXkgfHwgMDtcblx0XHRcdFx0aWYgKHRoaXMuX3JlcGVhdCkge1xuXHRcdFx0XHRcdHRoaXMuX3VuY2FjaGUodHJ1ZSk7IC8vZW5zdXJlcyB0aGF0IGlmIHRoZXJlIGlzIGFueSByZXBlYXQsIHRoZSB0b3RhbER1cmF0aW9uIHdpbGwgZ2V0IHJlY2FsY3VsYXRlZCB0byBhY2N1cmF0ZWx5IHJlcG9ydCBpdC5cblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnJlbmRlciA9IFR3ZWVuTWF4LnByb3RvdHlwZS5yZW5kZXI7IC8vc3BlZWQgb3B0aW1pemF0aW9uIChhdm9pZCBwcm90b3R5cGUgbG9va3VwIG9uIHRoaXMgXCJob3RcIiBtZXRob2QpXG5cdFx0XHR9LFxuXHRcdFx0X3RpbnlOdW0gPSAwLjAwMDAwMDAxLFxuXHRcdFx0VHdlZW5MaXRlSW50ZXJuYWxzID0gVHdlZW5MaXRlLl9pbnRlcm5hbHMsXG5cdFx0XHRfaXNTZWxlY3RvciA9IFR3ZWVuTGl0ZUludGVybmFscy5pc1NlbGVjdG9yLFxuXHRcdFx0X2lzQXJyYXkgPSBUd2VlbkxpdGVJbnRlcm5hbHMuaXNBcnJheSxcblx0XHRcdHAgPSBUd2Vlbk1heC5wcm90b3R5cGUgPSBUd2VlbkxpdGUudG8oe30sIDAuMSwge30pLFxuXHRcdFx0X2JsYW5rQXJyYXkgPSBbXTtcblxuXHRcdFR3ZWVuTWF4LnZlcnNpb24gPSBcIjIuMS4zXCI7XG5cdFx0cC5jb25zdHJ1Y3RvciA9IFR3ZWVuTWF4O1xuXHRcdHAua2lsbCgpLl9nYyA9IGZhbHNlO1xuXHRcdFR3ZWVuTWF4LmtpbGxUd2VlbnNPZiA9IFR3ZWVuTWF4LmtpbGxEZWxheWVkQ2FsbHNUbyA9IFR3ZWVuTGl0ZS5raWxsVHdlZW5zT2Y7XG5cdFx0VHdlZW5NYXguZ2V0VHdlZW5zT2YgPSBUd2VlbkxpdGUuZ2V0VHdlZW5zT2Y7XG5cdFx0VHdlZW5NYXgubGFnU21vb3RoaW5nID0gVHdlZW5MaXRlLmxhZ1Ntb290aGluZztcblx0XHRUd2Vlbk1heC50aWNrZXIgPSBUd2VlbkxpdGUudGlja2VyO1xuXHRcdFR3ZWVuTWF4LnJlbmRlciA9IFR3ZWVuTGl0ZS5yZW5kZXI7XG5cdFx0VHdlZW5NYXguZGlzdHJpYnV0ZSA9IF9kaXN0cmlidXRlO1xuXG5cdFx0cC5pbnZhbGlkYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLl95b3lvID0gKHRoaXMudmFycy55b3lvID09PSB0cnVlIHx8ICEhdGhpcy52YXJzLnlveW9FYXNlKTtcblx0XHRcdHRoaXMuX3JlcGVhdCA9IHRoaXMudmFycy5yZXBlYXQgfHwgMDtcblx0XHRcdHRoaXMuX3JlcGVhdERlbGF5ID0gdGhpcy52YXJzLnJlcGVhdERlbGF5IHx8IDA7XG5cdFx0XHR0aGlzLl95b3lvRWFzZSA9IG51bGw7XG5cdFx0XHR0aGlzLl91bmNhY2hlKHRydWUpO1xuXHRcdFx0cmV0dXJuIFR3ZWVuTGl0ZS5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMpO1xuXHRcdH07XG5cblx0XHRwLnVwZGF0ZVRvID0gZnVuY3Rpb24odmFycywgcmVzZXREdXJhdGlvbikge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdFx0XHRjdXJSYXRpbyA9IHNlbGYucmF0aW8sXG5cdFx0XHRcdGltbWVkaWF0ZSA9IHNlbGYudmFycy5pbW1lZGlhdGVSZW5kZXIgfHwgdmFycy5pbW1lZGlhdGVSZW5kZXIsXG5cdFx0XHRcdHA7XG5cdFx0XHRpZiAocmVzZXREdXJhdGlvbiAmJiBzZWxmLl9zdGFydFRpbWUgPCBzZWxmLl90aW1lbGluZS5fdGltZSkge1xuXHRcdFx0XHRzZWxmLl9zdGFydFRpbWUgPSBzZWxmLl90aW1lbGluZS5fdGltZTtcblx0XHRcdFx0c2VsZi5fdW5jYWNoZShmYWxzZSk7XG5cdFx0XHRcdGlmIChzZWxmLl9nYykge1xuXHRcdFx0XHRcdHNlbGYuX2VuYWJsZWQodHJ1ZSwgZmFsc2UpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNlbGYuX3RpbWVsaW5lLmluc2VydChzZWxmLCBzZWxmLl9zdGFydFRpbWUgLSBzZWxmLl9kZWxheSk7IC8vZW5zdXJlcyB0aGF0IGFueSBuZWNlc3NhcnkgcmUtc2VxdWVuY2luZyBvZiBBbmltYXRpb25zIGluIHRoZSB0aW1lbGluZSBvY2N1cnMgdG8gbWFrZSBzdXJlIHRoZSByZW5kZXJpbmcgb3JkZXIgaXMgY29ycmVjdC5cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Zm9yIChwIGluIHZhcnMpIHtcblx0XHRcdFx0c2VsZi52YXJzW3BdID0gdmFyc1twXTtcblx0XHRcdH1cblx0XHRcdGlmIChzZWxmLl9pbml0dGVkIHx8IGltbWVkaWF0ZSkge1xuXHRcdFx0XHRpZiAocmVzZXREdXJhdGlvbikge1xuXHRcdFx0XHRcdHNlbGYuX2luaXR0ZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRpZiAoaW1tZWRpYXRlKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbmRlcigwLCB0cnVlLCB0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKHNlbGYuX2djKSB7XG5cdFx0XHRcdFx0XHRzZWxmLl9lbmFibGVkKHRydWUsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHNlbGYuX25vdGlmeVBsdWdpbnNPZkVuYWJsZWQgJiYgc2VsZi5fZmlyc3RQVCkge1xuXHRcdFx0XHRcdFx0VHdlZW5MaXRlLl9vblBsdWdpbkV2ZW50KFwiX29uRGlzYWJsZVwiLCBzZWxmKTsgLy9pbiBjYXNlIGEgcGx1Z2luIGxpa2UgTW90aW9uQmx1ciBtdXN0IHBlcmZvcm0gc29tZSBjbGVhbnVwIHRhc2tzXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChzZWxmLl90aW1lIC8gc2VsZi5fZHVyYXRpb24gPiAwLjk5OCkgeyAvL2lmIHRoZSB0d2VlbiBoYXMgZmluaXNoZWQgKG9yIGNvbWUgZXh0cmVtZWx5IGNsb3NlIHRvIGZpbmlzaGluZyksIHdlIGp1c3QgbmVlZCB0byByZXdpbmQgaXQgdG8gMCBhbmQgdGhlbiByZW5kZXIgaXQgYWdhaW4gYXQgdGhlIGVuZCB3aGljaCBmb3JjZXMgaXQgdG8gcmUtaW5pdGlhbGl6ZSAocGFyc2luZyB0aGUgbmV3IHZhcnMpLiBXZSBhbGxvdyB0d2VlbnMgdGhhdCBhcmUgY2xvc2UgdG8gZmluaXNoaW5nIChidXQgaGF2ZW4ndCBxdWl0ZSBmaW5pc2hlZCkgdG8gd29yayB0aGlzIHdheSB0b28gYmVjYXVzZSBvdGhlcndpc2UsIHRoZSB2YWx1ZXMgYXJlIHNvIHNtYWxsIHdoZW4gZGV0ZXJtaW5pbmcgd2hlcmUgdG8gcHJvamVjdCB0aGUgc3RhcnRpbmcgdmFsdWVzIHRoYXQgYmluYXJ5IG1hdGggaXNzdWVzIGNyZWVwIGluIGFuZCBjYW4gbWFrZSB0aGUgdHdlZW4gYXBwZWFyIHRvIHJlbmRlciBpbmNvcnJlY3RseSB3aGVuIHJ1biBiYWNrd2FyZHMuXG5cdFx0XHRcdFx0XHR2YXIgcHJldlRpbWUgPSBzZWxmLl90b3RhbFRpbWU7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbmRlcigwLCB0cnVlLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRzZWxmLl9pbml0dGVkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbmRlcihwcmV2VGltZSwgdHJ1ZSwgZmFsc2UpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLl9pbml0dGVkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRzZWxmLl9pbml0KCk7XG5cdFx0XHRcdFx0XHRpZiAoc2VsZi5fdGltZSA+IDAgfHwgaW1tZWRpYXRlKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBpbnYgPSAxIC8gKDEgLSBjdXJSYXRpbyksXG5cdFx0XHRcdFx0XHRcdFx0cHQgPSBzZWxmLl9maXJzdFBULCBlbmRWYWx1ZTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdFx0XHRcdFx0ZW5kVmFsdWUgPSBwdC5zICsgcHQuYztcblx0XHRcdFx0XHRcdFx0XHRwdC5jICo9IGludjtcblx0XHRcdFx0XHRcdFx0XHRwdC5zID0gZW5kVmFsdWUgLSBwdC5jO1xuXHRcdFx0XHRcdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBzZWxmO1xuXHRcdH07XG5cblx0XHRwLnJlbmRlciA9IGZ1bmN0aW9uKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuXHRcdFx0aWYgKCF0aGlzLl9pbml0dGVkKSBpZiAodGhpcy5fZHVyYXRpb24gPT09IDAgJiYgdGhpcy52YXJzLnJlcGVhdCkgeyAvL3plcm8gZHVyYXRpb24gdHdlZW5zIHRoYXQgcmVuZGVyIGltbWVkaWF0ZWx5IGhhdmUgcmVuZGVyKCkgY2FsbGVkIGZyb20gVHdlZW5MaXRlJ3MgY29uc3RydWN0b3IsIGJlZm9yZSBUd2Vlbk1heCdzIGNvbnN0cnVjdG9yIGhhcyBmaW5pc2hlZCBzZXR0aW5nIF9yZXBlYXQsIF9yZXBlYXREZWxheSwgYW5kIF95b3lvIHdoaWNoIGFyZSBjcml0aWNhbCBpbiBkZXRlcm1pbmluZyB0b3RhbER1cmF0aW9uKCkgc28gd2UgbmVlZCB0byBjYWxsIGludmFsaWRhdGUoKSB3aGljaCBpcyBhIGxvdy1rYiB3YXkgdG8gZ2V0IHRob3NlIHNldCBwcm9wZXJseS5cblx0XHRcdFx0dGhpcy5pbnZhbGlkYXRlKCk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRcdHRvdGFsRHVyID0gKCFzZWxmLl9kaXJ0eSkgPyBzZWxmLl90b3RhbER1cmF0aW9uIDogc2VsZi50b3RhbER1cmF0aW9uKCksXG5cdFx0XHRcdHByZXZUaW1lID0gc2VsZi5fdGltZSxcblx0XHRcdFx0cHJldlRvdGFsVGltZSA9IHNlbGYuX3RvdGFsVGltZSxcblx0XHRcdFx0cHJldkN5Y2xlID0gc2VsZi5fY3ljbGUsXG5cdFx0XHRcdGR1cmF0aW9uID0gc2VsZi5fZHVyYXRpb24sXG5cdFx0XHRcdHByZXZSYXdQcmV2VGltZSA9IHNlbGYuX3Jhd1ByZXZUaW1lLFxuXHRcdFx0XHRpc0NvbXBsZXRlLCBjYWxsYmFjaywgcHQsIGN5Y2xlRHVyYXRpb24sIHIsIHR5cGUsIHBvdywgcmF3UHJldlRpbWUsIHlveW9FYXNlO1xuXHRcdFx0aWYgKHRpbWUgPj0gdG90YWxEdXIgLSBfdGlueU51bSAmJiB0aW1lID49IDApIHsgLy90byB3b3JrIGFyb3VuZCBvY2Nhc2lvbmFsIGZsb2F0aW5nIHBvaW50IG1hdGggYXJ0aWZhY3RzLlxuXHRcdFx0XHRzZWxmLl90b3RhbFRpbWUgPSB0b3RhbER1cjtcblx0XHRcdFx0c2VsZi5fY3ljbGUgPSBzZWxmLl9yZXBlYXQ7XG5cdFx0XHRcdGlmIChzZWxmLl95b3lvICYmIChzZWxmLl9jeWNsZSAmIDEpICE9PSAwKSB7XG5cdFx0XHRcdFx0c2VsZi5fdGltZSA9IDA7XG5cdFx0XHRcdFx0c2VsZi5yYXRpbyA9IHNlbGYuX2Vhc2UuX2NhbGNFbmQgPyBzZWxmLl9lYXNlLmdldFJhdGlvKDApIDogMDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLl90aW1lID0gZHVyYXRpb247XG5cdFx0XHRcdFx0c2VsZi5yYXRpbyA9IHNlbGYuX2Vhc2UuX2NhbGNFbmQgPyBzZWxmLl9lYXNlLmdldFJhdGlvKDEpIDogMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXNlbGYuX3JldmVyc2VkKSB7XG5cdFx0XHRcdFx0aXNDb21wbGV0ZSA9IHRydWU7XG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uQ29tcGxldGVcIjtcblx0XHRcdFx0XHRmb3JjZSA9IChmb3JjZSB8fCBzZWxmLl90aW1lbGluZS5hdXRvUmVtb3ZlQ2hpbGRyZW4pOyAvL290aGVyd2lzZSwgaWYgdGhlIGFuaW1hdGlvbiBpcyB1bnBhdXNlZC9hY3RpdmF0ZWQgYWZ0ZXIgaXQncyBhbHJlYWR5IGZpbmlzaGVkLCBpdCBkb2Vzbid0IGdldCByZW1vdmVkIGZyb20gdGhlIHBhcmVudCB0aW1lbGluZS5cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZHVyYXRpb24gPT09IDApIGlmIChzZWxmLl9pbml0dGVkIHx8ICFzZWxmLnZhcnMubGF6eSB8fCBmb3JjZSkgeyAvL3plcm8tZHVyYXRpb24gdHdlZW5zIGFyZSB0cmlja3kgYmVjYXVzZSB3ZSBtdXN0IGRpc2Nlcm4gdGhlIG1vbWVudHVtL2RpcmVjdGlvbiBvZiB0aW1lIGluIG9yZGVyIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBzdGFydGluZyB2YWx1ZXMgc2hvdWxkIGJlIHJlbmRlcmVkIG9yIHRoZSBlbmRpbmcgdmFsdWVzLiBJZiB0aGUgXCJwbGF5aGVhZFwiIG9mIGl0cyB0aW1lbGluZSBnb2VzIHBhc3QgdGhlIHplcm8tZHVyYXRpb24gdHdlZW4gaW4gdGhlIGZvcndhcmQgZGlyZWN0aW9uIG9yIGxhbmRzIGRpcmVjdGx5IG9uIGl0LCB0aGUgZW5kIHZhbHVlcyBzaG91bGQgYmUgcmVuZGVyZWQsIGJ1dCBpZiB0aGUgdGltZWxpbmUncyBcInBsYXloZWFkXCIgbW92ZXMgcGFzdCBpdCBpbiB0aGUgYmFja3dhcmQgZGlyZWN0aW9uIChmcm9tIGEgcG9zdGl0aXZlIHRpbWUgdG8gYSBuZWdhdGl2ZSB0aW1lKSwgdGhlIHN0YXJ0aW5nIHZhbHVlcyBtdXN0IGJlIHJlbmRlcmVkLlxuXHRcdFx0XHRcdGlmIChzZWxmLl9zdGFydFRpbWUgPT09IHNlbGYuX3RpbWVsaW5lLl9kdXJhdGlvbikgeyAvL2lmIGEgemVyby1kdXJhdGlvbiB0d2VlbiBpcyBhdCB0aGUgVkVSWSBlbmQgb2YgYSB0aW1lbGluZSBhbmQgdGhhdCB0aW1lbGluZSByZW5kZXJzIGF0IGl0cyBlbmQsIGl0IHdpbGwgdHlwaWNhbGx5IGFkZCBhIHRpbnkgYml0IG9mIGN1c2hpb24gdG8gdGhlIHJlbmRlciB0aW1lIHRvIHByZXZlbnQgcm91bmRpbmcgZXJyb3JzIGZyb20gZ2V0dGluZyBpbiB0aGUgd2F5IG9mIHR3ZWVucyByZW5kZXJpbmcgdGhlaXIgVkVSWSBlbmQuIElmIHdlIHRoZW4gcmV2ZXJzZSgpIHRoYXQgdGltZWxpbmUsIHRoZSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIHdpbGwgdHJpZ2dlciBpdHMgb25SZXZlcnNlQ29tcGxldGUgZXZlbiB0aG91Z2ggdGVjaG5pY2FsbHkgdGhlIHBsYXloZWFkIGRpZG4ndCBwYXNzIG92ZXIgaXQgYWdhaW4uIEl0J3MgYSB2ZXJ5IHNwZWNpZmljIGVkZ2UgY2FzZSB3ZSBtdXN0IGFjY29tbW9kYXRlLlxuXHRcdFx0XHRcdFx0dGltZSA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwcmV2UmF3UHJldlRpbWUgPCAwIHx8ICh0aW1lIDw9IDAgJiYgdGltZSA+PSAtX3RpbnlOdW0pIHx8IChwcmV2UmF3UHJldlRpbWUgPT09IF90aW55TnVtICYmIHNlbGYuZGF0YSAhPT0gXCJpc1BhdXNlXCIpKSBpZiAocHJldlJhd1ByZXZUaW1lICE9PSB0aW1lKSB7IC8vbm90ZTogd2hlbiB0aGlzLmRhdGEgaXMgXCJpc1BhdXNlXCIsIGl0J3MgYSBjYWxsYmFjayBhZGRlZCBieSBhZGRQYXVzZSgpIG9uIGEgdGltZWxpbmUgdGhhdCB3ZSBzaG91bGQgbm90IGJlIHRyaWdnZXJlZCB3aGVuIExFQVZJTkcgaXRzIGV4YWN0IHN0YXJ0IHRpbWUuIEluIG90aGVyIHdvcmRzLCB0bC5hZGRQYXVzZSgxKS5wbGF5KDEpIHNob3VsZG4ndCBwYXVzZS5cblx0XHRcdFx0XHRcdGZvcmNlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGlmIChwcmV2UmF3UHJldlRpbWUgPiBfdGlueU51bSkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IFwib25SZXZlcnNlQ29tcGxldGVcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c2VsZi5fcmF3UHJldlRpbWUgPSByYXdQcmV2VGltZSA9ICghc3VwcHJlc3NFdmVudHMgfHwgdGltZSB8fCBwcmV2UmF3UHJldlRpbWUgPT09IHRpbWUpID8gdGltZSA6IF90aW55TnVtOyAvL3doZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LiBXZSBzZXQgdGhlIF9yYXdQcmV2VGltZSB0byBiZSBhIHByZWNpc2UgdGlueSBudW1iZXIgdG8gaW5kaWNhdGUgdGhpcyBzY2VuYXJpbyByYXRoZXIgdGhhbiB1c2luZyBhbm90aGVyIHByb3BlcnR5L3ZhcmlhYmxlIHdoaWNoIHdvdWxkIGluY3JlYXNlIG1lbW9yeSB1c2FnZS4gVGhpcyB0ZWNobmlxdWUgaXMgbGVzcyByZWFkYWJsZSwgYnV0IG1vcmUgZWZmaWNpZW50LlxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAodGltZSA8IF90aW55TnVtKSB7IC8vdG8gd29yayBhcm91bmQgb2NjYXNpb25hbCBmbG9hdGluZyBwb2ludCBtYXRoIGFydGlmYWN0cywgcm91bmQgc3VwZXIgc21hbGwgdmFsdWVzIHRvIDAuXG5cdFx0XHRcdHNlbGYuX3RvdGFsVGltZSA9IHNlbGYuX3RpbWUgPSBzZWxmLl9jeWNsZSA9IDA7XG5cdFx0XHRcdHNlbGYucmF0aW8gPSBzZWxmLl9lYXNlLl9jYWxjRW5kID8gc2VsZi5fZWFzZS5nZXRSYXRpbygwKSA6IDA7XG5cdFx0XHRcdGlmIChwcmV2VG90YWxUaW1lICE9PSAwIHx8IChkdXJhdGlvbiA9PT0gMCAmJiBwcmV2UmF3UHJldlRpbWUgPiAwKSkge1xuXHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvblJldmVyc2VDb21wbGV0ZVwiO1xuXHRcdFx0XHRcdGlzQ29tcGxldGUgPSBzZWxmLl9yZXZlcnNlZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGltZSA+IC1fdGlueU51bSkge1xuXHRcdFx0XHRcdHRpbWUgPSAwO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRpbWUgPCAwKSB7XG5cdFx0XHRcdFx0c2VsZi5fYWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdFx0aWYgKGR1cmF0aW9uID09PSAwKSBpZiAoc2VsZi5faW5pdHRlZCB8fCAhc2VsZi52YXJzLmxhenkgfHwgZm9yY2UpIHsgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyBhcmUgdHJpY2t5IGJlY2F1c2Ugd2UgbXVzdCBkaXNjZXJuIHRoZSBtb21lbnR1bS9kaXJlY3Rpb24gb2YgdGltZSBpbiBvcmRlciB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgc3RhcnRpbmcgdmFsdWVzIHNob3VsZCBiZSByZW5kZXJlZCBvciB0aGUgZW5kaW5nIHZhbHVlcy4gSWYgdGhlIFwicGxheWhlYWRcIiBvZiBpdHMgdGltZWxpbmUgZ29lcyBwYXN0IHRoZSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIGluIHRoZSBmb3J3YXJkIGRpcmVjdGlvbiBvciBsYW5kcyBkaXJlY3RseSBvbiBpdCwgdGhlIGVuZCB2YWx1ZXMgc2hvdWxkIGJlIHJlbmRlcmVkLCBidXQgaWYgdGhlIHRpbWVsaW5lJ3MgXCJwbGF5aGVhZFwiIG1vdmVzIHBhc3QgaXQgaW4gdGhlIGJhY2t3YXJkIGRpcmVjdGlvbiAoZnJvbSBhIHBvc3RpdGl2ZSB0aW1lIHRvIGEgbmVnYXRpdmUgdGltZSksIHRoZSBzdGFydGluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZC5cblx0XHRcdFx0XHRcdGlmIChwcmV2UmF3UHJldlRpbWUgPj0gMCkge1xuXHRcdFx0XHRcdFx0XHRmb3JjZSA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzZWxmLl9yYXdQcmV2VGltZSA9IHJhd1ByZXZUaW1lID0gKCFzdXBwcmVzc0V2ZW50cyB8fCB0aW1lIHx8IHByZXZSYXdQcmV2VGltZSA9PT0gdGltZSkgPyB0aW1lIDogX3RpbnlOdW07IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuIFdlIHNldCB0aGUgX3Jhd1ByZXZUaW1lIHRvIGJlIGEgcHJlY2lzZSB0aW55IG51bWJlciB0byBpbmRpY2F0ZSB0aGlzIHNjZW5hcmlvIHJhdGhlciB0aGFuIHVzaW5nIGFub3RoZXIgcHJvcGVydHkvdmFyaWFibGUgd2hpY2ggd291bGQgaW5jcmVhc2UgbWVtb3J5IHVzYWdlLiBUaGlzIHRlY2huaXF1ZSBpcyBsZXNzIHJlYWRhYmxlLCBidXQgbW9yZSBlZmZpY2llbnQuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghc2VsZi5faW5pdHRlZCkgeyAvL2lmIHdlIHJlbmRlciB0aGUgdmVyeSBiZWdpbm5pbmcgKHRpbWUgPT0gMCkgb2YgYSBmcm9tVG8oKSwgd2UgbXVzdCBmb3JjZSB0aGUgcmVuZGVyIChub3JtYWwgdHdlZW5zIHdvdWxkbid0IG5lZWQgdG8gcmVuZGVyIGF0IGEgdGltZSBvZiAwIHdoZW4gdGhlIHByZXZUaW1lIHdhcyBhbHNvIDApLiBUaGlzIGlzIGFsc28gbWFuZGF0b3J5IHRvIG1ha2Ugc3VyZSBvdmVyd3JpdGluZyBraWNrcyBpbiBpbW1lZGlhdGVseS5cblx0XHRcdFx0XHRmb3JjZSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuX3RvdGFsVGltZSA9IHNlbGYuX3RpbWUgPSB0aW1lO1xuXHRcdFx0XHRpZiAoc2VsZi5fcmVwZWF0ICE9PSAwKSB7XG5cdFx0XHRcdFx0Y3ljbGVEdXJhdGlvbiA9IGR1cmF0aW9uICsgc2VsZi5fcmVwZWF0RGVsYXk7XG5cdFx0XHRcdFx0c2VsZi5fY3ljbGUgPSAoc2VsZi5fdG90YWxUaW1lIC8gY3ljbGVEdXJhdGlvbikgPj4gMDsgLy9vcmlnaW5hbGx5IF90b3RhbFRpbWUgJSBjeWNsZUR1cmF0aW9uIGJ1dCBmbG9hdGluZyBwb2ludCBlcnJvcnMgY2F1c2VkIHByb2JsZW1zLCBzbyBJIG5vcm1hbGl6ZWQgaXQuICg0ICUgMC44IHNob3VsZCBiZSAwIGJ1dCBzb21lIGJyb3dzZXJzIHJlcG9ydCBpdCBhcyAwLjc5OTk5OTk5ISlcblx0XHRcdFx0XHRpZiAoc2VsZi5fY3ljbGUgIT09IDApIGlmIChzZWxmLl9jeWNsZSA9PT0gc2VsZi5fdG90YWxUaW1lIC8gY3ljbGVEdXJhdGlvbiAmJiBwcmV2VG90YWxUaW1lIDw9IHRpbWUpIHtcblx0XHRcdFx0XHRcdHNlbGYuX2N5Y2xlLS07IC8vb3RoZXJ3aXNlIHdoZW4gcmVuZGVyZWQgZXhhY3RseSBhdCB0aGUgZW5kIHRpbWUsIGl0IHdpbGwgYWN0IGFzIHRob3VnaCBpdCBpcyByZXBlYXRpbmcgKGF0IHRoZSBiZWdpbm5pbmcpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNlbGYuX3RpbWUgPSBzZWxmLl90b3RhbFRpbWUgLSAoc2VsZi5fY3ljbGUgKiBjeWNsZUR1cmF0aW9uKTtcblx0XHRcdFx0XHRpZiAoc2VsZi5feW95bykgaWYgKChzZWxmLl9jeWNsZSAmIDEpICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRzZWxmLl90aW1lID0gZHVyYXRpb24gLSBzZWxmLl90aW1lO1xuXHRcdFx0XHRcdFx0eW95b0Vhc2UgPSBzZWxmLl95b3lvRWFzZSB8fCBzZWxmLnZhcnMueW95b0Vhc2U7IC8vbm90ZTogd2UgZG9uJ3Qgc2V0IHRoaXMuX3lveW9FYXNlIGluIF9pbml0KCkgbGlrZSB3ZSBkbyBvdGhlciBwcm9wZXJ0aWVzIGJlY2F1c2UgaXQncyBUd2Vlbk1heC1zcGVjaWZpYyBhbmQgZG9pbmcgaXQgaGVyZSBhbGxvd3MgdXMgdG8gb3B0aW1pemUgcGVyZm9ybWFuY2UgKG1vc3QgdHdlZW5zIGRvbid0IGhhdmUgYSB5b3lvRWFzZSkuIE5vdGUgdGhhdCB3ZSBhbHNvIG11c3Qgc2tpcCB0aGUgdGhpcy5yYXRpbyBjYWxjdWxhdGlvbiBmdXJ0aGVyIGRvd24gcmlnaHQgYWZ0ZXIgd2UgX2luaXQoKSBpbiB0aGlzIGZ1bmN0aW9uLCBiZWNhdXNlIHdlJ3JlIGRvaW5nIGl0IGhlcmUuXG5cdFx0XHRcdFx0XHRpZiAoeW95b0Vhc2UpIHtcblx0XHRcdFx0XHRcdFx0aWYgKCFzZWxmLl95b3lvRWFzZSkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICh5b3lvRWFzZSA9PT0gdHJ1ZSAmJiAhc2VsZi5faW5pdHRlZCkgeyAvL2lmIGl0J3Mgbm90IGluaXR0ZWQgYW5kIHlveW9FYXNlIGlzIHRydWUsIHRoaXMuX2Vhc2Ugd29uJ3QgaGF2ZSBiZWVuIHBvcHVsYXRlZCB5ZXQgc28gd2UgbXVzdCBkaXNjZXJuIGl0IGhlcmUuXG5cdFx0XHRcdFx0XHRcdFx0XHR5b3lvRWFzZSA9IHNlbGYudmFycy5lYXNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0c2VsZi5feW95b0Vhc2UgPSB5b3lvRWFzZSA9ICF5b3lvRWFzZSA/IFR3ZWVuTGl0ZS5kZWZhdWx0RWFzZSA6ICh5b3lvRWFzZSBpbnN0YW5jZW9mIEVhc2UpID8geW95b0Vhc2UgOiAodHlwZW9mKHlveW9FYXNlKSA9PT0gXCJmdW5jdGlvblwiKSA/IG5ldyBFYXNlKHlveW9FYXNlLCBzZWxmLnZhcnMuZWFzZVBhcmFtcykgOiBFYXNlLm1hcFt5b3lvRWFzZV0gfHwgVHdlZW5MaXRlLmRlZmF1bHRFYXNlO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzZWxmLl95b3lvRWFzZSA9IHlveW9FYXNlID0gKHlveW9FYXNlID09PSB0cnVlKSA/IHNlbGYuX2Vhc2UgOiAoeW95b0Vhc2UgaW5zdGFuY2VvZiBFYXNlKSA/IHlveW9FYXNlIDogRWFzZS5tYXBbeW95b0Vhc2VdO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRzZWxmLnJhdGlvID0geW95b0Vhc2UgPyAxIC0geW95b0Vhc2UuZ2V0UmF0aW8oKGR1cmF0aW9uIC0gc2VsZi5fdGltZSkgLyBkdXJhdGlvbikgOiAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoc2VsZi5fdGltZSA+IGR1cmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRzZWxmLl90aW1lID0gZHVyYXRpb247XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChzZWxmLl90aW1lIDwgMCkge1xuXHRcdFx0XHRcdFx0c2VsZi5fdGltZSA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChzZWxmLl9lYXNlVHlwZSAmJiAheW95b0Vhc2UpIHtcblx0XHRcdFx0XHRyID0gc2VsZi5fdGltZSAvIGR1cmF0aW9uO1xuXHRcdFx0XHRcdHR5cGUgPSBzZWxmLl9lYXNlVHlwZTtcblx0XHRcdFx0XHRwb3cgPSBzZWxmLl9lYXNlUG93ZXI7XG5cdFx0XHRcdFx0aWYgKHR5cGUgPT09IDEgfHwgKHR5cGUgPT09IDMgJiYgciA+PSAwLjUpKSB7XG5cdFx0XHRcdFx0XHRyID0gMSAtIHI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0eXBlID09PSAzKSB7XG5cdFx0XHRcdFx0XHRyICo9IDI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwb3cgPT09IDEpIHtcblx0XHRcdFx0XHRcdHIgKj0gcjtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHBvdyA9PT0gMikge1xuXHRcdFx0XHRcdFx0ciAqPSByICogcjtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHBvdyA9PT0gMykge1xuXHRcdFx0XHRcdFx0ciAqPSByICogciAqIHI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwb3cgPT09IDQpIHtcblx0XHRcdFx0XHRcdHIgKj0gciAqIHIgKiByICogcjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c2VsZi5yYXRpbyA9ICh0eXBlID09PSAxKSA/IDEgLSByIDogKHR5cGUgPT09IDIpID8gciA6IChzZWxmLl90aW1lIC8gZHVyYXRpb24gPCAwLjUpID8gciAvIDIgOiAxIC0gKHIgLyAyKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCF5b3lvRWFzZSkge1xuXHRcdFx0XHRcdHNlbGYucmF0aW8gPSBzZWxmLl9lYXNlLmdldFJhdGlvKHNlbGYuX3RpbWUgLyBkdXJhdGlvbik7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAocHJldlRpbWUgPT09IHNlbGYuX3RpbWUgJiYgIWZvcmNlICYmIHByZXZDeWNsZSA9PT0gc2VsZi5fY3ljbGUpIHtcblx0XHRcdFx0aWYgKHByZXZUb3RhbFRpbWUgIT09IHNlbGYuX3RvdGFsVGltZSkgaWYgKHNlbGYuX29uVXBkYXRlKSBpZiAoIXN1cHByZXNzRXZlbnRzKSB7IC8vc28gdGhhdCBvblVwZGF0ZSBmaXJlcyBldmVuIGR1cmluZyB0aGUgcmVwZWF0RGVsYXkgLSBhcyBsb25nIGFzIHRoZSB0b3RhbFRpbWUgY2hhbmdlZCwgd2Ugc2hvdWxkIHRyaWdnZXIgb25VcGRhdGUuXG5cdFx0XHRcdFx0c2VsZi5fY2FsbGJhY2soXCJvblVwZGF0ZVwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9IGVsc2UgaWYgKCFzZWxmLl9pbml0dGVkKSB7XG5cdFx0XHRcdHNlbGYuX2luaXQoKTtcblx0XHRcdFx0aWYgKCFzZWxmLl9pbml0dGVkIHx8IHNlbGYuX2djKSB7IC8vaW1tZWRpYXRlUmVuZGVyIHR3ZWVucyB0eXBpY2FsbHkgd29uJ3QgaW5pdGlhbGl6ZSB1bnRpbCB0aGUgcGxheWhlYWQgYWR2YW5jZXMgKF90aW1lIGlzIGdyZWF0ZXIgdGhhbiAwKSBpbiBvcmRlciB0byBlbnN1cmUgdGhhdCBvdmVyd3JpdGluZyBvY2N1cnMgcHJvcGVybHkuIEFsc28sIGlmIGFsbCBvZiB0aGUgdHdlZW5pbmcgcHJvcGVydGllcyBoYXZlIGJlZW4gb3ZlcndyaXR0ZW4gKHdoaWNoIHdvdWxkIGNhdXNlIF9nYyB0byBiZSB0cnVlLCBhcyBzZXQgaW4gX2luaXQoKSksIHdlIHNob3VsZG4ndCBjb250aW51ZSBvdGhlcndpc2UgYW4gb25TdGFydCBjYWxsYmFjayBjb3VsZCBiZSBjYWxsZWQgZm9yIGV4YW1wbGUuXG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCFmb3JjZSAmJiBzZWxmLl9maXJzdFBUICYmICgoc2VsZi52YXJzLmxhenkgIT09IGZhbHNlICYmIHNlbGYuX2R1cmF0aW9uKSB8fCAoc2VsZi52YXJzLmxhenkgJiYgIXNlbGYuX2R1cmF0aW9uKSkpIHsgLy93ZSBzdGljayBpdCBpbiB0aGUgcXVldWUgZm9yIHJlbmRlcmluZyBhdCB0aGUgdmVyeSBlbmQgb2YgdGhlIHRpY2sgLSB0aGlzIGlzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIGJlY2F1c2UgYnJvd3NlcnMgaW52YWxpZGF0ZSBzdHlsZXMgYW5kIGZvcmNlIGEgcmVjYWxjdWxhdGlvbiBpZiB5b3UgcmVhZCwgd3JpdGUsIGFuZCB0aGVuIHJlYWQgc3R5bGUgZGF0YSAoc28gaXQncyBiZXR0ZXIgdG8gcmVhZC9yZWFkL3JlYWQvd3JpdGUvd3JpdGUvd3JpdGUgdGhhbiByZWFkL3dyaXRlL3JlYWQvd3JpdGUvcmVhZC93cml0ZSkuIFRoZSBkb3duIHNpZGUsIG9mIGNvdXJzZSwgaXMgdGhhdCB1c3VhbGx5IHlvdSBXQU5UIHRoaW5ncyB0byByZW5kZXIgaW1tZWRpYXRlbHkgYmVjYXVzZSB5b3UgbWF5IGhhdmUgY29kZSBydW5uaW5nIHJpZ2h0IGFmdGVyIHRoYXQgd2hpY2ggZGVwZW5kcyBvbiB0aGUgY2hhbmdlLiBMaWtlIGltYWdpbmUgcnVubmluZyBUd2VlbkxpdGUuc2V0KC4uLikgYW5kIHRoZW4gaW1tZWRpYXRlbHkgYWZ0ZXIgdGhhdCwgY3JlYXRpbmcgYSBub3RoZXIgdHdlZW4gdGhhdCBhbmltYXRlcyB0aGUgc2FtZSBwcm9wZXJ0eSB0byBhbm90aGVyIHZhbHVlOyB0aGUgc3RhcnRpbmcgdmFsdWVzIG9mIHRoYXQgMm5kIHR3ZWVuIHdvdWxkbid0IGJlIGFjY3VyYXRlIGlmIGxhenkgaXMgdHJ1ZS5cblx0XHRcdFx0XHRzZWxmLl90aW1lID0gcHJldlRpbWU7XG5cdFx0XHRcdFx0c2VsZi5fdG90YWxUaW1lID0gcHJldlRvdGFsVGltZTtcblx0XHRcdFx0XHRzZWxmLl9yYXdQcmV2VGltZSA9IHByZXZSYXdQcmV2VGltZTtcblx0XHRcdFx0XHRzZWxmLl9jeWNsZSA9IHByZXZDeWNsZTtcblx0XHRcdFx0XHRUd2VlbkxpdGVJbnRlcm5hbHMubGF6eVR3ZWVucy5wdXNoKHNlbGYpO1xuXHRcdFx0XHRcdHNlbGYuX2xhenkgPSBbdGltZSwgc3VwcHJlc3NFdmVudHNdO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQvL19lYXNlIGlzIGluaXRpYWxseSBzZXQgdG8gZGVmYXVsdEVhc2UsIHNvIG5vdyB0aGF0IGluaXQoKSBoYXMgcnVuLCBfZWFzZSBpcyBzZXQgcHJvcGVybHkgYW5kIHdlIG5lZWQgdG8gcmVjYWxjdWxhdGUgdGhlIHJhdGlvLiBPdmVyYWxsIHRoaXMgaXMgZmFzdGVyIHRoYW4gdXNpbmcgY29uZGl0aW9uYWwgbG9naWMgZWFybGllciBpbiB0aGUgbWV0aG9kIHRvIGF2b2lkIGhhdmluZyB0byBzZXQgcmF0aW8gdHdpY2UgYmVjYXVzZSB3ZSBvbmx5IGluaXQoKSBvbmNlIGJ1dCByZW5kZXJUaW1lKCkgZ2V0cyBjYWxsZWQgVkVSWSBmcmVxdWVudGx5LlxuXHRcdFx0XHRpZiAoc2VsZi5fdGltZSAmJiAhaXNDb21wbGV0ZSAmJiAheW95b0Vhc2UpIHtcblx0XHRcdFx0XHRzZWxmLnJhdGlvID0gc2VsZi5fZWFzZS5nZXRSYXRpbyhzZWxmLl90aW1lIC8gZHVyYXRpb24pO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGlzQ29tcGxldGUgJiYgdGhpcy5fZWFzZS5fY2FsY0VuZCAmJiAheW95b0Vhc2UpIHtcblx0XHRcdFx0XHRzZWxmLnJhdGlvID0gc2VsZi5fZWFzZS5nZXRSYXRpbygoc2VsZi5fdGltZSA9PT0gMCkgPyAwIDogMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChzZWxmLl9sYXp5ICE9PSBmYWxzZSkge1xuXHRcdFx0XHRzZWxmLl9sYXp5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghc2VsZi5fYWN0aXZlKSBpZiAoIXNlbGYuX3BhdXNlZCAmJiBzZWxmLl90aW1lICE9PSBwcmV2VGltZSAmJiB0aW1lID49IDApIHtcblx0XHRcdFx0c2VsZi5fYWN0aXZlID0gdHJ1ZTsgLy9zbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgYSB0d2VlbiAoYXMgb3Bwb3NlZCB0byB0aGUgdGltZWxpbmUgcmVuZGVyaW5nIGl0KSwgdGhlIHRpbWVsaW5lIGlzIGZvcmNlZCB0byByZS1yZW5kZXIgYW5kIGFsaWduIGl0IHdpdGggdGhlIHByb3BlciB0aW1lL2ZyYW1lIG9uIHRoZSBuZXh0IHJlbmRlcmluZyBjeWNsZS4gTWF5YmUgdGhlIHR3ZWVuIGFscmVhZHkgZmluaXNoZWQgYnV0IHRoZSB1c2VyIG1hbnVhbGx5IHJlLXJlbmRlcnMgaXQgYXMgaGFsZndheSBkb25lLlxuXHRcdFx0fVxuXHRcdFx0aWYgKHByZXZUb3RhbFRpbWUgPT09IDApIHtcblx0XHRcdFx0aWYgKHNlbGYuX2luaXR0ZWQgPT09IDIgJiYgdGltZSA+IDApIHtcblx0XHRcdFx0XHRzZWxmLl9pbml0KCk7IC8vd2lsbCBqdXN0IGFwcGx5IG92ZXJ3cml0aW5nIHNpbmNlIF9pbml0dGVkIG9mICgyKSBtZWFucyBpdCB3YXMgYSBmcm9tKCkgdHdlZW4gdGhhdCBoYWQgaW1tZWRpYXRlUmVuZGVyOnRydWVcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoc2VsZi5fc3RhcnRBdCkge1xuXHRcdFx0XHRcdGlmICh0aW1lID49IDApIHtcblx0XHRcdFx0XHRcdHNlbGYuX3N0YXJ0QXQucmVuZGVyKHRpbWUsIHRydWUsIGZvcmNlKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCFjYWxsYmFjaykge1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIl9kdW1teUdTXCI7IC8vaWYgbm8gY2FsbGJhY2sgaXMgZGVmaW5lZCwgdXNlIGEgZHVtbXkgdmFsdWUganVzdCBzbyB0aGF0IHRoZSBjb25kaXRpb24gYXQgdGhlIGVuZCBldmFsdWF0ZXMgYXMgdHJ1ZSBiZWNhdXNlIF9zdGFydEF0IHNob3VsZCByZW5kZXIgQUZURVIgdGhlIG5vcm1hbCByZW5kZXIgbG9vcCB3aGVuIHRoZSB0aW1lIGlzIG5lZ2F0aXZlLiBXZSBjb3VsZCBoYW5kbGUgdGhpcyBpbiBhIG1vcmUgaW50dWl0aXZlIHdheSwgb2YgY291cnNlLCBidXQgdGhlIHJlbmRlciBsb29wIGlzIHRoZSBNT1NUIGltcG9ydGFudCB0aGluZyB0byBvcHRpbWl6ZSwgc28gdGhpcyB0ZWNobmlxdWUgYWxsb3dzIHVzIHRvIGF2b2lkIGFkZGluZyBleHRyYSBjb25kaXRpb25hbCBsb2dpYyBpbiBhIGhpZ2gtZnJlcXVlbmN5IGFyZWEuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChzZWxmLnZhcnMub25TdGFydCkgaWYgKHNlbGYuX3RvdGFsVGltZSAhPT0gMCB8fCBkdXJhdGlvbiA9PT0gMCkgaWYgKCFzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0XHRcdHNlbGYuX2NhbGxiYWNrKFwib25TdGFydFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRwdCA9IHNlbGYuX2ZpcnN0UFQ7XG5cdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0aWYgKHB0LmYpIHtcblx0XHRcdFx0XHRwdC50W3B0LnBdKHB0LmMgKiBzZWxmLnJhdGlvICsgcHQucyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LmMgKiBzZWxmLnJhdGlvICsgcHQucztcblx0XHRcdFx0fVxuXHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc2VsZi5fb25VcGRhdGUpIHtcblx0XHRcdFx0aWYgKHRpbWUgPCAwKSBpZiAoc2VsZi5fc3RhcnRBdCAmJiBzZWxmLl9zdGFydFRpbWUpIHsgLy9pZiB0aGUgdHdlZW4gaXMgcG9zaXRpb25lZCBhdCB0aGUgVkVSWSBiZWdpbm5pbmcgKF9zdGFydFRpbWUgMCkgb2YgaXRzIHBhcmVudCB0aW1lbGluZSwgaXQncyBpbGxlZ2FsIGZvciB0aGUgcGxheWhlYWQgdG8gZ28gYmFjayBmdXJ0aGVyLCBzbyB3ZSBzaG91bGQgbm90IHJlbmRlciB0aGUgcmVjb3JkZWQgc3RhcnRBdCB2YWx1ZXMuXG5cdFx0XHRcdFx0c2VsZi5fc3RhcnRBdC5yZW5kZXIodGltZSwgdHJ1ZSwgZm9yY2UpOyAvL25vdGU6IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSB0dWNrIHRoaXMgY29uZGl0aW9uYWwgbG9naWMgaW5zaWRlIGxlc3MgdHJhdmVsZWQgYXJlYXMgKG1vc3QgdHdlZW5zIGRvbid0IGhhdmUgYW4gb25VcGRhdGUpLiBXZSdkIGp1c3QgaGF2ZSBpdCBhdCB0aGUgZW5kIGJlZm9yZSB0aGUgb25Db21wbGV0ZSwgYnV0IHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHVwZGF0ZWQgYmVmb3JlIGFueSBvblVwZGF0ZSBpcyBjYWxsZWQsIHNvIHdlIEFMU08gcHV0IGl0IGhlcmUgYW5kIHRoZW4gaWYgaXQncyBub3QgY2FsbGVkLCB3ZSBkbyBzbyBsYXRlciBuZWFyIHRoZSBvbkNvbXBsZXRlLlxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghc3VwcHJlc3NFdmVudHMpIGlmIChzZWxmLl90b3RhbFRpbWUgIT09IHByZXZUb3RhbFRpbWUgfHwgY2FsbGJhY2spIHtcblx0XHRcdFx0XHRzZWxmLl9jYWxsYmFjayhcIm9uVXBkYXRlXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoc2VsZi5fY3ljbGUgIT09IHByZXZDeWNsZSkgaWYgKCFzdXBwcmVzc0V2ZW50cykgaWYgKCFzZWxmLl9nYykgaWYgKHNlbGYudmFycy5vblJlcGVhdCkge1xuXHRcdFx0XHRzZWxmLl9jYWxsYmFjayhcIm9uUmVwZWF0XCIpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGNhbGxiYWNrKSBpZiAoIXNlbGYuX2djIHx8IGZvcmNlKSB7IC8vY2hlY2sgZ2MgYmVjYXVzZSB0aGVyZSdzIGEgY2hhbmNlIHRoYXQga2lsbCgpIGNvdWxkIGJlIGNhbGxlZCBpbiBhbiBvblVwZGF0ZVxuXHRcdFx0XHRpZiAodGltZSA8IDAgJiYgc2VsZi5fc3RhcnRBdCAmJiAhc2VsZi5fb25VcGRhdGUgJiYgc2VsZi5fc3RhcnRUaW1lKSB7IC8vaWYgdGhlIHR3ZWVuIGlzIHBvc2l0aW9uZWQgYXQgdGhlIFZFUlkgYmVnaW5uaW5nIChfc3RhcnRUaW1lIDApIG9mIGl0cyBwYXJlbnQgdGltZWxpbmUsIGl0J3MgaWxsZWdhbCBmb3IgdGhlIHBsYXloZWFkIHRvIGdvIGJhY2sgZnVydGhlciwgc28gd2Ugc2hvdWxkIG5vdCByZW5kZXIgdGhlIHJlY29yZGVkIHN0YXJ0QXQgdmFsdWVzLlxuXHRcdFx0XHRcdHNlbGYuX3N0YXJ0QXQucmVuZGVyKHRpbWUsIHRydWUsIGZvcmNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaXNDb21wbGV0ZSkge1xuXHRcdFx0XHRcdGlmIChzZWxmLl90aW1lbGluZS5hdXRvUmVtb3ZlQ2hpbGRyZW4pIHtcblx0XHRcdFx0XHRcdHNlbGYuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c2VsZi5fYWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFzdXBwcmVzc0V2ZW50cyAmJiBzZWxmLnZhcnNbY2FsbGJhY2tdKSB7XG5cdFx0XHRcdFx0c2VsZi5fY2FsbGJhY2soY2FsbGJhY2spO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChkdXJhdGlvbiA9PT0gMCAmJiBzZWxmLl9yYXdQcmV2VGltZSA9PT0gX3RpbnlOdW0gJiYgcmF3UHJldlRpbWUgIT09IF90aW55TnVtKSB7IC8vdGhlIG9uQ29tcGxldGUgb3Igb25SZXZlcnNlQ29tcGxldGUgY291bGQgdHJpZ2dlciBtb3ZlbWVudCBvZiB0aGUgcGxheWhlYWQgYW5kIGZvciB6ZXJvLWR1cmF0aW9uIHR3ZWVucyAod2hpY2ggbXVzdCBkaXNjZXJuIGRpcmVjdGlvbikgdGhhdCBsYW5kIGRpcmVjdGx5IGJhY2sgb24gdGhlaXIgc3RhcnQgdGltZSwgd2UgZG9uJ3Qgd2FudCB0byBmaXJlIGFnYWluIG9uIHRoZSBuZXh0IHJlbmRlci4gVGhpbmsgb2Ygc2V2ZXJhbCBhZGRQYXVzZSgpJ3MgaW4gYSB0aW1lbGluZSB0aGF0IGZvcmNlcyB0aGUgcGxheWhlYWQgdG8gYSBjZXJ0YWluIHNwb3QsIGJ1dCB3aGF0IGlmIGl0J3MgYWxyZWFkeSBwYXVzZWQgYW5kIGFub3RoZXIgdHdlZW4gaXMgdHdlZW5pbmcgdGhlIFwidGltZVwiIG9mIHRoZSB0aW1lbGluZT8gRWFjaCB0aW1lIGl0IG1vdmVzIFtmb3J3YXJkXSBwYXN0IHRoYXQgc3BvdCwgaXQgd291bGQgbW92ZSBiYWNrLCBhbmQgc2luY2Ugc3VwcHJlc3NFdmVudHMgaXMgdHJ1ZSwgaXQnZCByZXNldCBfcmF3UHJldlRpbWUgdG8gX3RpbnlOdW0gc28gdGhhdCB3aGVuIGl0IGJlZ2lucyBhZ2FpbiwgdGhlIGNhbGxiYWNrIHdvdWxkIGZpcmUgKHNvIHVsdGltYXRlbHkgaXQgY291bGQgYm91bmNlIGJhY2sgYW5kIGZvcnRoIGR1cmluZyB0aGF0IHR3ZWVuKS4gQWdhaW4sIHRoaXMgaXMgYSB2ZXJ5IHVuY29tbW9uIHNjZW5hcmlvLCBidXQgcG9zc2libGUgbm9uZXRoZWxlc3MuXG5cdFx0XHRcdFx0c2VsZi5fcmF3UHJldlRpbWUgPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuLy8tLS0tIFNUQVRJQyBGVU5DVElPTlMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdFR3ZWVuTWF4LnRvID0gZnVuY3Rpb24odGFyZ2V0LCBkdXJhdGlvbiwgdmFycykge1xuXHRcdFx0cmV0dXJuIG5ldyBUd2Vlbk1heCh0YXJnZXQsIGR1cmF0aW9uLCB2YXJzKTtcblx0XHR9O1xuXG5cdFx0VHdlZW5NYXguZnJvbSA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpIHtcblx0XHRcdHZhcnMucnVuQmFja3dhcmRzID0gdHJ1ZTtcblx0XHRcdHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gKHZhcnMuaW1tZWRpYXRlUmVuZGVyICE9IGZhbHNlKTtcblx0XHRcdHJldHVybiBuZXcgVHdlZW5NYXgodGFyZ2V0LCBkdXJhdGlvbiwgdmFycyk7XG5cdFx0fTtcblxuXHRcdFR3ZWVuTWF4LmZyb21UbyA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMpIHtcblx0XHRcdHRvVmFycy5zdGFydEF0ID0gZnJvbVZhcnM7XG5cdFx0XHR0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyID0gKHRvVmFycy5pbW1lZGlhdGVSZW5kZXIgIT0gZmFsc2UgJiYgZnJvbVZhcnMuaW1tZWRpYXRlUmVuZGVyICE9IGZhbHNlKTtcblx0XHRcdHJldHVybiBuZXcgVHdlZW5NYXgodGFyZ2V0LCBkdXJhdGlvbiwgdG9WYXJzKTtcblx0XHR9O1xuXG5cdFx0VHdlZW5NYXguc3RhZ2dlclRvID0gVHdlZW5NYXguYWxsVG8gPSBmdW5jdGlvbih0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcywgb25Db21wbGV0ZUFsbFNjb3BlKSB7XG5cdFx0XHR2YXIgYSA9IFtdLFxuXHRcdFx0XHRzdGFnZ2VyRnVuYyA9IF9kaXN0cmlidXRlKHZhcnMuc3RhZ2dlciB8fCBzdGFnZ2VyKSxcblx0XHRcdFx0Y3ljbGUgPSB2YXJzLmN5Y2xlLFxuXHRcdFx0XHRmcm9tQ3ljbGUgPSAodmFycy5zdGFydEF0IHx8IF9ibGFua0FycmF5KS5jeWNsZSxcblx0XHRcdFx0bCwgY29weSwgaSwgcDtcblx0XHRcdGlmICghX2lzQXJyYXkodGFyZ2V0cykpIHtcblx0XHRcdFx0aWYgKHR5cGVvZih0YXJnZXRzKSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdHRhcmdldHMgPSBUd2VlbkxpdGUuc2VsZWN0b3IodGFyZ2V0cykgfHwgdGFyZ2V0cztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoX2lzU2VsZWN0b3IodGFyZ2V0cykpIHtcblx0XHRcdFx0XHR0YXJnZXRzID0gX3NsaWNlKHRhcmdldHMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0YXJnZXRzID0gdGFyZ2V0cyB8fCBbXTtcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aCAtIDE7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDw9IGw7IGkrKykge1xuXHRcdFx0XHRjb3B5ID0ge307XG5cdFx0XHRcdGZvciAocCBpbiB2YXJzKSB7XG5cdFx0XHRcdFx0Y29weVtwXSA9IHZhcnNbcF07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGN5Y2xlKSB7XG5cdFx0XHRcdFx0X2FwcGx5Q3ljbGUoY29weSwgdGFyZ2V0cywgaSk7XG5cdFx0XHRcdFx0aWYgKGNvcHkuZHVyYXRpb24gIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0ZHVyYXRpb24gPSBjb3B5LmR1cmF0aW9uO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIGNvcHkuZHVyYXRpb247XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChmcm9tQ3ljbGUpIHtcblx0XHRcdFx0XHRmcm9tQ3ljbGUgPSBjb3B5LnN0YXJ0QXQgPSB7fTtcblx0XHRcdFx0XHRmb3IgKHAgaW4gdmFycy5zdGFydEF0KSB7XG5cdFx0XHRcdFx0XHRmcm9tQ3ljbGVbcF0gPSB2YXJzLnN0YXJ0QXRbcF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdF9hcHBseUN5Y2xlKGNvcHkuc3RhcnRBdCwgdGFyZ2V0cywgaSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29weS5kZWxheSA9IHN0YWdnZXJGdW5jKGksIHRhcmdldHNbaV0sIHRhcmdldHMpICsgKGNvcHkuZGVsYXkgfHwgMCk7XG5cdFx0XHRcdGlmIChpID09PSBsICYmIG9uQ29tcGxldGVBbGwpIHtcblx0XHRcdFx0XHRjb3B5Lm9uQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICh2YXJzLm9uQ29tcGxldGUpIHtcblx0XHRcdFx0XHRcdFx0dmFycy5vbkNvbXBsZXRlLmFwcGx5KHZhcnMub25Db21wbGV0ZVNjb3BlIHx8IHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRvbkNvbXBsZXRlQWxsLmFwcGx5KG9uQ29tcGxldGVBbGxTY29wZSB8fCB2YXJzLmNhbGxiYWNrU2NvcGUgfHwgdGhpcywgb25Db21wbGV0ZUFsbFBhcmFtcyB8fCBfYmxhbmtBcnJheSk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRhW2ldID0gbmV3IFR3ZWVuTWF4KHRhcmdldHNbaV0sIGR1cmF0aW9uLCBjb3B5KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBhO1xuXHRcdH07XG5cblx0XHRUd2Vlbk1heC5zdGFnZ2VyRnJvbSA9IFR3ZWVuTWF4LmFsbEZyb20gPSBmdW5jdGlvbih0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcywgb25Db21wbGV0ZUFsbFNjb3BlKSB7XG5cdFx0XHR2YXJzLnJ1bkJhY2t3YXJkcyA9IHRydWU7XG5cdFx0XHR2YXJzLmltbWVkaWF0ZVJlbmRlciA9ICh2YXJzLmltbWVkaWF0ZVJlbmRlciAhPSBmYWxzZSk7XG5cdFx0XHRyZXR1cm4gVHdlZW5NYXguc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zLCBvbkNvbXBsZXRlQWxsU2NvcGUpO1xuXHRcdH07XG5cblx0XHRUd2Vlbk1heC5zdGFnZ2VyRnJvbVRvID0gVHdlZW5NYXguYWxsRnJvbVRvID0gZnVuY3Rpb24odGFyZ2V0cywgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMsIHN0YWdnZXIsIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMsIG9uQ29tcGxldGVBbGxTY29wZSkge1xuXHRcdFx0dG9WYXJzLnN0YXJ0QXQgPSBmcm9tVmFycztcblx0XHRcdHRvVmFycy5pbW1lZGlhdGVSZW5kZXIgPSAodG9WYXJzLmltbWVkaWF0ZVJlbmRlciAhPSBmYWxzZSAmJiBmcm9tVmFycy5pbW1lZGlhdGVSZW5kZXIgIT0gZmFsc2UpO1xuXHRcdFx0cmV0dXJuIFR3ZWVuTWF4LnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdG9WYXJzLCBzdGFnZ2VyLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zLCBvbkNvbXBsZXRlQWxsU2NvcGUpO1xuXHRcdH07XG5cblx0XHRUd2Vlbk1heC5kZWxheWVkQ2FsbCA9IGZ1bmN0aW9uKGRlbGF5LCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSwgdXNlRnJhbWVzKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFR3ZWVuTWF4KGNhbGxiYWNrLCAwLCB7ZGVsYXk6ZGVsYXksIG9uQ29tcGxldGU6Y2FsbGJhY2ssIG9uQ29tcGxldGVQYXJhbXM6cGFyYW1zLCBjYWxsYmFja1Njb3BlOnNjb3BlLCBvblJldmVyc2VDb21wbGV0ZTpjYWxsYmFjaywgb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6cGFyYW1zLCBpbW1lZGlhdGVSZW5kZXI6ZmFsc2UsIHVzZUZyYW1lczp1c2VGcmFtZXMsIG92ZXJ3cml0ZTowfSk7XG5cdFx0fTtcblxuXHRcdFR3ZWVuTWF4LnNldCA9IGZ1bmN0aW9uKHRhcmdldCwgdmFycykge1xuXHRcdFx0cmV0dXJuIG5ldyBUd2Vlbk1heCh0YXJnZXQsIDAsIHZhcnMpO1xuXHRcdH07XG5cblx0XHRUd2Vlbk1heC5pc1R3ZWVuaW5nID0gZnVuY3Rpb24odGFyZ2V0KSB7XG5cdFx0XHRyZXR1cm4gKFR3ZWVuTGl0ZS5nZXRUd2VlbnNPZih0YXJnZXQsIHRydWUpLmxlbmd0aCA+IDApO1xuXHRcdH07XG5cblx0XHR2YXIgX2dldENoaWxkcmVuT2YgPSBmdW5jdGlvbih0aW1lbGluZSwgaW5jbHVkZVRpbWVsaW5lcykge1xuXHRcdFx0XHR2YXIgYSA9IFtdLFxuXHRcdFx0XHRcdGNudCA9IDAsXG5cdFx0XHRcdFx0dHdlZW4gPSB0aW1lbGluZS5fZmlyc3Q7XG5cdFx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRcdGlmICh0d2VlbiBpbnN0YW5jZW9mIFR3ZWVuTGl0ZSkge1xuXHRcdFx0XHRcdFx0YVtjbnQrK10gPSB0d2Vlbjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKGluY2x1ZGVUaW1lbGluZXMpIHtcblx0XHRcdFx0XHRcdFx0YVtjbnQrK10gPSB0d2Vlbjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGEgPSBhLmNvbmNhdChfZ2V0Q2hpbGRyZW5PZih0d2VlbiwgaW5jbHVkZVRpbWVsaW5lcykpO1xuXHRcdFx0XHRcdFx0Y250ID0gYS5sZW5ndGg7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGE7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0QWxsVHdlZW5zID0gVHdlZW5NYXguZ2V0QWxsVHdlZW5zID0gZnVuY3Rpb24oaW5jbHVkZVRpbWVsaW5lcykge1xuXHRcdFx0XHRyZXR1cm4gX2dldENoaWxkcmVuT2YoQW5pbWF0aW9uLl9yb290VGltZWxpbmUsIGluY2x1ZGVUaW1lbGluZXMpLmNvbmNhdCggX2dldENoaWxkcmVuT2YoQW5pbWF0aW9uLl9yb290RnJhbWVzVGltZWxpbmUsIGluY2x1ZGVUaW1lbGluZXMpICk7XG5cdFx0XHR9O1xuXG5cdFx0VHdlZW5NYXgua2lsbEFsbCA9IGZ1bmN0aW9uKGNvbXBsZXRlLCB0d2VlbnMsIGRlbGF5ZWRDYWxscywgdGltZWxpbmVzKSB7XG5cdFx0XHRpZiAodHdlZW5zID09IG51bGwpIHtcblx0XHRcdFx0dHdlZW5zID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGlmIChkZWxheWVkQ2FsbHMgPT0gbnVsbCkge1xuXHRcdFx0XHRkZWxheWVkQ2FsbHMgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGEgPSBnZXRBbGxUd2VlbnMoKHRpbWVsaW5lcyAhPSBmYWxzZSkpLFxuXHRcdFx0XHRsID0gYS5sZW5ndGgsXG5cdFx0XHRcdGFsbFRydWUgPSAodHdlZW5zICYmIGRlbGF5ZWRDYWxscyAmJiB0aW1lbGluZXMpLFxuXHRcdFx0XHRpc0RDLCB0d2VlbiwgaTtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0dHdlZW4gPSBhW2ldO1xuXHRcdFx0XHRpZiAoYWxsVHJ1ZSB8fCAodHdlZW4gaW5zdGFuY2VvZiBTaW1wbGVUaW1lbGluZSkgfHwgKChpc0RDID0gKHR3ZWVuLnRhcmdldCA9PT0gdHdlZW4udmFycy5vbkNvbXBsZXRlKSkgJiYgZGVsYXllZENhbGxzKSB8fCAodHdlZW5zICYmICFpc0RDKSkge1xuXHRcdFx0XHRcdGlmIChjb21wbGV0ZSkge1xuXHRcdFx0XHRcdFx0dHdlZW4udG90YWxUaW1lKHR3ZWVuLl9yZXZlcnNlZCA/IDAgOiB0d2Vlbi50b3RhbER1cmF0aW9uKCkpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0d2Vlbi5fZW5hYmxlZChmYWxzZSwgZmFsc2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRUd2Vlbk1heC5raWxsQ2hpbGRUd2VlbnNPZiA9IGZ1bmN0aW9uKHBhcmVudCwgY29tcGxldGUpIHtcblx0XHRcdGlmIChwYXJlbnQgPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR2YXIgdGwgPSBUd2VlbkxpdGVJbnRlcm5hbHMudHdlZW5Mb29rdXAsXG5cdFx0XHRcdGEsIGN1clBhcmVudCwgcCwgaSwgbDtcblx0XHRcdGlmICh0eXBlb2YocGFyZW50KSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRwYXJlbnQgPSBUd2VlbkxpdGUuc2VsZWN0b3IocGFyZW50KSB8fCBwYXJlbnQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoX2lzU2VsZWN0b3IocGFyZW50KSkge1xuXHRcdFx0XHRwYXJlbnQgPSBfc2xpY2UocGFyZW50KTtcblx0XHRcdH1cblx0XHRcdGlmIChfaXNBcnJheShwYXJlbnQpKSB7XG5cdFx0XHRcdGkgPSBwYXJlbnQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRUd2Vlbk1heC5raWxsQ2hpbGRUd2VlbnNPZihwYXJlbnRbaV0sIGNvbXBsZXRlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRhID0gW107XG5cdFx0XHRmb3IgKHAgaW4gdGwpIHtcblx0XHRcdFx0Y3VyUGFyZW50ID0gdGxbcF0udGFyZ2V0LnBhcmVudE5vZGU7XG5cdFx0XHRcdHdoaWxlIChjdXJQYXJlbnQpIHtcblx0XHRcdFx0XHRpZiAoY3VyUGFyZW50ID09PSBwYXJlbnQpIHtcblx0XHRcdFx0XHRcdGEgPSBhLmNvbmNhdCh0bFtwXS50d2VlbnMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjdXJQYXJlbnQgPSBjdXJQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bCA9IGEubGVuZ3RoO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRpZiAoY29tcGxldGUpIHtcblx0XHRcdFx0XHRhW2ldLnRvdGFsVGltZShhW2ldLnRvdGFsRHVyYXRpb24oKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YVtpXS5fZW5hYmxlZChmYWxzZSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgX2NoYW5nZVBhdXNlID0gZnVuY3Rpb24ocGF1c2UsIHR3ZWVucywgZGVsYXllZENhbGxzLCB0aW1lbGluZXMpIHtcblx0XHRcdHR3ZWVucyA9ICh0d2VlbnMgIT09IGZhbHNlKTtcblx0XHRcdGRlbGF5ZWRDYWxscyA9IChkZWxheWVkQ2FsbHMgIT09IGZhbHNlKTtcblx0XHRcdHRpbWVsaW5lcyA9ICh0aW1lbGluZXMgIT09IGZhbHNlKTtcblx0XHRcdHZhciBhID0gZ2V0QWxsVHdlZW5zKHRpbWVsaW5lcyksXG5cdFx0XHRcdGFsbFRydWUgPSAodHdlZW5zICYmIGRlbGF5ZWRDYWxscyAmJiB0aW1lbGluZXMpLFxuXHRcdFx0XHRpID0gYS5sZW5ndGgsXG5cdFx0XHRcdGlzREMsIHR3ZWVuO1xuXHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdHR3ZWVuID0gYVtpXTtcblx0XHRcdFx0aWYgKGFsbFRydWUgfHwgKHR3ZWVuIGluc3RhbmNlb2YgU2ltcGxlVGltZWxpbmUpIHx8ICgoaXNEQyA9ICh0d2Vlbi50YXJnZXQgPT09IHR3ZWVuLnZhcnMub25Db21wbGV0ZSkpICYmIGRlbGF5ZWRDYWxscykgfHwgKHR3ZWVucyAmJiAhaXNEQykpIHtcblx0XHRcdFx0XHR0d2Vlbi5wYXVzZWQocGF1c2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdFR3ZWVuTWF4LnBhdXNlQWxsID0gZnVuY3Rpb24odHdlZW5zLCBkZWxheWVkQ2FsbHMsIHRpbWVsaW5lcykge1xuXHRcdFx0X2NoYW5nZVBhdXNlKHRydWUsIHR3ZWVucywgZGVsYXllZENhbGxzLCB0aW1lbGluZXMpO1xuXHRcdH07XG5cblx0XHRUd2Vlbk1heC5yZXN1bWVBbGwgPSBmdW5jdGlvbih0d2VlbnMsIGRlbGF5ZWRDYWxscywgdGltZWxpbmVzKSB7XG5cdFx0XHRfY2hhbmdlUGF1c2UoZmFsc2UsIHR3ZWVucywgZGVsYXllZENhbGxzLCB0aW1lbGluZXMpO1xuXHRcdH07XG5cblx0XHRUd2Vlbk1heC5nbG9iYWxUaW1lU2NhbGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyIHRsID0gQW5pbWF0aW9uLl9yb290VGltZWxpbmUsXG5cdFx0XHRcdHQgPSBUd2VlbkxpdGUudGlja2VyLnRpbWU7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRsLl90aW1lU2NhbGU7XG5cdFx0XHR9XG5cdFx0XHR2YWx1ZSA9IHZhbHVlIHx8IF90aW55TnVtOyAvL2Nhbid0IGFsbG93IHplcm8gYmVjYXVzZSBpdCdsbCB0aHJvdyB0aGUgbWF0aCBvZmZcblx0XHRcdHRsLl9zdGFydFRpbWUgPSB0IC0gKCh0IC0gdGwuX3N0YXJ0VGltZSkgKiB0bC5fdGltZVNjYWxlIC8gdmFsdWUpO1xuXHRcdFx0dGwgPSBBbmltYXRpb24uX3Jvb3RGcmFtZXNUaW1lbGluZTtcblx0XHRcdHQgPSBUd2VlbkxpdGUudGlja2VyLmZyYW1lO1xuXHRcdFx0dGwuX3N0YXJ0VGltZSA9IHQgLSAoKHQgLSB0bC5fc3RhcnRUaW1lKSAqIHRsLl90aW1lU2NhbGUgLyB2YWx1ZSk7XG5cdFx0XHR0bC5fdGltZVNjYWxlID0gQW5pbWF0aW9uLl9yb290VGltZWxpbmUuX3RpbWVTY2FsZSA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH07XG5cblxuLy8tLS0tIEdFVFRFUlMgLyBTRVRURVJTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdHAucHJvZ3Jlc3MgPSBmdW5jdGlvbih2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdHJldHVybiAoIWFyZ3VtZW50cy5sZW5ndGgpID8gKHRoaXMuZHVyYXRpb24oKSA/IHRoaXMuX3RpbWUgLyB0aGlzLl9kdXJhdGlvbiA6IHRoaXMucmF0aW8pIDogdGhpcy50b3RhbFRpbWUoIHRoaXMuZHVyYXRpb24oKSAqICgodGhpcy5feW95byAmJiAodGhpcy5fY3ljbGUgJiAxKSAhPT0gMCkgPyAxIC0gdmFsdWUgOiB2YWx1ZSkgKyAodGhpcy5fY3ljbGUgKiAodGhpcy5fZHVyYXRpb24gKyB0aGlzLl9yZXBlYXREZWxheSkpLCBzdXBwcmVzc0V2ZW50cyk7XG5cdFx0fTtcblxuXHRcdHAudG90YWxQcm9ncmVzcyA9IGZ1bmN0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0cmV0dXJuICghYXJndW1lbnRzLmxlbmd0aCkgPyB0aGlzLl90b3RhbFRpbWUgLyB0aGlzLnRvdGFsRHVyYXRpb24oKSA6IHRoaXMudG90YWxUaW1lKCB0aGlzLnRvdGFsRHVyYXRpb24oKSAqIHZhbHVlLCBzdXBwcmVzc0V2ZW50cyk7XG5cdFx0fTtcblxuXHRcdHAudGltZSA9IGZ1bmN0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl90aW1lO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX2RpcnR5KSB7XG5cdFx0XHRcdHRoaXMudG90YWxEdXJhdGlvbigpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGR1cmF0aW9uID0gdGhpcy5fZHVyYXRpb24sXG5cdFx0XHRcdGN5Y2xlID0gdGhpcy5fY3ljbGUsXG5cdFx0XHRcdGN5Y2xlRHVyID0gY3ljbGUgKiAoZHVyYXRpb24gKyB0aGlzLl9yZXBlYXREZWxheSk7XG5cdFx0XHRpZiAodmFsdWUgPiBkdXJhdGlvbikge1xuXHRcdFx0XHR2YWx1ZSA9IGR1cmF0aW9uO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMudG90YWxUaW1lKCh0aGlzLl95b3lvICYmIChjeWNsZSAmIDEpKSA/IGR1cmF0aW9uIC0gdmFsdWUgKyBjeWNsZUR1ciA6IHRoaXMuX3JlcGVhdCA/IHZhbHVlICsgY3ljbGVEdXIgOiB2YWx1ZSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdH07XG5cblx0XHRwLmR1cmF0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fZHVyYXRpb247IC8vZG9uJ3Qgc2V0IF9kaXJ0eSA9IGZhbHNlIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgcmVwZWF0cyB0aGF0IGhhdmVuJ3QgYmVlbiBmYWN0b3JlZCBpbnRvIHRoZSBfdG90YWxEdXJhdGlvbiB5ZXQuIE90aGVyd2lzZSwgaWYgeW91IGNyZWF0ZSBhIHJlcGVhdGVkIFR3ZWVuTWF4IGFuZCB0aGVuIGltbWVkaWF0ZWx5IGNoZWNrIGl0cyBkdXJhdGlvbigpLCBpdCB3b3VsZCBjYWNoZSB0aGUgdmFsdWUgYW5kIHRoZSB0b3RhbER1cmF0aW9uIHdvdWxkIG5vdCBiZSBjb3JyZWN0LCB0aHVzIHJlcGVhdHMgd291bGRuJ3QgdGFrZSBlZmZlY3QuXG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gQW5pbWF0aW9uLnByb3RvdHlwZS5kdXJhdGlvbi5jYWxsKHRoaXMsIHZhbHVlKTtcblx0XHR9O1xuXG5cdFx0cC50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRpZiAodGhpcy5fZGlydHkpIHtcblx0XHRcdFx0XHQvL2luc3RlYWQgb2YgSW5maW5pdHksIHdlIHVzZSA5OTk5OTk5OTk5OTkgc28gdGhhdCB3ZSBjYW4gYWNjb21tb2RhdGUgcmV2ZXJzZXNcblx0XHRcdFx0XHR0aGlzLl90b3RhbER1cmF0aW9uID0gKHRoaXMuX3JlcGVhdCA9PT0gLTEpID8gOTk5OTk5OTk5OTk5IDogdGhpcy5fZHVyYXRpb24gKiAodGhpcy5fcmVwZWF0ICsgMSkgKyAodGhpcy5fcmVwZWF0RGVsYXkgKiB0aGlzLl9yZXBlYXQpO1xuXHRcdFx0XHRcdHRoaXMuX2RpcnR5ID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXMuX3RvdGFsRHVyYXRpb247XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gKHRoaXMuX3JlcGVhdCA9PT0gLTEpID8gdGhpcyA6IHRoaXMuZHVyYXRpb24oICh2YWx1ZSAtICh0aGlzLl9yZXBlYXQgKiB0aGlzLl9yZXBlYXREZWxheSkpIC8gKHRoaXMuX3JlcGVhdCArIDEpICk7XG5cdFx0fTtcblxuXHRcdHAucmVwZWF0ID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fcmVwZWF0O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fcmVwZWF0ID0gdmFsdWU7XG5cdFx0XHRyZXR1cm4gdGhpcy5fdW5jYWNoZSh0cnVlKTtcblx0XHR9O1xuXG5cdFx0cC5yZXBlYXREZWxheSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3JlcGVhdERlbGF5O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fcmVwZWF0RGVsYXkgPSB2YWx1ZTtcblx0XHRcdHJldHVybiB0aGlzLl91bmNhY2hlKHRydWUpO1xuXHRcdH07XG5cblx0XHRwLnlveW8gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl95b3lvO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5feW95byA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXG5cdFx0cmV0dXJuIFR3ZWVuTWF4O1xuXG5cdH0sIHRydWUpO1xuXG5leHBvcnQgdmFyIFR3ZWVuTWF4ID0gZ2xvYmFscy5Ud2Vlbk1heDtcbmV4cG9ydCB2YXIgVHdlZW5NYXhCYXNlID0gVHdlZW5NYXg7XG5leHBvcnQgeyBUd2Vlbk1heCBhcyBkZWZhdWx0IH07XG5leHBvcnQgeyBUd2VlbkxpdGUsIEVhc2UsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIgfTtcbiIsIi8qIVxuICogVkVSU0lPTjogMi4xLjNcbiAqIERBVEU6IDIwMTktMDUtMTdcbiAqIFVQREFURVMgQU5EIERPQ1MgQVQ6IGh0dHA6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDA4LTIwMTksIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgd29yayBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIHNvZnR3YXJlIGFncmVlbWVudCB0aGF0IHdhcyBpc3N1ZWQgd2l0aCB5b3VyIG1lbWJlcnNoaXAuXG4gKiBcbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG5pbXBvcnQgVHdlZW5MaXRlLCB7IF9nc1Njb3BlLCBnbG9iYWxzLCBUd2VlblBsdWdpbiB9IGZyb20gXCIuL1R3ZWVuTGl0ZS5qc1wiO1xuXG5cdF9nc1Njb3BlLl9nc0RlZmluZShcInBsdWdpbnMuQ1NTUGx1Z2luXCIsIFtcInBsdWdpbnMuVHdlZW5QbHVnaW5cIixcIlR3ZWVuTGl0ZVwiXSwgZnVuY3Rpb24oKSB7XG5cblx0XHQvKiogQGNvbnN0cnVjdG9yICoqL1xuXHRcdHZhciBDU1NQbHVnaW4gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0VHdlZW5QbHVnaW4uY2FsbCh0aGlzLCBcImNzc1wiKTtcblx0XHRcdFx0dGhpcy5fb3ZlcndyaXRlUHJvcHMubGVuZ3RoID0gMDtcblx0XHRcdFx0dGhpcy5zZXRSYXRpbyA9IENTU1BsdWdpbi5wcm90b3R5cGUuc2V0UmF0aW87IC8vc3BlZWQgb3B0aW1pemF0aW9uIChhdm9pZCBwcm90b3R5cGUgbG9va3VwIG9uIHRoaXMgXCJob3RcIiBtZXRob2QpXG5cdFx0XHR9LFxuXHRcdFx0X2dsb2JhbHMgPSBfZ3NTY29wZS5fZ3NEZWZpbmUuZ2xvYmFscyxcblx0XHRcdF9oYXNQcmlvcml0eSwgLy90dXJucyB0cnVlIHdoZW5ldmVyIGEgQ1NTUHJvcFR3ZWVuIGluc3RhbmNlIGlzIGNyZWF0ZWQgdGhhdCBoYXMgYSBwcmlvcml0eSBvdGhlciB0aGFuIDAuIFRoaXMgaGVscHMgdXMgZGlzY2VybiB3aGV0aGVyIG9yIG5vdCB3ZSBzaG91bGQgc3BlbmQgdGhlIHRpbWUgb3JnYW5pemluZyB0aGUgbGlua2VkIGxpc3Qgb3Igbm90IGFmdGVyIGEgQ1NTUGx1Z2luJ3MgX29uSW5pdFR3ZWVuKCkgbWV0aG9kIGlzIGNhbGxlZC5cblx0XHRcdF9zdWZmaXhNYXAsIC8vd2Ugc2V0IHRoaXMgaW4gX29uSW5pdFR3ZWVuKCkgZWFjaCB0aW1lIGFzIGEgd2F5IHRvIGhhdmUgYSBwZXJzaXN0ZW50IHZhcmlhYmxlIHdlIGNhbiB1c2UgaW4gb3RoZXIgbWV0aG9kcyBsaWtlIF9wYXJzZSgpIHdpdGhvdXQgaGF2aW5nIHRvIHBhc3MgaXQgYXJvdW5kIGFzIGEgcGFyYW1ldGVyIGFuZCB3ZSBrZWVwIF9wYXJzZSgpIGRlY291cGxlZCBmcm9tIGEgcGFydGljdWxhciBDU1NQbHVnaW4gaW5zdGFuY2Vcblx0XHRcdF9jcywgLy9jb21wdXRlZCBzdHlsZSAod2Ugc3RvcmUgdGhpcyBpbiBhIHNoYXJlZCB2YXJpYWJsZSB0byBjb25zZXJ2ZSBtZW1vcnkgYW5kIG1ha2UgbWluaWZpY2F0aW9uIHRpZ2h0ZXJcblx0XHRcdF9vdmVyd3JpdGVQcm9wcywgLy9hbGlhcyB0byB0aGUgY3VycmVudGx5IGluc3RhbnRpYXRpbmcgQ1NTUGx1Z2luJ3MgX292ZXJ3cml0ZVByb3BzIGFycmF5LiBXZSB1c2UgdGhpcyBjbG9zdXJlIGluIG9yZGVyIHRvIGF2b2lkIGhhdmluZyB0byBwYXNzIGEgcmVmZXJlbmNlIGFyb3VuZCBmcm9tIG1ldGhvZCB0byBtZXRob2QgYW5kIGFpZCBpbiBtaW5pZmljYXRpb24uXG5cdFx0XHRfc3BlY2lhbFByb3BzID0ge30sXG5cdFx0XHRwID0gQ1NTUGx1Z2luLnByb3RvdHlwZSA9IG5ldyBUd2VlblBsdWdpbihcImNzc1wiKTtcblxuXHRcdHAuY29uc3RydWN0b3IgPSBDU1NQbHVnaW47XG5cdFx0Q1NTUGx1Z2luLnZlcnNpb24gPSBcIjIuMS4zXCI7XG5cdFx0Q1NTUGx1Z2luLkFQSSA9IDI7XG5cdFx0Q1NTUGx1Z2luLmRlZmF1bHRUcmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IDA7XG5cdFx0Q1NTUGx1Z2luLmRlZmF1bHRTa2V3VHlwZSA9IFwiY29tcGVuc2F0ZWRcIjtcblx0XHRDU1NQbHVnaW4uZGVmYXVsdFNtb290aE9yaWdpbiA9IHRydWU7XG5cdFx0cCA9IFwicHhcIjsgLy93ZSdsbCByZXVzZSB0aGUgXCJwXCIgdmFyaWFibGUgdG8ga2VlcCBmaWxlIHNpemUgZG93blxuXHRcdENTU1BsdWdpbi5zdWZmaXhNYXAgPSB7dG9wOnAsIHJpZ2h0OnAsIGJvdHRvbTpwLCBsZWZ0OnAsIHdpZHRoOnAsIGhlaWdodDpwLCBmb250U2l6ZTpwLCBwYWRkaW5nOnAsIG1hcmdpbjpwLCBwZXJzcGVjdGl2ZTpwLCBsaW5lSGVpZ2h0OlwiXCJ9O1xuXG5cblx0XHR2YXIgX251bUV4cCA9IC8oPzpcXC18XFwufFxcYikoXFxkfFxcLnxlXFwtKSsvZyxcblx0XHRcdF9yZWxOdW1FeHAgPSAvKD86XFxkfFxcLVxcZHxcXC5cXGR8XFwtXFwuXFxkfFxcKz1cXGR8XFwtPVxcZHxcXCs9LlxcZHxcXC09XFwuXFxkKSsvZyxcblx0XHRcdF92YWx1ZXNFeHAgPSAvKD86XFwrPXxcXC09fFxcLXxcXGIpW1xcZFxcLVxcLl0rW2EtekEtWjAtOV0qKD86JXxcXGIpL2dpLCAvL2ZpbmRzIGFsbCB0aGUgdmFsdWVzIHRoYXQgYmVnaW4gd2l0aCBudW1iZXJzIG9yICs9IG9yIC09IGFuZCB0aGVuIGEgbnVtYmVyLiBJbmNsdWRlcyBzdWZmaXhlcy4gV2UgdXNlIHRoaXMgdG8gc3BsaXQgY29tcGxleCB2YWx1ZXMgYXBhcnQgbGlrZSBcIjFweCA1cHggMjBweCByZ2IoMjU1LDEwMiw1MSlcIlxuXHRcdFx0X3ZhbHVlc0V4cFdpdGhDb21tYXMgPSAvKD86XFwrPXxcXC09fFxcLXxcXGIpW1xcZFxcLVxcLl0rW2EtekEtWjAtOV0qKD86JXxcXGIpLD8vZ2ksIC8vZmluZHMgYWxsIHRoZSB2YWx1ZXMgdGhhdCBiZWdpbiB3aXRoIG51bWJlcnMgb3IgKz0gb3IgLT0gYW5kIHRoZW4gYSBudW1iZXIuIEluY2x1ZGVzIHN1ZmZpeGVzLiBXZSB1c2UgdGhpcyB0byBzcGxpdCBjb21wbGV4IHZhbHVlcyBhcGFydCBsaWtlIFwiMXB4IDVweCAyMHB4IHJnYigyNTUsMTAyLDUxKVwiXG5cdFx0XHRfTmFORXhwID0gLyg/IVsrLV0/XFxkKlxcLj9cXGQrfFsrLV18ZVsrLV1cXGQrKVteMC05XS9nLCAvL2Fsc28gYWxsb3dzIHNjaWVudGlmaWMgbm90YXRpb24gYW5kIGRvZXNuJ3Qga2lsbCB0aGUgbGVhZGluZyAtLysgaW4gLT0gYW5kICs9XG5cdFx0XHRfc3VmZml4RXhwID0gLyg/OlxcZHxcXC18XFwrfD18I3xcXC4pKi9nLFxuXHRcdFx0X29wYWNpdHlFeHAgPSAvb3BhY2l0eSAqPSAqKFteKV0qKS9pLFxuXHRcdFx0X29wYWNpdHlWYWxFeHAgPSAvb3BhY2l0eTooW147XSopL2ksXG5cdFx0XHRfYWxwaGFGaWx0ZXJFeHAgPSAvYWxwaGFcXChvcGFjaXR5ICo9Lis/XFwpL2ksXG5cdFx0XHRfcmdiaHNsRXhwID0gL14ocmdifGhzbCkvLFxuXHRcdFx0X2NhcHNFeHAgPSAvKFtBLVpdKS9nLFxuXHRcdFx0X2NhbWVsRXhwID0gLy0oW2Etel0pL2dpLFxuXHRcdFx0X3VybEV4cCA9IC8oXig/OnVybFxcKFxcXCJ8dXJsXFwoKSl8KD86KFxcXCJcXCkpJHxcXCkkKS9naSwgLy9mb3IgcHVsbGluZyBvdXQgdXJscyBmcm9tIHVybCguLi4pIG9yIHVybChcIi4uLlwiKSBzdHJpbmdzIChzb21lIGJyb3dzZXJzIHdyYXAgdXJscyBpbiBxdW90ZXMsIHNvbWUgZG9uJ3Qgd2hlbiByZXBvcnRpbmcgdGhpbmdzIGxpa2UgYmFja2dyb3VuZEltYWdlKVxuXHRcdFx0X2NhbWVsRnVuYyA9IGZ1bmN0aW9uKHMsIGcpIHsgcmV0dXJuIGcudG9VcHBlckNhc2UoKTsgfSxcblx0XHRcdF9ob3JpekV4cCA9IC8oPzpMZWZ0fFJpZ2h0fFdpZHRoKS9pLFxuXHRcdFx0X2llR2V0TWF0cml4RXhwID0gLyhNMTF8TTEyfE0yMXxNMjIpPVtcXGRcXC1cXC5lXSsvZ2ksXG5cdFx0XHRfaWVTZXRNYXRyaXhFeHAgPSAvcHJvZ2lkXFw6RFhJbWFnZVRyYW5zZm9ybVxcLk1pY3Jvc29mdFxcLk1hdHJpeFxcKC4rP1xcKS9pLFxuXHRcdFx0X2NvbW1hc091dHNpZGVQYXJlbkV4cCA9IC8sKD89W15cXCldKig/OlxcKHwkKSkvZ2ksIC8vZmluZHMgYW55IGNvbW1hcyB0aGF0IGFyZSBub3Qgd2l0aGluIHBhcmVudGhlc2lzXG5cdFx0XHRfY29tcGxleEV4cCA9IC9bXFxzLFxcKF0vaSwgLy9mb3IgdGVzdGluZyBhIHN0cmluZyB0byBmaW5kIGlmIGl0IGhhcyBhIHNwYWNlLCBjb21tYSwgb3Igb3BlbiBwYXJlbnRoZXNpcyAoY2x1ZXMgdGhhdCBpdCdzIGEgY29tcGxleCB2YWx1ZSlcblx0XHRcdF9ERUcyUkFEID0gTWF0aC5QSSAvIDE4MCxcblx0XHRcdF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcblx0XHRcdF9mb3JjZVBUID0ge30sXG5cdFx0XHRfZHVtbXlFbGVtZW50ID0ge3N0eWxlOnt9fSxcblx0XHRcdF9kb2MgPSBfZ3NTY29wZS5kb2N1bWVudCB8fCB7Y3JlYXRlRWxlbWVudDogZnVuY3Rpb24oKSB7cmV0dXJuIF9kdW1teUVsZW1lbnQ7fX0sXG5cdFx0XHRfY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uKHR5cGUsIG5zKSB7XG5cdFx0XHRcdHZhciBlID0gX2RvYy5jcmVhdGVFbGVtZW50TlMgPyBfZG9jLmNyZWF0ZUVsZW1lbnROUyhucyB8fCBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiwgdHlwZSkgOiBfZG9jLmNyZWF0ZUVsZW1lbnQodHlwZSk7XG5cdFx0XHRcdHJldHVybiBlLnN0eWxlID8gZSA6IF9kb2MuY3JlYXRlRWxlbWVudCh0eXBlKTsgLy9zb21lIGVudmlyb25tZW50cyB3b24ndCBhbGxvdyBhY2Nlc3MgdG8gdGhlIGVsZW1lbnQncyBzdHlsZSB3aGVuIGNyZWF0ZWQgd2l0aCBhIG5hbWVzcGFjZSBpbiB3aGljaCBjYXNlIHdlIGRlZmF1bHQgdG8gdGhlIHN0YW5kYXJkIGNyZWF0ZUVsZW1lbnQoKSB0byB3b3JrIGFyb3VuZCB0aGUgaXNzdWUuIEFsc28gbm90ZSB0aGF0IHdoZW4gR1NBUCBpcyBlbWJlZGRlZCBkaXJlY3RseSBpbnNpZGUgYW4gU1ZHIGZpbGUsIGNyZWF0ZUVsZW1lbnQoKSB3b24ndCBhbGxvdyBhY2Nlc3MgdG8gdGhlIHN0eWxlIG9iamVjdCBpbiBGaXJlZm94IChzZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMDIxNS1wcm9ibGVtLXVzaW5nLXR3ZWVubWF4LWluLXN0YW5kYWxvbmUtc2VsZi1jb250YWluaW5nLXN2Zy1maWxlLWVyci1jYW5ub3Qtc2V0LXByb3BlcnR5LWNzc3RleHQtb2YtdW5kZWZpbmVkLykuXG5cdFx0XHR9LFxuXHRcdFx0X3RlbXBEaXYgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKSxcblx0XHRcdF90ZW1wSW1nID0gX2NyZWF0ZUVsZW1lbnQoXCJpbWdcIiksXG5cdFx0XHRfaW50ZXJuYWxzID0gQ1NTUGx1Z2luLl9pbnRlcm5hbHMgPSB7X3NwZWNpYWxQcm9wczpfc3BlY2lhbFByb3BzfSwgLy9wcm92aWRlcyBhIGhvb2sgdG8gYSBmZXcgaW50ZXJuYWwgbWV0aG9kcyB0aGF0IHdlIG5lZWQgdG8gYWNjZXNzIGZyb20gaW5zaWRlIG90aGVyIHBsdWdpbnNcblx0XHRcdF9hZ2VudCA9IChfZ3NTY29wZS5uYXZpZ2F0b3IgfHwge30pLnVzZXJBZ2VudCB8fCBcIlwiLFxuXHRcdFx0X2F1dG9Sb3VuZCxcblx0XHRcdF9yZXFTYWZhcmlGaXgsIC8vd2Ugd29uJ3QgYXBwbHkgdGhlIFNhZmFyaSB0cmFuc2Zvcm0gZml4IHVudGlsIHdlIGFjdHVhbGx5IGNvbWUgYWNyb3NzIGEgdHdlZW4gdGhhdCBhZmZlY3RzIGEgdHJhbnNmb3JtIHByb3BlcnR5ICh0byBtYWludGFpbiBiZXN0IHBlcmZvcm1hbmNlKS5cblxuXHRcdFx0X2lzU2FmYXJpLFxuXHRcdFx0X2lzRmlyZWZveCwgLy9GaXJlZm94IGhhcyBhIGJ1ZyB0aGF0IGNhdXNlcyAzRCB0cmFuc2Zvcm1lZCBlbGVtZW50cyB0byByYW5kb21seSBkaXNhcHBlYXIgdW5sZXNzIGEgcmVwYWludCBpcyBmb3JjZWQgYWZ0ZXIgZWFjaCB1cGRhdGUgb24gZWFjaCBlbGVtZW50LlxuXHRcdFx0X2lzU2FmYXJpTFQ2LCAvL1NhZmFyaSAoYW5kIEFuZHJvaWQgNCB3aGljaCB1c2VzIGEgZmxhdm9yIG9mIFNhZmFyaSkgaGFzIGEgYnVnIHRoYXQgcHJldmVudHMgY2hhbmdlcyB0byBcInRvcFwiIGFuZCBcImxlZnRcIiBwcm9wZXJ0aWVzIGZyb20gcmVuZGVyaW5nIHByb3Blcmx5IGlmIGNoYW5nZWQgb24gdGhlIHNhbWUgZnJhbWUgYXMgYSB0cmFuc2Zvcm0gVU5MRVNTIHdlIHNldCB0aGUgZWxlbWVudCdzIFdlYmtpdEJhY2tmYWNlVmlzaWJpbGl0eSB0byBoaWRkZW4gKHdlaXJkLCBJIGtub3cpLiBEb2luZyB0aGlzIGZvciBBbmRyb2lkIDMgYW5kIGVhcmxpZXIgc2VlbXMgdG8gYWN0dWFsbHkgY2F1c2Ugb3RoZXIgcHJvYmxlbXMsIHRob3VnaCAoZnVuISlcblx0XHRcdF9pZVZlcnMsXG5cdFx0XHRfc3VwcG9ydHNPcGFjaXR5ID0gKGZ1bmN0aW9uKCkgeyAvL3dlIHNldCBfaXNTYWZhcmksIF9pZVZlcnMsIF9pc0ZpcmVmb3gsIGFuZCBfc3VwcG9ydHNPcGFjaXR5IGFsbCBpbiBvbmUgZnVuY3Rpb24gaGVyZSB0byByZWR1Y2UgZmlsZSBzaXplIHNsaWdodGx5LCBlc3BlY2lhbGx5IGluIHRoZSBtaW5pZmllZCB2ZXJzaW9uLlxuXHRcdFx0XHR2YXIgaSA9IF9hZ2VudC5pbmRleE9mKFwiQW5kcm9pZFwiKSxcblx0XHRcdFx0XHRhID0gX2NyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuXHRcdFx0XHRfaXNTYWZhcmkgPSAoX2FnZW50LmluZGV4T2YoXCJTYWZhcmlcIikgIT09IC0xICYmIF9hZ2VudC5pbmRleE9mKFwiQ2hyb21lXCIpID09PSAtMSAmJiAoaSA9PT0gLTEgfHwgcGFyc2VGbG9hdChfYWdlbnQuc3Vic3RyKGkrOCwgMikpID4gMykpO1xuXHRcdFx0XHRfaXNTYWZhcmlMVDYgPSAoX2lzU2FmYXJpICYmIChwYXJzZUZsb2F0KF9hZ2VudC5zdWJzdHIoX2FnZW50LmluZGV4T2YoXCJWZXJzaW9uL1wiKSs4LCAyKSkgPCA2KSk7XG5cdFx0XHRcdF9pc0ZpcmVmb3ggPSAoX2FnZW50LmluZGV4T2YoXCJGaXJlZm94XCIpICE9PSAtMSk7XG5cdFx0XHRcdGlmICgoL01TSUUgKFswLTldezEsfVtcXC4wLTldezAsfSkvKS5leGVjKF9hZ2VudCkgfHwgKC9UcmlkZW50XFwvLipydjooWzAtOV17MSx9W1xcLjAtOV17MCx9KS8pLmV4ZWMoX2FnZW50KSkge1xuXHRcdFx0XHRcdF9pZVZlcnMgPSBwYXJzZUZsb2F0KCBSZWdFeHAuJDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWEpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0YS5zdHlsZS5jc3NUZXh0ID0gXCJ0b3A6MXB4O29wYWNpdHk6LjU1O1wiO1xuXHRcdFx0XHRyZXR1cm4gL14wLjU1Ly50ZXN0KGEuc3R5bGUub3BhY2l0eSk7XG5cdFx0XHR9KCkpLFxuXHRcdFx0X2dldElFT3BhY2l0eSA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0cmV0dXJuIChfb3BhY2l0eUV4cC50ZXN0KCAoKHR5cGVvZih2KSA9PT0gXCJzdHJpbmdcIikgPyB2IDogKHYuY3VycmVudFN0eWxlID8gdi5jdXJyZW50U3R5bGUuZmlsdGVyIDogdi5zdHlsZS5maWx0ZXIpIHx8IFwiXCIpICkgPyAoIHBhcnNlRmxvYXQoIFJlZ0V4cC4kMSApIC8gMTAwICkgOiAxKTtcblx0XHRcdH0sXG5cdFx0XHRfbG9nID0gZnVuY3Rpb24ocykgey8vZm9yIGxvZ2dpbmcgbWVzc2FnZXMsIGJ1dCBpbiBhIHdheSB0aGF0IHdvbid0IHRocm93IGVycm9ycyBpbiBvbGQgdmVyc2lvbnMgb2YgSUUuXG5cdFx0XHRcdGlmIChfZ3NTY29wZS5jb25zb2xlKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2cocyk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRfdGFyZ2V0LCAvL3doZW4gaW5pdHRpbmcgYSBDU1NQbHVnaW4sIHdlIHNldCB0aGlzIHZhcmlhYmxlIHNvIHRoYXQgd2UgY2FuIGFjY2VzcyBpdCBmcm9tIHdpdGhpbiBtYW55IG90aGVyIGZ1bmN0aW9ucyB3aXRob3V0IGhhdmluZyB0byBwYXNzIGl0IGFyb3VuZCBhcyBwYXJhbXNcblx0XHRcdF9pbmRleCwgLy93aGVuIGluaXR0aW5nIGEgQ1NTUGx1Z2luLCB3ZSBzZXQgdGhpcyB2YXJpYWJsZSBzbyB0aGF0IHdlIGNhbiBhY2Nlc3MgaXQgZnJvbSB3aXRoaW4gbWFueSBvdGhlciBmdW5jdGlvbnMgd2l0aG91dCBoYXZpbmcgdG8gcGFzcyBpdCBhcm91bmQgYXMgcGFyYW1zXG5cblx0XHRcdF9wcmVmaXhDU1MgPSBcIlwiLCAvL3RoZSBub24tY2FtZWxDYXNlIHZlbmRvciBwcmVmaXggbGlrZSBcIi1vLVwiLCBcIi1tb3otXCIsIFwiLW1zLVwiLCBvciBcIi13ZWJraXQtXCJcblx0XHRcdF9wcmVmaXggPSBcIlwiLCAvL2NhbWVsQ2FzZSB2ZW5kb3IgcHJlZml4IGxpa2UgXCJPXCIsIFwibXNcIiwgXCJXZWJraXRcIiwgb3IgXCJNb3pcIi5cblxuXHRcdFx0Ly8gQHByaXZhdGUgZmVlZCBpbiBhIGNhbWVsQ2FzZSBwcm9wZXJ0eSBuYW1lIGxpa2UgXCJ0cmFuc2Zvcm1cIiBhbmQgaXQgd2lsbCBjaGVjayB0byBzZWUgaWYgaXQgaXMgdmFsaWQgYXMtaXMgb3IgaWYgaXQgbmVlZHMgYSB2ZW5kb3IgcHJlZml4LiBJdCByZXR1cm5zIHRoZSBjb3JyZWN0ZWQgY2FtZWxDYXNlIHByb3BlcnR5IG5hbWUgKGkuZS4gXCJXZWJraXRUcmFuc2Zvcm1cIiBvciBcIk1velRyYW5zZm9ybVwiIG9yIFwidHJhbnNmb3JtXCIgb3IgbnVsbCBpZiBubyBzdWNoIHByb3BlcnR5IGlzIGZvdW5kLCBsaWtlIGlmIHRoZSBicm93c2VyIGlzIElFOCBvciBiZWZvcmUsIFwidHJhbnNmb3JtXCIgd29uJ3QgYmUgZm91bmQgYXQgYWxsKVxuXHRcdFx0X2NoZWNrUHJvcFByZWZpeCA9IGZ1bmN0aW9uKHAsIGUpIHtcblx0XHRcdFx0ZSA9IGUgfHwgX3RlbXBEaXY7XG5cdFx0XHRcdHZhciBzID0gZS5zdHlsZSxcblx0XHRcdFx0XHRhLCBpO1xuXHRcdFx0XHRpZiAoc1twXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHA7XG5cdFx0XHRcdH1cblx0XHRcdFx0cCA9IHAuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwLnN1YnN0cigxKTtcblx0XHRcdFx0YSA9IFtcIk9cIixcIk1velwiLFwibXNcIixcIk1zXCIsXCJXZWJraXRcIl07XG5cdFx0XHRcdGkgPSA1O1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEgJiYgc1thW2ldK3BdID09PSB1bmRlZmluZWQpIHsgfVxuXHRcdFx0XHRpZiAoaSA+PSAwKSB7XG5cdFx0XHRcdFx0X3ByZWZpeCA9IChpID09PSAzKSA/IFwibXNcIiA6IGFbaV07XG5cdFx0XHRcdFx0X3ByZWZpeENTUyA9IFwiLVwiICsgX3ByZWZpeC50b0xvd2VyQ2FzZSgpICsgXCItXCI7XG5cdFx0XHRcdFx0cmV0dXJuIF9wcmVmaXggKyBwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fSxcblxuXHRcdFx0X2NvbXB1dGVkU3R5bGVTY29wZSA9ICh0eXBlb2Yod2luZG93KSAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IF9kb2MuZGVmYXVsdFZpZXcgfHwge2dldENvbXB1dGVkU3R5bGU6ZnVuY3Rpb24oKSB7fX0pLFxuXHRcdFx0X2dldENvbXB1dGVkU3R5bGUgPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdHJldHVybiBfY29tcHV0ZWRTdHlsZVNjb3BlLmdldENvbXB1dGVkU3R5bGUoZSk7IC8vdG8gYXZvaWQgZXJyb3JzIGluIE1pY3Jvc29mdCBFZGdlLCB3ZSBuZWVkIHRvIGNhbGwgZ2V0Q29tcHV0ZWRTdHlsZSgpIGZyb20gYSBzcGVjaWZpYyBzY29wZSwgdHlwaWNhbGx5IHdpbmRvdy5cblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgUmV0dXJucyB0aGUgY3NzIHN0eWxlIGZvciBhIHBhcnRpY3VsYXIgcHJvcGVydHkgb2YgYW4gZWxlbWVudC4gRm9yIGV4YW1wbGUsIHRvIGdldCB3aGF0ZXZlciB0aGUgY3VycmVudCBcImxlZnRcIiBjc3MgdmFsdWUgZm9yIGFuIGVsZW1lbnQgd2l0aCBhbiBJRCBvZiBcIm15RWxlbWVudFwiLCB5b3UgY291bGQgZG86XG5cdFx0XHQgKiB2YXIgY3VycmVudExlZnQgPSBDU1NQbHVnaW4uZ2V0U3R5bGUoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlFbGVtZW50XCIpLCBcImxlZnRcIik7XG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IFRhcmdldCBlbGVtZW50IHdob3NlIHN0eWxlIHByb3BlcnR5IHlvdSB3YW50IHRvIHF1ZXJ5XG5cdFx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IHAgUHJvcGVydHkgbmFtZSAobGlrZSBcImxlZnRcIiBvciBcInRvcFwiIG9yIFwibWFyZ2luVG9wXCIsIGV0Yy4pXG5cdFx0XHQgKiBAcGFyYW0ge09iamVjdD19IGNzIENvbXB1dGVkIHN0eWxlIG9iamVjdC4gVGhpcyBqdXN0IHByb3ZpZGVzIGEgd2F5IHRvIHNwZWVkIHByb2Nlc3NpbmcgaWYgeW91J3JlIGdvaW5nIHRvIGdldCBzZXZlcmFsIHByb3BlcnRpZXMgb24gdGhlIHNhbWUgZWxlbWVudCBpbiBxdWljayBzdWNjZXNzaW9uIC0geW91IGNhbiByZXVzZSB0aGUgcmVzdWx0IG9mIHRoZSBnZXRDb21wdXRlZFN0eWxlKCkgY2FsbC5cblx0XHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IGNhbGMgSWYgdHJ1ZSwgdGhlIHZhbHVlIHdpbGwgbm90IGJlIHJlYWQgZGlyZWN0bHkgZnJvbSB0aGUgZWxlbWVudCdzIFwic3R5bGVcIiBwcm9wZXJ0eSAoaWYgaXQgZXhpc3RzIHRoZXJlKSwgYnV0IGluc3RlYWQgdGhlIGdldENvbXB1dGVkU3R5bGUoKSByZXN1bHQgd2lsbCBiZSB1c2VkLiBUaGlzIGNhbiBiZSB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byBlbnN1cmUgdGhhdCB0aGUgYnJvd3NlciBpdHNlbGYgaXMgaW50ZXJwcmV0aW5nIHRoZSB2YWx1ZS5cblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nPX0gZGZsdCBEZWZhdWx0IHZhbHVlIHRoYXQgc2hvdWxkIGJlIHJldHVybmVkIGluIHRoZSBwbGFjZSBvZiBudWxsLCBcIm5vbmVcIiwgXCJhdXRvXCIgb3IgXCJhdXRvIGF1dG9cIi5cblx0XHRcdCAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBjdXJyZW50IHByb3BlcnR5IHZhbHVlXG5cdFx0XHQgKi9cblx0XHRcdF9nZXRTdHlsZSA9IENTU1BsdWdpbi5nZXRTdHlsZSA9IGZ1bmN0aW9uKHQsIHAsIGNzLCBjYWxjLCBkZmx0KSB7XG5cdFx0XHRcdHZhciBydjtcblx0XHRcdFx0aWYgKCFfc3VwcG9ydHNPcGFjaXR5KSBpZiAocCA9PT0gXCJvcGFjaXR5XCIpIHsgLy9zZXZlcmFsIHZlcnNpb25zIG9mIElFIGRvbid0IHVzZSB0aGUgc3RhbmRhcmQgXCJvcGFjaXR5XCIgcHJvcGVydHkgLSB0aGV5IHVzZSB0aGluZ3MgbGlrZSBmaWx0ZXI6YWxwaGEob3BhY2l0eT01MCksIHNvIHdlIHBhcnNlIHRoYXQgaGVyZS5cblx0XHRcdFx0XHRyZXR1cm4gX2dldElFT3BhY2l0eSh0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWNhbGMgJiYgdC5zdHlsZVtwXSkge1xuXHRcdFx0XHRcdHJ2ID0gdC5zdHlsZVtwXTtcblx0XHRcdFx0fSBlbHNlIGlmICgoY3MgPSBjcyB8fCBfZ2V0Q29tcHV0ZWRTdHlsZSh0KSkpIHtcblx0XHRcdFx0XHRydiA9IGNzW3BdIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocCkgfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHQuY3VycmVudFN0eWxlKSB7XG5cdFx0XHRcdFx0cnYgPSB0LmN1cnJlbnRTdHlsZVtwXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gKGRmbHQgIT0gbnVsbCAmJiAoIXJ2IHx8IHJ2ID09PSBcIm5vbmVcIiB8fCBydiA9PT0gXCJhdXRvXCIgfHwgcnYgPT09IFwiYXV0byBhdXRvXCIpKSA/IGRmbHQgOiBydjtcblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgUGFzcyB0aGUgdGFyZ2V0IGVsZW1lbnQsIHRoZSBwcm9wZXJ0eSBuYW1lLCB0aGUgbnVtZXJpYyB2YWx1ZSwgYW5kIHRoZSBzdWZmaXggKGxpa2UgXCIlXCIsIFwiZW1cIiwgXCJweFwiLCBldGMuKSBhbmQgaXQgd2lsbCBzcGl0IGJhY2sgdGhlIGVxdWl2YWxlbnQgcGl4ZWwgbnVtYmVyLlxuXHRcdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IFRhcmdldCBlbGVtZW50XG5cdFx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IHAgUHJvcGVydHkgbmFtZSAobGlrZSBcImxlZnRcIiwgXCJ0b3BcIiwgXCJtYXJnaW5MZWZ0XCIsIGV0Yy4pXG5cdFx0XHQgKiBAcGFyYW0geyFudW1iZXJ9IHYgVmFsdWVcblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nPX0gc2Z4IFN1ZmZpeCAobGlrZSBcInB4XCIgb3IgXCIlXCIgb3IgXCJlbVwiKVxuXHRcdFx0ICogQHBhcmFtIHtib29sZWFuPX0gcmVjdXJzZSBJZiB0cnVlLCB0aGUgY2FsbCBpcyBhIHJlY3Vyc2l2ZSBvbmUuIEluIHNvbWUgYnJvd3NlcnMgKGxpa2UgSUU3LzgpLCBvY2Nhc2lvbmFsbHkgdGhlIHZhbHVlIGlzbid0IGFjY3VyYXRlbHkgcmVwb3J0ZWQgaW5pdGlhbGx5LCBidXQgaWYgd2UgcnVuIHRoZSBmdW5jdGlvbiBhZ2FpbiBpdCB3aWxsIHRha2UgZWZmZWN0LlxuXHRcdFx0ICogQHJldHVybiB7bnVtYmVyfSB2YWx1ZSBpbiBwaXhlbHNcblx0XHRcdCAqL1xuXHRcdFx0X2NvbnZlcnRUb1BpeGVscyA9IF9pbnRlcm5hbHMuY29udmVydFRvUGl4ZWxzID0gZnVuY3Rpb24odCwgcCwgdiwgc2Z4LCByZWN1cnNlKSB7XG5cdFx0XHRcdGlmIChzZnggPT09IFwicHhcIiB8fCAoIXNmeCAmJiBwICE9PSBcImxpbmVIZWlnaHRcIikpIHsgcmV0dXJuIHY7IH1cblx0XHRcdFx0aWYgKHNmeCA9PT0gXCJhdXRvXCIgfHwgIXYpIHsgcmV0dXJuIDA7IH1cblx0XHRcdFx0dmFyIGhvcml6ID0gX2hvcml6RXhwLnRlc3QocCksXG5cdFx0XHRcdFx0bm9kZSA9IHQsXG5cdFx0XHRcdFx0c3R5bGUgPSBfdGVtcERpdi5zdHlsZSxcblx0XHRcdFx0XHRuZWcgPSAodiA8IDApLFxuXHRcdFx0XHRcdHByZWNpc2UgPSAodiA9PT0gMSksXG5cdFx0XHRcdFx0cGl4LCBjYWNoZSwgdGltZTtcblx0XHRcdFx0aWYgKG5lZykge1xuXHRcdFx0XHRcdHYgPSAtdjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocHJlY2lzZSkge1xuXHRcdFx0XHRcdHYgKj0gMTAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwID09PSBcImxpbmVIZWlnaHRcIiAmJiAhc2Z4KSB7IC8vc3BlY2lhbCBjYXNlIG9mIHdoZW4gYSBzaW1wbGUgbGluZUhlaWdodCAod2l0aG91dCBhIHVuaXQpIGlzIHVzZWQuIFNldCBpdCB0byB0aGUgdmFsdWUsIHJlYWQgYmFjayB0aGUgY29tcHV0ZWQgdmFsdWUsIGFuZCB0aGVuIHJldmVydC5cblx0XHRcdFx0XHRjYWNoZSA9IF9nZXRDb21wdXRlZFN0eWxlKHQpLmxpbmVIZWlnaHQ7XG5cdFx0XHRcdFx0dC5zdHlsZS5saW5lSGVpZ2h0ID0gdjtcblx0XHRcdFx0XHRwaXggPSBwYXJzZUZsb2F0KF9nZXRDb21wdXRlZFN0eWxlKHQpLmxpbmVIZWlnaHQpO1xuXHRcdFx0XHRcdHQuc3R5bGUubGluZUhlaWdodCA9IGNhY2hlO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHNmeCA9PT0gXCIlXCIgJiYgcC5pbmRleE9mKFwiYm9yZGVyXCIpICE9PSAtMSkge1xuXHRcdFx0XHRcdHBpeCA9ICh2IC8gMTAwKSAqIChob3JpeiA/IHQuY2xpZW50V2lkdGggOiB0LmNsaWVudEhlaWdodCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjAgc29saWQgcmVkO3Bvc2l0aW9uOlwiICsgX2dldFN0eWxlKHQsIFwicG9zaXRpb25cIikgKyBcIjtsaW5lLWhlaWdodDowO1wiO1xuXHRcdFx0XHRcdGlmIChzZnggPT09IFwiJVwiIHx8ICFub2RlLmFwcGVuZENoaWxkIHx8IHNmeC5jaGFyQXQoMCkgPT09IFwidlwiIHx8IHNmeCA9PT0gXCJyZW1cIikge1xuXHRcdFx0XHRcdFx0bm9kZSA9IHQucGFyZW50Tm9kZSB8fCBfZG9jLmJvZHk7XG5cdFx0XHRcdFx0XHRpZiAoX2dldFN0eWxlKG5vZGUsIFwiZGlzcGxheVwiKS5pbmRleE9mKFwiZmxleFwiKSAhPT0gLTEpIHsgLy9FZGdlIGFuZCBJRTExIGhhdmUgYSBidWcgdGhhdCBjYXVzZXMgb2Zmc2V0V2lkdGggdG8gcmVwb3J0IGFzIDAgaWYgdGhlIGNvbnRhaW5lciBoYXMgZGlzcGxheTpmbGV4IGFuZCB0aGUgY2hpbGQgaXMgcG9zaXRpb246cmVsYXRpdmUuIFN3aXRjaGluZyB0byBwb3NpdGlvbjogYWJzb2x1dGUgc29sdmVzIGl0LlxuXHRcdFx0XHRcdFx0XHRzdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNhY2hlID0gbm9kZS5fZ3NDYWNoZTtcblx0XHRcdFx0XHRcdHRpbWUgPSBUd2VlbkxpdGUudGlja2VyLmZyYW1lO1xuXHRcdFx0XHRcdFx0aWYgKGNhY2hlICYmIGhvcml6ICYmIGNhY2hlLnRpbWUgPT09IHRpbWUpIHsgLy9wZXJmb3JtYW5jZSBvcHRpbWl6YXRpb246IHdlIHJlY29yZCB0aGUgd2lkdGggb2YgZWxlbWVudHMgYWxvbmcgd2l0aCB0aGUgdGlja2VyIGZyYW1lIHNvIHRoYXQgd2UgY2FuIHF1aWNrbHkgZ2V0IGl0IGFnYWluIG9uIHRoZSBzYW1lIHRpY2sgKHNlZW1zIHJlbGF0aXZlbHkgc2FmZSB0byBhc3N1bWUgaXQgd291bGRuJ3QgY2hhbmdlIG9uIHRoZSBzYW1lIHRpY2spXG5cdFx0XHRcdFx0XHRcdHJldHVybiBjYWNoZS53aWR0aCAqIHYgLyAxMDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzdHlsZVsoaG9yaXogPyBcIndpZHRoXCIgOiBcImhlaWdodFwiKV0gPSB2ICsgc2Z4O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzdHlsZVsoaG9yaXogPyBcImJvcmRlckxlZnRXaWR0aFwiIDogXCJib3JkZXJUb3BXaWR0aFwiKV0gPSB2ICsgc2Z4O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRub2RlLmFwcGVuZENoaWxkKF90ZW1wRGl2KTtcblx0XHRcdFx0XHRwaXggPSBwYXJzZUZsb2F0KF90ZW1wRGl2Wyhob3JpeiA/IFwib2Zmc2V0V2lkdGhcIiA6IFwib2Zmc2V0SGVpZ2h0XCIpXSk7XG5cdFx0XHRcdFx0bm9kZS5yZW1vdmVDaGlsZChfdGVtcERpdik7XG5cdFx0XHRcdFx0aWYgKGhvcml6ICYmIHNmeCA9PT0gXCIlXCIgJiYgQ1NTUGx1Z2luLmNhY2hlV2lkdGhzICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0Y2FjaGUgPSBub2RlLl9nc0NhY2hlID0gbm9kZS5fZ3NDYWNoZSB8fCB7fTtcblx0XHRcdFx0XHRcdGNhY2hlLnRpbWUgPSB0aW1lO1xuXHRcdFx0XHRcdFx0Y2FjaGUud2lkdGggPSBwaXggLyB2ICogMTAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocGl4ID09PSAwICYmICFyZWN1cnNlKSB7XG5cdFx0XHRcdFx0XHRwaXggPSBfY29udmVydFRvUGl4ZWxzKHQsIHAsIHYsIHNmeCwgdHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwcmVjaXNlKSB7XG5cdFx0XHRcdFx0cGl4IC89IDEwMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbmVnID8gLXBpeCA6IHBpeDtcblx0XHRcdH0sXG5cdFx0XHRfY2FsY3VsYXRlT2Zmc2V0ID0gX2ludGVybmFscy5jYWxjdWxhdGVPZmZzZXQgPSBmdW5jdGlvbih0LCBwLCBjcykgeyAvL2ZvciBmaWd1cmluZyBvdXQgXCJ0b3BcIiBvciBcImxlZnRcIiBpbiBweCB3aGVuIGl0J3MgXCJhdXRvXCIuIFdlIG5lZWQgdG8gZmFjdG9yIGluIG1hcmdpbiB3aXRoIHRoZSBvZmZzZXRMZWZ0L29mZnNldFRvcFxuXHRcdFx0XHRpZiAoX2dldFN0eWxlKHQsIFwicG9zaXRpb25cIiwgY3MpICE9PSBcImFic29sdXRlXCIpIHsgcmV0dXJuIDA7IH1cblx0XHRcdFx0dmFyIGRpbSA9ICgocCA9PT0gXCJsZWZ0XCIpID8gXCJMZWZ0XCIgOiBcIlRvcFwiKSxcblx0XHRcdFx0XHR2ID0gX2dldFN0eWxlKHQsIFwibWFyZ2luXCIgKyBkaW0sIGNzKTtcblx0XHRcdFx0cmV0dXJuIHRbXCJvZmZzZXRcIiArIGRpbV0gLSAoX2NvbnZlcnRUb1BpeGVscyh0LCBwLCBwYXJzZUZsb2F0KHYpLCB2LnJlcGxhY2UoX3N1ZmZpeEV4cCwgXCJcIikpIHx8IDApO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQHByaXZhdGUgcmV0dXJucyBhdCBvYmplY3QgY29udGFpbmluZyBBTEwgb2YgdGhlIHN0eWxlIHByb3BlcnRpZXMgaW4gY2FtZWxDYXNlIGFuZCB0aGVpciBhc3NvY2lhdGVkIHZhbHVlcy5cblx0XHRcdF9nZXRBbGxTdHlsZXMgPSBmdW5jdGlvbih0LCBjcykge1xuXHRcdFx0XHR2YXIgcyA9IHt9LFxuXHRcdFx0XHRcdGksIHRyLCBwO1xuXHRcdFx0XHRpZiAoKGNzID0gY3MgfHwgX2dldENvbXB1dGVkU3R5bGUodCwgbnVsbCkpKSB7XG5cdFx0XHRcdFx0aWYgKChpID0gY3MubGVuZ3RoKSkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRcdHAgPSBjc1tpXTtcblx0XHRcdFx0XHRcdFx0aWYgKHAuaW5kZXhPZihcIi10cmFuc2Zvcm1cIikgPT09IC0xIHx8IF90cmFuc2Zvcm1Qcm9wQ1NTID09PSBwKSB7IC8vU29tZSB3ZWJraXQgYnJvd3NlcnMgZHVwbGljYXRlIHRyYW5zZm9ybSB2YWx1ZXMsIG9uZSBub24tcHJlZml4ZWQgYW5kIG9uZSBwcmVmaXhlZCAoXCJ0cmFuc2Zvcm1cIiBhbmQgXCJXZWJraXRUcmFuc2Zvcm1cIiksIHNvIHdlIG11c3Qgd2VlZCBvdXQgdGhlIGV4dHJhIG9uZSBoZXJlLlxuXHRcdFx0XHRcdFx0XHRcdHNbcC5yZXBsYWNlKF9jYW1lbEV4cCwgX2NhbWVsRnVuYyldID0gY3MuZ2V0UHJvcGVydHlWYWx1ZShwKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7IC8vc29tZSBicm93c2VycyBiZWhhdmUgZGlmZmVyZW50bHkgLSBjcy5sZW5ndGggaXMgYWx3YXlzIDAsIHNvIHdlIG11c3QgZG8gYSBmb3IuLi5pbiBsb29wLlxuXHRcdFx0XHRcdFx0Zm9yIChpIGluIGNzKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChpLmluZGV4T2YoXCJUcmFuc2Zvcm1cIikgPT09IC0xIHx8IF90cmFuc2Zvcm1Qcm9wID09PSBpKSB7IC8vU29tZSB3ZWJraXQgYnJvd3NlcnMgZHVwbGljYXRlIHRyYW5zZm9ybSB2YWx1ZXMsIG9uZSBub24tcHJlZml4ZWQgYW5kIG9uZSBwcmVmaXhlZCAoXCJ0cmFuc2Zvcm1cIiBhbmQgXCJXZWJraXRUcmFuc2Zvcm1cIiksIHNvIHdlIG11c3Qgd2VlZCBvdXQgdGhlIGV4dHJhIG9uZSBoZXJlLlxuXHRcdFx0XHRcdFx0XHRcdHNbaV0gPSBjc1tpXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmICgoY3MgPSB0LmN1cnJlbnRTdHlsZSB8fCB0LnN0eWxlKSkge1xuXHRcdFx0XHRcdGZvciAoaSBpbiBjcykge1xuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZihpKSA9PT0gXCJzdHJpbmdcIiAmJiBzW2ldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdFx0c1tpLnJlcGxhY2UoX2NhbWVsRXhwLCBfY2FtZWxGdW5jKV0gPSBjc1tpXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFfc3VwcG9ydHNPcGFjaXR5KSB7XG5cdFx0XHRcdFx0cy5vcGFjaXR5ID0gX2dldElFT3BhY2l0eSh0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0ciA9IF9nZXRUcmFuc2Zvcm0odCwgY3MsIGZhbHNlKTtcblx0XHRcdFx0cy5yb3RhdGlvbiA9IHRyLnJvdGF0aW9uO1xuXHRcdFx0XHRzLnNrZXdYID0gdHIuc2tld1g7XG5cdFx0XHRcdHMuc2NhbGVYID0gdHIuc2NhbGVYO1xuXHRcdFx0XHRzLnNjYWxlWSA9IHRyLnNjYWxlWTtcblx0XHRcdFx0cy54ID0gdHIueDtcblx0XHRcdFx0cy55ID0gdHIueTtcblx0XHRcdFx0aWYgKF9zdXBwb3J0czNEKSB7XG5cdFx0XHRcdFx0cy56ID0gdHIuejtcblx0XHRcdFx0XHRzLnJvdGF0aW9uWCA9IHRyLnJvdGF0aW9uWDtcblx0XHRcdFx0XHRzLnJvdGF0aW9uWSA9IHRyLnJvdGF0aW9uWTtcblx0XHRcdFx0XHRzLnNjYWxlWiA9IHRyLnNjYWxlWjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocy5maWx0ZXJzKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHMuZmlsdGVycztcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIEBwcml2YXRlIGFuYWx5emVzIHR3byBzdHlsZSBvYmplY3RzIChhcyByZXR1cm5lZCBieSBfZ2V0QWxsU3R5bGVzKCkpIGFuZCBvbmx5IGxvb2tzIGZvciBkaWZmZXJlbmNlcyBiZXR3ZWVuIHRoZW0gdGhhdCBjb250YWluIHR3ZWVuYWJsZSB2YWx1ZXMgKGxpa2UgYSBudW1iZXIgb3IgY29sb3IpLiBJdCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGEgXCJkaWZzXCIgcHJvcGVydHkgd2hpY2ggcmVmZXJzIHRvIGFuIG9iamVjdCBjb250YWluaW5nIG9ubHkgdGhvc2UgaXNvbGF0ZWQgcHJvcGVydGllcyBhbmQgdmFsdWVzIGZvciB0d2VlbmluZywgYW5kIGEgXCJmaXJzdE1QVFwiIHByb3BlcnR5IHdoaWNoIHJlZmVycyB0byB0aGUgZmlyc3QgTWluaVByb3BUd2VlbiBpbnN0YW5jZSBpbiBhIGxpbmtlZCBsaXN0IHRoYXQgcmVjb3JkZWQgYWxsIHRoZSBzdGFydGluZyB2YWx1ZXMgb2YgdGhlIGRpZmZlcmVudCBwcm9wZXJ0aWVzIHNvIHRoYXQgd2UgY2FuIHJldmVydCB0byB0aGVtIGF0IHRoZSBlbmQgb3IgYmVnaW5uaW5nIG9mIHRoZSB0d2VlbiAtIHdlIGRvbid0IHdhbnQgdGhlIGNhc2NhZGluZyB0byBnZXQgbWVzc2VkIHVwLiBUaGUgZm9yY2VMb29rdXAgcGFyYW1ldGVyIGlzIGFuIG9wdGlvbmFsIGdlbmVyaWMgb2JqZWN0IHdpdGggcHJvcGVydGllcyB0aGF0IHNob3VsZCBiZSBmb3JjZWQgaW50byB0aGUgcmVzdWx0cyAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjbGFzc05hbWUgdHdlZW5zIHRoYXQgYXJlIG92ZXJ3cml0aW5nIG90aGVycyBiZWNhdXNlIGltYWdpbmUgYSBzY2VuYXJpbyB3aGVyZSBhIHJvbGxvdmVyL3JvbGxvdXQgYWRkcy9yZW1vdmVzIGEgY2xhc3MgYW5kIHRoZSB1c2VyIHN3aXBlcyB0aGUgbW91c2Ugb3ZlciB0aGUgdGFyZ2V0IFNVUEVSIGZhc3QsIHRodXMgbm90aGluZyBhY3R1YWxseSBjaGFuZ2VkIHlldCBhbmQgdGhlIHN1YnNlcXVlbnQgY29tcGFyaXNvbiBvZiB0aGUgcHJvcGVydGllcyB3b3VsZCBpbmRpY2F0ZSB0aGV5IG1hdGNoIChlc3BlY2lhbGx5IHdoZW4gcHggcm91bmRpbmcgaXMgdGFrZW4gaW50byBjb25zaWRlcmF0aW9uKSwgdGh1cyBubyB0d2VlbmluZyBpcyBuZWNlc3NhcnkgZXZlbiB0aG91Z2ggaXQgU0hPVUxEIHR3ZWVuIGFuZCByZW1vdmUgdGhvc2UgcHJvcGVydGllcyBhZnRlciB0aGUgdHdlZW4gKG90aGVyd2lzZSB0aGUgaW5saW5lIHN0eWxlcyB3aWxsIGNvbnRhbWluYXRlIHRoaW5ncykuIFNlZSB0aGUgY2xhc3NOYW1lIFNwZWNpYWxQcm9wIGNvZGUgZm9yIGRldGFpbHMuXG5cdFx0XHRfY3NzRGlmID0gZnVuY3Rpb24odCwgczEsIHMyLCB2YXJzLCBmb3JjZUxvb2t1cCkge1xuXHRcdFx0XHR2YXIgZGlmcyA9IHt9LFxuXHRcdFx0XHRcdHN0eWxlID0gdC5zdHlsZSxcblx0XHRcdFx0XHR2YWwsIHAsIG1wdDtcblx0XHRcdFx0Zm9yIChwIGluIHMyKSB7XG5cdFx0XHRcdFx0aWYgKHAgIT09IFwiY3NzVGV4dFwiKSBpZiAocCAhPT0gXCJsZW5ndGhcIikgaWYgKGlzTmFOKHApKSBpZiAoczFbcF0gIT09ICh2YWwgPSBzMltwXSkgfHwgKGZvcmNlTG9va3VwICYmIGZvcmNlTG9va3VwW3BdKSkgaWYgKHAuaW5kZXhPZihcIk9yaWdpblwiKSA9PT0gLTEpIGlmICh0eXBlb2YodmFsKSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlb2YodmFsKSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdFx0ZGlmc1twXSA9ICh2YWwgPT09IFwiYXV0b1wiICYmIChwID09PSBcImxlZnRcIiB8fCBwID09PSBcInRvcFwiKSkgPyBfY2FsY3VsYXRlT2Zmc2V0KHQsIHApIDogKCh2YWwgPT09IFwiXCIgfHwgdmFsID09PSBcImF1dG9cIiB8fCB2YWwgPT09IFwibm9uZVwiKSAmJiB0eXBlb2YoczFbcF0pID09PSBcInN0cmluZ1wiICYmIHMxW3BdLnJlcGxhY2UoX05hTkV4cCwgXCJcIikgIT09IFwiXCIpID8gMCA6IHZhbDsgLy9pZiB0aGUgZW5kaW5nIHZhbHVlIGlzIGRlZmF1bHRpbmcgKFwiXCIgb3IgXCJhdXRvXCIpLCB3ZSBjaGVjayB0aGUgc3RhcnRpbmcgdmFsdWUgYW5kIGlmIGl0IGNhbiBiZSBwYXJzZWQgaW50byBhIG51bWJlciAoYSBzdHJpbmcgd2hpY2ggY291bGQgaGF2ZSBhIHN1ZmZpeCB0b28sIGxpa2UgNzAwcHgpLCB0aGVuIHdlIHN3YXAgaW4gMCBmb3IgXCJcIiBvciBcImF1dG9cIiBzbyB0aGF0IHRoaW5ncyBhY3R1YWxseSB0d2Vlbi5cblx0XHRcdFx0XHRcdGlmIChzdHlsZVtwXSAhPT0gdW5kZWZpbmVkKSB7IC8vZm9yIGNsYXNzTmFtZSB0d2VlbnMsIHdlIG11c3QgcmVtZW1iZXIgd2hpY2ggcHJvcGVydGllcyBhbHJlYWR5IGV4aXN0ZWQgaW5saW5lIC0gdGhlIG9uZXMgdGhhdCBkaWRuJ3Qgc2hvdWxkIGJlIHJlbW92ZWQgd2hlbiB0aGUgdHdlZW4gaXNuJ3QgaW4gcHJvZ3Jlc3MgYmVjYXVzZSB0aGV5IHdlcmUgb25seSBpbnRyb2R1Y2VkIHRvIGZhY2lsaXRhdGUgdGhlIHRyYW5zaXRpb24gYmV0d2VlbiBjbGFzc2VzLlxuXHRcdFx0XHRcdFx0XHRtcHQgPSBuZXcgTWluaVByb3BUd2VlbihzdHlsZSwgcCwgc3R5bGVbcF0sIG1wdCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh2YXJzKSB7XG5cdFx0XHRcdFx0Zm9yIChwIGluIHZhcnMpIHsgLy9jb3B5IHByb3BlcnRpZXMgKGV4Y2VwdCBjbGFzc05hbWUpXG5cdFx0XHRcdFx0XHRpZiAocCAhPT0gXCJjbGFzc05hbWVcIikge1xuXHRcdFx0XHRcdFx0XHRkaWZzW3BdID0gdmFyc1twXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHtkaWZzOmRpZnMsIGZpcnN0TVBUOm1wdH07XG5cdFx0XHR9LFxuXHRcdFx0X2RpbWVuc2lvbnMgPSB7d2lkdGg6W1wiTGVmdFwiLFwiUmlnaHRcIl0sIGhlaWdodDpbXCJUb3BcIixcIkJvdHRvbVwiXX0sXG5cdFx0XHRfbWFyZ2lucyA9IFtcIm1hcmdpbkxlZnRcIixcIm1hcmdpblJpZ2h0XCIsXCJtYXJnaW5Ub3BcIixcIm1hcmdpbkJvdHRvbVwiXSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAcHJpdmF0ZSBHZXRzIHRoZSB3aWR0aCBvciBoZWlnaHQgb2YgYW4gZWxlbWVudFxuXHRcdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IFRhcmdldCBlbGVtZW50XG5cdFx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IHAgUHJvcGVydHkgbmFtZSAoXCJ3aWR0aFwiIG9yIFwiaGVpZ2h0XCIpXG5cdFx0XHQgKiBAcGFyYW0ge09iamVjdD19IGNzIENvbXB1dGVkIHN0eWxlIG9iamVjdCAoaWYgb25lIGV4aXN0cykuIEp1c3QgYSBzcGVlZCBvcHRpbWl6YXRpb24uXG5cdFx0XHQgKiBAcmV0dXJuIHtudW1iZXJ9IERpbWVuc2lvbiAoaW4gcGl4ZWxzKVxuXHRcdFx0ICovXG5cdFx0XHRfZ2V0RGltZW5zaW9uID0gZnVuY3Rpb24odCwgcCwgY3MpIHtcblx0XHRcdFx0aWYgKCh0Lm5vZGVOYW1lICsgXCJcIikudG9Mb3dlckNhc2UoKSA9PT0gXCJzdmdcIikgeyAvL0Nocm9tZSBubyBsb25nZXIgc3VwcG9ydHMgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IG9uIFNWRyBlbGVtZW50cy5cblx0XHRcdFx0XHRyZXR1cm4gKGNzIHx8IF9nZXRDb21wdXRlZFN0eWxlKHQpKVtwXSB8fCAwO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHQuZ2V0Q1RNICYmIF9pc1NWRyh0KSkge1xuXHRcdFx0XHRcdHJldHVybiB0LmdldEJCb3goKVtwXSB8fCAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciB2ID0gcGFyc2VGbG9hdCgocCA9PT0gXCJ3aWR0aFwiKSA/IHQub2Zmc2V0V2lkdGggOiB0Lm9mZnNldEhlaWdodCksXG5cdFx0XHRcdFx0YSA9IF9kaW1lbnNpb25zW3BdLFxuXHRcdFx0XHRcdGkgPSBhLmxlbmd0aDtcblx0XHRcdFx0Y3MgPSBjcyB8fCBfZ2V0Q29tcHV0ZWRTdHlsZSh0LCBudWxsKTtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0diAtPSBwYXJzZUZsb2F0KCBfZ2V0U3R5bGUodCwgXCJwYWRkaW5nXCIgKyBhW2ldLCBjcywgdHJ1ZSkgKSB8fCAwO1xuXHRcdFx0XHRcdHYgLT0gcGFyc2VGbG9hdCggX2dldFN0eWxlKHQsIFwiYm9yZGVyXCIgKyBhW2ldICsgXCJXaWR0aFwiLCBjcywgdHJ1ZSkgKSB8fCAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQHByaXZhdGUgUGFyc2VzIHBvc2l0aW9uLXJlbGF0ZWQgY29tcGxleCBzdHJpbmdzIGxpa2UgXCJ0b3AgbGVmdFwiIG9yIFwiNTBweCAxMHB4XCIgb3IgXCI3MCUgMjAlXCIsIGV0Yy4gd2hpY2ggYXJlIHVzZWQgZm9yIHRoaW5ncyBsaWtlIHRyYW5zZm9ybU9yaWdpbiBvciBiYWNrZ3JvdW5kUG9zaXRpb24uIE9wdGlvbmFsbHkgZGVjb3JhdGVzIGEgc3VwcGxpZWQgb2JqZWN0IChyZWNPYmopIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOiBcIm94XCIgKG9mZnNldFgpLCBcIm95XCIgKG9mZnNldFkpLCBcIm94cFwiIChpZiB0cnVlLCBcIm94XCIgaXMgYSBwZXJjZW50YWdlIG5vdCBhIHBpeGVsIHZhbHVlKSwgYW5kIFwib3h5XCIgKGlmIHRydWUsIFwib3lcIiBpcyBhIHBlcmNlbnRhZ2Ugbm90IGEgcGl4ZWwgdmFsdWUpXG5cdFx0XHRfcGFyc2VQb3NpdGlvbiA9IGZ1bmN0aW9uKHYsIHJlY09iaikge1xuXHRcdFx0XHRpZiAodiA9PT0gXCJjb250YWluXCIgfHwgdiA9PT0gXCJhdXRvXCIgfHwgdiA9PT0gXCJhdXRvIGF1dG9cIikgeyAvL25vdGU6IEZpcmVmb3ggdXNlcyBcImF1dG8gYXV0b1wiIGFzIGRlZmF1bHQgd2hlcmVhcyBDaHJvbWUgdXNlcyBcImF1dG9cIi5cblx0XHRcdFx0XHRyZXR1cm4gdiArIFwiIFwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh2ID09IG51bGwgfHwgdiA9PT0gXCJcIikge1xuXHRcdFx0XHRcdHYgPSBcIjAgMFwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBhID0gdi5zcGxpdChcIiBcIiksXG5cdFx0XHRcdFx0eCA9ICh2LmluZGV4T2YoXCJsZWZ0XCIpICE9PSAtMSkgPyBcIjAlXCIgOiAodi5pbmRleE9mKFwicmlnaHRcIikgIT09IC0xKSA/IFwiMTAwJVwiIDogYVswXSxcblx0XHRcdFx0XHR5ID0gKHYuaW5kZXhPZihcInRvcFwiKSAhPT0gLTEpID8gXCIwJVwiIDogKHYuaW5kZXhPZihcImJvdHRvbVwiKSAhPT0gLTEpID8gXCIxMDAlXCIgOiBhWzFdLFxuXHRcdFx0XHRcdGk7XG5cdFx0XHRcdGlmIChhLmxlbmd0aCA+IDMgJiYgIXJlY09iaikgeyAvL211bHRpcGxlIHBvc2l0aW9uc1xuXHRcdFx0XHRcdGEgPSB2LnNwbGl0KFwiLCBcIikuam9pbihcIixcIikuc3BsaXQoXCIsXCIpO1xuXHRcdFx0XHRcdHYgPSBbXTtcblx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0di5wdXNoKF9wYXJzZVBvc2l0aW9uKGFbaV0pKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHYuam9pbihcIixcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHkgPT0gbnVsbCkge1xuXHRcdFx0XHRcdHkgPSAoeCA9PT0gXCJjZW50ZXJcIikgPyBcIjUwJVwiIDogXCIwXCI7XG5cdFx0XHRcdH0gZWxzZSBpZiAoeSA9PT0gXCJjZW50ZXJcIikge1xuXHRcdFx0XHRcdHkgPSBcIjUwJVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh4ID09PSBcImNlbnRlclwiIHx8IChpc05hTihwYXJzZUZsb2F0KHgpKSAmJiAoeCArIFwiXCIpLmluZGV4T2YoXCI9XCIpID09PSAtMSkpIHsgLy9yZW1lbWJlciwgdGhlIHVzZXIgY291bGQgZmxpcC1mbG9wIHRoZSB2YWx1ZXMgYW5kIHNheSBcImJvdHRvbSBjZW50ZXJcIiBvciBcImNlbnRlciBib3R0b21cIiwgZXRjLiBcImNlbnRlclwiIGlzIGFtYmlndW91cyBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWQgdG8gZGVzY3JpYmUgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCwgaGVuY2UgdGhlIGlzTmFOKCkuIElmIHRoZXJlJ3MgYW4gXCI9XCIgc2lnbiBpbiB0aGUgdmFsdWUsIGl0J3MgcmVsYXRpdmUuXG5cdFx0XHRcdFx0eCA9IFwiNTAlXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0diA9IHggKyBcIiBcIiArIHkgKyAoKGEubGVuZ3RoID4gMikgPyBcIiBcIiArIGFbMl0gOiBcIlwiKTtcblx0XHRcdFx0aWYgKHJlY09iaikge1xuXHRcdFx0XHRcdHJlY09iai5veHAgPSAoeC5pbmRleE9mKFwiJVwiKSAhPT0gLTEpO1xuXHRcdFx0XHRcdHJlY09iai5veXAgPSAoeS5pbmRleE9mKFwiJVwiKSAhPT0gLTEpO1xuXHRcdFx0XHRcdHJlY09iai5veHIgPSAoeC5jaGFyQXQoMSkgPT09IFwiPVwiKTtcblx0XHRcdFx0XHRyZWNPYmoub3lyID0gKHkuY2hhckF0KDEpID09PSBcIj1cIik7XG5cdFx0XHRcdFx0cmVjT2JqLm94ID0gcGFyc2VGbG9hdCh4LnJlcGxhY2UoX05hTkV4cCwgXCJcIikpO1xuXHRcdFx0XHRcdHJlY09iai5veSA9IHBhcnNlRmxvYXQoeS5yZXBsYWNlKF9OYU5FeHAsIFwiXCIpKTtcblx0XHRcdFx0XHRyZWNPYmoudiA9IHY7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlY09iaiB8fCB2O1xuXHRcdFx0fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAcHJpdmF0ZSBUYWtlcyBhbiBlbmRpbmcgdmFsdWUgKHR5cGljYWxseSBhIHN0cmluZywgYnV0IGNhbiBiZSBhIG51bWJlcikgYW5kIGEgc3RhcnRpbmcgdmFsdWUgYW5kIHJldHVybnMgdGhlIGNoYW5nZSBiZXR3ZWVuIHRoZSB0d28sIGxvb2tpbmcgZm9yIHJlbGF0aXZlIHZhbHVlIGluZGljYXRvcnMgbGlrZSArPSBhbmQgLT0gYW5kIGl0IGFsc28gaWdub3JlcyBzdWZmaXhlcyAoYnV0IG1ha2Ugc3VyZSB0aGUgZW5kaW5nIHZhbHVlIHN0YXJ0cyB3aXRoIGEgbnVtYmVyIG9yICs9Ly09IGFuZCB0aGF0IHRoZSBzdGFydGluZyB2YWx1ZSBpcyBhIE5VTUJFUiEpXG5cdFx0XHQgKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKX0gZSBFbmQgdmFsdWUgd2hpY2ggaXMgdHlwaWNhbGx5IGEgc3RyaW5nLCBidXQgY291bGQgYmUgYSBudW1iZXJcblx0XHRcdCAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpfSBiIEJlZ2lubmluZyB2YWx1ZSB3aGljaCBpcyB0eXBpY2FsbHkgYSBzdHJpbmcgYnV0IGNvdWxkIGJlIGEgbnVtYmVyXG5cdFx0XHQgKiBAcmV0dXJuIHtudW1iZXJ9IEFtb3VudCBvZiBjaGFuZ2UgYmV0d2VlbiB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIChyZWxhdGl2ZSB2YWx1ZXMgdGhhdCBoYXZlIGEgXCIrPVwiIG9yIFwiLT1cIiBhcmUgcmVjb2duaXplZClcblx0XHRcdCAqL1xuXHRcdFx0X3BhcnNlQ2hhbmdlID0gZnVuY3Rpb24oZSwgYikge1xuXHRcdFx0XHRpZiAodHlwZW9mKGUpID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRlID0gZShfaW5kZXgsIF90YXJnZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAodHlwZW9mKGUpID09PSBcInN0cmluZ1wiICYmIGUuY2hhckF0KDEpID09PSBcIj1cIikgPyBwYXJzZUludChlLmNoYXJBdCgwKSArIFwiMVwiLCAxMCkgKiBwYXJzZUZsb2F0KGUuc3Vic3RyKDIpKSA6IChwYXJzZUZsb2F0KGUpIC0gcGFyc2VGbG9hdChiKSkgfHwgMDtcblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgVGFrZXMgYSB2YWx1ZSBhbmQgYSBkZWZhdWx0IG51bWJlciwgY2hlY2tzIGlmIHRoZSB2YWx1ZSBpcyByZWxhdGl2ZSwgbnVsbCwgb3IgbnVtZXJpYyBhbmQgc3BpdHMgYmFjayBhIG5vcm1hbGl6ZWQgbnVtYmVyIGFjY29yZGluZ2x5LiBQcmltYXJpbHkgdXNlZCBpbiB0aGUgX3BhcnNlVHJhbnNmb3JtKCkgZnVuY3Rpb24uXG5cdFx0XHQgKiBAcGFyYW0ge09iamVjdH0gdiBWYWx1ZSB0byBiZSBwYXJzZWRcblx0XHRcdCAqIEBwYXJhbSB7IW51bWJlcn0gZCBEZWZhdWx0IHZhbHVlICh3aGljaCBpcyBhbHNvIHVzZWQgZm9yIHJlbGF0aXZlIGNhbGN1bGF0aW9ucyBpZiBcIis9XCIgb3IgXCItPVwiIGlzIGZvdW5kIGluIHRoZSBmaXJzdCBwYXJhbWV0ZXIpXG5cdFx0XHQgKiBAcmV0dXJuIHtudW1iZXJ9IFBhcnNlZCB2YWx1ZVxuXHRcdFx0ICovXG5cdFx0XHRfcGFyc2VWYWwgPSBmdW5jdGlvbih2LCBkKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YodikgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdHYgPSB2KF9pbmRleCwgX3RhcmdldCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGlzUmVsYXRpdmUgPSAodHlwZW9mKHYpID09PSBcInN0cmluZ1wiICYmIHYuY2hhckF0KDEpID09PSBcIj1cIik7XG5cdFx0XHRcdGlmICh0eXBlb2YodikgPT09IFwic3RyaW5nXCIgJiYgdi5jaGFyQXQodi5sZW5ndGggLSAyKSA9PT0gXCJ2XCIpIHsgLy9jb252ZXJ0IHZ3IGFuZCB2aCBpbnRvIHB4LWVxdWl2YWxlbnRzLlxuXHRcdFx0XHRcdHYgPSAoaXNSZWxhdGl2ZSA/IHYuc3Vic3RyKDAsIDIpIDogMCkgKyAod2luZG93W1wiaW5uZXJcIiArICgodi5zdWJzdHIoLTIpID09PSBcInZoXCIpID8gXCJIZWlnaHRcIiA6IFwiV2lkdGhcIildICogKHBhcnNlRmxvYXQoaXNSZWxhdGl2ZSA/IHYuc3Vic3RyKDIpIDogdikgLyAxMDApKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gKHYgPT0gbnVsbCkgPyBkIDogaXNSZWxhdGl2ZSA/IHBhcnNlSW50KHYuY2hhckF0KDApICsgXCIxXCIsIDEwKSAqIHBhcnNlRmxvYXQodi5zdWJzdHIoMikpICsgZCA6IHBhcnNlRmxvYXQodikgfHwgMDtcblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgVHJhbnNsYXRlcyBzdHJpbmdzIGxpa2UgXCI0MGRlZ1wiIG9yIFwiNDBcIiBvciA0MHJhZFwiIG9yIFwiKz00MGRlZ1wiIG9yIFwiMjcwX3Nob3J0XCIgb3IgXCItOTBfY3dcIiBvciBcIis9NDVfY2N3XCIgdG8gYSBudW1lcmljIHJhZGlhbiBhbmdsZS4gT2YgY291cnNlIGEgc3RhcnRpbmcvZGVmYXVsdCB2YWx1ZSBtdXN0IGJlIGZlZCBpbiB0b28gc28gdGhhdCByZWxhdGl2ZSB2YWx1ZXMgY2FuIGJlIGNhbGN1bGF0ZWQgcHJvcGVybHkuXG5cdFx0XHQgKiBAcGFyYW0ge09iamVjdH0gdiBWYWx1ZSB0byBiZSBwYXJzZWRcblx0XHRcdCAqIEBwYXJhbSB7IW51bWJlcn0gZCBEZWZhdWx0IHZhbHVlICh3aGljaCBpcyBhbHNvIHVzZWQgZm9yIHJlbGF0aXZlIGNhbGN1bGF0aW9ucyBpZiBcIis9XCIgb3IgXCItPVwiIGlzIGZvdW5kIGluIHRoZSBmaXJzdCBwYXJhbWV0ZXIpXG5cdFx0XHQgKiBAcGFyYW0ge3N0cmluZz19IHAgcHJvcGVydHkgbmFtZSBmb3IgZGlyZWN0aW9uYWxFbmQgKG9wdGlvbmFsIC0gb25seSB1c2VkIHdoZW4gdGhlIHBhcnNlZCB2YWx1ZSBpcyBkaXJlY3Rpb25hbCAoXCJfc2hvcnRcIiwgXCJfY3dcIiwgb3IgXCJfY2N3XCIgc3VmZml4KS4gV2UgbmVlZCBhIHdheSB0byBzdG9yZSB0aGUgdW5jb21wZW5zYXRlZCB2YWx1ZSBzbyB0aGF0IGF0IHRoZSBlbmQgb2YgdGhlIHR3ZWVuLCB3ZSBzZXQgaXQgdG8gZXhhY3RseSB3aGF0IHdhcyByZXF1ZXN0ZWQgd2l0aCBubyBkaXJlY3Rpb25hbCBjb21wZW5zYXRpb24pLiBQcm9wZXJ0eSBuYW1lIHdvdWxkIGJlIFwicm90YXRpb25cIiwgXCJyb3RhdGlvblhcIiwgb3IgXCJyb3RhdGlvbllcIlxuXHRcdFx0ICogQHBhcmFtIHtPYmplY3Q9fSBkaXJlY3Rpb25hbEVuZCBBbiBvYmplY3QgdGhhdCB3aWxsIHN0b3JlIHRoZSByYXcgZW5kIHZhbHVlcyBmb3IgZGlyZWN0aW9uYWwgYW5nbGVzIChcIl9zaG9ydFwiLCBcIl9jd1wiLCBvciBcIl9jY3dcIiBzdWZmaXgpLiBXZSBuZWVkIGEgd2F5IHRvIHN0b3JlIHRoZSB1bmNvbXBlbnNhdGVkIHZhbHVlIHNvIHRoYXQgYXQgdGhlIGVuZCBvZiB0aGUgdHdlZW4sIHdlIHNldCBpdCB0byBleGFjdGx5IHdoYXQgd2FzIHJlcXVlc3RlZCB3aXRoIG5vIGRpcmVjdGlvbmFsIGNvbXBlbnNhdGlvbi5cblx0XHRcdCAqIEByZXR1cm4ge251bWJlcn0gcGFyc2VkIGFuZ2xlIGluIHJhZGlhbnNcblx0XHRcdCAqL1xuXHRcdFx0X3BhcnNlQW5nbGUgPSBmdW5jdGlvbih2LCBkLCBwLCBkaXJlY3Rpb25hbEVuZCkge1xuXHRcdFx0XHR2YXIgbWluID0gMC4wMDAwMDEsXG5cdFx0XHRcdFx0Y2FwLCBzcGxpdCwgZGlmLCByZXN1bHQsIGlzUmVsYXRpdmU7XG5cdFx0XHRcdGlmICh0eXBlb2YodikgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdHYgPSB2KF9pbmRleCwgX3RhcmdldCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHYgPT0gbnVsbCkge1xuXHRcdFx0XHRcdHJlc3VsdCA9IGQ7XG5cdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mKHYpID09PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdFx0cmVzdWx0ID0gdjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjYXAgPSAzNjA7XG5cdFx0XHRcdFx0c3BsaXQgPSB2LnNwbGl0KFwiX1wiKTtcblx0XHRcdFx0XHRpc1JlbGF0aXZlID0gKHYuY2hhckF0KDEpID09PSBcIj1cIik7XG5cdFx0XHRcdFx0ZGlmID0gKGlzUmVsYXRpdmUgPyBwYXJzZUludCh2LmNoYXJBdCgwKSArIFwiMVwiLCAxMCkgKiBwYXJzZUZsb2F0KHNwbGl0WzBdLnN1YnN0cigyKSkgOiBwYXJzZUZsb2F0KHNwbGl0WzBdKSkgKiAoKHYuaW5kZXhPZihcInJhZFwiKSA9PT0gLTEpID8gMSA6IF9SQUQyREVHKSAtIChpc1JlbGF0aXZlID8gMCA6IGQpO1xuXHRcdFx0XHRcdGlmIChzcGxpdC5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdGlmIChkaXJlY3Rpb25hbEVuZCkge1xuXHRcdFx0XHRcdFx0XHRkaXJlY3Rpb25hbEVuZFtwXSA9IGQgKyBkaWY7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAodi5pbmRleE9mKFwic2hvcnRcIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0XHRcdGRpZiA9IGRpZiAlIGNhcDtcblx0XHRcdFx0XHRcdFx0aWYgKGRpZiAhPT0gZGlmICUgKGNhcCAvIDIpKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZGlmID0gKGRpZiA8IDApID8gZGlmICsgY2FwIDogZGlmIC0gY2FwO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAodi5pbmRleE9mKFwiX2N3XCIpICE9PSAtMSAmJiBkaWYgPCAwKSB7XG5cdFx0XHRcdFx0XHRcdGRpZiA9ICgoZGlmICsgY2FwICogOTk5OTk5OTk5OSkgJSBjYXApIC0gKChkaWYgLyBjYXApIHwgMCkgKiBjYXA7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHYuaW5kZXhPZihcImNjd1wiKSAhPT0gLTEgJiYgZGlmID4gMCkge1xuXHRcdFx0XHRcdFx0XHRkaWYgPSAoKGRpZiAtIGNhcCAqIDk5OTk5OTk5OTkpICUgY2FwKSAtICgoZGlmIC8gY2FwKSB8IDApICogY2FwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXN1bHQgPSBkICsgZGlmO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChyZXN1bHQgPCBtaW4gJiYgcmVzdWx0ID4gLW1pbikge1xuXHRcdFx0XHRcdHJlc3VsdCA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH0sXG5cblx0XHRcdF9jb2xvckxvb2t1cCA9IHthcXVhOlswLDI1NSwyNTVdLFxuXHRcdFx0XHRsaW1lOlswLDI1NSwwXSxcblx0XHRcdFx0c2lsdmVyOlsxOTIsMTkyLDE5Ml0sXG5cdFx0XHRcdGJsYWNrOlswLDAsMF0sXG5cdFx0XHRcdG1hcm9vbjpbMTI4LDAsMF0sXG5cdFx0XHRcdHRlYWw6WzAsMTI4LDEyOF0sXG5cdFx0XHRcdGJsdWU6WzAsMCwyNTVdLFxuXHRcdFx0XHRuYXZ5OlswLDAsMTI4XSxcblx0XHRcdFx0d2hpdGU6WzI1NSwyNTUsMjU1XSxcblx0XHRcdFx0ZnVjaHNpYTpbMjU1LDAsMjU1XSxcblx0XHRcdFx0b2xpdmU6WzEyOCwxMjgsMF0sXG5cdFx0XHRcdHllbGxvdzpbMjU1LDI1NSwwXSxcblx0XHRcdFx0b3JhbmdlOlsyNTUsMTY1LDBdLFxuXHRcdFx0XHRncmF5OlsxMjgsMTI4LDEyOF0sXG5cdFx0XHRcdHB1cnBsZTpbMTI4LDAsMTI4XSxcblx0XHRcdFx0Z3JlZW46WzAsMTI4LDBdLFxuXHRcdFx0XHRyZWQ6WzI1NSwwLDBdLFxuXHRcdFx0XHRwaW5rOlsyNTUsMTkyLDIwM10sXG5cdFx0XHRcdGN5YW46WzAsMjU1LDI1NV0sXG5cdFx0XHRcdHRyYW5zcGFyZW50OlsyNTUsMjU1LDI1NSwwXX0sXG5cblx0XHRcdF9odWUgPSBmdW5jdGlvbihoLCBtMSwgbTIpIHtcblx0XHRcdFx0aCA9IChoIDwgMCkgPyBoICsgMSA6IChoID4gMSkgPyBoIC0gMSA6IGg7XG5cdFx0XHRcdHJldHVybiAoKCgoaCAqIDYgPCAxKSA/IG0xICsgKG0yIC0gbTEpICogaCAqIDYgOiAoaCA8IDAuNSkgPyBtMiA6IChoICogMyA8IDIpID8gbTEgKyAobTIgLSBtMSkgKiAoMiAvIDMgLSBoKSAqIDYgOiBtMSkgKiAyNTUpICsgMC41KSB8IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBwcml2YXRlIFBhcnNlcyBhIGNvbG9yIChsaWtlICM5RjAsICNGRjk5MDAsIHJnYigyNTUsNTEsMTUzKSBvciBoc2woMTA4LCA1MCUsIDEwJSkpIGludG8gYW4gYXJyYXkgd2l0aCAzIGVsZW1lbnRzIGZvciByZWQsIGdyZWVuLCBhbmQgYmx1ZSBvciBpZiB0b0hTTCBwYXJhbWV0ZXIgaXMgdHJ1ZSwgaXQgd2lsbCBwb3B1bGF0ZSB0aGUgYXJyYXkgd2l0aCBodWUsIHNhdHVyYXRpb24sIGFuZCBsaWdodG5lc3MgdmFsdWVzLiBJZiBhIHJlbGF0aXZlIHZhbHVlIGlzIGZvdW5kIGluIGFuIGhzbCgpIG9yIGhzbGEoKSBzdHJpbmcsIGl0IHdpbGwgcHJlc2VydmUgdGhvc2UgcmVsYXRpdmUgcHJlZml4ZXMgYW5kIGFsbCB0aGUgdmFsdWVzIGluIHRoZSBhcnJheSB3aWxsIGJlIHN0cmluZ3MgaW5zdGVhZCBvZiBudW1iZXJzIChpbiBhbGwgb3RoZXIgY2FzZXMgaXQgd2lsbCBiZSBwb3B1bGF0ZWQgd2l0aCBudW1iZXJzKS5cblx0XHRcdCAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpfSB2IFRoZSB2YWx1ZSB0aGUgc2hvdWxkIGJlIHBhcnNlZCB3aGljaCBjb3VsZCBiZSBhIHN0cmluZyBsaWtlICM5RjAgb3IgcmdiKDI1NSwxMDIsNTEpIG9yIHJnYmEoMjU1LDAsMCwwLjUpIG9yIGl0IGNvdWxkIGJlIGEgbnVtYmVyIGxpa2UgMHhGRjAwQ0Mgb3IgZXZlbiBhIG5hbWVkIGNvbG9yIGxpa2UgcmVkLCBibHVlLCBwdXJwbGUsIGV0Yy5cblx0XHRcdCAqIEBwYXJhbSB7KGJvb2xlYW4pfSB0b0hTTCBJZiB0cnVlLCBhbiBoc2woKSBvciBoc2xhKCkgdmFsdWUgd2lsbCBiZSByZXR1cm5lZCBpbnN0ZWFkIG9mIHJnYigpIG9yIHJnYmEoKVxuXHRcdFx0ICogQHJldHVybiB7QXJyYXkuPG51bWJlcj59IEFuIGFycmF5IGNvbnRhaW5pbmcgcmVkLCBncmVlbiwgYW5kIGJsdWUgKGFuZCBvcHRpb25hbGx5IGFscGhhKSBpbiB0aGF0IG9yZGVyLCBvciBpZiB0aGUgdG9IU0wgcGFyYW1ldGVyIHdhcyB0cnVlLCB0aGUgYXJyYXkgd2lsbCBjb250YWluIGh1ZSwgc2F0dXJhdGlvbiBhbmQgbGlnaHRuZXNzIChhbmQgb3B0aW9uYWxseSBhbHBoYSkgaW4gdGhhdCBvcmRlci4gQWx3YXlzIG51bWJlcnMgdW5sZXNzIHRoZXJlJ3MgYSByZWxhdGl2ZSBwcmVmaXggZm91bmQgaW4gYW4gaHNsKCkgb3IgaHNsYSgpIHN0cmluZyBhbmQgdG9IU0wgaXMgdHJ1ZS5cblx0XHRcdCAqL1xuXHRcdFx0X3BhcnNlQ29sb3IgPSBDU1NQbHVnaW4ucGFyc2VDb2xvciA9IGZ1bmN0aW9uKHYsIHRvSFNMKSB7XG5cdFx0XHRcdHZhciBhLCByLCBnLCBiLCBoLCBzLCBsLCBtYXgsIG1pbiwgZCwgd2FzSFNMO1xuXHRcdFx0XHRpZiAoIXYpIHtcblx0XHRcdFx0XHRhID0gX2NvbG9yTG9va3VwLmJsYWNrO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZih2KSA9PT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHRcdGEgPSBbdiA+PiAxNiwgKHYgPj4gOCkgJiAyNTUsIHYgJiAyNTVdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmICh2LmNoYXJBdCh2Lmxlbmd0aCAtIDEpID09PSBcIixcIikgeyAvL3NvbWV0aW1lcyBhIHRyYWlsaW5nIGNvbW1hIGlzIGluY2x1ZGVkIGFuZCB3ZSBzaG91bGQgY2hvcCBpdCBvZmYgKHR5cGljYWxseSBmcm9tIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgdmFsdWVzIGxpa2UgYSB0ZXh0U2hhZG93OlwiMnB4IDJweCAycHggYmx1ZSwgNXB4IDVweCA1cHggcmdiKDI1NSwwLDApXCIgLSBpbiB0aGlzIGV4YW1wbGUgXCJibHVlLFwiIGhhcyBhIHRyYWlsaW5nIGNvbW1hLiBXZSBjb3VsZCBzdHJpcCBpdCBvdXQgaW5zaWRlIHBhcnNlQ29tcGxleCgpIGJ1dCB3ZSdkIG5lZWQgdG8gZG8gaXQgdG8gdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyBwbHVzIGl0IHdvdWxkbid0IHByb3ZpZGUgcHJvdGVjdGlvbiBmcm9tIG90aGVyIHBvdGVudGlhbCBzY2VuYXJpb3MgbGlrZSBpZiB0aGUgdXNlciBwYXNzZXMgaW4gYSBzaW1pbGFyIHZhbHVlLlxuXHRcdFx0XHRcdFx0diA9IHYuc3Vic3RyKDAsIHYubGVuZ3RoIC0gMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChfY29sb3JMb29rdXBbdl0pIHtcblx0XHRcdFx0XHRcdGEgPSBfY29sb3JMb29rdXBbdl07XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh2LmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcblx0XHRcdFx0XHRcdGlmICh2Lmxlbmd0aCA9PT0gNCkgeyAvL2ZvciBzaG9ydGhhbmQgbGlrZSAjOUYwXG5cdFx0XHRcdFx0XHRcdHIgPSB2LmNoYXJBdCgxKTtcblx0XHRcdFx0XHRcdFx0ZyA9IHYuY2hhckF0KDIpO1xuXHRcdFx0XHRcdFx0XHRiID0gdi5jaGFyQXQoMyk7XG5cdFx0XHRcdFx0XHRcdHYgPSBcIiNcIiArIHIgKyByICsgZyArIGcgKyBiICsgYjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHYgPSBwYXJzZUludCh2LnN1YnN0cigxKSwgMTYpO1xuXHRcdFx0XHRcdFx0YSA9IFt2ID4+IDE2LCAodiA+PiA4KSAmIDI1NSwgdiAmIDI1NV07XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh2LnN1YnN0cigwLCAzKSA9PT0gXCJoc2xcIikge1xuXHRcdFx0XHRcdFx0YSA9IHdhc0hTTCA9IHYubWF0Y2goX251bUV4cCk7XG5cdFx0XHRcdFx0XHRpZiAoIXRvSFNMKSB7XG5cdFx0XHRcdFx0XHRcdGggPSAoTnVtYmVyKGFbMF0pICUgMzYwKSAvIDM2MDtcblx0XHRcdFx0XHRcdFx0cyA9IE51bWJlcihhWzFdKSAvIDEwMDtcblx0XHRcdFx0XHRcdFx0bCA9IE51bWJlcihhWzJdKSAvIDEwMDtcblx0XHRcdFx0XHRcdFx0ZyA9IChsIDw9IDAuNSkgPyBsICogKHMgKyAxKSA6IGwgKyBzIC0gbCAqIHM7XG5cdFx0XHRcdFx0XHRcdHIgPSBsICogMiAtIGc7XG5cdFx0XHRcdFx0XHRcdGlmIChhLmxlbmd0aCA+IDMpIHtcblx0XHRcdFx0XHRcdFx0XHRhWzNdID0gTnVtYmVyKGFbM10pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGFbMF0gPSBfaHVlKGggKyAxIC8gMywgciwgZyk7XG5cdFx0XHRcdFx0XHRcdGFbMV0gPSBfaHVlKGgsIHIsIGcpO1xuXHRcdFx0XHRcdFx0XHRhWzJdID0gX2h1ZShoIC0gMSAvIDMsIHIsIGcpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICh2LmluZGV4T2YoXCI9XCIpICE9PSAtMSkgeyAvL2lmIHJlbGF0aXZlIHZhbHVlcyBhcmUgZm91bmQsIGp1c3QgcmV0dXJuIHRoZSByYXcgc3RyaW5ncyB3aXRoIHRoZSByZWxhdGl2ZSBwcmVmaXhlcyBpbiBwbGFjZS5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHYubWF0Y2goX3JlbE51bUV4cCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGEgPSB2Lm1hdGNoKF9udW1FeHApIHx8IF9jb2xvckxvb2t1cC50cmFuc3BhcmVudDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YVswXSA9IE51bWJlcihhWzBdKTtcblx0XHRcdFx0XHRhWzFdID0gTnVtYmVyKGFbMV0pO1xuXHRcdFx0XHRcdGFbMl0gPSBOdW1iZXIoYVsyXSk7XG5cdFx0XHRcdFx0aWYgKGEubGVuZ3RoID4gMykge1xuXHRcdFx0XHRcdFx0YVszXSA9IE51bWJlcihhWzNdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRvSFNMICYmICF3YXNIU0wpIHtcblx0XHRcdFx0XHRyID0gYVswXSAvIDI1NTtcblx0XHRcdFx0XHRnID0gYVsxXSAvIDI1NTtcblx0XHRcdFx0XHRiID0gYVsyXSAvIDI1NTtcblx0XHRcdFx0XHRtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcblx0XHRcdFx0XHRtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcblx0XHRcdFx0XHRsID0gKG1heCArIG1pbikgLyAyO1xuXHRcdFx0XHRcdGlmIChtYXggPT09IG1pbikge1xuXHRcdFx0XHRcdFx0aCA9IHMgPSAwO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRkID0gbWF4IC0gbWluO1xuXHRcdFx0XHRcdFx0cyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuXHRcdFx0XHRcdFx0aCA9IChtYXggPT09IHIpID8gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCkgOiAobWF4ID09PSBnKSA/IChiIC0gcikgLyBkICsgMiA6IChyIC0gZykgLyBkICsgNDtcblx0XHRcdFx0XHRcdGggKj0gNjA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGFbMF0gPSAoaCArIDAuNSkgfCAwO1xuXHRcdFx0XHRcdGFbMV0gPSAocyAqIDEwMCArIDAuNSkgfCAwO1xuXHRcdFx0XHRcdGFbMl0gPSAobCAqIDEwMCArIDAuNSkgfCAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBhO1xuXHRcdFx0fSxcblx0XHRcdF9mb3JtYXRDb2xvcnMgPSBmdW5jdGlvbihzLCB0b0hTTCkge1xuXHRcdFx0XHR2YXIgY29sb3JzID0gcy5tYXRjaChfY29sb3JFeHApIHx8IFtdLFxuXHRcdFx0XHRcdGNoYXJJbmRleCA9IDAsXG5cdFx0XHRcdFx0cGFyc2VkID0gXCJcIixcblx0XHRcdFx0XHRpLCBjb2xvciwgdGVtcDtcblx0XHRcdFx0aWYgKCFjb2xvcnMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHM7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGNvbG9ycy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGNvbG9yID0gY29sb3JzW2ldO1xuXHRcdFx0XHRcdHRlbXAgPSBzLnN1YnN0cihjaGFySW5kZXgsIHMuaW5kZXhPZihjb2xvciwgY2hhckluZGV4KS1jaGFySW5kZXgpO1xuXHRcdFx0XHRcdGNoYXJJbmRleCArPSB0ZW1wLmxlbmd0aCArIGNvbG9yLmxlbmd0aDtcblx0XHRcdFx0XHRjb2xvciA9IF9wYXJzZUNvbG9yKGNvbG9yLCB0b0hTTCk7XG5cdFx0XHRcdFx0aWYgKGNvbG9yLmxlbmd0aCA9PT0gMykge1xuXHRcdFx0XHRcdFx0Y29sb3IucHVzaCgxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cGFyc2VkICs9IHRlbXAgKyAodG9IU0wgPyBcImhzbGEoXCIgKyBjb2xvclswXSArIFwiLFwiICsgY29sb3JbMV0gKyBcIiUsXCIgKyBjb2xvclsyXSArIFwiJSxcIiArIGNvbG9yWzNdIDogXCJyZ2JhKFwiICsgY29sb3Iuam9pbihcIixcIikpICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHBhcnNlZCArIHMuc3Vic3RyKGNoYXJJbmRleCk7XG5cdFx0XHR9LFxuXHRcdFx0X2NvbG9yRXhwID0gXCIoPzpcXFxcYig/Oig/OnJnYnxyZ2JhfGhzbHxoc2xhKVxcXFwoLis/XFxcXCkpfFxcXFxCIyg/OlswLTlhLWZdezN9KXsxLDJ9XFxcXGJcIjsgLy93ZSdsbCBkeW5hbWljYWxseSBidWlsZCB0aGlzIFJlZ3VsYXIgRXhwcmVzc2lvbiB0byBjb25zZXJ2ZSBmaWxlIHNpemUuIEFmdGVyIGJ1aWxkaW5nIGl0LCBpdCB3aWxsIGJlIGFibGUgdG8gZmluZCByZ2IoKSwgcmdiYSgpLCAjIChoZXhhZGVjaW1hbCksIGFuZCBuYW1lZCBjb2xvciB2YWx1ZXMgbGlrZSByZWQsIGJsdWUsIHB1cnBsZSwgZXRjLlxuXG5cdFx0Zm9yIChwIGluIF9jb2xvckxvb2t1cCkge1xuXHRcdFx0X2NvbG9yRXhwICs9IFwifFwiICsgcCArIFwiXFxcXGJcIjtcblx0XHR9XG5cdFx0X2NvbG9yRXhwID0gbmV3IFJlZ0V4cChfY29sb3JFeHArXCIpXCIsIFwiZ2lcIik7XG5cblx0XHRDU1NQbHVnaW4uY29sb3JTdHJpbmdGaWx0ZXIgPSBmdW5jdGlvbihhKSB7XG5cdFx0XHR2YXIgY29tYmluZWQgPSBhWzBdICsgXCIgXCIgKyBhWzFdLFxuXHRcdFx0XHR0b0hTTDtcblx0XHRcdGlmIChfY29sb3JFeHAudGVzdChjb21iaW5lZCkpIHtcblx0XHRcdFx0dG9IU0wgPSAoY29tYmluZWQuaW5kZXhPZihcImhzbChcIikgIT09IC0xIHx8IGNvbWJpbmVkLmluZGV4T2YoXCJoc2xhKFwiKSAhPT0gLTEpO1xuXHRcdFx0XHRhWzBdID0gX2Zvcm1hdENvbG9ycyhhWzBdLCB0b0hTTCk7XG5cdFx0XHRcdGFbMV0gPSBfZm9ybWF0Q29sb3JzKGFbMV0sIHRvSFNMKTtcblx0XHRcdH1cblx0XHRcdF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXHRcdH07XG5cblx0XHRpZiAoIVR3ZWVuTGl0ZS5kZWZhdWx0U3RyaW5nRmlsdGVyKSB7XG5cdFx0XHRUd2VlbkxpdGUuZGVmYXVsdFN0cmluZ0ZpbHRlciA9IENTU1BsdWdpbi5jb2xvclN0cmluZ0ZpbHRlcjtcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZSBSZXR1cm5zIGEgZm9ybWF0dGVyIGZ1bmN0aW9uIHRoYXQgaGFuZGxlcyB0YWtpbmcgYSBzdHJpbmcgKG9yIG51bWJlciBpbiBzb21lIGNhc2VzKSBhbmQgcmV0dXJuaW5nIGEgY29uc2lzdGVudGx5IGZvcm1hdHRlZCBvbmUgaW4gdGVybXMgb2YgZGVsaW1pdGVycywgcXVhbnRpdHkgb2YgdmFsdWVzLCBldGMuIEZvciBleGFtcGxlLCB3ZSBtYXkgZ2V0IGJveFNoYWRvdyB2YWx1ZXMgZGVmaW5lZCBhcyBcIjBweCByZWRcIiBvciBcIjBweCAwcHggMTBweCByZ2IoMjU1LDAsMClcIiBvciBcIjBweCAwcHggMjBweCAyMHB4ICNGMDBcIiBhbmQgd2UgbmVlZCB0byBlbnN1cmUgdGhhdCB3aGF0IHdlIGdldCBiYWNrIGlzIGRlc2NyaWJlZCB3aXRoIDQgbnVtYmVycyBhbmQgYSBjb2xvci4gVGhpcyBhbGxvd3MgdXMgdG8gZmVlZCBpdCBpbnRvIHRoZSBfcGFyc2VDb21wbGV4KCkgbWV0aG9kIGFuZCBzcGxpdCB0aGUgdmFsdWVzIHVwIGFwcHJvcHJpYXRlbHkuIFRoZSBuZWF0IHRoaW5nIGFib3V0IHRoaXMgX2dldEZvcm1hdHRlcigpIGZ1bmN0aW9uIGlzIHRoYXQgdGhlIGRmbHQgZGVmaW5lcyBhIHBhdHRlcm4gYXMgd2VsbCBhcyBhIGRlZmF1bHQsIHNvIGZvciBleGFtcGxlLCBfZ2V0Rm9ybWF0dGVyKFwiMHB4IDBweCAwcHggMHB4ICM3NzdcIiwgdHJ1ZSkgbm90IG9ubHkgc2V0cyB0aGUgZGVmYXVsdCBhcyAwcHggZm9yIGFsbCBkaXN0YW5jZXMgYW5kICM3NzcgZm9yIHRoZSBjb2xvciwgYnV0IGFsc28gc2V0cyB0aGUgcGF0dGVybiBzdWNoIHRoYXQgNCBudW1iZXJzIGFuZCBhIGNvbG9yIHdpbGwgYWx3YXlzIGdldCByZXR1cm5lZC5cblx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IGRmbHQgVGhlIGRlZmF1bHQgdmFsdWUgYW5kIHBhdHRlcm4gdG8gZm9sbG93LiBTbyBcIjBweCAwcHggMHB4IDBweCAjNzc3XCIgd2lsbCBlbnN1cmUgdGhhdCA0IG51bWJlcnMgYW5kIGEgY29sb3Igd2lsbCBhbHdheXMgZ2V0IHJldHVybmVkLlxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IGNsciBJZiB0cnVlLCB0aGUgdmFsdWVzIHNob3VsZCBiZSBzZWFyY2hlZCBmb3IgY29sb3ItcmVsYXRlZCBkYXRhLiBGb3IgZXhhbXBsZSwgYm94U2hhZG93IHZhbHVlcyB0eXBpY2FsbHkgY29udGFpbiBhIGNvbG9yIHdoZXJlYXMgYm9yZGVyUmFkaXVzIGRvbid0LlxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IGNvbGxhcHNpYmxlIElmIHRydWUsIHRoZSB2YWx1ZSBpcyBhIHRvcC9sZWZ0L3JpZ2h0L2JvdHRvbSBzdHlsZSBvbmUgdGhhdCBhY3RzIGxpa2UgbWFyZ2luIG9yIHBhZGRpbmcsIHdoZXJlIGlmIG9ubHkgb25lIHZhbHVlIGlzIHJlY2VpdmVkLCBpdCdzIHVzZWQgZm9yIGFsbCA0OyBpZiAyIGFyZSByZWNlaXZlZCwgdGhlIGZpcnN0IGlzIGR1cGxpY2F0ZWQgZm9yIDNyZCAoYm90dG9tKSBhbmQgdGhlIDJuZCBpcyBkdXBsaWNhdGVkIGZvciB0aGUgNHRoIHNwb3QgKGxlZnQpLCBldGMuXG5cdFx0ICogQHJldHVybiB7RnVuY3Rpb259IGZvcm1hdHRlciBmdW5jdGlvblxuXHRcdCAqL1xuXHRcdHZhciBfZ2V0Rm9ybWF0dGVyID0gZnVuY3Rpb24oZGZsdCwgY2xyLCBjb2xsYXBzaWJsZSwgbXVsdGkpIHtcblx0XHRcdFx0aWYgKGRmbHQgPT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbih2KSB7cmV0dXJuIHY7fTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgZENvbG9yID0gY2xyID8gKGRmbHQubWF0Y2goX2NvbG9yRXhwKSB8fCBbXCJcIl0pWzBdIDogXCJcIixcblx0XHRcdFx0XHRkVmFscyA9IGRmbHQuc3BsaXQoZENvbG9yKS5qb2luKFwiXCIpLm1hdGNoKF92YWx1ZXNFeHApIHx8IFtdLFxuXHRcdFx0XHRcdHBmeCA9IGRmbHQuc3Vic3RyKDAsIGRmbHQuaW5kZXhPZihkVmFsc1swXSkpLFxuXHRcdFx0XHRcdHNmeCA9IChkZmx0LmNoYXJBdChkZmx0Lmxlbmd0aCAtIDEpID09PSBcIilcIikgPyBcIilcIiA6IFwiXCIsXG5cdFx0XHRcdFx0ZGVsaW0gPSAoZGZsdC5pbmRleE9mKFwiIFwiKSAhPT0gLTEpID8gXCIgXCIgOiBcIixcIixcblx0XHRcdFx0XHRudW1WYWxzID0gZFZhbHMubGVuZ3RoLFxuXHRcdFx0XHRcdGRTZnggPSAobnVtVmFscyA+IDApID8gZFZhbHNbMF0ucmVwbGFjZShfbnVtRXhwLCBcIlwiKSA6IFwiXCIsXG5cdFx0XHRcdFx0Zm9ybWF0dGVyO1xuXHRcdFx0XHRpZiAoIW51bVZhbHMpIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24odikge3JldHVybiB2O307XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGNscikge1xuXHRcdFx0XHRcdGZvcm1hdHRlciA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0XHRcdHZhciBjb2xvciwgdmFscywgaSwgYTtcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YodikgPT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0XHRcdFx0diArPSBkU2Z4O1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChtdWx0aSAmJiBfY29tbWFzT3V0c2lkZVBhcmVuRXhwLnRlc3QodikpIHtcblx0XHRcdFx0XHRcdFx0YSA9IHYucmVwbGFjZShfY29tbWFzT3V0c2lkZVBhcmVuRXhwLCBcInxcIikuc3BsaXQoXCJ8XCIpO1xuXHRcdFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRcdGFbaV0gPSBmb3JtYXR0ZXIoYVtpXSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIGEuam9pbihcIixcIik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjb2xvciA9ICh2Lm1hdGNoKF9jb2xvckV4cCkgfHwgW2RDb2xvcl0pWzBdO1xuXHRcdFx0XHRcdFx0dmFscyA9IHYuc3BsaXQoY29sb3IpLmpvaW4oXCJcIikubWF0Y2goX3ZhbHVlc0V4cCkgfHwgW107XG5cdFx0XHRcdFx0XHRpID0gdmFscy5sZW5ndGg7XG5cdFx0XHRcdFx0XHRpZiAobnVtVmFscyA+IGktLSkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoKytpIDwgbnVtVmFscykge1xuXHRcdFx0XHRcdFx0XHRcdHZhbHNbaV0gPSBjb2xsYXBzaWJsZSA/IHZhbHNbKCgoaSAtIDEpIC8gMikgfCAwKV0gOiBkVmFsc1tpXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIHBmeCArIHZhbHMuam9pbihkZWxpbSkgKyBkZWxpbSArIGNvbG9yICsgc2Z4ICsgKHYuaW5kZXhPZihcImluc2V0XCIpICE9PSAtMSA/IFwiIGluc2V0XCIgOiBcIlwiKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdHJldHVybiBmb3JtYXR0ZXI7XG5cblx0XHRcdFx0fVxuXHRcdFx0XHRmb3JtYXR0ZXIgPSBmdW5jdGlvbih2KSB7XG5cdFx0XHRcdFx0dmFyIHZhbHMsIGEsIGk7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZih2KSA9PT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHRcdFx0diArPSBkU2Z4O1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAobXVsdGkgJiYgX2NvbW1hc091dHNpZGVQYXJlbkV4cC50ZXN0KHYpKSB7XG5cdFx0XHRcdFx0XHRhID0gdi5yZXBsYWNlKF9jb21tYXNPdXRzaWRlUGFyZW5FeHAsIFwifFwiKS5zcGxpdChcInxcIik7XG5cdFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRhW2ldID0gZm9ybWF0dGVyKGFbaV0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIGEuam9pbihcIixcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhbHMgPSB2Lm1hdGNoKGRlbGltID09PSBcIixcIiA/IF92YWx1ZXNFeHAgOiBfdmFsdWVzRXhwV2l0aENvbW1hcykgfHwgW107XG5cdFx0XHRcdFx0aSA9IHZhbHMubGVuZ3RoO1xuXHRcdFx0XHRcdGlmIChudW1WYWxzID4gaS0tKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoKytpIDwgbnVtVmFscykge1xuXHRcdFx0XHRcdFx0XHR2YWxzW2ldID0gY29sbGFwc2libGUgPyB2YWxzWygoKGkgLSAxKSAvIDIpIHwgMCldIDogZFZhbHNbaV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiAoKHBmeCAmJiB2ICE9PSBcIm5vbmVcIikgPyB2LnN1YnN0cigwLCB2LmluZGV4T2YodmFsc1swXSkpIHx8IHBmeCA6IHBmeCkgKyB2YWxzLmpvaW4oZGVsaW0pICsgc2Z4OyAvL25vdGU6IHByZWZpeCBtaWdodCBiZSBkaWZmZXJlbnQsIGxpa2UgZm9yIGNsaXBQYXRoIGl0IGNvdWxkIHN0YXJ0IHdpdGggaW5zZXQoIG9yIHBvbHlnb24oXG5cdFx0XHRcdH07XG5cdFx0XHRcdHJldHVybiBmb3JtYXR0ZXI7XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBwcml2YXRlIHJldHVybnMgYSBmb3JtYXR0ZXIgZnVuY3Rpb24gdGhhdCdzIHVzZWQgZm9yIGVkZ2UtcmVsYXRlZCB2YWx1ZXMgbGlrZSBtYXJnaW5Ub3AsIG1hcmdpbkxlZnQsIHBhZGRpbmdCb3R0b20sIHBhZGRpbmdSaWdodCwgZXRjLiBKdXN0IHBhc3MgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcyByZWxhdGVkIHRvIHRoZSBlZGdlcy5cblx0XHRcdCAqIEBwYXJhbSB7IXN0cmluZ30gcHJvcHMgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcyBpbiBvcmRlciBmcm9tIHRvcCB0byBsZWZ0LCBsaWtlIFwibWFyZ2luVG9wLG1hcmdpblJpZ2h0LG1hcmdpbkJvdHRvbSxtYXJnaW5MZWZ0XCJcblx0XHRcdCAqIEByZXR1cm4ge0Z1bmN0aW9ufSBhIGZvcm1hdHRlciBmdW5jdGlvblxuXHRcdFx0ICovXG5cdFx0XHRfZ2V0RWRnZVBhcnNlciA9IGZ1bmN0aW9uKHByb3BzKSB7XG5cdFx0XHRcdHByb3BzID0gcHJvcHMuc3BsaXQoXCIsXCIpO1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbiwgdmFycykge1xuXHRcdFx0XHRcdHZhciBhID0gKGUgKyBcIlwiKS5zcGxpdChcIiBcIiksXG5cdFx0XHRcdFx0XHRpO1xuXHRcdFx0XHRcdHZhcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdFx0XHRcdFx0XHR2YXJzW3Byb3BzW2ldXSA9IGFbaV0gPSBhW2ldIHx8IGFbKCgoaSAtIDEpIC8gMikgPj4gMCldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gY3NzcC5wYXJzZSh0LCB2YXJzLCBwdCwgcGx1Z2luKTtcblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEBwcml2YXRlIHVzZWQgd2hlbiBvdGhlciBwbHVnaW5zIG11c3QgdHdlZW4gdmFsdWVzIGZpcnN0LCBsaWtlIEJlemllclBsdWdpbiBvciBUaHJvd1Byb3BzUGx1Z2luLCBldGMuIFRoYXQgcGx1Z2luJ3Mgc2V0UmF0aW8oKSBnZXRzIGNhbGxlZCBmaXJzdCBzbyB0aGF0IHRoZSB2YWx1ZXMgYXJlIHVwZGF0ZWQsIGFuZCB0aGVuIHdlIGxvb3AgdGhyb3VnaCB0aGUgTWluaVByb3BUd2VlbnMgd2hpY2ggaGFuZGxlIGNvcHlpbmcgdGhlIHZhbHVlcyBpbnRvIHRoZWlyIGFwcHJvcHJpYXRlIHNsb3RzIHNvIHRoYXQgdGhleSBjYW4gdGhlbiBiZSBhcHBsaWVkIGNvcnJlY3RseSBpbiB0aGUgbWFpbiBDU1NQbHVnaW4gc2V0UmF0aW8oKSBtZXRob2QuIFJlbWVtYmVyLCB3ZSB0eXBpY2FsbHkgY3JlYXRlIGEgcHJveHkgb2JqZWN0IHRoYXQgaGFzIGEgYnVuY2ggb2YgdW5pcXVlbHktbmFtZWQgcHJvcGVydGllcyB0aGF0IHdlIGZlZWQgdG8gdGhlIHN1Yi1wbHVnaW4gYW5kIGl0IGRvZXMgaXRzIG1hZ2ljIG5vcm1hbGx5LCBhbmQgdGhlbiB3ZSBtdXN0IGludGVycHJldCB0aG9zZSB2YWx1ZXMgYW5kIGFwcGx5IHRoZW0gdG8gdGhlIGNzcyBiZWNhdXNlIG9mdGVuIG51bWJlcnMgbXVzdCBnZXQgY29tYmluZWQvY29uY2F0ZW5hdGVkLCBzdWZmaXhlcyBhZGRlZCwgZXRjLiB0byB3b3JrIHdpdGggY3NzLCBsaWtlIGJveFNoYWRvdyBjb3VsZCBoYXZlIDQgdmFsdWVzIHBsdXMgYSBjb2xvci5cblx0XHRcdF9zZXRQbHVnaW5SYXRpbyA9IF9pbnRlcm5hbHMuX3NldFBsdWdpblJhdGlvID0gZnVuY3Rpb24odikge1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXRSYXRpbyh2KTtcblx0XHRcdFx0dmFyIGQgPSB0aGlzLmRhdGEsXG5cdFx0XHRcdFx0cHJveHkgPSBkLnByb3h5LFxuXHRcdFx0XHRcdG1wdCA9IGQuZmlyc3RNUFQsXG5cdFx0XHRcdFx0bWluID0gMC4wMDAwMDEsXG5cdFx0XHRcdFx0dmFsLCBwdCwgaSwgc3RyLCBwO1xuXHRcdFx0XHR3aGlsZSAobXB0KSB7XG5cdFx0XHRcdFx0dmFsID0gcHJveHlbbXB0LnZdO1xuXHRcdFx0XHRcdGlmIChtcHQucikge1xuXHRcdFx0XHRcdFx0dmFsID0gbXB0LnIodmFsKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHZhbCA8IG1pbiAmJiB2YWwgPiAtbWluKSB7XG5cdFx0XHRcdFx0XHR2YWwgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtcHQudFttcHQucF0gPSB2YWw7XG5cdFx0XHRcdFx0bXB0ID0gbXB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChkLmF1dG9Sb3RhdGUpIHtcblx0XHRcdFx0XHRkLmF1dG9Sb3RhdGUucm90YXRpb24gPSBkLm1vZCA/IGQubW9kLmNhbGwodGhpcy5fdHdlZW4sIHByb3h5LnJvdGF0aW9uLCB0aGlzLnQsIHRoaXMuX3R3ZWVuKSA6IHByb3h5LnJvdGF0aW9uOyAvL3NwZWNpYWwgY2FzZSBmb3IgTW9kaWZ5UGx1Z2luIHRvIGhvb2sgaW50byBhbiBhdXRvLXJvdGF0aW5nIGJlemllclxuXHRcdFx0XHR9XG5cdFx0XHRcdC8vYXQgdGhlIGVuZCwgd2UgbXVzdCBzZXQgdGhlIENTU1Byb3BUd2VlbidzIFwiZVwiIChlbmQpIHZhbHVlIGR5bmFtaWNhbGx5IGhlcmUgYmVjYXVzZSB0aGF0J3Mgd2hhdCBpcyB1c2VkIGluIHRoZSBmaW5hbCBzZXRSYXRpbygpIG1ldGhvZC4gU2FtZSBmb3IgXCJiXCIgYXQgdGhlIGJlZ2lubmluZy5cblx0XHRcdFx0aWYgKHYgPT09IDEgfHwgdiA9PT0gMCkge1xuXHRcdFx0XHRcdG1wdCA9IGQuZmlyc3RNUFQ7XG5cdFx0XHRcdFx0cCA9ICh2ID09PSAxKSA/IFwiZVwiIDogXCJiXCI7XG5cdFx0XHRcdFx0d2hpbGUgKG1wdCkge1xuXHRcdFx0XHRcdFx0cHQgPSBtcHQudDtcblx0XHRcdFx0XHRcdGlmICghcHQudHlwZSkge1xuXHRcdFx0XHRcdFx0XHRwdFtwXSA9IHB0LnMgKyBwdC54czA7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHB0LnR5cGUgPT09IDEpIHtcblx0XHRcdFx0XHRcdFx0c3RyID0gcHQueHMwICsgcHQucyArIHB0LnhzMTtcblx0XHRcdFx0XHRcdFx0Zm9yIChpID0gMTsgaSA8IHB0Lmw7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRcdHN0ciArPSBwdFtcInhuXCIraV0gKyBwdFtcInhzXCIrKGkrMSldO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHB0W3BdID0gc3RyO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bXB0ID0gbXB0Ll9uZXh0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAcHJpdmF0ZSBAY29uc3RydWN0b3IgVXNlZCBieSBhIGZldyBTcGVjaWFsUHJvcHMgdG8gaG9sZCBpbXBvcnRhbnQgdmFsdWVzIGZvciBwcm94aWVzLiBGb3IgZXhhbXBsZSwgX3BhcnNlVG9Qcm94eSgpIGNyZWF0ZXMgYSBNaW5pUHJvcFR3ZWVuIGluc3RhbmNlIGZvciBlYWNoIHByb3BlcnR5IHRoYXQgbXVzdCBnZXQgdHdlZW5lZCBvbiB0aGUgcHJveHksIGFuZCB3ZSByZWNvcmQgdGhlIG9yaWdpbmFsIHByb3BlcnR5IG5hbWUgYXMgd2VsbCBhcyB0aGUgdW5pcXVlIG9uZSB3ZSBjcmVhdGUgZm9yIHRoZSBwcm94eSwgcGx1cyB3aGV0aGVyIG9yIG5vdCB0aGUgdmFsdWUgbmVlZHMgdG8gYmUgcm91bmRlZCBwbHVzIHRoZSBvcmlnaW5hbCB2YWx1ZS5cblx0XHRcdCAqIEBwYXJhbSB7IU9iamVjdH0gdCB0YXJnZXQgb2JqZWN0IHdob3NlIHByb3BlcnR5IHdlJ3JlIHR3ZWVuaW5nIChvZnRlbiBhIENTU1Byb3BUd2Vlbilcblx0XHRcdCAqIEBwYXJhbSB7IXN0cmluZ30gcCBwcm9wZXJ0eSBuYW1lXG5cdFx0XHQgKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nfG9iamVjdCl9IHYgdmFsdWVcblx0XHRcdCAqIEBwYXJhbSB7TWluaVByb3BUd2Vlbj19IG5leHQgbmV4dCBNaW5pUHJvcFR3ZWVuIGluIHRoZSBsaW5rZWQgbGlzdFxuXHRcdFx0ICogQHBhcmFtIHtib29sZWFuPX0gciBpZiB0cnVlLCB0aGUgdHdlZW5lZCB2YWx1ZSBzaG91bGQgYmUgcm91bmRlZCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG5cdFx0XHQgKi9cblx0XHRcdE1pbmlQcm9wVHdlZW4gPSBmdW5jdGlvbih0LCBwLCB2LCBuZXh0LCByKSB7XG5cdFx0XHRcdHRoaXMudCA9IHQ7XG5cdFx0XHRcdHRoaXMucCA9IHA7XG5cdFx0XHRcdHRoaXMudiA9IHY7XG5cdFx0XHRcdHRoaXMuciA9IHI7XG5cdFx0XHRcdGlmIChuZXh0KSB7XG5cdFx0XHRcdFx0bmV4dC5fcHJldiA9IHRoaXM7XG5cdFx0XHRcdFx0dGhpcy5fbmV4dCA9IG5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgTW9zdCBvdGhlciBwbHVnaW5zIChsaWtlIEJlemllclBsdWdpbiBhbmQgVGhyb3dQcm9wc1BsdWdpbiBhbmQgb3RoZXJzKSBjYW4gb25seSB0d2VlbiBudW1lcmljIHZhbHVlcywgYnV0IENTU1BsdWdpbiBtdXN0IGFjY29tbW9kYXRlIHNwZWNpYWwgdmFsdWVzIHRoYXQgaGF2ZSBhIGJ1bmNoIG9mIGV4dHJhIGRhdGEgKGxpa2UgYSBzdWZmaXggb3Igc3RyaW5ncyBiZXR3ZWVuIG51bWVyaWMgdmFsdWVzLCBldGMuKS4gRm9yIGV4YW1wbGUsIGJveFNoYWRvdyBoYXMgdmFsdWVzIGxpa2UgXCIxMHB4IDEwcHggMjBweCAzMHB4IHJnYigyNTUsMCwwKVwiIHdoaWNoIHdvdWxkIHV0dGVybHkgY29uZnVzZSBvdGhlciBwbHVnaW5zLiBUaGlzIG1ldGhvZCBhbGxvd3MgdXMgdG8gc3BsaXQgdGhhdCBkYXRhIGFwYXJ0IGFuZCBncmFiIG9ubHkgdGhlIG51bWVyaWMgZGF0YSBhbmQgYXR0YWNoIGl0IHRvIHVuaXF1ZWx5LW5hbWVkIHByb3BlcnRpZXMgb2YgYSBnZW5lcmljIHByb3h5IG9iamVjdCAoe30pIHNvIHRoYXQgd2UgY2FuIGZlZWQgdGhhdCB0byB2aXJ0dWFsbHkgYW55IHBsdWdpbiB0byBoYXZlIHRoZSBudW1iZXJzIHR3ZWVuZWQuIEhvd2V2ZXIsIHdlIG11c3QgYWxzbyBrZWVwIHRyYWNrIG9mIHdoaWNoIHByb3BlcnRpZXMgZnJvbSB0aGUgcHJveHkgZ28gd2l0aCB3aGljaCBDU1NQcm9wVHdlZW4gdmFsdWVzIGFuZCBpbnN0YW5jZXMuIFNvIHdlIGNyZWF0ZSBhIGxpbmtlZCBsaXN0IG9mIE1pbmlQcm9wVHdlZW5zLiBFYWNoIG9uZSByZWNvcmRzIGEgdGFyZ2V0ICh0aGUgb3JpZ2luYWwgQ1NTUHJvcFR3ZWVuKSwgcHJvcGVydHkgKGxpa2UgXCJzXCIgb3IgXCJ4bjFcIiBvciBcInhuMlwiKSB0aGF0IHdlJ3JlIHR3ZWVuaW5nIGFuZCB0aGUgdW5pcXVlIHByb3BlcnR5IG5hbWUgdGhhdCB3YXMgdXNlZCBmb3IgdGhlIHByb3h5IChsaWtlIFwiYm94U2hhZG93X3huMVwiIGFuZCBcImJveFNoYWRvd194bjJcIikgYW5kIHdoZXRoZXIgb3Igbm90IHRoZXkgbmVlZCB0byBiZSByb3VuZGVkLiBUaGF0IHdheSwgaW4gdGhlIF9zZXRQbHVnaW5SYXRpbygpIG1ldGhvZCB3ZSBjYW4gc2ltcGx5IGNvcHkgdGhlIHZhbHVlcyBvdmVyIGZyb20gdGhlIHByb3h5IHRvIHRoZSBDU1NQcm9wVHdlZW4gaW5zdGFuY2UocykuIFRoZW4sIHdoZW4gdGhlIG1haW4gQ1NTUGx1Z2luIHNldFJhdGlvKCkgbWV0aG9kIHJ1bnMgYW5kIGFwcGxpZXMgdGhlIENTU1Byb3BUd2VlbiB2YWx1ZXMgYWNjb3JkaW5nbHksIHRoZXkncmUgdXBkYXRlZCBuaWNlbHkuIFNvIHRoZSBleHRlcm5hbCBwbHVnaW4gdHdlZW5zIHRoZSBudW1iZXJzLCBfc2V0UGx1Z2luUmF0aW8oKSBjb3BpZXMgdGhlbSBvdmVyLCBhbmQgc2V0UmF0aW8oKSBhY3RzIG5vcm1hbGx5LCBhcHBseWluZyBjc3Mtc3BlY2lmaWMgdmFsdWVzIHRvIHRoZSBlbGVtZW50LlxuXHRcdFx0ICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBvYmplY3QgdGhhdCBoYXMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuXHRcdFx0ICogIC0gcHJveHk6IGEgZ2VuZXJpYyBvYmplY3QgY29udGFpbmluZyB0aGUgc3RhcnRpbmcgdmFsdWVzIGZvciBhbGwgdGhlIHByb3BlcnRpZXMgdGhhdCB3aWxsIGJlIHR3ZWVuZWQgYnkgdGhlIGV4dGVybmFsIHBsdWdpbi4gIFRoaXMgaXMgd2hhdCB3ZSBmZWVkIHRvIHRoZSBleHRlcm5hbCBfb25Jbml0VHdlZW4oKSBhcyB0aGUgdGFyZ2V0XG5cdFx0XHQgKiAgLSBlbmQ6IGEgZ2VuZXJpYyBvYmplY3QgY29udGFpbmluZyB0aGUgZW5kaW5nIHZhbHVlcyBmb3IgYWxsIHRoZSBwcm9wZXJ0aWVzIHRoYXQgd2lsbCBiZSB0d2VlbmVkIGJ5IHRoZSBleHRlcm5hbCBwbHVnaW4uIFRoaXMgaXMgd2hhdCB3ZSBmZWVkIHRvIHRoZSBleHRlcm5hbCBwbHVnaW4ncyBfb25Jbml0VHdlZW4oKSBhcyB0aGUgZGVzdGluYXRpb24gdmFsdWVzXG5cdFx0XHQgKiAgLSBmaXJzdE1QVDogdGhlIGZpcnN0IE1pbmlQcm9wVHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0XG5cdFx0XHQgKiAgLSBwdDogdGhlIGZpcnN0IENTU1Byb3BUd2VlbiBpbiB0aGUgbGlua2VkIGxpc3QgdGhhdCB3YXMgY3JlYXRlZCB3aGVuIHBhcnNpbmcuIElmIHNoYWxsb3cgaXMgdHJ1ZSwgdGhpcyBsaW5rZWQgbGlzdCB3aWxsIE5PVCBhdHRhY2ggdG8gdGhlIG9uZSBwYXNzZWQgaW50byB0aGUgX3BhcnNlVG9Qcm94eSgpIGFzIHRoZSBcInB0XCIgKDR0aCkgcGFyYW1ldGVyLlxuXHRcdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IHRhcmdldCBvYmplY3QgdG8gYmUgdHdlZW5lZFxuXHRcdFx0ICogQHBhcmFtIHshKE9iamVjdHxzdHJpbmcpfSB2YXJzIHRoZSBvYmplY3QgY29udGFpbmluZyB0aGUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHR3ZWVuaW5nIHZhbHVlcyAodHlwaWNhbGx5IHRoZSBlbmQvZGVzdGluYXRpb24gdmFsdWVzKSB0aGF0IHNob3VsZCBiZSBwYXJzZWRcblx0XHRcdCAqIEBwYXJhbSB7IUNTU1BsdWdpbn0gY3NzcCBUaGUgQ1NTUGx1Z2luIGluc3RhbmNlXG5cdFx0XHQgKiBAcGFyYW0ge0NTU1Byb3BUd2Vlbj19IHB0IHRoZSBuZXh0IENTU1Byb3BUd2VlbiBpbiB0aGUgbGlua2VkIGxpc3Rcblx0XHRcdCAqIEBwYXJhbSB7VHdlZW5QbHVnaW49fSBwbHVnaW4gdGhlIGV4dGVybmFsIFR3ZWVuUGx1Z2luIGluc3RhbmNlIHRoYXQgd2lsbCBiZSBoYW5kbGluZyB0d2VlbmluZyB0aGUgbnVtZXJpYyB2YWx1ZXNcblx0XHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IHNoYWxsb3cgaWYgdHJ1ZSwgdGhlIHJlc3VsdGluZyBsaW5rZWQgbGlzdCBmcm9tIHRoZSBwYXJzZSB3aWxsIE5PVCBiZSBhdHRhY2hlZCB0byB0aGUgQ1NTUHJvcFR3ZWVuIHRoYXQgd2FzIHBhc3NlZCBpbiBhcyB0aGUgXCJwdFwiICg0dGgpIHBhcmFtZXRlci5cblx0XHRcdCAqIEByZXR1cm4gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOiBwcm94eSwgZW5kLCBmaXJzdE1QVCwgYW5kIHB0IChzZWUgYWJvdmUgZm9yIGRlc2NyaXB0aW9ucylcblx0XHRcdCAqL1xuXHRcdFx0X3BhcnNlVG9Qcm94eSA9IF9pbnRlcm5hbHMuX3BhcnNlVG9Qcm94eSA9IGZ1bmN0aW9uKHQsIHZhcnMsIGNzc3AsIHB0LCBwbHVnaW4sIHNoYWxsb3cpIHtcblx0XHRcdFx0dmFyIGJwdCA9IHB0LFxuXHRcdFx0XHRcdHN0YXJ0ID0ge30sXG5cdFx0XHRcdFx0ZW5kID0ge30sXG5cdFx0XHRcdFx0dHJhbnNmb3JtID0gY3NzcC5fdHJhbnNmb3JtLFxuXHRcdFx0XHRcdG9sZEZvcmNlID0gX2ZvcmNlUFQsXG5cdFx0XHRcdFx0aSwgcCwgeHAsIG1wdCwgZmlyc3RQVDtcblx0XHRcdFx0Y3NzcC5fdHJhbnNmb3JtID0gbnVsbDtcblx0XHRcdFx0X2ZvcmNlUFQgPSB2YXJzO1xuXHRcdFx0XHRwdCA9IGZpcnN0UFQgPSBjc3NwLnBhcnNlKHQsIHZhcnMsIHB0LCBwbHVnaW4pO1xuXHRcdFx0XHRfZm9yY2VQVCA9IG9sZEZvcmNlO1xuXHRcdFx0XHQvL2JyZWFrIG9mZiBmcm9tIHRoZSBsaW5rZWQgbGlzdCBzbyB0aGUgbmV3IG9uZXMgYXJlIGlzb2xhdGVkLlxuXHRcdFx0XHRpZiAoc2hhbGxvdykge1xuXHRcdFx0XHRcdGNzc3AuX3RyYW5zZm9ybSA9IHRyYW5zZm9ybTtcblx0XHRcdFx0XHRpZiAoYnB0KSB7XG5cdFx0XHRcdFx0XHRicHQuX3ByZXYgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKGJwdC5fcHJldikge1xuXHRcdFx0XHRcdFx0XHRicHQuX3ByZXYuX25leHQgPSBudWxsO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR3aGlsZSAocHQgJiYgcHQgIT09IGJwdCkge1xuXHRcdFx0XHRcdGlmIChwdC50eXBlIDw9IDEpIHtcblx0XHRcdFx0XHRcdHAgPSBwdC5wO1xuXHRcdFx0XHRcdFx0ZW5kW3BdID0gcHQucyArIHB0LmM7XG5cdFx0XHRcdFx0XHRzdGFydFtwXSA9IHB0LnM7XG5cdFx0XHRcdFx0XHRpZiAoIXNoYWxsb3cpIHtcblx0XHRcdFx0XHRcdFx0bXB0ID0gbmV3IE1pbmlQcm9wVHdlZW4ocHQsIFwic1wiLCBwLCBtcHQsIHB0LnIpO1xuXHRcdFx0XHRcdFx0XHRwdC5jID0gMDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChwdC50eXBlID09PSAxKSB7XG5cdFx0XHRcdFx0XHRcdGkgPSBwdC5sO1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoLS1pID4gMCkge1xuXHRcdFx0XHRcdFx0XHRcdHhwID0gXCJ4blwiICsgaTtcblx0XHRcdFx0XHRcdFx0XHRwID0gcHQucCArIFwiX1wiICsgeHA7XG5cdFx0XHRcdFx0XHRcdFx0ZW5kW3BdID0gcHQuZGF0YVt4cF07XG5cdFx0XHRcdFx0XHRcdFx0c3RhcnRbcF0gPSBwdFt4cF07XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFzaGFsbG93KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRtcHQgPSBuZXcgTWluaVByb3BUd2VlbihwdCwgeHAsIHAsIG1wdCwgcHQucnhwW3hwXSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHtwcm94eTpzdGFydCwgZW5kOmVuZCwgZmlyc3RNUFQ6bXB0LCBwdDpmaXJzdFBUfTtcblx0XHRcdH0sXG5cblxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBjb25zdHJ1Y3RvciBFYWNoIHByb3BlcnR5IHRoYXQgaXMgdHdlZW5lZCBoYXMgYXQgbGVhc3Qgb25lIENTU1Byb3BUd2VlbiBhc3NvY2lhdGVkIHdpdGggaXQuIFRoZXNlIGluc3RhbmNlcyBzdG9yZSBpbXBvcnRhbnQgaW5mb3JtYXRpb24gbGlrZSB0aGUgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnRpbmcgdmFsdWUsIGFtb3VudCBvZiBjaGFuZ2UsIGV0Yy4gVGhleSBjYW4gYWxzbyBvcHRpb25hbGx5IGhhdmUgYSBudW1iZXIgb2YgXCJleHRyYVwiIHN0cmluZ3MgYW5kIG51bWVyaWMgdmFsdWVzIG5hbWVkIHhzMSwgeG4xLCB4czIsIHhuMiwgeHMzLCB4bjMsIGV0Yy4gd2hlcmUgXCJzXCIgaW5kaWNhdGVzIHN0cmluZyBhbmQgXCJuXCIgaW5kaWNhdGVzIG51bWJlci4gVGhlc2UgY2FuIGJlIHBpZWNlZCB0b2dldGhlciBpbiBhIGNvbXBsZXgtdmFsdWUgdHdlZW4gKHR5cGU6MSkgdGhhdCBoYXMgYWx0ZXJuYXRpbmcgdHlwZXMgb2YgZGF0YSBsaWtlIGEgc3RyaW5nLCBudW1iZXIsIHN0cmluZywgbnVtYmVyLCBldGMuIEZvciBleGFtcGxlLCBib3hTaGFkb3cgY291bGQgYmUgXCI1cHggNXB4IDhweCByZ2IoMTAyLCAxMDIsIDUxKVwiLiBJbiB0aGF0IHZhbHVlLCB0aGVyZSBhcmUgNiBudW1iZXJzIHRoYXQgbWF5IG5lZWQgdG8gdHdlZW4gYW5kIHRoZW4gcGllY2VkIGJhY2sgdG9nZXRoZXIgaW50byBhIHN0cmluZyBhZ2FpbiB3aXRoIHNwYWNlcywgc3VmZml4ZXMsIGV0Yy4geHMwIGlzIHNwZWNpYWwgaW4gdGhhdCBpdCBzdG9yZXMgdGhlIHN1ZmZpeCBmb3Igc3RhbmRhcmQgKHR5cGU6MCkgdHdlZW5zLCAtT1ItIHRoZSBmaXJzdCBzdHJpbmcgKHByZWZpeCkgaW4gYSBjb21wbGV4LXZhbHVlICh0eXBlOjEpIENTU1Byb3BUd2VlbiAtT1ItIGl0IGNhbiBiZSB0aGUgbm9uLXR3ZWVuaW5nIHZhbHVlIGluIGEgdHlwZTotMSBDU1NQcm9wVHdlZW4uIFdlIGRvIHRoaXMgdG8gY29uc2VydmUgbWVtb3J5LlxuXHRcdFx0ICogQ1NTUHJvcFR3ZWVucyBoYXZlIHRoZSBmb2xsb3dpbmcgb3B0aW9uYWwgcHJvcGVydGllcyBhcyB3ZWxsIChub3QgZGVmaW5lZCB0aHJvdWdoIHRoZSBjb25zdHJ1Y3Rvcik6XG5cdFx0XHQgKiAgLSBsOiBMZW5ndGggaW4gdGVybXMgb2YgdGhlIG51bWJlciBvZiBleHRyYSBwcm9wZXJ0aWVzIHRoYXQgdGhlIENTU1Byb3BUd2VlbiBoYXMgKGRlZmF1bHQ6IDApLiBGb3IgZXhhbXBsZSwgZm9yIGEgYm94U2hhZG93IHdlIG1heSBuZWVkIHRvIHR3ZWVuIDUgbnVtYmVycyBpbiB3aGljaCBjYXNlIGwgd291bGQgYmUgNTsgS2VlcCBpbiBtaW5kIHRoYXQgdGhlIHN0YXJ0L2VuZCB2YWx1ZXMgZm9yIHRoZSBmaXJzdCBudW1iZXIgdGhhdCdzIHR3ZWVuZWQgYXJlIGFsd2F5cyBzdG9yZWQgaW4gdGhlIHMgYW5kIGMgcHJvcGVydGllcyB0byBjb25zZXJ2ZSBtZW1vcnkuIEFsbCBhZGRpdGlvbmFsIHZhbHVlcyB0aGVyZWFmdGVyIGFyZSBzdG9yZWQgaW4geG4xLCB4bjIsIGV0Yy5cblx0XHRcdCAqICAtIHhmaXJzdDogVGhlIGZpcnN0IGluc3RhbmNlIG9mIGFueSBzdWItQ1NTUHJvcFR3ZWVucyB0aGF0IGFyZSB0d2VlbmluZyBwcm9wZXJ0aWVzIG9mIHRoaXMgaW5zdGFuY2UuIEZvciBleGFtcGxlLCB3ZSBtYXkgc3BsaXQgdXAgYSBib3hTaGFkb3cgdHdlZW4gc28gdGhhdCB0aGVyZSdzIGEgbWFpbiBDU1NQcm9wVHdlZW4gb2YgdHlwZToxIHRoYXQgaGFzIHZhcmlvdXMgeHMqIGFuZCB4biogdmFsdWVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgaC1zaGFkb3csIHYtc2hhZG93LCBibHVyLCBjb2xvciwgZXRjLiBUaGVuIHdlIHNwYXduIGEgQ1NTUHJvcFR3ZWVuIGZvciBlYWNoIG9mIHRob3NlIHRoYXQgaGFzIGEgaGlnaGVyIHByaW9yaXR5IGFuZCBydW5zIEJFRk9SRSB0aGUgbWFpbiBDU1NQcm9wVHdlZW4gc28gdGhhdCB0aGUgdmFsdWVzIGFyZSBhbGwgc2V0IGJ5IHRoZSB0aW1lIGl0IG5lZWRzIHRvIHJlLWFzc2VtYmxlIHRoZW0uIFRoZSB4Zmlyc3QgZ2l2ZXMgdXMgYW4gZWFzeSB3YXkgdG8gaWRlbnRpZnkgdGhlIGZpcnN0IG9uZSBpbiB0aGF0IGNoYWluIHdoaWNoIHR5cGljYWxseSBlbmRzIGF0IHRoZSBtYWluIG9uZSAoYmVjYXVzZSB0aGV5J3JlIGFsbCBwcmVwZW5kZSB0byB0aGUgbGlua2VkIGxpc3QpXG5cdFx0XHQgKiAgLSBwbHVnaW46IFRoZSBUd2VlblBsdWdpbiBpbnN0YW5jZSB0aGF0IHdpbGwgaGFuZGxlIHRoZSB0d2VlbmluZyBvZiBhbnkgY29tcGxleCB2YWx1ZXMuIEZvciBleGFtcGxlLCBzb21ldGltZXMgd2UgZG9uJ3Qgd2FudCB0byB1c2Ugbm9ybWFsIHN1YnR3ZWVucyAobGlrZSB4Zmlyc3QgcmVmZXJzIHRvKSB0byB0d2VlbiB0aGUgdmFsdWVzIC0gd2UgbWlnaHQgd2FudCBUaHJvd1Byb3BzUGx1Z2luIG9yIEJlemllclBsdWdpbiBzb21lIG90aGVyIHBsdWdpbiB0byBkbyB0aGUgYWN0dWFsIHR3ZWVuaW5nLCBzbyB3ZSBjcmVhdGUgYSBwbHVnaW4gaW5zdGFuY2UgYW5kIHN0b3JlIGEgcmVmZXJlbmNlIGhlcmUuIFdlIG5lZWQgdGhpcyByZWZlcmVuY2Ugc28gdGhhdCBpZiB3ZSBnZXQgYSByZXF1ZXN0IHRvIHJvdW5kIHZhbHVlcyBvciBkaXNhYmxlIGEgdHdlZW4sIHdlIGNhbiBwYXNzIGFsb25nIHRoYXQgcmVxdWVzdC5cblx0XHRcdCAqICAtIGRhdGE6IEFyYml0cmFyeSBkYXRhIHRoYXQgbmVlZHMgdG8gYmUgc3RvcmVkIHdpdGggdGhlIENTU1Byb3BUd2Vlbi4gVHlwaWNhbGx5IGlmIHdlJ3JlIGdvaW5nIHRvIGhhdmUgYSBwbHVnaW4gaGFuZGxlIHRoZSB0d2VlbmluZyBvZiBhIGNvbXBsZXgtdmFsdWUgdHdlZW4sIHdlIGNyZWF0ZSBhIGdlbmVyaWMgb2JqZWN0IHRoYXQgc3RvcmVzIHRoZSBFTkQgdmFsdWVzIHRoYXQgd2UncmUgdHdlZW5pbmcgdG8gYW5kIHRoZSBDU1NQcm9wVHdlZW4ncyB4czEsIHhzMiwgZXRjLiBoYXZlIHRoZSBzdGFydGluZyB2YWx1ZXMuIFdlIHN0b3JlIHRoYXQgb2JqZWN0IGFzIGRhdGEuIFRoYXQgd2F5LCB3ZSBjYW4gc2ltcGx5IHBhc3MgdGhhdCBvYmplY3QgdG8gdGhlIHBsdWdpbiBhbmQgdXNlIHRoZSBDU1NQcm9wVHdlZW4gYXMgdGhlIHRhcmdldC5cblx0XHRcdCAqICAtIHNldFJhdGlvOiBPbmx5IHVzZWQgZm9yIHR5cGU6MiB0d2VlbnMgdGhhdCByZXF1aXJlIGN1c3RvbSBmdW5jdGlvbmFsaXR5LiBJbiB0aGlzIGNhc2UsIHdlIGNhbGwgdGhlIENTU1Byb3BUd2VlbidzIHNldFJhdGlvKCkgbWV0aG9kIGFuZCBwYXNzIHRoZSByYXRpbyBlYWNoIHRpbWUgdGhlIHR3ZWVuIHVwZGF0ZXMuIFRoaXMgaXNuJ3QgcXVpdGUgYXMgZWZmaWNpZW50IGFzIGRvaW5nIHRoaW5ncyBkaXJlY3RseSBpbiB0aGUgQ1NTUGx1Z2luJ3Mgc2V0UmF0aW8oKSBtZXRob2QsIGJ1dCBpdCdzIHZlcnkgY29udmVuaWVudCBhbmQgZmxleGlibGUuXG5cdFx0XHQgKiBAcGFyYW0geyFPYmplY3R9IHQgVGFyZ2V0IG9iamVjdCB3aG9zZSBwcm9wZXJ0eSB3aWxsIGJlIHR3ZWVuZWQuIE9mdGVuIGEgRE9NIGVsZW1lbnQsIGJ1dCBub3QgYWx3YXlzLiBJdCBjb3VsZCBiZSBhbnl0aGluZy5cblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBwIFByb3BlcnR5IHRvIHR3ZWVuIChuYW1lKS4gRm9yIGV4YW1wbGUsIHRvIHR3ZWVuIGVsZW1lbnQud2lkdGgsIHAgd291bGQgYmUgXCJ3aWR0aFwiLlxuXHRcdFx0ICogQHBhcmFtIHtudW1iZXJ9IHMgU3RhcnRpbmcgbnVtZXJpYyB2YWx1ZVxuXHRcdFx0ICogQHBhcmFtIHtudW1iZXJ9IGMgQ2hhbmdlIGluIG51bWVyaWMgdmFsdWUgb3ZlciB0aGUgY291cnNlIG9mIHRoZSBlbnRpcmUgdHdlZW4uIEZvciBleGFtcGxlLCBpZiBlbGVtZW50LndpZHRoIHN0YXJ0cyBhdCA1IGFuZCBzaG91bGQgZW5kIGF0IDEwMCwgYyB3b3VsZCBiZSA5NS5cblx0XHRcdCAqIEBwYXJhbSB7Q1NTUHJvcFR3ZWVuPX0gbmV4dCBUaGUgbmV4dCBDU1NQcm9wVHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0LiBJZiBvbmUgaXMgZGVmaW5lZCwgd2Ugd2lsbCBkZWZpbmUgaXRzIF9wcmV2IGFzIHRoZSBuZXcgaW5zdGFuY2UsIGFuZCB0aGUgbmV3IGluc3RhbmNlJ3MgX25leHQgd2lsbCBiZSBwb2ludGVkIGF0IGl0LlxuXHRcdFx0ICogQHBhcmFtIHtudW1iZXI9fSB0eXBlIFRoZSB0eXBlIG9mIENTU1Byb3BUd2VlbiB3aGVyZSAtMSA9IGEgbm9uLXR3ZWVuaW5nIHZhbHVlLCAwID0gYSBzdGFuZGFyZCBzaW1wbGUgdHdlZW4sIDEgPSBhIGNvbXBsZXggdmFsdWUgKGxpa2Ugb25lIHRoYXQgaGFzIG11bHRpcGxlIG51bWJlcnMgaW4gYSBjb21tYS0gb3Igc3BhY2UtZGVsaW1pdGVkIHN0cmluZyBsaWtlIGJvcmRlcjpcIjFweCBzb2xpZCByZWRcIiksIGFuZCAyID0gb25lIHRoYXQgdXNlcyBhIGN1c3RvbSBzZXRSYXRpbyBmdW5jdGlvbiB0aGF0IGRvZXMgYWxsIG9mIHRoZSB3b3JrIG9mIGFwcGx5aW5nIHRoZSB2YWx1ZXMgb24gZWFjaCB1cGRhdGUuXG5cdFx0XHQgKiBAcGFyYW0ge3N0cmluZz19IG4gTmFtZSBvZiB0aGUgcHJvcGVydHkgdGhhdCBzaG91bGQgYmUgdXNlZCBmb3Igb3ZlcndyaXRpbmcgcHVycG9zZXMgd2hpY2ggaXMgdHlwaWNhbGx5IHRoZSBzYW1lIGFzIHAgYnV0IG5vdCBhbHdheXMuIEZvciBleGFtcGxlLCB3ZSBtYXkgbmVlZCB0byBjcmVhdGUgYSBzdWJ0d2VlbiBmb3IgdGhlIDJuZCBwYXJ0IG9mIGEgXCJjbGlwOnJlY3QoLi4uKVwiIHR3ZWVuIGluIHdoaWNoIGNhc2UgXCJwXCIgbWlnaHQgYmUgeHMxIGJ1dCBcIm5cIiBpcyBzdGlsbCBcImNsaXBcIlxuXHRcdFx0ICogQHBhcmFtIHtib29sZWFuPX0gciBJZiB0cnVlLCB0aGUgdmFsdWUocykgc2hvdWxkIGJlIHJvdW5kZWRcblx0XHRcdCAqIEBwYXJhbSB7bnVtYmVyPX0gcHIgUHJpb3JpdHkgaW4gdGhlIGxpbmtlZCBsaXN0IG9yZGVyLiBIaWdoZXIgcHJpb3JpdHkgQ1NTUHJvcFR3ZWVucyB3aWxsIGJlIHVwZGF0ZWQgYmVmb3JlIGxvd2VyIHByaW9yaXR5IG9uZXMuIFRoZSBkZWZhdWx0IHByaW9yaXR5IGlzIDAuXG5cdFx0XHQgKiBAcGFyYW0ge3N0cmluZz19IGIgQmVnaW5uaW5nIHZhbHVlLiBXZSBzdG9yZSB0aGlzIHRvIGVuc3VyZSB0aGF0IGl0IGlzIEVYQUNUTFkgd2hhdCBpdCB3YXMgd2hlbiB0aGUgdHdlZW4gYmVnYW4gd2l0aG91dCBhbnkgcmlzayBvZiBpbnRlcnByZXRhdGlvbiBpc3N1ZXMuXG5cdFx0XHQgKiBAcGFyYW0ge3N0cmluZz19IGUgRW5kaW5nIHZhbHVlLiBXZSBzdG9yZSB0aGlzIHRvIGVuc3VyZSB0aGF0IGl0IGlzIEVYQUNUTFkgd2hhdCB0aGUgdXNlciBkZWZpbmVkIGF0IHRoZSBlbmQgb2YgdGhlIHR3ZWVuIHdpdGhvdXQgYW55IHJpc2sgb2YgaW50ZXJwcmV0YXRpb24gaXNzdWVzLlxuXHRcdFx0ICovXG5cdFx0XHRDU1NQcm9wVHdlZW4gPSBfaW50ZXJuYWxzLkNTU1Byb3BUd2VlbiA9IGZ1bmN0aW9uKHQsIHAsIHMsIGMsIG5leHQsIHR5cGUsIG4sIHIsIHByLCBiLCBlKSB7XG5cdFx0XHRcdHRoaXMudCA9IHQ7IC8vdGFyZ2V0XG5cdFx0XHRcdHRoaXMucCA9IHA7IC8vcHJvcGVydHlcblx0XHRcdFx0dGhpcy5zID0gczsgLy9zdGFydGluZyB2YWx1ZVxuXHRcdFx0XHR0aGlzLmMgPSBjOyAvL2NoYW5nZSB2YWx1ZVxuXHRcdFx0XHR0aGlzLm4gPSBuIHx8IHA7IC8vbmFtZSB0aGF0IHRoaXMgQ1NTUHJvcFR3ZWVuIHNob3VsZCBiZSBhc3NvY2lhdGVkIHRvICh1c3VhbGx5IHRoZSBzYW1lIGFzIHAsIGJ1dCBub3QgYWx3YXlzIC0gbiBpcyB3aGF0IG92ZXJ3cml0aW5nIGxvb2tzIGF0KVxuXHRcdFx0XHRpZiAoISh0IGluc3RhbmNlb2YgQ1NTUHJvcFR3ZWVuKSkge1xuXHRcdFx0XHRcdF9vdmVyd3JpdGVQcm9wcy5wdXNoKHRoaXMubik7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5yID0gIXIgPyByIDogKHR5cGVvZihyKSA9PT0gXCJmdW5jdGlvblwiKSA/IHIgOiBNYXRoLnJvdW5kOyAvL3JvdW5kIChib29sZWFuKVxuXHRcdFx0XHR0aGlzLnR5cGUgPSB0eXBlIHx8IDA7IC8vMCA9IG5vcm1hbCB0d2VlbiwgLTEgPSBub24tdHdlZW5pbmcgKGluIHdoaWNoIGNhc2UgeHMwIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgdGFyZ2V0J3MgcHJvcGVydHksIGxpa2UgdHAudFt0cC5wXSA9IHRwLnhzMCksIDEgPSBjb21wbGV4LXZhbHVlIFNwZWNpYWxQcm9wLCAyID0gY3VzdG9tIHNldFJhdGlvKCkgdGhhdCBkb2VzIGFsbCB0aGUgd29ya1xuXHRcdFx0XHRpZiAocHIpIHtcblx0XHRcdFx0XHR0aGlzLnByID0gcHI7XG5cdFx0XHRcdFx0X2hhc1ByaW9yaXR5ID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmIgPSAoYiA9PT0gdW5kZWZpbmVkKSA/IHMgOiBiO1xuXHRcdFx0XHR0aGlzLmUgPSAoZSA9PT0gdW5kZWZpbmVkKSA/IHMgKyBjIDogZTtcblx0XHRcdFx0aWYgKG5leHQpIHtcblx0XHRcdFx0XHR0aGlzLl9uZXh0ID0gbmV4dDtcblx0XHRcdFx0XHRuZXh0Ll9wcmV2ID0gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0X2FkZE5vblR3ZWVuaW5nTnVtZXJpY1BUID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBuZXh0LCBvdmVyd3JpdGVQcm9wKSB7IC8vY2xlYW5zIHVwIHNvbWUgY29kZSByZWR1bmRhbmNpZXMgYW5kIGhlbHBzIG1pbmlmaWNhdGlvbi4gSnVzdCBhIGZhc3Qgd2F5IHRvIGFkZCBhIE5VTUVSSUMgbm9uLXR3ZWVuaW5nIENTU1Byb3BUd2VlblxuXHRcdFx0XHR2YXIgcHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCAtIHN0YXJ0LCBuZXh0LCAtMSwgb3ZlcndyaXRlUHJvcCk7XG5cdFx0XHRcdHB0LmIgPSBzdGFydDtcblx0XHRcdFx0cHQuZSA9IHB0LnhzMCA9IGVuZDtcblx0XHRcdFx0cmV0dXJuIHB0O1xuXHRcdFx0fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBUYWtlcyBhIHRhcmdldCwgdGhlIGJlZ2lubmluZyB2YWx1ZSBhbmQgZW5kaW5nIHZhbHVlIChhcyBzdHJpbmdzKSBhbmQgcGFyc2VzIHRoZW0gaW50byBhIENTU1Byb3BUd2VlbiAocG9zc2libHkgd2l0aCBjaGlsZCBDU1NQcm9wVHdlZW5zKSB0aGF0IGFjY29tbW9kYXRlcyBtdWx0aXBsZSBudW1iZXJzLCBjb2xvcnMsIGNvbW1hLWRlbGltaXRlZCB2YWx1ZXMsIGV0Yy4gRm9yIGV4YW1wbGU6XG5cdFx0XHQgKiBzcC5wYXJzZUNvbXBsZXgoZWxlbWVudCwgXCJib3hTaGFkb3dcIiwgXCI1cHggMTBweCAyMHB4IHJnYigyNTUsMTAyLDUxKVwiLCBcIjBweCAwcHggMHB4IHJlZFwiLCB0cnVlLCBcIjBweCAwcHggMHB4IHJnYigwLDAsMCwwKVwiLCBwdCk7XG5cdFx0XHQgKiBJdCB3aWxsIHdhbGsgdGhyb3VnaCB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzICh3aGljaCBzaG91bGQgYmUgaW4gdGhlIHNhbWUgZm9ybWF0IHdpdGggdGhlIHNhbWUgbnVtYmVyIGFuZCB0eXBlIG9mIHZhbHVlcykgYW5kIGZpZ3VyZSBvdXQgd2hpY2ggcGFydHMgYXJlIG51bWJlcnMsIHdoYXQgc3RyaW5ncyBzZXBhcmF0ZSB0aGUgbnVtZXJpYy90d2VlbmFibGUgdmFsdWVzLCBhbmQgdGhlbiBjcmVhdGUgdGhlIENTU1Byb3BUd2VlbnMgYWNjb3JkaW5nbHkuIElmIGEgcGx1Z2luIGlzIGRlZmluZWQsIG5vIGNoaWxkIENTU1Byb3BUd2VlbnMgd2lsbCBiZSBjcmVhdGVkLiBJbnN0ZWFkLCB0aGUgZW5kaW5nIHZhbHVlcyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgXCJkYXRhXCIgcHJvcGVydHkgb2YgdGhlIHJldHVybmVkIENTU1Byb3BUd2VlbiBsaWtlOiB7czotNSwgeG4xOi0xMCwgeG4yOi0yMCwgeG4zOjI1NSwgeG40OjAsIHhuNTowfSBzbyB0aGF0IGl0IGNhbiBiZSBmZWQgdG8gYW55IG90aGVyIHBsdWdpbiBhbmQgaXQnbGwgYmUgcGxhaW4gbnVtZXJpYyB0d2VlbnMgYnV0IHRoZSByZWNvbXBvc2l0aW9uIG9mIHRoZSBjb21wbGV4IHZhbHVlIHdpbGwgYmUgaGFuZGxlZCBpbnNpZGUgQ1NTUGx1Z2luJ3Mgc2V0UmF0aW8oKS5cblx0XHRcdCAqIElmIGEgc2V0UmF0aW8gaXMgZGVmaW5lZCwgdGhlIHR5cGUgb2YgdGhlIENTU1Byb3BUd2VlbiB3aWxsIGJlIHNldCB0byAyIGFuZCByZWNvbXBvc2l0aW9uIG9mIHRoZSB2YWx1ZXMgd2lsbCBiZSB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGhhdCBtZXRob2QuXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IFRhcmdldCB3aG9zZSBwcm9wZXJ0eSB3aWxsIGJlIHR3ZWVuZWRcblx0XHRcdCAqIEBwYXJhbSB7IXN0cmluZ30gcCBQcm9wZXJ0eSB0aGF0IHdpbGwgYmUgdHdlZW5lZCAoaXRzIG5hbWUsIGxpa2UgXCJsZWZ0XCIgb3IgXCJiYWNrZ3JvdW5kQ29sb3JcIiBvciBcImJveFNoYWRvd1wiKVxuXHRcdFx0ICogQHBhcmFtIHtzdHJpbmd9IGIgQmVnaW5uaW5nIHZhbHVlXG5cdFx0XHQgKiBAcGFyYW0ge3N0cmluZ30gZSBFbmRpbmcgdmFsdWVcblx0XHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xycyBJZiB0cnVlLCB0aGUgdmFsdWUgY291bGQgY29udGFpbiBhIGNvbG9yIHZhbHVlIGxpa2UgXCJyZ2IoMjU1LDAsMClcIiBvciBcIiNGMDBcIiBvciBcInJlZFwiLiBUaGUgZGVmYXVsdCBpcyBmYWxzZSwgc28gbm8gY29sb3JzIHdpbGwgYmUgcmVjb2duaXplZCAoYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24pXG5cdFx0XHQgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyfE9iamVjdCl9IGRmbHQgVGhlIGRlZmF1bHQgYmVnaW5uaW5nIHZhbHVlIHRoYXQgc2hvdWxkIGJlIHVzZWQgaWYgbm8gdmFsaWQgYmVnaW5uaW5nIHZhbHVlIGlzIGRlZmluZWQgb3IgaWYgdGhlIG51bWJlciBvZiB2YWx1ZXMgaW5zaWRlIHRoZSBjb21wbGV4IGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyBkb24ndCBtYXRjaFxuXHRcdFx0ICogQHBhcmFtIHs/Q1NTUHJvcFR3ZWVufSBwdCBDU1NQcm9wVHdlZW4gaW5zdGFuY2UgdGhhdCBpcyB0aGUgY3VycmVudCBoZWFkIG9mIHRoZSBsaW5rZWQgbGlzdCAod2UnbGwgcHJlcGVuZCB0byB0aGlzKS5cblx0XHRcdCAqIEBwYXJhbSB7bnVtYmVyPX0gcHIgUHJpb3JpdHkgaW4gdGhlIGxpbmtlZCBsaXN0IG9yZGVyLiBIaWdoZXIgcHJpb3JpdHkgcHJvcGVydGllcyB3aWxsIGJlIHVwZGF0ZWQgYmVmb3JlIGxvd2VyIHByaW9yaXR5IG9uZXMuIFRoZSBkZWZhdWx0IHByaW9yaXR5IGlzIDAuXG5cdFx0XHQgKiBAcGFyYW0ge1R3ZWVuUGx1Z2luPX0gcGx1Z2luIElmIGEgcGx1Z2luIHNob3VsZCBoYW5kbGUgdGhlIHR3ZWVuaW5nIG9mIGV4dHJhIHByb3BlcnRpZXMsIHBhc3MgdGhlIHBsdWdpbiBpbnN0YW5jZSBoZXJlLiBJZiBvbmUgaXMgZGVmaW5lZCwgdGhlbiBOTyBzdWJ0d2VlbnMgd2lsbCBiZSBjcmVhdGVkIGZvciBhbnkgZXh0cmEgcHJvcGVydGllcyAodGhlIHByb3BlcnRpZXMgd2lsbCBiZSBjcmVhdGVkIC0ganVzdCBub3QgYWRkaXRpb25hbCBDU1NQcm9wVHdlZW4gaW5zdGFuY2VzIHRvIHR3ZWVuIHRoZW0pIGJlY2F1c2UgdGhlIHBsdWdpbiBpcyBleHBlY3RlZCB0byBkbyBzby4gSG93ZXZlciwgdGhlIGVuZCB2YWx1ZXMgV0lMTCBiZSBwb3B1bGF0ZWQgaW4gdGhlIFwiZGF0YVwiIHByb3BlcnR5LCBsaWtlIHtzOjEwMCwgeG4xOjUwLCB4bjI6MzAwfVxuXHRcdFx0ICogQHBhcmFtIHtmdW5jdGlvbihudW1iZXIpPX0gc2V0UmF0aW8gSWYgdmFsdWVzIHNob3VsZCBiZSBzZXQgaW4gYSBjdXN0b20gZnVuY3Rpb24gaW5zdGVhZCBvZiBiZWluZyBwaWVjZWQgdG9nZXRoZXIgaW4gYSB0eXBlOjEgKGNvbXBsZXgtdmFsdWUpIENTU1Byb3BUd2VlbiwgZGVmaW5lIHRoYXQgY3VzdG9tIGZ1bmN0aW9uIGhlcmUuXG5cdFx0XHQgKiBAcmV0dXJuIHtDU1NQcm9wVHdlZW59IFRoZSBmaXJzdCBDU1NQcm9wVHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0IHdoaWNoIGluY2x1ZGVzIHRoZSBuZXcgb25lKHMpIGFkZGVkIGJ5IHRoZSBwYXJzZUNvbXBsZXgoKSBjYWxsLlxuXHRcdFx0ICovXG5cdFx0XHRfcGFyc2VDb21wbGV4ID0gQ1NTUGx1Z2luLnBhcnNlQ29tcGxleCA9IGZ1bmN0aW9uKHQsIHAsIGIsIGUsIGNscnMsIGRmbHQsIHB0LCBwciwgcGx1Z2luLCBzZXRSYXRpbykge1xuXHRcdFx0XHQvL0RFQlVHOiBfbG9nKFwicGFyc2VDb21wbGV4OiBcIitwK1wiLCBiOiBcIitiK1wiLCBlOiBcIitlKTtcblx0XHRcdFx0YiA9IGIgfHwgZGZsdCB8fCBcIlwiO1xuXHRcdFx0XHRpZiAodHlwZW9mKGUpID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRlID0gZShfaW5kZXgsIF90YXJnZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2Vlbih0LCBwLCAwLCAwLCBwdCwgKHNldFJhdGlvID8gMiA6IDEpLCBudWxsLCBmYWxzZSwgcHIsIGIsIGUpO1xuXHRcdFx0XHRlICs9IFwiXCI7IC8vZW5zdXJlcyBpdCdzIGEgc3RyaW5nXG5cdFx0XHRcdGlmIChjbHJzICYmIF9jb2xvckV4cC50ZXN0KGUgKyBiKSkgeyAvL2lmIGNvbG9ycyBhcmUgZm91bmQsIG5vcm1hbGl6ZSB0aGUgZm9ybWF0dGluZyB0byByZ2JhKCkgb3IgaHNsYSgpLlxuXHRcdFx0XHRcdGUgPSBbYiwgZV07XG5cdFx0XHRcdFx0Q1NTUGx1Z2luLmNvbG9yU3RyaW5nRmlsdGVyKGUpO1xuXHRcdFx0XHRcdGIgPSBlWzBdO1xuXHRcdFx0XHRcdGUgPSBlWzFdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBiYSA9IGIuc3BsaXQoXCIsIFwiKS5qb2luKFwiLFwiKS5zcGxpdChcIiBcIiksIC8vYmVnaW5uaW5nIGFycmF5XG5cdFx0XHRcdFx0ZWEgPSBlLnNwbGl0KFwiLCBcIikuam9pbihcIixcIikuc3BsaXQoXCIgXCIpLCAvL2VuZGluZyBhcnJheVxuXHRcdFx0XHRcdGwgPSBiYS5sZW5ndGgsXG5cdFx0XHRcdFx0YXV0b1JvdW5kID0gKF9hdXRvUm91bmQgIT09IGZhbHNlKSxcblx0XHRcdFx0XHRpLCB4aSwgbmksIGJ2LCBldiwgYm51bXMsIGVudW1zLCBibiwgaGFzQWxwaGEsIHRlbXAsIGN2LCBzdHIsIHVzZUhTTDtcblx0XHRcdFx0aWYgKGUuaW5kZXhPZihcIixcIikgIT09IC0xIHx8IGIuaW5kZXhPZihcIixcIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0aWYgKChlICsgYikuaW5kZXhPZihcInJnYlwiKSAhPT0gLTEgfHwgKGUgKyBiKS5pbmRleE9mKFwiaHNsXCIpICE9PSAtMSkgeyAvL2tlZXAgcmdiKCksIHJnYmEoKSwgaHNsKCksIGFuZCBoc2xhKCkgdmFsdWVzIHRvZ2V0aGVyISAocmVtZW1iZXIsIHdlJ3JlIHNwbGl0dGluZyBvbiBzcGFjZXMpXG5cdFx0XHRcdFx0XHRiYSA9IGJhLmpvaW4oXCIgXCIpLnJlcGxhY2UoX2NvbW1hc091dHNpZGVQYXJlbkV4cCwgXCIsIFwiKS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0XHRlYSA9IGVhLmpvaW4oXCIgXCIpLnJlcGxhY2UoX2NvbW1hc091dHNpZGVQYXJlbkV4cCwgXCIsIFwiKS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGJhID0gYmEuam9pbihcIiBcIikuc3BsaXQoXCIsXCIpLmpvaW4oXCIsIFwiKS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0XHRlYSA9IGVhLmpvaW4oXCIgXCIpLnNwbGl0KFwiLFwiKS5qb2luKFwiLCBcIikuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRsID0gYmEubGVuZ3RoO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChsICE9PSBlYS5sZW5ndGgpIHtcblx0XHRcdFx0XHQvL0RFQlVHOiBfbG9nKFwibWlzbWF0Y2hlZCBmb3JtYXR0aW5nIGRldGVjdGVkIG9uIFwiICsgcCArIFwiIChcIiArIGIgKyBcIiB2cyBcIiArIGUgKyBcIilcIik7XG5cdFx0XHRcdFx0YmEgPSAoZGZsdCB8fCBcIlwiKS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0bCA9IGJhLmxlbmd0aDtcblx0XHRcdFx0fVxuXHRcdFx0XHRwdC5wbHVnaW4gPSBwbHVnaW47XG5cdFx0XHRcdHB0LnNldFJhdGlvID0gc2V0UmF0aW87XG5cdFx0XHRcdF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0YnYgPSBiYVtpXTtcblx0XHRcdFx0XHRldiA9IGVhW2ldICsgXCJcIjtcblx0XHRcdFx0XHRibiA9IHBhcnNlRmxvYXQoYnYpO1xuXHRcdFx0XHRcdC8vaWYgdGhlIHZhbHVlIGJlZ2lucyB3aXRoIGEgbnVtYmVyIChtb3N0IGNvbW1vbikuIEl0J3MgZmluZSBpZiBpdCBoYXMgYSBzdWZmaXggbGlrZSBweFxuXHRcdFx0XHRcdGlmIChibiB8fCBibiA9PT0gMCkge1xuXHRcdFx0XHRcdFx0cHQuYXBwZW5kWHRyYShcIlwiLCBibiwgX3BhcnNlQ2hhbmdlKGV2LCBibiksIGV2LnJlcGxhY2UoX3JlbE51bUV4cCwgXCJcIiksIChhdXRvUm91bmQgJiYgZXYuaW5kZXhPZihcInB4XCIpICE9PSAtMSkgPyBNYXRoLnJvdW5kIDogZmFsc2UsIHRydWUpO1xuXG5cdFx0XHRcdFx0Ly9pZiB0aGUgdmFsdWUgaXMgYSBjb2xvclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoY2xycyAmJiBfY29sb3JFeHAudGVzdChidikpIHtcblx0XHRcdFx0XHRcdHN0ciA9IGV2LmluZGV4T2YoXCIpXCIpICsgMTtcblx0XHRcdFx0XHRcdHN0ciA9IFwiKVwiICsgKHN0ciA/IGV2LnN1YnN0cihzdHIpIDogXCJcIik7IC8vaWYgdGhlcmUncyBhIGNvbW1hIG9yICkgYXQgdGhlIGVuZCwgcmV0YWluIGl0LlxuXHRcdFx0XHRcdFx0dXNlSFNMID0gKGV2LmluZGV4T2YoXCJoc2xcIikgIT09IC0xICYmIF9zdXBwb3J0c09wYWNpdHkpO1xuXHRcdFx0XHRcdFx0dGVtcCA9IGV2OyAvL29yaWdpbmFsIHN0cmluZyB2YWx1ZSBzbyB3ZSBjYW4gbG9vayBmb3IgYW55IHByZWZpeCBsYXRlci5cblx0XHRcdFx0XHRcdGJ2ID0gX3BhcnNlQ29sb3IoYnYsIHVzZUhTTCk7XG5cdFx0XHRcdFx0XHRldiA9IF9wYXJzZUNvbG9yKGV2LCB1c2VIU0wpO1xuXHRcdFx0XHRcdFx0aGFzQWxwaGEgPSAoYnYubGVuZ3RoICsgZXYubGVuZ3RoID4gNik7XG5cdFx0XHRcdFx0XHRpZiAoaGFzQWxwaGEgJiYgIV9zdXBwb3J0c09wYWNpdHkgJiYgZXZbM10gPT09IDApIHsgLy9vbGRlciB2ZXJzaW9ucyBvZiBJRSBkb24ndCBzdXBwb3J0IHJnYmEoKSwgc28gaWYgdGhlIGRlc3RpbmF0aW9uIGFscGhhIGlzIDAsIGp1c3QgdXNlIFwidHJhbnNwYXJlbnRcIiBmb3IgdGhlIGVuZCBjb2xvclxuXHRcdFx0XHRcdFx0XHRwdFtcInhzXCIgKyBwdC5sXSArPSBwdC5sID8gXCIgdHJhbnNwYXJlbnRcIiA6IFwidHJhbnNwYXJlbnRcIjtcblx0XHRcdFx0XHRcdFx0cHQuZSA9IHB0LmUuc3BsaXQoZWFbaV0pLmpvaW4oXCJ0cmFuc3BhcmVudFwiKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGlmICghX3N1cHBvcnRzT3BhY2l0eSkgeyAvL29sZCB2ZXJzaW9ucyBvZiBJRSBkb24ndCBzdXBwb3J0IHJnYmEoKS5cblx0XHRcdFx0XHRcdFx0XHRoYXNBbHBoYSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmICh1c2VIU0wpIHtcblx0XHRcdFx0XHRcdFx0XHRwdC5hcHBlbmRYdHJhKHRlbXAuc3Vic3RyKDAsIHRlbXAuaW5kZXhPZihcImhzbFwiKSkgKyAoaGFzQWxwaGEgPyBcImhzbGEoXCIgOiBcImhzbChcIiksIGJ2WzBdLCBfcGFyc2VDaGFuZ2UoZXZbMF0sIGJ2WzBdKSwgXCIsXCIsIGZhbHNlLCB0cnVlKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmFwcGVuZFh0cmEoXCJcIiwgYnZbMV0sIF9wYXJzZUNoYW5nZShldlsxXSwgYnZbMV0pLCBcIiUsXCIsIGZhbHNlKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmFwcGVuZFh0cmEoXCJcIiwgYnZbMl0sIF9wYXJzZUNoYW5nZShldlsyXSwgYnZbMl0pLCAoaGFzQWxwaGEgPyBcIiUsXCIgOiBcIiVcIiArIHN0ciksIGZhbHNlKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRwdC5hcHBlbmRYdHJhKHRlbXAuc3Vic3RyKDAsIHRlbXAuaW5kZXhPZihcInJnYlwiKSkgKyAoaGFzQWxwaGEgPyBcInJnYmEoXCIgOiBcInJnYihcIiksIGJ2WzBdLCBldlswXSAtIGJ2WzBdLCBcIixcIiwgTWF0aC5yb3VuZCwgdHJ1ZSlcblx0XHRcdFx0XHRcdFx0XHRcdC5hcHBlbmRYdHJhKFwiXCIsIGJ2WzFdLCBldlsxXSAtIGJ2WzFdLCBcIixcIiwgTWF0aC5yb3VuZClcblx0XHRcdFx0XHRcdFx0XHRcdC5hcHBlbmRYdHJhKFwiXCIsIGJ2WzJdLCBldlsyXSAtIGJ2WzJdLCAoaGFzQWxwaGEgPyBcIixcIiA6IHN0ciksIE1hdGgucm91bmQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0aWYgKGhhc0FscGhhKSB7XG5cdFx0XHRcdFx0XHRcdFx0YnYgPSAoYnYubGVuZ3RoIDwgNCkgPyAxIDogYnZbM107XG5cdFx0XHRcdFx0XHRcdFx0cHQuYXBwZW5kWHRyYShcIlwiLCBidiwgKChldi5sZW5ndGggPCA0KSA/IDEgOiBldlszXSkgLSBidiwgc3RyLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdF9jb2xvckV4cC5sYXN0SW5kZXggPSAwOyAvL290aGVyd2lzZSB0aGUgdGVzdCgpIG9uIHRoZSBSZWdFeHAgY291bGQgbW92ZSB0aGUgbGFzdEluZGV4IGFuZCB0YWludCBmdXR1cmUgcmVzdWx0cy5cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRibnVtcyA9IGJ2Lm1hdGNoKF9udW1FeHApOyAvL2dldHMgZWFjaCBncm91cCBvZiBudW1iZXJzIGluIHRoZSBiZWdpbm5pbmcgdmFsdWUgc3RyaW5nIGFuZCBkcm9wcyB0aGVtIGludG8gYW4gYXJyYXlcblxuXHRcdFx0XHRcdFx0Ly9pZiBubyBudW1iZXIgaXMgZm91bmQsIHRyZWF0IGl0IGFzIGEgbm9uLXR3ZWVuaW5nIHZhbHVlIGFuZCBqdXN0IGFwcGVuZCB0aGUgc3RyaW5nIHRvIHRoZSBjdXJyZW50IHhzLlxuXHRcdFx0XHRcdFx0aWYgKCFibnVtcykge1xuXHRcdFx0XHRcdFx0XHRwdFtcInhzXCIgKyBwdC5sXSArPSAocHQubCB8fCBwdFtcInhzXCIgKyBwdC5sXSkgPyBcIiBcIiArIGV2IDogZXY7XG5cblx0XHRcdFx0XHRcdC8vbG9vcCB0aHJvdWdoIGFsbCB0aGUgbnVtYmVycyB0aGF0IGFyZSBmb3VuZCBhbmQgY29uc3RydWN0IHRoZSBleHRyYSB2YWx1ZXMgb24gdGhlIHB0LlxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZW51bXMgPSBldi5tYXRjaChfcmVsTnVtRXhwKTsgLy9nZXQgZWFjaCBncm91cCBvZiBudW1iZXJzIGluIHRoZSBlbmQgdmFsdWUgc3RyaW5nIGFuZCBkcm9wIHRoZW0gaW50byBhbiBhcnJheS4gV2UgYWxsb3cgcmVsYXRpdmUgdmFsdWVzIHRvbywgbGlrZSArPTUwIG9yIC09LjVcblx0XHRcdFx0XHRcdFx0aWYgKCFlbnVtcyB8fCBlbnVtcy5sZW5ndGggIT09IGJudW1zLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0XHRcdC8vREVCVUc6IF9sb2coXCJtaXNtYXRjaGVkIGZvcm1hdHRpbmcgZGV0ZWN0ZWQgb24gXCIgKyBwICsgXCIgKFwiICsgYiArIFwiIHZzIFwiICsgZSArIFwiKVwiKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcHQ7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0bmkgPSAwO1xuXHRcdFx0XHRcdFx0XHRmb3IgKHhpID0gMDsgeGkgPCBibnVtcy5sZW5ndGg7IHhpKyspIHtcblx0XHRcdFx0XHRcdFx0XHRjdiA9IGJudW1zW3hpXTtcblx0XHRcdFx0XHRcdFx0XHR0ZW1wID0gYnYuaW5kZXhPZihjdiwgbmkpO1xuXHRcdFx0XHRcdFx0XHRcdHB0LmFwcGVuZFh0cmEoYnYuc3Vic3RyKG5pLCB0ZW1wIC0gbmkpLCBOdW1iZXIoY3YpLCBfcGFyc2VDaGFuZ2UoZW51bXNbeGldLCBjdiksIFwiXCIsIChhdXRvUm91bmQgJiYgYnYuc3Vic3RyKHRlbXAgKyBjdi5sZW5ndGgsIDIpID09PSBcInB4XCIpID8gTWF0aC5yb3VuZCA6IGZhbHNlLCAoeGkgPT09IDApKTtcblx0XHRcdFx0XHRcdFx0XHRuaSA9IHRlbXAgKyBjdi5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cHRbXCJ4c1wiICsgcHQubF0gKz0gYnYuc3Vic3RyKG5pKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9pZiB0aGVyZSBhcmUgcmVsYXRpdmUgdmFsdWVzIChcIis9XCIgb3IgXCItPVwiIHByZWZpeCksIHdlIG5lZWQgdG8gYWRqdXN0IHRoZSBlbmRpbmcgdmFsdWUgdG8gZWxpbWluYXRlIHRoZSBwcmVmaXhlcyBhbmQgY29tYmluZSB0aGUgdmFsdWVzIHByb3Blcmx5LlxuXHRcdFx0XHRpZiAoZS5pbmRleE9mKFwiPVwiKSAhPT0gLTEpIGlmIChwdC5kYXRhKSB7XG5cdFx0XHRcdFx0c3RyID0gcHQueHMwICsgcHQuZGF0YS5zO1xuXHRcdFx0XHRcdGZvciAoaSA9IDE7IGkgPCBwdC5sOyBpKyspIHtcblx0XHRcdFx0XHRcdHN0ciArPSBwdFtcInhzXCIgKyBpXSArIHB0LmRhdGFbXCJ4blwiICsgaV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0LmUgPSBzdHIgKyBwdFtcInhzXCIgKyBpXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXB0LmwpIHtcblx0XHRcdFx0XHRwdC50eXBlID0gLTE7XG5cdFx0XHRcdFx0cHQueHMwID0gcHQuZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcHQueGZpcnN0IHx8IHB0O1xuXHRcdFx0fSxcblx0XHRcdGkgPSA5O1xuXG5cblx0XHRwID0gQ1NTUHJvcFR3ZWVuLnByb3RvdHlwZTtcblx0XHRwLmwgPSBwLnByID0gMDsgLy9sZW5ndGggKG51bWJlciBvZiBleHRyYSBwcm9wZXJ0aWVzIGxpa2UgeG4xLCB4bjIsIHhuMywgZXRjLlxuXHRcdHdoaWxlICgtLWkgPiAwKSB7XG5cdFx0XHRwW1wieG5cIiArIGldID0gMDtcblx0XHRcdHBbXCJ4c1wiICsgaV0gPSBcIlwiO1xuXHRcdH1cblx0XHRwLnhzMCA9IFwiXCI7XG5cdFx0cC5fbmV4dCA9IHAuX3ByZXYgPSBwLnhmaXJzdCA9IHAuZGF0YSA9IHAucGx1Z2luID0gcC5zZXRSYXRpbyA9IHAucnhwID0gbnVsbDtcblxuXG5cdFx0LyoqXG5cdFx0ICogQXBwZW5kcyBhbmQgZXh0cmEgdHdlZW5pbmcgdmFsdWUgdG8gYSBDU1NQcm9wVHdlZW4gYW5kIGF1dG9tYXRpY2FsbHkgbWFuYWdlcyBhbnkgcHJlZml4IGFuZCBzdWZmaXggc3RyaW5ncy4gVGhlIGZpcnN0IGV4dHJhIHZhbHVlIGlzIHN0b3JlZCBpbiB0aGUgcyBhbmQgYyBvZiB0aGUgbWFpbiBDU1NQcm9wVHdlZW4gaW5zdGFuY2UsIGJ1dCB0aGVyZWFmdGVyIGFueSBleHRyYXMgYXJlIHN0b3JlZCBpbiB0aGUgeG4xLCB4bjIsIHhuMywgZXRjLiBUaGUgcHJlZml4ZXMgYW5kIHN1ZmZpeGVzIGFyZSBzdG9yZWQgaW4gdGhlIHhzMCwgeHMxLCB4czIsIGV0Yy4gcHJvcGVydGllcy4gRm9yIGV4YW1wbGUsIGlmIEkgd2FsayB0aHJvdWdoIGEgY2xpcCB2YWx1ZSBsaWtlIFwicmVjdCgxMHB4LCA1cHgsIDBweCwgMjBweClcIiwgdGhlIHZhbHVlcyB3b3VsZCBiZSBzdG9yZWQgbGlrZSB0aGlzOlxuXHRcdCAqIHhzMDpcInJlY3QoXCIsIHM6MTAsIHhzMTpcInB4LCBcIiwgeG4xOjUsIHhzMjpcInB4LCBcIiwgeG4yOjAsIHhzMzpcInB4LCBcIiwgeG4zOjIwLCB4bjQ6XCJweClcIlxuXHRcdCAqIEFuZCB0aGV5J2QgYWxsIGdldCBqb2luZWQgdG9nZXRoZXIgd2hlbiB0aGUgQ1NTUGx1Z2luIHJlbmRlcnMgKGluIHRoZSBzZXRSYXRpbygpIG1ldGhvZCkuXG5cdFx0ICogQHBhcmFtIHtzdHJpbmc9fSBwZnggUHJlZml4IChpZiBhbnkpXG5cdFx0ICogQHBhcmFtIHshbnVtYmVyfSBzIFN0YXJ0aW5nIHZhbHVlXG5cdFx0ICogQHBhcmFtIHshbnVtYmVyfSBjIENoYW5nZSBpbiBudW1lcmljIHZhbHVlIG92ZXIgdGhlIGNvdXJzZSBvZiB0aGUgZW50aXJlIHR3ZWVuLiBGb3IgZXhhbXBsZSwgaWYgdGhlIHN0YXJ0IGlzIDUgYW5kIHRoZSBlbmQgaXMgMTAwLCB0aGUgY2hhbmdlIHdvdWxkIGJlIDk1LlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nPX0gc2Z4IFN1ZmZpeCAoaWYgYW55KVxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IHIgUm91bmQgKGlmIHRydWUpLlxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IHBhZCBJZiB0cnVlLCB0aGlzIGV4dHJhIHZhbHVlIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgdGhlIHByZXZpb3VzIG9uZSBieSBhIHNwYWNlLiBJZiB0aGVyZSBpcyBubyBwcmV2aW91cyBleHRyYSBhbmQgcGFkIGlzIHRydWUsIGl0IHdpbGwgYXV0b21hdGljYWxseSBkcm9wIHRoZSBzcGFjZS5cblx0XHQgKiBAcmV0dXJuIHtDU1NQcm9wVHdlZW59IHJldHVybnMgaXRzZWxmIHNvIHRoYXQgbXVsdGlwbGUgbWV0aG9kcyBjYW4gYmUgY2hhaW5lZCB0b2dldGhlci5cblx0XHQgKi9cblx0XHRwLmFwcGVuZFh0cmEgPSBmdW5jdGlvbihwZngsIHMsIGMsIHNmeCwgciwgcGFkKSB7XG5cdFx0XHR2YXIgcHQgPSB0aGlzLFxuXHRcdFx0XHRsID0gcHQubDtcblx0XHRcdHB0W1wieHNcIiArIGxdICs9IChwYWQgJiYgKGwgfHwgcHRbXCJ4c1wiICsgbF0pKSA/IFwiIFwiICsgcGZ4IDogcGZ4IHx8IFwiXCI7XG5cdFx0XHRpZiAoIWMpIGlmIChsICE9PSAwICYmICFwdC5wbHVnaW4pIHsgLy90eXBpY2FsbHkgd2UnbGwgY29tYmluZSBub24tY2hhbmdpbmcgdmFsdWVzIHJpZ2h0IGludG8gdGhlIHhzIHRvIG9wdGltaXplIHBlcmZvcm1hbmNlLCBidXQgd2UgZG9uJ3QgY29tYmluZSB0aGVtIHdoZW4gdGhlcmUncyBhIHBsdWdpbiB0aGF0IHdpbGwgYmUgdHdlZW5pbmcgdGhlIHZhbHVlcyBiZWNhdXNlIGl0IG1heSBkZXBlbmQgb24gdGhlIHZhbHVlcyBiZWluZyBzcGxpdCBhcGFydCwgbGlrZSBmb3IgYSBiZXppZXIsIGlmIGEgdmFsdWUgZG9lc24ndCBjaGFuZ2UgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIHNlY29uZCBpdGVyYXRpb24gYnV0IHRoZW4gaXQgZG9lcyBvbiB0aGUgM3JkLCB3ZSdsbCBydW4gaW50byB0cm91YmxlIGJlY2F1c2UgdGhlcmUncyBubyB4biBzbG90IGZvciB0aGF0IHZhbHVlIVxuXHRcdFx0XHRwdFtcInhzXCIgKyBsXSArPSBzICsgKHNmeCB8fCBcIlwiKTtcblx0XHRcdFx0cmV0dXJuIHB0O1xuXHRcdFx0fVxuXHRcdFx0cHQubCsrO1xuXHRcdFx0cHQudHlwZSA9IHB0LnNldFJhdGlvID8gMiA6IDE7XG5cdFx0XHRwdFtcInhzXCIgKyBwdC5sXSA9IHNmeCB8fCBcIlwiO1xuXHRcdFx0aWYgKGwgPiAwKSB7XG5cdFx0XHRcdHB0LmRhdGFbXCJ4blwiICsgbF0gPSBzICsgYztcblx0XHRcdFx0cHQucnhwW1wieG5cIiArIGxdID0gcjsgLy9yb3VuZCBleHRyYSBwcm9wZXJ0eSAod2UgbmVlZCB0byB0YXAgaW50byB0aGlzIGluIHRoZSBfcGFyc2VUb1Byb3h5KCkgbWV0aG9kKVxuXHRcdFx0XHRwdFtcInhuXCIgKyBsXSA9IHM7XG5cdFx0XHRcdGlmICghcHQucGx1Z2luKSB7XG5cdFx0XHRcdFx0cHQueGZpcnN0ID0gbmV3IENTU1Byb3BUd2VlbihwdCwgXCJ4blwiICsgbCwgcywgYywgcHQueGZpcnN0IHx8IHB0LCAwLCBwdC5uLCByLCBwdC5wcik7XG5cdFx0XHRcdFx0cHQueGZpcnN0LnhzMCA9IDA7IC8vanVzdCB0byBlbnN1cmUgdGhhdCB0aGUgcHJvcGVydHkgc3RheXMgbnVtZXJpYyB3aGljaCBoZWxwcyBtb2Rlcm4gYnJvd3NlcnMgc3BlZWQgdXAgcHJvY2Vzc2luZy4gUmVtZW1iZXIsIGluIHRoZSBzZXRSYXRpbygpIG1ldGhvZCwgd2UgZG8gcHQudFtwdC5wXSA9IHZhbCArIHB0LnhzMCBzbyBpZiBwdC54czAgaXMgXCJcIiAodGhlIGRlZmF1bHQpLCBpdCdsbCBjYXN0IHRoZSBlbmQgdmFsdWUgYXMgYSBzdHJpbmcuIFdoZW4gYSBwcm9wZXJ0eSBpcyBhIG51bWJlciBzb21ldGltZXMgYW5kIGEgc3RyaW5nIHNvbWV0aW1lcywgaXQgcHJldmVudHMgdGhlIGNvbXBpbGVyIGZyb20gbG9ja2luZyBpbiB0aGUgZGF0YSB0eXBlLCBzbG93aW5nIHRoaW5ncyBkb3duIHNsaWdodGx5LlxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBwdDtcblx0XHRcdH1cblx0XHRcdHB0LmRhdGEgPSB7czpzICsgY307XG5cdFx0XHRwdC5yeHAgPSB7fTtcblx0XHRcdHB0LnMgPSBzO1xuXHRcdFx0cHQuYyA9IGM7XG5cdFx0XHRwdC5yID0gcjtcblx0XHRcdHJldHVybiBwdDtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQGNvbnN0cnVjdG9yIEEgU3BlY2lhbFByb3AgaXMgYmFzaWNhbGx5IGEgY3NzIHByb3BlcnR5IHRoYXQgbmVlZHMgdG8gYmUgdHJlYXRlZCBpbiBhIG5vbi1zdGFuZGFyZCB3YXksIGxpa2UgaWYgaXQgbWF5IGNvbnRhaW4gYSBjb21wbGV4IHZhbHVlIGxpa2UgYm94U2hhZG93OlwiNXB4IDEwcHggMTVweCByZ2IoMjU1LCAxMDIsIDUxKVwiIG9yIGlmIGl0IGlzIGFzc29jaWF0ZWQgd2l0aCBhbm90aGVyIHBsdWdpbiBsaWtlIFRocm93UHJvcHNQbHVnaW4gb3IgQmV6aWVyUGx1Z2luLiBFdmVyeSBTcGVjaWFsUHJvcCBpcyBhc3NvY2lhdGVkIHdpdGggYSBwYXJ0aWN1bGFyIHByb3BlcnR5IG5hbWUgbGlrZSBcImJveFNoYWRvd1wiIG9yIFwidGhyb3dQcm9wc1wiIG9yIFwiYmV6aWVyXCIgYW5kIGl0IHdpbGwgaW50ZXJjZXB0IHRob3NlIHZhbHVlcyBpbiB0aGUgdmFycyBvYmplY3QgdGhhdCdzIHBhc3NlZCB0byB0aGUgQ1NTUGx1Z2luIGFuZCBoYW5kbGUgdGhlbSBhY2NvcmRpbmdseS5cblx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IHAgUHJvcGVydHkgbmFtZSAobGlrZSBcImJveFNoYWRvd1wiIG9yIFwidGhyb3dQcm9wc1wiKVxuXHRcdCAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9ucyBBbiBvYmplY3QgY29udGFpbmluZyBhbnkgb2YgdGhlIGZvbGxvd2luZyBjb25maWd1cmF0aW9uIG9wdGlvbnM6XG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgLSBkZWZhdWx0VmFsdWU6IHRoZSBkZWZhdWx0IHZhbHVlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgLSBwYXJzZXI6IEEgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgY2FsbGVkIHdoZW4gdGhlIGFzc29jaWF0ZWQgcHJvcGVydHkgbmFtZSBpcyBmb3VuZCBpbiB0aGUgdmFycy4gVGhpcyBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgQ1NTUHJvcFR3ZWVuIGluc3RhbmNlIGFuZCBpdCBzaG91bGQgZW5zdXJlIHRoYXQgaXQgaXMgcHJvcGVybHkgaW5zZXJ0ZWQgaW50byB0aGUgbGlua2VkIGxpc3QuIEl0IHdpbGwgcmVjZWl2ZSA0IHBhcmFtdGVyczogMSkgVGhlIHRhcmdldCwgMikgVGhlIHZhbHVlIGRlZmluZWQgaW4gdGhlIHZhcnMsIDMpIFRoZSBDU1NQbHVnaW4gaW5zdGFuY2UgKHdob3NlIF9maXJzdFBUIHNob3VsZCBiZSB1c2VkIGZvciB0aGUgbGlua2VkIGxpc3QpLCBhbmQgNCkgQSBjb21wdXRlZCBzdHlsZSBvYmplY3QgaWYgb25lIHdhcyBjYWxjdWxhdGVkICh0aGlzIGlzIGEgc3BlZWQgb3B0aW1pemF0aW9uIHRoYXQgYWxsb3dzIHJldHJpZXZhbCBvZiBzdGFydGluZyB2YWx1ZXMgcXVpY2tlcilcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAtIGZvcm1hdHRlcjogYSBmdW5jdGlvbiB0aGF0IGZvcm1hdHMgYW55IHZhbHVlIHJlY2VpdmVkIGZvciB0aGlzIHNwZWNpYWwgcHJvcGVydHkgKGZvciBleGFtcGxlLCBib3hTaGFkb3cgY291bGQgdGFrZSBcIjVweCA1cHggcmVkXCIgYW5kIGZvcm1hdCBpdCB0byBcIjVweCA1cHggMHB4IDBweCByZWRcIiBzbyB0aGF0IGJvdGggdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyBoYXZlIGEgY29tbW9uIG9yZGVyIGFuZCBxdWFudGl0eSBvZiB2YWx1ZXMuKVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgIC0gcHJlZml4OiBpZiB0cnVlLCB3ZSdsbCBkZXRlcm1pbmUgd2hldGhlciBvciBub3QgdGhpcyBwcm9wZXJ0eSByZXF1aXJlcyBhIHZlbmRvciBwcmVmaXggKGxpa2UgV2Via2l0IG9yIE1veiBvciBtcyBvciBPKVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgIC0gY29sb3I6IHNldCB0aGlzIHRvIHRydWUgaWYgdGhlIHZhbHVlIGZvciB0aGlzIFNwZWNpYWxQcm9wIG1heSBjb250YWluIGNvbG9yLXJlbGF0ZWQgdmFsdWVzIGxpa2UgcmdiKCksIHJnYmEoKSwgZXRjLlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgIC0gcHJpb3JpdHk6IHByaW9yaXR5IGluIHRoZSBsaW5rZWQgbGlzdCBvcmRlci4gSGlnaGVyIHByaW9yaXR5IFNwZWNpYWxQcm9wcyB3aWxsIGJlIHVwZGF0ZWQgYmVmb3JlIGxvd2VyIHByaW9yaXR5IG9uZXMuIFRoZSBkZWZhdWx0IHByaW9yaXR5IGlzIDAuXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgLSBtdWx0aTogaWYgdHJ1ZSwgdGhlIGZvcm1hdHRlciBzaG91bGQgYWNjb21tb2RhdGUgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiB2YWx1ZXMsIGxpa2UgYm94U2hhZG93IGNvdWxkIGhhdmUgbXVsdGlwbGUgYm94U2hhZG93cyBsaXN0ZWQgb3V0LlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgIC0gY29sbGFwc2libGU6IGlmIHRydWUsIHRoZSBmb3JtYXR0ZXIgc2hvdWxkIHRyZWF0IHRoZSB2YWx1ZSBsaWtlIGl0J3MgYSB0b3AvcmlnaHQvYm90dG9tL2xlZnQgdmFsdWUgdGhhdCBjb3VsZCBiZSBjb2xsYXBzZWQsIGxpa2UgXCI1cHhcIiB3b3VsZCBhcHBseSB0byBhbGwsIFwiNXB4LCAxMHB4XCIgd291bGQgdXNlIDVweCBmb3IgdG9wL2JvdHRvbSBhbmQgMTBweCBmb3IgcmlnaHQvbGVmdCwgZXRjLlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgIC0ga2V5d29yZDogYSBzcGVjaWFsIGtleXdvcmQgdGhhdCBjYW4gW29wdGlvbmFsbHldIGJlIGZvdW5kIGluc2lkZSB0aGUgdmFsdWUgKGxpa2UgXCJpbnNldFwiIGZvciBib3hTaGFkb3cpLiBUaGlzIGFsbG93cyB1cyB0byB2YWxpZGF0ZSBiZWdpbm5pbmcvZW5kaW5nIHZhbHVlcyB0byBtYWtlIHN1cmUgdGhleSBtYXRjaCAoaWYgdGhlIGtleXdvcmQgaXMgZm91bmQgaW4gb25lLCBpdCdsbCBiZSBhZGRlZCB0byB0aGUgb3RoZXIgZm9yIGNvbnNpc3RlbmN5IGJ5IGRlZmF1bHQpLlxuXHRcdCAqL1xuXHRcdHZhciBTcGVjaWFsUHJvcCA9IGZ1bmN0aW9uKHAsIG9wdGlvbnMpIHtcblx0XHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdFx0XHRcdHRoaXMucCA9IG9wdGlvbnMucHJlZml4ID8gX2NoZWNrUHJvcFByZWZpeChwKSB8fCBwIDogcDtcblx0XHRcdFx0X3NwZWNpYWxQcm9wc1twXSA9IF9zcGVjaWFsUHJvcHNbdGhpcy5wXSA9IHRoaXM7XG5cdFx0XHRcdHRoaXMuZm9ybWF0ID0gb3B0aW9ucy5mb3JtYXR0ZXIgfHwgX2dldEZvcm1hdHRlcihvcHRpb25zLmRlZmF1bHRWYWx1ZSwgb3B0aW9ucy5jb2xvciwgb3B0aW9ucy5jb2xsYXBzaWJsZSwgb3B0aW9ucy5tdWx0aSk7XG5cdFx0XHRcdGlmIChvcHRpb25zLnBhcnNlcikge1xuXHRcdFx0XHRcdHRoaXMucGFyc2UgPSBvcHRpb25zLnBhcnNlcjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmNscnMgPSBvcHRpb25zLmNvbG9yO1xuXHRcdFx0XHR0aGlzLm11bHRpID0gb3B0aW9ucy5tdWx0aTtcblx0XHRcdFx0dGhpcy5rZXl3b3JkID0gb3B0aW9ucy5rZXl3b3JkO1xuXHRcdFx0XHR0aGlzLmRmbHQgPSBvcHRpb25zLmRlZmF1bHRWYWx1ZTtcblx0XHRcdFx0dGhpcy5hbGxvd0Z1bmMgPSBvcHRpb25zLmFsbG93RnVuYztcblx0XHRcdFx0dGhpcy5wciA9IG9wdGlvbnMucHJpb3JpdHkgfHwgMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vc2hvcnRjdXQgZm9yIGNyZWF0aW5nIGEgbmV3IFNwZWNpYWxQcm9wIHRoYXQgY2FuIGFjY2VwdCBtdWx0aXBsZSBwcm9wZXJ0aWVzIGFzIGEgY29tbWEtZGVsaW1pdGVkIGxpc3QgKGhlbHBzIG1pbmlmaWNhdGlvbikuIGRmbHQgY2FuIGJlIGFuIGFycmF5IGZvciBtdWx0aXBsZSB2YWx1ZXMgKHdlIGRvbid0IGRvIGEgY29tbWEtZGVsaW1pdGVkIGxpc3QgYmVjYXVzZSB0aGUgZGVmYXVsdCB2YWx1ZSBtYXkgY29udGFpbiBjb21tYXMsIGxpa2UgcmVjdCgwcHgsMHB4LDBweCwwcHgpKS4gV2UgYXR0YWNoIHRoaXMgbWV0aG9kIHRvIHRoZSBTcGVjaWFsUHJvcCBjbGFzcy9vYmplY3QgaW5zdGVhZCBvZiB1c2luZyBhIHByaXZhdGUgX2NyZWF0ZVNwZWNpYWxQcm9wKCkgbWV0aG9kIHNvIHRoYXQgd2UgY2FuIHRhcCBpbnRvIGl0IGV4dGVybmFsbHkgaWYgbmVjZXNzYXJ5LCBsaWtlIGZyb20gYW5vdGhlciBwbHVnaW4uXG5cdFx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AgPSBfaW50ZXJuYWxzLl9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcCA9IGZ1bmN0aW9uKHAsIG9wdGlvbnMsIGRlZmF1bHRzKSB7XG5cdFx0XHRcdGlmICh0eXBlb2Yob3B0aW9ucykgIT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0XHRvcHRpb25zID0ge3BhcnNlcjpkZWZhdWx0c307IC8vdG8gbWFrZSBiYWNrd2FyZHMgY29tcGF0aWJsZSB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIEJlemllclBsdWdpbiBhbmQgVGhyb3dQcm9wc1BsdWdpblxuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBhID0gcC5zcGxpdChcIixcIiksXG5cdFx0XHRcdFx0ZCA9IG9wdGlvbnMuZGVmYXVsdFZhbHVlLFxuXHRcdFx0XHRcdGksIHRlbXA7XG5cdFx0XHRcdGRlZmF1bHRzID0gZGVmYXVsdHMgfHwgW2RdO1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdG9wdGlvbnMucHJlZml4ID0gKGkgPT09IDAgJiYgb3B0aW9ucy5wcmVmaXgpO1xuXHRcdFx0XHRcdG9wdGlvbnMuZGVmYXVsdFZhbHVlID0gZGVmYXVsdHNbaV0gfHwgZDtcblx0XHRcdFx0XHR0ZW1wID0gbmV3IFNwZWNpYWxQcm9wKGFbaV0sIG9wdGlvbnMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvL2NyZWF0ZXMgYSBwbGFjZWhvbGRlciBzcGVjaWFsIHByb3AgZm9yIGEgcGx1Z2luIHNvIHRoYXQgdGhlIHByb3BlcnR5IGdldHMgY2F1Z2h0IHRoZSBmaXJzdCB0aW1lIGEgdHdlZW4gb2YgaXQgaXMgYXR0ZW1wdGVkLCBhbmQgYXQgdGhhdCB0aW1lIGl0IG1ha2VzIHRoZSBwbHVnaW4gcmVnaXN0ZXIgaXRzZWxmLCB0aHVzIHRha2luZyBvdmVyIGZvciBhbGwgZnV0dXJlIHR3ZWVucyBvZiB0aGF0IHByb3BlcnR5LiBUaGlzIGFsbG93cyB1cyB0byBub3QgbWFuZGF0ZSB0aGF0IHRoaW5ncyBsb2FkIGluIGEgcGFydGljdWxhciBvcmRlciBhbmQgaXQgYWxzbyBhbGxvd3MgdXMgdG8gbG9nKCkgYW4gZXJyb3IgdGhhdCBpbmZvcm1zIHRoZSB1c2VyIHdoZW4gdGhleSBhdHRlbXB0IHRvIHR3ZWVuIGFuIGV4dGVybmFsIHBsdWdpbi1yZWxhdGVkIHByb3BlcnR5IHdpdGhvdXQgbG9hZGluZyBpdHMgLmpzIGZpbGUuXG5cdFx0XHRfcmVnaXN0ZXJQbHVnaW5Qcm9wID0gX2ludGVybmFscy5fcmVnaXN0ZXJQbHVnaW5Qcm9wID0gZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRpZiAoIV9zcGVjaWFsUHJvcHNbcF0pIHtcblx0XHRcdFx0XHR2YXIgcGx1Z2luTmFtZSA9IHAuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwLnN1YnN0cigxKSArIFwiUGx1Z2luXCI7XG5cdFx0XHRcdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKHAsIHtwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbiwgdmFycykge1xuXHRcdFx0XHRcdFx0dmFyIHBsdWdpbkNsYXNzID0gX2dsb2JhbHMuY29tLmdyZWVuc29jay5wbHVnaW5zW3BsdWdpbk5hbWVdO1xuXHRcdFx0XHRcdFx0aWYgKCFwbHVnaW5DbGFzcykge1xuXHRcdFx0XHRcdFx0XHRfbG9nKFwiRXJyb3I6IFwiICsgcGx1Z2luTmFtZSArIFwiIGpzIGZpbGUgbm90IGxvYWRlZC5cIik7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwdDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHBsdWdpbkNsYXNzLl9jc3NSZWdpc3RlcigpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIF9zcGVjaWFsUHJvcHNbcF0ucGFyc2UodCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbiwgdmFycyk7XG5cdFx0XHRcdFx0fX0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cblx0XHRwID0gU3BlY2lhbFByb3AucHJvdG90eXBlO1xuXG5cdFx0LyoqXG5cdFx0ICogQWxpYXMgZm9yIF9wYXJzZUNvbXBsZXgoKSB0aGF0IGF1dG9tYXRpY2FsbHkgcGx1Z3MgaW4gY2VydGFpbiB2YWx1ZXMgZm9yIHRoaXMgU3BlY2lhbFByb3AsIGxpa2UgaXRzIHByb3BlcnR5IG5hbWUsIHdoZXRoZXIgb3Igbm90IGNvbG9ycyBzaG91bGQgYmUgc2Vuc2VkLCB0aGUgZGVmYXVsdCB2YWx1ZSwgYW5kIHByaW9yaXR5LiBJdCBhbHNvIGxvb2tzIGZvciBhbnkga2V5d29yZCB0aGF0IHRoZSBTcGVjaWFsUHJvcCBkZWZpbmVzIChsaWtlIFwiaW5zZXRcIiBmb3IgYm94U2hhZG93KSBhbmQgZW5zdXJlcyB0aGF0IHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyB2YWx1ZXMgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2YgdmFsdWVzIGZvciBTcGVjaWFsUHJvcHMgd2hlcmUgbXVsdGkgaXMgdHJ1ZSAobGlrZSBib3hTaGFkb3cgYW5kIHRleHRTaGFkb3cgY2FuIGhhdmUgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdClcblx0XHQgKiBAcGFyYW0geyFPYmplY3R9IHQgdGFyZ2V0IGVsZW1lbnRcblx0XHQgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyfG9iamVjdCl9IGIgYmVnaW5uaW5nIHZhbHVlXG5cdFx0ICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcnxvYmplY3QpfSBlIGVuZGluZyAoZGVzdGluYXRpb24pIHZhbHVlXG5cdFx0ICogQHBhcmFtIHtDU1NQcm9wVHdlZW49fSBwdCBuZXh0IENTU1Byb3BUd2VlbiBpbiB0aGUgbGlua2VkIGxpc3Rcblx0XHQgKiBAcGFyYW0ge1R3ZWVuUGx1Z2luPX0gcGx1Z2luIElmIGFub3RoZXIgcGx1Z2luIHdpbGwgYmUgdHdlZW5pbmcgdGhlIGNvbXBsZXggdmFsdWUsIHRoYXQgVHdlZW5QbHVnaW4gaW5zdGFuY2UgZ29lcyBoZXJlLlxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb249fSBzZXRSYXRpbyBJZiBhIGN1c3RvbSBzZXRSYXRpbygpIG1ldGhvZCBzaG91bGQgYmUgdXNlZCB0byBoYW5kbGUgdGhpcyBjb21wbGV4IHZhbHVlLCB0aGF0IGdvZXMgaGVyZS5cblx0XHQgKiBAcmV0dXJuIHtDU1NQcm9wVHdlZW49fSBGaXJzdCBDU1NQcm9wVHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0XG5cdFx0ICovXG5cdFx0cC5wYXJzZUNvbXBsZXggPSBmdW5jdGlvbih0LCBiLCBlLCBwdCwgcGx1Z2luLCBzZXRSYXRpbykge1xuXHRcdFx0dmFyIGt3ZCA9IHRoaXMua2V5d29yZCxcblx0XHRcdFx0aSwgYmEsIGVhLCBsLCBiaSwgZWk7XG5cdFx0XHQvL2lmIHRoaXMgU3BlY2lhbFByb3AncyB2YWx1ZSBjYW4gY29udGFpbiBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHZhbHVlcyAobGlrZSBib3hTaGFkb3cgb3IgdGV4dFNoYWRvdyksIHdlIG11c3QgcGFyc2UgdGhlbSBpbiBhIHNwZWNpYWwgd2F5LCBhbmQgbG9vayBmb3IgYSBrZXl3b3JkIChsaWtlIFwiaW5zZXRcIiBmb3IgYm94U2hhZG93KSBhbmQgZW5zdXJlIHRoYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIEJPVEggaGF2ZSBpdCBpZiB0aGUgZW5kIGRlZmluZXMgaXQgYXMgc3VjaC4gV2UgYWxzbyBtdXN0IGVuc3VyZSB0aGF0IHRoZXJlIGFyZSBhbiBlcXVhbCBudW1iZXIgb2YgdmFsdWVzIHNwZWNpZmllZCAod2UgY2FuJ3QgdHdlZW4gMSBib3hTaGFkb3cgdG8gMyBmb3IgZXhhbXBsZSlcblx0XHRcdGlmICh0aGlzLm11bHRpKSBpZiAoX2NvbW1hc091dHNpZGVQYXJlbkV4cC50ZXN0KGUpIHx8IF9jb21tYXNPdXRzaWRlUGFyZW5FeHAudGVzdChiKSkge1xuXHRcdFx0XHRiYSA9IGIucmVwbGFjZShfY29tbWFzT3V0c2lkZVBhcmVuRXhwLCBcInxcIikuc3BsaXQoXCJ8XCIpO1xuXHRcdFx0XHRlYSA9IGUucmVwbGFjZShfY29tbWFzT3V0c2lkZVBhcmVuRXhwLCBcInxcIikuc3BsaXQoXCJ8XCIpO1xuXHRcdFx0fSBlbHNlIGlmIChrd2QpIHtcblx0XHRcdFx0YmEgPSBbYl07XG5cdFx0XHRcdGVhID0gW2VdO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGVhKSB7XG5cdFx0XHRcdGwgPSAoZWEubGVuZ3RoID4gYmEubGVuZ3RoKSA/IGVhLmxlbmd0aCA6IGJhLmxlbmd0aDtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdGIgPSBiYVtpXSA9IGJhW2ldIHx8IHRoaXMuZGZsdDtcblx0XHRcdFx0XHRlID0gZWFbaV0gPSBlYVtpXSB8fCB0aGlzLmRmbHQ7XG5cdFx0XHRcdFx0aWYgKGt3ZCkge1xuXHRcdFx0XHRcdFx0YmkgPSBiLmluZGV4T2Yoa3dkKTtcblx0XHRcdFx0XHRcdGVpID0gZS5pbmRleE9mKGt3ZCk7XG5cdFx0XHRcdFx0XHRpZiAoYmkgIT09IGVpKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChlaSA9PT0gLTEpIHsgLy9pZiB0aGUga2V5d29yZCBpc24ndCBpbiB0aGUgZW5kIHZhbHVlLCByZW1vdmUgaXQgZnJvbSB0aGUgYmVnaW5uaW5nIG9uZS5cblx0XHRcdFx0XHRcdFx0XHRiYVtpXSA9IGJhW2ldLnNwbGl0KGt3ZCkuam9pbihcIlwiKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChiaSA9PT0gLTEpIHsgLy9pZiB0aGUga2V5d29yZCBpc24ndCBpbiB0aGUgYmVnaW5uaW5nLCBhZGQgaXQuXG5cdFx0XHRcdFx0XHRcdFx0YmFbaV0gKz0gXCIgXCIgKyBrd2Q7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0YiA9IGJhLmpvaW4oXCIsIFwiKTtcblx0XHRcdFx0ZSA9IGVhLmpvaW4oXCIsIFwiKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBfcGFyc2VDb21wbGV4KHQsIHRoaXMucCwgYiwgZSwgdGhpcy5jbHJzLCB0aGlzLmRmbHQsIHB0LCB0aGlzLnByLCBwbHVnaW4sIHNldFJhdGlvKTtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQWNjZXB0cyBhIHRhcmdldCBhbmQgZW5kIHZhbHVlIGFuZCBzcGl0cyBiYWNrIGEgQ1NTUHJvcFR3ZWVuIHRoYXQgaGFzIGJlZW4gaW5zZXJ0ZWQgaW50byB0aGUgQ1NTUGx1Z2luJ3MgbGlua2VkIGxpc3QgYW5kIGNvbmZvcm1zIHdpdGggYWxsIHRoZSBjb252ZW50aW9ucyB3ZSB1c2UgaW50ZXJuYWxseSwgbGlrZSB0eXBlOi0xLCAwLCAxLCBvciAyLCBzZXR0aW5nIHVwIGFueSBleHRyYSBwcm9wZXJ0eSB0d2VlbnMsIHByaW9yaXR5LCBldGMuIEZvciBleGFtcGxlLCBpZiB3ZSBoYXZlIGEgYm94U2hhZG93IFNwZWNpYWxQcm9wIGFuZCBjYWxsOlxuXHRcdCAqIHRoaXMuX2ZpcnN0UFQgPSBzcC5wYXJzZShlbGVtZW50LCBcIjVweCAxMHB4IDIwcHggcmdiKDI1NTAsMTAyLDUxKVwiLCBcImJveFNoYWRvd1wiLCB0aGlzKTtcblx0XHQgKiBJdCBzaG91bGQgZmlndXJlIG91dCB0aGUgc3RhcnRpbmcgdmFsdWUgb2YgdGhlIGVsZW1lbnQncyBib3hTaGFkb3csIGNvbXBhcmUgaXQgdG8gdGhlIHByb3ZpZGVkIGVuZCB2YWx1ZSBhbmQgY3JlYXRlIGFsbCB0aGUgbmVjZXNzYXJ5IENTU1Byb3BUd2VlbnMgb2YgdGhlIGFwcHJvcHJpYXRlIHR5cGVzIHRvIHR3ZWVuIHRoZSBib3hTaGFkb3cuIFRoZSBDU1NQcm9wVHdlZW4gdGhhdCBnZXRzIHNwaXQgYmFjayBzaG91bGQgYWxyZWFkeSBiZSBpbnNlcnRlZCBpbnRvIHRoZSBsaW5rZWQgbGlzdCAodGhlIDR0aCBwYXJhbWV0ZXIgaXMgdGhlIGN1cnJlbnQgaGVhZCwgc28gcHJlcGVuZCB0byB0aGF0KS5cblx0XHQgKiBAcGFyYW0geyFPYmplY3R9IHQgVGFyZ2V0IG9iamVjdCB3aG9zZSBwcm9wZXJ0eSBpcyBiZWluZyB0d2VlbmVkXG5cdFx0ICogQHBhcmFtIHtPYmplY3R9IGUgRW5kIHZhbHVlIGFzIHByb3ZpZGVkIGluIHRoZSB2YXJzIG9iamVjdCAodHlwaWNhbGx5IGEgc3RyaW5nLCBidXQgbm90IGFsd2F5cyAtIGxpa2UgYSB0aHJvd1Byb3BzIHdvdWxkIGJlIGFuIG9iamVjdCkuXG5cdFx0ICogQHBhcmFtIHshc3RyaW5nfSBwIFByb3BlcnR5IG5hbWVcblx0XHQgKiBAcGFyYW0geyFDU1NQbHVnaW59IGNzc3AgVGhlIENTU1BsdWdpbiBpbnN0YW5jZSB0aGF0IHNob3VsZCBiZSBhc3NvY2lhdGVkIHdpdGggdGhpcyB0d2Vlbi5cblx0XHQgKiBAcGFyYW0gez9DU1NQcm9wVHdlZW59IHB0IFRoZSBDU1NQcm9wVHdlZW4gdGhhdCBpcyB0aGUgY3VycmVudCBoZWFkIG9mIHRoZSBsaW5rZWQgbGlzdCAod2UnbGwgcHJlcGVuZCB0byBpdClcblx0XHQgKiBAcGFyYW0ge1R3ZWVuUGx1Z2luPX0gcGx1Z2luIElmIGEgcGx1Z2luIHdpbGwgYmUgdXNlZCB0byB0d2VlbiB0aGUgcGFyc2VkIHZhbHVlLCB0aGlzIGlzIHRoZSBwbHVnaW4gaW5zdGFuY2UuXG5cdFx0ICogQHBhcmFtIHtPYmplY3Q9fSB2YXJzIE9yaWdpbmFsIHZhcnMgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGRhdGEgZm9yIHBhcnNpbmcuXG5cdFx0ICogQHJldHVybiB7Q1NTUHJvcFR3ZWVufSBUaGUgZmlyc3QgQ1NTUHJvcFR3ZWVuIGluIHRoZSBsaW5rZWQgbGlzdCB3aGljaCBpbmNsdWRlcyB0aGUgbmV3IG9uZShzKSBhZGRlZCBieSB0aGUgcGFyc2UoKSBjYWxsLlxuXHRcdCAqL1xuXHRcdHAucGFyc2UgPSBmdW5jdGlvbih0LCBlLCBwLCBjc3NwLCBwdCwgcGx1Z2luLCB2YXJzKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXJzZUNvbXBsZXgodC5zdHlsZSwgdGhpcy5mb3JtYXQoX2dldFN0eWxlKHQsIHRoaXMucCwgX2NzLCBmYWxzZSwgdGhpcy5kZmx0KSksIHRoaXMuZm9ybWF0KGUpLCBwdCwgcGx1Z2luKTtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmVnaXN0ZXJzIGEgc3BlY2lhbCBwcm9wZXJ0eSB0aGF0IHNob3VsZCBiZSBpbnRlcmNlcHRlZCBmcm9tIGFueSBcImNzc1wiIG9iamVjdHMgZGVmaW5lZCBpbiB0d2VlbnMuIFRoaXMgYWxsb3dzIHlvdSB0byBoYW5kbGUgdGhlbSBob3dldmVyIHlvdSB3YW50IHdpdGhvdXQgQ1NTUGx1Z2luIGRvaW5nIGl0IGZvciB5b3UuIFRoZSAybmQgcGFyYW1ldGVyIHNob3VsZCBiZSBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyAzIHBhcmFtZXRlcnM6XG5cdFx0ICogIDEpIFRhcmdldCBvYmplY3Qgd2hvc2UgcHJvcGVydHkgc2hvdWxkIGJlIHR3ZWVuZWQgKHR5cGljYWxseSBhIERPTSBlbGVtZW50KVxuXHRcdCAqICAyKSBUaGUgZW5kL2Rlc3RpbmF0aW9uIHZhbHVlIChjb3VsZCBiZSBhIHN0cmluZywgbnVtYmVyLCBvYmplY3QsIG9yIHdoYXRldmVyIHlvdSB3YW50KVxuXHRcdCAqICAzKSBUaGUgdHdlZW4gaW5zdGFuY2UgKHlvdSBwcm9iYWJseSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoaXMsIGJ1dCBpdCBjYW4gYmUgdXNlZnVsIGZvciBsb29raW5nIHVwIGluZm9ybWF0aW9uIGxpa2UgdGhlIGR1cmF0aW9uKVxuXHRcdCAqXG5cdFx0ICogVGhlbiwgeW91ciBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgZWFjaCB0aW1lIHRoZSB0d2VlbiBnZXRzIHJlbmRlcmVkLCBwYXNzaW5nIGEgbnVtZXJpYyBcInJhdGlvXCIgcGFyYW1ldGVyIHRvIHlvdXIgZnVuY3Rpb24gdGhhdCBpbmRpY2F0ZXMgdGhlIGNoYW5nZSBmYWN0b3IgKHVzdWFsbHkgYmV0d2VlbiAwIGFuZCAxKS4gRm9yIGV4YW1wbGU6XG5cdFx0ICpcblx0XHQgKiBDU1NQbHVnaW4ucmVnaXN0ZXJTcGVjaWFsUHJvcChcIm15Q3VzdG9tUHJvcFwiLCBmdW5jdGlvbih0YXJnZXQsIHZhbHVlLCB0d2Vlbikge1xuXHRcdCAqICAgICAgdmFyIHN0YXJ0ID0gdGFyZ2V0LnN0eWxlLndpZHRoO1xuXHRcdCAqICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJhdGlvKSB7XG5cdFx0ICogICAgICAgICAgICAgIHRhcmdldC5zdHlsZS53aWR0aCA9IChzdGFydCArIHZhbHVlICogcmF0aW8pICsgXCJweFwiO1xuXHRcdCAqICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInNldCB3aWR0aCB0byBcIiArIHRhcmdldC5zdHlsZS53aWR0aCk7XG5cdFx0ICogICAgICAgICAgfVxuXHRcdCAqIH0sIDApO1xuXHRcdCAqXG5cdFx0ICogVGhlbiwgd2hlbiBJIGRvIHRoaXMgdHdlZW4sIGl0IHdpbGwgdHJpZ2dlciBteSBzcGVjaWFsIHByb3BlcnR5OlxuXHRcdCAqXG5cdFx0ICogVHdlZW5MaXRlLnRvKGVsZW1lbnQsIDEsIHtjc3M6e215Q3VzdG9tUHJvcDoxMDB9fSk7XG5cdFx0ICpcblx0XHQgKiBJbiB0aGUgZXhhbXBsZSwgb2YgY291cnNlLCB3ZSdyZSBqdXN0IGNoYW5naW5nIHRoZSB3aWR0aCwgYnV0IHlvdSBjYW4gZG8gYW55dGhpbmcgeW91IHdhbnQuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IG5hbWUgUHJvcGVydHkgbmFtZSAob3IgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMpIHRoYXQgc2hvdWxkIGJlIGludGVyY2VwdGVkIGFuZCBoYW5kbGVkIGJ5IHlvdXIgZnVuY3Rpb24uIEZvciBleGFtcGxlLCBpZiBJIGRlZmluZSBcIm15Q3VzdG9tUHJvcFwiLCB0aGVuIGl0IHdvdWxkIGhhbmRsZSB0aGF0IHBvcnRpb24gb2YgdGhlIGZvbGxvd2luZyB0d2VlbjogVHdlZW5MaXRlLnRvKGVsZW1lbnQsIDEsIHtjc3M6e215Q3VzdG9tUHJvcDoxMDB9fSlcblx0XHQgKiBAcGFyYW0geyFmdW5jdGlvbihPYmplY3QsIE9iamVjdCwgT2JqZWN0LCBzdHJpbmcpOmZ1bmN0aW9uKG51bWJlcil9IG9uSW5pdFR3ZWVuIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gYSB0d2VlbiBvZiB0aGlzIHNwZWNpYWwgcHJvcGVydHkgaXMgcGVyZm9ybWVkLiBUaGUgZnVuY3Rpb24gd2lsbCByZWNlaXZlIDQgcGFyYW1ldGVyczogMSkgVGFyZ2V0IG9iamVjdCB0aGF0IHNob3VsZCBiZSB0d2VlbmVkLCAyKSBWYWx1ZSB0aGF0IHdhcyBwYXNzZWQgdG8gdGhlIHR3ZWVuLCAzKSBUaGUgdHdlZW4gaW5zdGFuY2UgaXRzZWxmIChyYXJlbHkgdXNlZCksIGFuZCA0KSBUaGUgcHJvcGVydHkgbmFtZSB0aGF0J3MgYmVpbmcgdHdlZW5lZC4gWW91ciBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgY2FsbGVkIG9uIGV2ZXJ5IHVwZGF0ZSBvZiB0aGUgdHdlZW4uIFRoYXQgZnVuY3Rpb24gd2lsbCByZWNlaXZlIGEgc2luZ2xlIHBhcmFtZXRlciB0aGF0IGlzIGEgXCJjaGFuZ2UgZmFjdG9yXCIgdmFsdWUgKHR5cGljYWxseSBiZXR3ZWVuIDAgYW5kIDEpIGluZGljYXRpbmcgdGhlIGFtb3VudCBvZiBjaGFuZ2UgYXMgYSByYXRpby4gWW91IGNhbiB1c2UgdGhpcyB0byBkZXRlcm1pbmUgaG93IHRvIHNldCB0aGUgdmFsdWVzIGFwcHJvcHJpYXRlbHkgaW4geW91ciBmdW5jdGlvbi5cblx0XHQgKiBAcGFyYW0ge251bWJlcj19IHByaW9yaXR5IFByaW9yaXR5IHRoYXQgaGVscHMgdGhlIGVuZ2luZSBkZXRlcm1pbmUgdGhlIG9yZGVyIGluIHdoaWNoIHRvIHNldCB0aGUgcHJvcGVydGllcyAoZGVmYXVsdDogMCkuIEhpZ2hlciBwcmlvcml0eSBwcm9wZXJ0aWVzIHdpbGwgYmUgdXBkYXRlZCBiZWZvcmUgbG93ZXIgcHJpb3JpdHkgb25lcy5cblx0XHQgKi9cblx0XHRDU1NQbHVnaW4ucmVnaXN0ZXJTcGVjaWFsUHJvcCA9IGZ1bmN0aW9uKG5hbWUsIG9uSW5pdFR3ZWVuLCBwcmlvcml0eSkge1xuXHRcdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKG5hbWUsIHtwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbiwgdmFycykge1xuXHRcdFx0XHR2YXIgcnYgPSBuZXcgQ1NTUHJvcFR3ZWVuKHQsIHAsIDAsIDAsIHB0LCAyLCBwLCBmYWxzZSwgcHJpb3JpdHkpO1xuXHRcdFx0XHRydi5wbHVnaW4gPSBwbHVnaW47XG5cdFx0XHRcdHJ2LnNldFJhdGlvID0gb25Jbml0VHdlZW4odCwgZSwgY3NzcC5fdHdlZW4sIHApO1xuXHRcdFx0XHRyZXR1cm4gcnY7XG5cdFx0XHR9LCBwcmlvcml0eTpwcmlvcml0eX0pO1xuXHRcdH07XG5cblxuXG5cblxuXG5cdFx0Ly90cmFuc2Zvcm0tcmVsYXRlZCBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzXG5cdFx0Q1NTUGx1Z2luLnVzZVNWR1RyYW5zZm9ybUF0dHIgPSB0cnVlOyAvL1NhZmFyaSBhbmQgRmlyZWZveCBib3RoIGhhdmUgc29tZSByZW5kZXJpbmcgYnVncyB3aGVuIGFwcGx5aW5nIENTUyB0cmFuc2Zvcm1zIHRvIFNWRyBlbGVtZW50cywgc28gZGVmYXVsdCB0byB1c2luZyB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUgaW5zdGVhZCAodXNlcnMgY2FuIG92ZXJyaWRlIHRoaXMpLlxuXHRcdHZhciBfdHJhbnNmb3JtUHJvcHMgPSAoXCJzY2FsZVgsc2NhbGVZLHNjYWxlWix4LHkseixza2V3WCxza2V3WSxyb3RhdGlvbixyb3RhdGlvblgscm90YXRpb25ZLHBlcnNwZWN0aXZlLHhQZXJjZW50LHlQZXJjZW50XCIpLnNwbGl0KFwiLFwiKSxcblx0XHRcdF90cmFuc2Zvcm1Qcm9wID0gX2NoZWNrUHJvcFByZWZpeChcInRyYW5zZm9ybVwiKSwgLy90aGUgSmF2YXNjcmlwdCAoY2FtZWxDYXNlKSB0cmFuc2Zvcm0gcHJvcGVydHksIGxpa2UgbXNUcmFuc2Zvcm0sIFdlYmtpdFRyYW5zZm9ybSwgTW96VHJhbnNmb3JtLCBvciBPVHJhbnNmb3JtLlxuXHRcdFx0X3RyYW5zZm9ybVByb3BDU1MgPSBfcHJlZml4Q1NTICsgXCJ0cmFuc2Zvcm1cIixcblx0XHRcdF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX2NoZWNrUHJvcFByZWZpeChcInRyYW5zZm9ybU9yaWdpblwiKSxcblx0XHRcdF9zdXBwb3J0czNEID0gKF9jaGVja1Byb3BQcmVmaXgoXCJwZXJzcGVjdGl2ZVwiKSAhPT0gbnVsbCksXG5cdFx0XHRUcmFuc2Zvcm0gPSBfaW50ZXJuYWxzLlRyYW5zZm9ybSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGlzLnBlcnNwZWN0aXZlID0gcGFyc2VGbG9hdChDU1NQbHVnaW4uZGVmYXVsdFRyYW5zZm9ybVBlcnNwZWN0aXZlKSB8fCAwO1xuXHRcdFx0XHR0aGlzLmZvcmNlM0QgPSAoQ1NTUGx1Z2luLmRlZmF1bHRGb3JjZTNEID09PSBmYWxzZSB8fCAhX3N1cHBvcnRzM0QpID8gZmFsc2UgOiBDU1NQbHVnaW4uZGVmYXVsdEZvcmNlM0QgfHwgXCJhdXRvXCI7XG5cdFx0XHR9LFxuXHRcdFx0X1NWR0VsZW1lbnQgPSBfZ3NTY29wZS5TVkdFbGVtZW50LFxuXHRcdFx0X3VzZVNWR1RyYW5zZm9ybUF0dHIsXG5cdFx0XHQvL1NvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCBhbmQgSUUpIGRvbid0IGhvbm9yIHRyYW5zZm9ybS1vcmlnaW4gcHJvcGVybHkgaW4gU1ZHIGVsZW1lbnRzLCBzbyB3ZSBuZWVkIHRvIG1hbnVhbGx5IGFkanVzdCB0aGUgbWF0cml4IGFjY29yZGluZ2x5LiBXZSBmZWF0dXJlIGRldGVjdCBoZXJlIHJhdGhlciB0aGFuIGFsd2F5cyBkb2luZyB0aGUgY29udmVyc2lvbiBmb3IgY2VydGFpbiBicm93c2VycyBiZWNhdXNlIHRoZXkgbWF5IGZpeCB0aGUgcHJvYmxlbSBhdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUuXG5cblx0XHRcdF9jcmVhdGVTVkcgPSBmdW5jdGlvbih0eXBlLCBjb250YWluZXIsIGF0dHJpYnV0ZXMpIHtcblx0XHRcdFx0dmFyIGVsZW1lbnQgPSBfZG9jLmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIHR5cGUpLFxuXHRcdFx0XHRcdHJlZyA9IC8oW2Etel0pKFtBLVpdKS9nLFxuXHRcdFx0XHRcdHA7XG5cdFx0XHRcdGZvciAocCBpbiBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBwLnJlcGxhY2UocmVnLCBcIiQxLSQyXCIpLnRvTG93ZXJDYXNlKCksIGF0dHJpYnV0ZXNbcF0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtZW50KTtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQ7XG5cdFx0XHR9LFxuXHRcdFx0X2RvY0VsZW1lbnQgPSBfZG9jLmRvY3VtZW50RWxlbWVudCB8fCB7fSxcblx0XHRcdF9mb3JjZVNWR1RyYW5zZm9ybUF0dHIgPSAoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vSUUgYW5kIEFuZHJvaWQgc3RvY2sgZG9uJ3Qgc3VwcG9ydCBDU1MgdHJhbnNmb3JtcyBvbiBTVkcgZWxlbWVudHMsIHNvIHdlIG11c3Qgd3JpdGUgdGhlbSB0byB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUuIFdlIHBvcHVsYXRlIHRoaXMgdmFyaWFibGUgaW4gdGhlIF9wYXJzZVRyYW5zZm9ybSgpIG1ldGhvZCwgYW5kIG9ubHkgaWYvd2hlbiB3ZSBjb21lIGFjcm9zcyBhbiBTVkcgZWxlbWVudFxuXHRcdFx0XHR2YXIgZm9yY2UgPSBfaWVWZXJzIHx8ICgvQW5kcm9pZC9pLnRlc3QoX2FnZW50KSAmJiAhX2dzU2NvcGUuY2hyb21lKSxcblx0XHRcdFx0XHRzdmcsIHJlY3QsIHdpZHRoO1xuXHRcdFx0XHRpZiAoX2RvYy5jcmVhdGVFbGVtZW50TlMgJiYgX2RvY0VsZW1lbnQuYXBwZW5kQ2hpbGQgJiYgIWZvcmNlKSB7IC8vSUU4IGFuZCBlYXJsaWVyIGRvZXNuJ3Qgc3VwcG9ydCBTVkcgYW55d2F5XG5cdFx0XHRcdFx0c3ZnID0gX2NyZWF0ZVNWRyhcInN2Z1wiLCBfZG9jRWxlbWVudCk7XG5cdFx0XHRcdFx0cmVjdCA9IF9jcmVhdGVTVkcoXCJyZWN0XCIsIHN2Zywge3dpZHRoOjEwMCwgaGVpZ2h0OjUwLCB4OjEwMH0pO1xuXHRcdFx0XHRcdHdpZHRoID0gcmVjdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcblx0XHRcdFx0XHRyZWN0LnN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSA9IFwiNTAlIDUwJVwiO1xuXHRcdFx0XHRcdHJlY3Quc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gXCJzY2FsZVgoMC41KVwiO1xuXHRcdFx0XHRcdGZvcmNlID0gKHdpZHRoID09PSByZWN0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICYmICEoX2lzRmlyZWZveCAmJiBfc3VwcG9ydHMzRCkpOyAvL25vdGU6IEZpcmVmb3ggZmFpbHMgdGhlIHRlc3QgZXZlbiB0aG91Z2ggaXQgZG9lcyBzdXBwb3J0IENTUyB0cmFuc2Zvcm1zIGluIDNELiBTaW5jZSB3ZSBjYW4ndCBwdXNoIDNEIHN0dWZmIGludG8gdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUsIHdlIGZvcmNlIEZpcmVmb3ggdG8gcGFzcyB0aGUgdGVzdCBoZXJlIChhcyBsb25nIGFzIGl0IGRvZXMgdHJ1bHkgc3VwcG9ydCAzRCkuXG5cdFx0XHRcdFx0X2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQoc3ZnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZm9yY2U7XG5cdFx0XHR9KSgpLFxuXHRcdFx0X3BhcnNlU1ZHT3JpZ2luID0gZnVuY3Rpb24oZSwgbG9jYWwsIGRlY29yYXRlZSwgYWJzb2x1dGUsIHNtb290aE9yaWdpbiwgc2tpcFJlY29yZCkge1xuXHRcdFx0XHR2YXIgdG0gPSBlLl9nc1RyYW5zZm9ybSxcblx0XHRcdFx0XHRtID0gX2dldE1hdHJpeChlLCB0cnVlKSxcblx0XHRcdFx0XHR2LCB4LCB5LCB4T3JpZ2luLCB5T3JpZ2luLCBhLCBiLCBjLCBkLCB0eCwgdHksIGRldGVybWluYW50LCB4T3JpZ2luT2xkLCB5T3JpZ2luT2xkO1xuXHRcdFx0XHRpZiAodG0pIHtcblx0XHRcdFx0XHR4T3JpZ2luT2xkID0gdG0ueE9yaWdpbjsgLy9yZWNvcmQgdGhlIG9yaWdpbmFsIHZhbHVlcyBiZWZvcmUgd2UgYWx0ZXIgdGhlbS5cblx0XHRcdFx0XHR5T3JpZ2luT2xkID0gdG0ueU9yaWdpbjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWFic29sdXRlIHx8ICh2ID0gYWJzb2x1dGUuc3BsaXQoXCIgXCIpKS5sZW5ndGggPCAyKSB7XG5cdFx0XHRcdFx0YiA9IGUuZ2V0QkJveCgpO1xuXHRcdFx0XHRcdGlmIChiLnggPT09IDAgJiYgYi55ID09PSAwICYmIGIud2lkdGggKyBiLmhlaWdodCA9PT0gMCkgeyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgbWlzcmVwb3J0IHRoZSBib3VuZHMgaWYgdGhlIGVsZW1lbnQgaGFzIHplcm8gd2lkdGggYW5kIGhlaWdodCAoaXQganVzdCBhc3N1bWVzIGl0J3MgYXQgeDowLCB5OjApLCB0aHVzIHdlIG5lZWQgdG8gbWFudWFsbHkgZ3JhYiB0aGUgcG9zaXRpb24gaW4gdGhhdCBjYXNlLlxuXHRcdFx0XHRcdFx0YiA9IHt4OiBwYXJzZUZsb2F0KGUuaGFzQXR0cmlidXRlKFwieFwiKSA/IGUuZ2V0QXR0cmlidXRlKFwieFwiKSA6IGUuaGFzQXR0cmlidXRlKFwiY3hcIikgPyBlLmdldEF0dHJpYnV0ZShcImN4XCIpIDogMCkgfHwgMCwgeTogcGFyc2VGbG9hdChlLmhhc0F0dHJpYnV0ZShcInlcIikgPyBlLmdldEF0dHJpYnV0ZShcInlcIikgOiBlLmhhc0F0dHJpYnV0ZShcImN5XCIpID8gZS5nZXRBdHRyaWJ1dGUoXCJjeVwiKSA6IDApIHx8IDAsIHdpZHRoOjAsIGhlaWdodDowfTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bG9jYWwgPSBfcGFyc2VQb3NpdGlvbihsb2NhbCkuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRcdHYgPSBbKGxvY2FsWzBdLmluZGV4T2YoXCIlXCIpICE9PSAtMSA/IHBhcnNlRmxvYXQobG9jYWxbMF0pIC8gMTAwICogYi53aWR0aCA6IHBhcnNlRmxvYXQobG9jYWxbMF0pKSArIGIueCxcblx0XHRcdFx0XHRcdCAobG9jYWxbMV0uaW5kZXhPZihcIiVcIikgIT09IC0xID8gcGFyc2VGbG9hdChsb2NhbFsxXSkgLyAxMDAgKiBiLmhlaWdodCA6IHBhcnNlRmxvYXQobG9jYWxbMV0pKSArIGIueV07XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVjb3JhdGVlLnhPcmlnaW4gPSB4T3JpZ2luID0gcGFyc2VGbG9hdCh2WzBdKTtcblx0XHRcdFx0ZGVjb3JhdGVlLnlPcmlnaW4gPSB5T3JpZ2luID0gcGFyc2VGbG9hdCh2WzFdKTtcblx0XHRcdFx0aWYgKGFic29sdXRlICYmIG0gIT09IF9pZGVudGl0eTJETWF0cml4KSB7IC8vaWYgc3ZnT3JpZ2luIGlzIGJlaW5nIHNldCwgd2UgbXVzdCBpbnZlcnQgdGhlIG1hdHJpeCBhbmQgZGV0ZXJtaW5lIHdoZXJlIHRoZSBhYnNvbHV0ZSBwb2ludCBpcywgZmFjdG9yaW5nIGluIHRoZSBjdXJyZW50IHRyYW5zZm9ybXMuIE90aGVyd2lzZSwgdGhlIHN2Z09yaWdpbiB3b3VsZCBiZSBiYXNlZCBvbiB0aGUgZWxlbWVudCdzIG5vbi10cmFuc2Zvcm1lZCBwb3NpdGlvbiBvbiB0aGUgY2FudmFzLlxuXHRcdFx0XHRcdGEgPSBtWzBdO1xuXHRcdFx0XHRcdGIgPSBtWzFdO1xuXHRcdFx0XHRcdGMgPSBtWzJdO1xuXHRcdFx0XHRcdGQgPSBtWzNdO1xuXHRcdFx0XHRcdHR4ID0gbVs0XTtcblx0XHRcdFx0XHR0eSA9IG1bNV07XG5cdFx0XHRcdFx0ZGV0ZXJtaW5hbnQgPSAoYSAqIGQgLSBiICogYyk7XG5cdFx0XHRcdFx0aWYgKGRldGVybWluYW50KSB7IC8vaWYgaXQncyB6ZXJvIChsaWtlIGlmIHNjYWxlWCBhbmQgc2NhbGVZIGFyZSB6ZXJvKSwgc2tpcCBpdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBkaXZpZGluZyBieSB6ZXJvLlxuXHRcdFx0XHRcdFx0eCA9IHhPcmlnaW4gKiAoZCAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoLWMgLyBkZXRlcm1pbmFudCkgKyAoKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXRlcm1pbmFudCk7XG5cdFx0XHRcdFx0XHR5ID0geE9yaWdpbiAqICgtYiAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoYSAvIGRldGVybWluYW50KSAtICgoYSAqIHR5IC0gYiAqIHR4KSAvIGRldGVybWluYW50KTtcblx0XHRcdFx0XHRcdHhPcmlnaW4gPSBkZWNvcmF0ZWUueE9yaWdpbiA9IHZbMF0gPSB4O1xuXHRcdFx0XHRcdFx0eU9yaWdpbiA9IGRlY29yYXRlZS55T3JpZ2luID0gdlsxXSA9IHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0bSkgeyAvL2F2b2lkIGp1bXAgd2hlbiB0cmFuc2Zvcm1PcmlnaW4gaXMgY2hhbmdlZCAtIGFkanVzdCB0aGUgeC95IHZhbHVlcyBhY2NvcmRpbmdseVxuXHRcdFx0XHRcdGlmIChza2lwUmVjb3JkKSB7XG5cdFx0XHRcdFx0XHRkZWNvcmF0ZWUueE9mZnNldCA9IHRtLnhPZmZzZXQ7XG5cdFx0XHRcdFx0XHRkZWNvcmF0ZWUueU9mZnNldCA9IHRtLnlPZmZzZXQ7XG5cdFx0XHRcdFx0XHR0bSA9IGRlY29yYXRlZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHNtb290aE9yaWdpbiB8fCAoc21vb3RoT3JpZ2luICE9PSBmYWxzZSAmJiBDU1NQbHVnaW4uZGVmYXVsdFNtb290aE9yaWdpbiAhPT0gZmFsc2UpKSB7XG5cdFx0XHRcdFx0XHR4ID0geE9yaWdpbiAtIHhPcmlnaW5PbGQ7XG5cdFx0XHRcdFx0XHR5ID0geU9yaWdpbiAtIHlPcmlnaW5PbGQ7XG5cdFx0XHRcdFx0XHQvL29yaWdpbmFsbHksIHdlIHNpbXBseSBhZGp1c3RlZCB0aGUgeCBhbmQgeSB2YWx1ZXMsIGJ1dCB0aGF0IHdvdWxkIGNhdXNlIHByb2JsZW1zIGlmLCBmb3IgZXhhbXBsZSwgeW91IGNyZWF0ZWQgYSByb3RhdGlvbmFsIHR3ZWVuIHBhcnQtd2F5IHRocm91Z2ggYW4geC95IHR3ZWVuLiBNYW5hZ2luZyB0aGUgb2Zmc2V0IGluIGEgc2VwYXJhdGUgdmFyaWFibGUgZ2l2ZXMgdXMgdWx0aW1hdGUgZmxleGliaWxpdHkuXG5cdFx0XHRcdFx0XHQvL3RtLnggLT0geCAtICh4ICogbVswXSArIHkgKiBtWzJdKTtcblx0XHRcdFx0XHRcdC8vdG0ueSAtPSB5IC0gKHggKiBtWzFdICsgeSAqIG1bM10pO1xuXHRcdFx0XHRcdFx0dG0ueE9mZnNldCArPSAoeCAqIG1bMF0gKyB5ICogbVsyXSkgLSB4O1xuXHRcdFx0XHRcdFx0dG0ueU9mZnNldCArPSAoeCAqIG1bMV0gKyB5ICogbVszXSkgLSB5O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0bS54T2Zmc2V0ID0gdG0ueU9mZnNldCA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghc2tpcFJlY29yZCkge1xuXHRcdFx0XHRcdGUuc2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIsIHYuam9pbihcIiBcIikpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0X2dldEJCb3hIYWNrID0gZnVuY3Rpb24oc3dhcElmUG9zc2libGUpIHsgLy93b3JrcyBhcm91bmQgaXNzdWVzIGluIHNvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgdGhhdCBkb24ndCBjb3JyZWN0bHkgcmVwb3J0IGdldEJCb3goKSBvbiBTVkcgZWxlbWVudHMgaW5zaWRlIGEgPGRlZnM+IGVsZW1lbnQgYW5kL29yIDxtYXNrPi4gV2UgdHJ5IGNyZWF0aW5nIGFuIFNWRywgYWRkaW5nIGl0IHRvIHRoZSBkb2N1bWVudEVsZW1lbnQgYW5kIHRvc3MgdGhlIGVsZW1lbnQgaW4gdGhlcmUgc28gdGhhdCBpdCdzIGRlZmluaXRlbHkgcGFydCBvZiB0aGUgcmVuZGVyaW5nIHRyZWUsIHRoZW4gZ3JhYiB0aGUgYmJveCBhbmQgaWYgaXQgd29ya3MsIHdlIGFjdHVhbGx5IHN3YXAgb3V0IHRoZSBvcmlnaW5hbCBnZXRCQm94KCkgbWV0aG9kIGZvciBvdXIgb3duIHRoYXQgZG9lcyB0aGVzZSBleHRyYSBzdGVwcyB3aGVuZXZlciBnZXRCQm94IGlzIG5lZWRlZC4gVGhpcyBoZWxwcyBlbnN1cmUgdGhhdCBwZXJmb3JtYW5jZSBpcyBvcHRpbWFsIChvbmx5IGRvIGFsbCB0aGVzZSBleHRyYSBzdGVwcyB3aGVuIGFic29sdXRlbHkgbmVjZXNzYXJ5Li4ubW9zdCBlbGVtZW50cyBkb24ndCBuZWVkIGl0KS5cblx0XHRcdFx0dmFyIHN2ZyA9IF9jcmVhdGVFbGVtZW50KFwic3ZnXCIsICh0aGlzLm93bmVyU1ZHRWxlbWVudCAmJiB0aGlzLm93bmVyU1ZHRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiKSkgfHwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKSxcblx0XHRcdFx0XHRvbGRQYXJlbnQgPSB0aGlzLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0b2xkU2libGluZyA9IHRoaXMubmV4dFNpYmxpbmcsXG5cdFx0XHRcdFx0b2xkQ1NTID0gdGhpcy5zdHlsZS5jc3NUZXh0LFxuXHRcdFx0XHRcdGJib3g7XG5cdFx0XHRcdF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHN2Zyk7XG5cdFx0XHRcdHN2Zy5hcHBlbmRDaGlsZCh0aGlzKTtcblx0XHRcdFx0dGhpcy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXHRcdFx0XHRpZiAoc3dhcElmUG9zc2libGUpIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0YmJveCA9IHRoaXMuZ2V0QkJveCgpO1xuXHRcdFx0XHRcdFx0dGhpcy5fb3JpZ2luYWxHZXRCQm94ID0gdGhpcy5nZXRCQm94O1xuXHRcdFx0XHRcdFx0dGhpcy5nZXRCQm94ID0gX2dldEJCb3hIYWNrO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHsgfVxuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuX29yaWdpbmFsR2V0QkJveCkge1xuXHRcdFx0XHRcdGJib3ggPSB0aGlzLl9vcmlnaW5hbEdldEJCb3goKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAob2xkU2libGluZykge1xuXHRcdFx0XHRcdG9sZFBhcmVudC5pbnNlcnRCZWZvcmUodGhpcywgb2xkU2libGluZyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0b2xkUGFyZW50LmFwcGVuZENoaWxkKHRoaXMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHN2Zyk7XG5cdFx0XHRcdHRoaXMuc3R5bGUuY3NzVGV4dCA9IG9sZENTUztcblx0XHRcdFx0cmV0dXJuIGJib3g7XG5cdFx0XHR9LFxuXHRcdFx0X2dldEJCb3ggPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cmV0dXJuIGUuZ2V0QkJveCgpOyAvL0ZpcmVmb3ggdGhyb3dzIGVycm9ycyBpZiB5b3UgdHJ5IGNhbGxpbmcgZ2V0QkJveCgpIG9uIGFuIFNWRyBlbGVtZW50IHRoYXQncyBub3QgcmVuZGVyZWQgKGxpa2UgaW4gYSA8c3ltYm9sPiBvciA8ZGVmcz4pLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MTIxMThcblx0XHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0XHRyZXR1cm4gX2dldEJCb3hIYWNrLmNhbGwoZSwgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRfaXNTVkcgPSBmdW5jdGlvbihlKSB7IC8vcmVwb3J0cyBpZiB0aGUgZWxlbWVudCBpcyBhbiBTVkcgb24gd2hpY2ggZ2V0QkJveCgpIGFjdHVhbGx5IHdvcmtzXG5cdFx0XHRcdHJldHVybiAhIShfU1ZHRWxlbWVudCAmJiBlLmdldENUTSAmJiAoIWUucGFyZW50Tm9kZSB8fCBlLm93bmVyU1ZHRWxlbWVudCkgJiYgX2dldEJCb3goZSkpO1xuXHRcdFx0fSxcblx0XHRcdF9pZGVudGl0eTJETWF0cml4ID0gWzEsMCwwLDEsMCwwXSxcblx0XHRcdF9nZXRNYXRyaXggPSBmdW5jdGlvbihlLCBmb3JjZTJEKSB7XG5cdFx0XHRcdHZhciB0bSA9IGUuX2dzVHJhbnNmb3JtIHx8IG5ldyBUcmFuc2Zvcm0oKSxcblx0XHRcdFx0XHRybmQgPSAxMDAwMDAsXG5cdFx0XHRcdFx0c3R5bGUgPSBlLnN0eWxlLFxuXHRcdFx0XHRcdGlzRGVmYXVsdCwgcywgbSwgbiwgZGVjLCBuZXh0U2libGluZywgcGFyZW50O1xuXHRcdFx0XHRpZiAoX3RyYW5zZm9ybVByb3ApIHtcblx0XHRcdFx0XHRzID0gX2dldFN0eWxlKGUsIF90cmFuc2Zvcm1Qcm9wQ1NTLCBudWxsLCB0cnVlKTtcblx0XHRcdFx0fSBlbHNlIGlmIChlLmN1cnJlbnRTdHlsZSkge1xuXHRcdFx0XHRcdC8vZm9yIG9sZGVyIHZlcnNpb25zIG9mIElFLCB3ZSBuZWVkIHRvIGludGVycHJldCB0aGUgZmlsdGVyIHBvcnRpb24gdGhhdCBpcyBpbiB0aGUgZm9ybWF0OiBwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuTWF0cml4KE0xMT02LjEyMzIzMzk5NTczNjc2NmUtMTcsIE0xMj0tMSwgTTIxPTEsIE0yMj02LjEyMzIzMzk5NTczNjc2NmUtMTcsIHNpemluZ01ldGhvZD0nYXV0byBleHBhbmQnKSBOb3RpY2UgdGhhdCB3ZSBuZWVkIHRvIHN3YXAgYiBhbmQgYyBjb21wYXJlZCB0byBhIG5vcm1hbCBtYXRyaXguXG5cdFx0XHRcdFx0cyA9IGUuY3VycmVudFN0eWxlLmZpbHRlci5tYXRjaChfaWVHZXRNYXRyaXhFeHApO1xuXHRcdFx0XHRcdHMgPSAocyAmJiBzLmxlbmd0aCA9PT0gNCkgPyBbc1swXS5zdWJzdHIoNCksIE51bWJlcihzWzJdLnN1YnN0cig0KSksIE51bWJlcihzWzFdLnN1YnN0cig0KSksIHNbM10uc3Vic3RyKDQpLCAodG0ueCB8fCAwKSwgKHRtLnkgfHwgMCldLmpvaW4oXCIsXCIpIDogXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpc0RlZmF1bHQgPSAoIXMgfHwgcyA9PT0gXCJub25lXCIgfHwgcyA9PT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIik7XG5cdFx0XHRcdGlmIChfdHJhbnNmb3JtUHJvcCAmJiBpc0RlZmF1bHQgJiYgIWUub2Zmc2V0UGFyZW50ICYmIGUgIT09IF9kb2NFbGVtZW50KSB7IC8vbm90ZTogaWYgb2Zmc2V0UGFyZW50IGlzIG51bGwsIHRoYXQgbWVhbnMgdGhlIGVsZW1lbnQgaXNuJ3QgaW4gdGhlIG5vcm1hbCBkb2N1bWVudCBmbG93LCBsaWtlIGlmIGl0IGhhcyBkaXNwbGF5Om5vbmUgb3Igb25lIG9mIGl0cyBhbmNlc3RvcnMgaGFzIGRpc3BsYXk6bm9uZSkuIEZpcmVmb3ggcmV0dXJucyBudWxsIGZvciBnZXRDb21wdXRlZFN0eWxlKCkgaWYgdGhlIGVsZW1lbnQgaXMgaW4gYW4gaWZyYW1lIHRoYXQgaGFzIGRpc3BsYXk6bm9uZS4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTQ4Mzk3XG5cdFx0XHRcdFx0Ly9icm93c2VycyBkb24ndCByZXBvcnQgdHJhbnNmb3JtcyBhY2N1cmF0ZWx5IHVubGVzcyB0aGUgZWxlbWVudCBpcyBpbiB0aGUgRE9NIGFuZCBoYXMgYSBkaXNwbGF5IHZhbHVlIHRoYXQncyBub3QgXCJub25lXCIuIEZpcmVmb3ggYW5kIE1pY3Jvc29mdCBicm93c2VycyBoYXZlIGEgcGFydGlhbCBidWcgd2hlcmUgdGhleSdsbCByZXBvcnQgdHJhbnNmb3JtcyBldmVuIGlmIGRpc3BsYXk6bm9uZSBCVVQgbm90IGFueSBwZXJjZW50YWdlLWJhc2VkIHZhbHVlcyBsaWtlIHRyYW5zbGF0ZSgtNTAlLCA4cHgpIHdpbGwgYmUgcmVwb3J0ZWQgYXMgaWYgaXQncyB0cmFuc2xhdGUoMCwgOHB4KS5cblx0XHRcdFx0XHRuID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXHRcdFx0XHRcdHBhcmVudCA9IGUucGFyZW50Tm9kZTtcblx0XHRcdFx0XHRpZiAoIXBhcmVudCB8fCAhZS5vZmZzZXRQYXJlbnQpIHtcblx0XHRcdFx0XHRcdGRlYyA9IDE7IC8vZmxhZ1xuXHRcdFx0XHRcdFx0bmV4dFNpYmxpbmcgPSBlLm5leHRTaWJsaW5nO1xuXHRcdFx0XHRcdFx0X2RvY0VsZW1lbnQuYXBwZW5kQ2hpbGQoZSk7IC8vd2UgbXVzdCBhZGQgaXQgdG8gdGhlIERPTSBpbiBvcmRlciB0byBnZXQgdmFsdWVzIHByb3Blcmx5XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHMgPSBfZ2V0U3R5bGUoZSwgX3RyYW5zZm9ybVByb3BDU1MsIG51bGwsIHRydWUpO1xuXHRcdFx0XHRcdGlzRGVmYXVsdCA9ICghcyB8fCBzID09PSBcIm5vbmVcIiB8fCBzID09PSBcIm1hdHJpeCgxLCAwLCAwLCAxLCAwLCAwKVwiKTtcblx0XHRcdFx0XHRpZiAobikge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IG47XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdF9yZW1vdmVQcm9wKHN0eWxlLCBcImRpc3BsYXlcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChkZWMpIHtcblx0XHRcdFx0XHRcdGlmIChuZXh0U2libGluZykge1xuXHRcdFx0XHRcdFx0XHRwYXJlbnQuaW5zZXJ0QmVmb3JlKGUsIG5leHRTaWJsaW5nKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAocGFyZW50KSB7XG5cdFx0XHRcdFx0XHRcdHBhcmVudC5hcHBlbmRDaGlsZChlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKGUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodG0uc3ZnIHx8IChlLmdldENUTSAmJiBfaXNTVkcoZSkpKSB7XG5cdFx0XHRcdFx0aWYgKGlzRGVmYXVsdCAmJiAoc3R5bGVbX3RyYW5zZm9ybVByb3BdICsgXCJcIikuaW5kZXhPZihcIm1hdHJpeFwiKSAhPT0gLTEpIHsgLy9zb21lIGJyb3dzZXJzIChsaWtlIENocm9tZSA0MCkgZG9uJ3QgY29ycmVjdGx5IHJlcG9ydCB0cmFuc2Zvcm1zIHRoYXQgYXJlIGFwcGxpZWQgaW5saW5lIG9uIGFuIFNWRyBlbGVtZW50ICh0aGV5IGRvbid0IGdldCBpbmNsdWRlZCBpbiB0aGUgY29tcHV0ZWQgc3R5bGUpLCBzbyB3ZSBkb3VibGUtY2hlY2sgaGVyZSBhbmQgYWNjZXB0IG1hdHJpeCB2YWx1ZXNcblx0XHRcdFx0XHRcdHMgPSBzdHlsZVtfdHJhbnNmb3JtUHJvcF07XG5cdFx0XHRcdFx0XHRpc0RlZmF1bHQgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtID0gZS5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG5cdFx0XHRcdFx0aWYgKGlzRGVmYXVsdCAmJiBtKSB7XG5cdFx0XHRcdFx0XHRtID0gZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpLm1hdHJpeDsgLy9lbnN1cmVzIHRoYXQgZXZlbiBjb21wbGV4IHZhbHVlcyBsaWtlIFwidHJhbnNsYXRlKDUwLDYwKSByb3RhdGUoMTM1LDAsMClcIiBhcmUgcGFyc2VkIGJlY2F1c2UgaXQgbWFzaGVzIGl0IGludG8gYSBtYXRyaXguXG5cdFx0XHRcdFx0XHRzID0gXCJtYXRyaXgoXCIgKyBtLmEgKyBcIixcIiArIG0uYiArIFwiLFwiICsgbS5jICsgXCIsXCIgKyBtLmQgKyBcIixcIiArIG0uZSArIFwiLFwiICsgbS5mICsgXCIpXCI7XG5cdFx0XHRcdFx0XHRpc0RlZmF1bHQgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaXNEZWZhdWx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIF9pZGVudGl0eTJETWF0cml4O1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vc3BsaXQgdGhlIG1hdHJpeCB2YWx1ZXMgb3V0IGludG8gYW4gYXJyYXkgKG0gZm9yIG1hdHJpeClcblx0XHRcdFx0bSA9IChzIHx8IFwiXCIpLm1hdGNoKF9udW1FeHApIHx8IFtdO1xuXHRcdFx0XHRpID0gbS5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdG4gPSBOdW1iZXIobVtpXSk7XG5cdFx0XHRcdFx0bVtpXSA9IChkZWMgPSBuIC0gKG4gfD0gMCkpID8gKChkZWMgKiBybmQgKyAoZGVjIDwgMCA/IC0wLjUgOiAwLjUpKSB8IDApIC8gcm5kICsgbiA6IG47IC8vY29udmVydCBzdHJpbmdzIHRvIE51bWJlcnMgYW5kIHJvdW5kIHRvIDUgZGVjaW1hbCBwbGFjZXMgdG8gYXZvaWQgaXNzdWVzIHdpdGggdGlueSBudW1iZXJzLiBSb3VnaGx5IDIweCBmYXN0ZXIgdGhhbiBOdW1iZXIudG9GaXhlZCgpLiBXZSBhbHNvIG11c3QgbWFrZSBzdXJlIHRvIHJvdW5kIGJlZm9yZSBkaXZpZGluZyBzbyB0aGF0IHZhbHVlcyBsaWtlIDAuOTk5OTk5OTk5OSBiZWNvbWUgMSB0byBhdm9pZCBnbGl0Y2hlcyBpbiBicm93c2VyIHJlbmRlcmluZyBhbmQgaW50ZXJwcmV0YXRpb24gb2YgZmxpcHBlZC9yb3RhdGVkIDNEIG1hdHJpY2VzLiBBbmQgZG9uJ3QganVzdCBtdWx0aXBseSB0aGUgbnVtYmVyIGJ5IHJuZCwgZmxvb3IgaXQsIGFuZCB0aGVuIGRpdmlkZSBieSBybmQgYmVjYXVzZSB0aGUgYml0d2lzZSBvcGVyYXRpb25zIG1heCBvdXQgYXQgYSAzMi1iaXQgc2lnbmVkIGludGVnZXIsIHRodXMgaXQgY291bGQgZ2V0IGNsaXBwZWQgYXQgYSByZWxhdGl2ZWx5IGxvdyB2YWx1ZSAobGlrZSAyMiwwMDAuMDAwMDAgZm9yIGV4YW1wbGUpLlxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAoZm9yY2UyRCAmJiBtLmxlbmd0aCA+IDYpID8gW21bMF0sIG1bMV0sIG1bNF0sIG1bNV0sIG1bMTJdLCBtWzEzXV0gOiBtO1xuXHRcdFx0fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBQYXJzZXMgdGhlIHRyYW5zZm9ybSB2YWx1ZXMgZm9yIGFuIGVsZW1lbnQsIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCB4LCB5LCB6LCBzY2FsZVgsIHNjYWxlWSwgc2NhbGVaLCByb3RhdGlvbiwgcm90YXRpb25YLCByb3RhdGlvblksIHNrZXdYLCBhbmQgc2tld1kgcHJvcGVydGllcy4gTm90ZTogYnkgZGVmYXVsdCAoZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMpLCBhbGwgc2tld2luZyBpcyBjb21iaW5lZCBpbnRvIHNrZXdYIGFuZCByb3RhdGlvbiBidXQgc2tld1kgc3RpbGwgaGFzIGEgcGxhY2UgaW4gdGhlIHRyYW5zZm9ybSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gcmVjb3JkIGhvdyBtdWNoIG9mIHRoZSBza2V3IGlzIGF0dHJpYnV0ZWQgdG8gc2tld1ggdnMgc2tld1kuIFJlbWVtYmVyLCBhIHNrZXdZIG9mIDEwIGxvb2tzIHRoZSBzYW1lIGFzIGEgcm90YXRpb24gb2YgMTAgYW5kIHNrZXdYIG9mIC0xMC5cblx0XHRcdCAqIEBwYXJhbSB7IU9iamVjdH0gdCB0YXJnZXQgZWxlbWVudFxuXHRcdFx0ICogQHBhcmFtIHtPYmplY3Q9fSBjcyBjb21wdXRlZCBzdHlsZSBvYmplY3QgKG9wdGlvbmFsKVxuXHRcdFx0ICogQHBhcmFtIHtib29sZWFuPX0gcmVjIGlmIHRydWUsIHRoZSB0cmFuc2Zvcm0gdmFsdWVzIHdpbGwgYmUgcmVjb3JkZWQgdG8gdGhlIHRhcmdldCBlbGVtZW50J3MgX2dzVHJhbnNmb3JtIG9iamVjdCwgbGlrZSB0YXJnZXQuX2dzVHJhbnNmb3JtID0ge3g6MCwgeTowLCB6OjAsIHNjYWxlWDoxLi4ufVxuXHRcdFx0ICogQHBhcmFtIHtib29sZWFuPX0gcGFyc2UgaWYgdHJ1ZSwgd2UnbGwgaWdub3JlIGFueSBfZ3NUcmFuc2Zvcm0gdmFsdWVzIHRoYXQgYWxyZWFkeSBleGlzdCBvbiB0aGUgZWxlbWVudCwgYW5kIGZvcmNlIGEgcmVwYXJzaW5nIG9mIHRoZSBjc3MgKGNhbGN1bGF0ZWQgc3R5bGUpXG5cdFx0XHQgKiBAcmV0dXJuIHtvYmplY3R9IG9iamVjdCBjb250YWluaW5nIGFsbCBvZiB0aGUgdHJhbnNmb3JtIHByb3BlcnRpZXMvdmFsdWVzIGxpa2Uge3g6MCwgeTowLCB6OjAsIHNjYWxlWDoxLi4ufVxuXHRcdFx0ICovXG5cdFx0XHRfZ2V0VHJhbnNmb3JtID0gX2ludGVybmFscy5nZXRUcmFuc2Zvcm0gPSBmdW5jdGlvbih0LCBjcywgcmVjLCBwYXJzZSkge1xuXHRcdFx0XHRpZiAodC5fZ3NUcmFuc2Zvcm0gJiYgcmVjICYmICFwYXJzZSkge1xuXHRcdFx0XHRcdHJldHVybiB0Ll9nc1RyYW5zZm9ybTsgLy9pZiB0aGUgZWxlbWVudCBhbHJlYWR5IGhhcyBhIF9nc1RyYW5zZm9ybSwgdXNlIHRoYXQuIE5vdGU6IHNvbWUgYnJvd3NlcnMgZG9uJ3QgYWNjdXJhdGVseSByZXR1cm4gdGhlIGNhbGN1bGF0ZWQgc3R5bGUgZm9yIHRoZSB0cmFuc2Zvcm0gKHBhcnRpY3VsYXJseSBmb3IgU1ZHKSwgc28gaXQncyBhbG1vc3QgYWx3YXlzIHNhZmVzdCB0byBqdXN0IHVzZSB0aGUgdmFsdWVzIHdlJ3ZlIGFscmVhZHkgYXBwbGllZCByYXRoZXIgdGhhbiByZS1wYXJzaW5nIHRoaW5ncy5cblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgdG0gPSByZWMgPyB0Ll9nc1RyYW5zZm9ybSB8fCBuZXcgVHJhbnNmb3JtKCkgOiBuZXcgVHJhbnNmb3JtKCksXG5cdFx0XHRcdFx0aW52WCA9ICh0bS5zY2FsZVggPCAwKSwgLy9pbiBvcmRlciB0byBpbnRlcnByZXQgdGhpbmdzIHByb3Blcmx5LCB3ZSBuZWVkIHRvIGtub3cgaWYgdGhlIHVzZXIgYXBwbGllZCBhIG5lZ2F0aXZlIHNjYWxlWCBwcmV2aW91c2x5IHNvIHRoYXQgd2UgY2FuIGFkanVzdCB0aGUgcm90YXRpb24gYW5kIHNrZXdYIGFjY29yZGluZ2x5LiBPdGhlcndpc2UsIGlmIHdlIGFsd2F5cyBpbnRlcnByZXQgYSBmbGlwcGVkIG1hdHJpeCBhcyBhZmZlY3Rpbmcgc2NhbGVZIGFuZCB0aGUgdXNlciBvbmx5IHdhbnRzIHRvIHR3ZWVuIHRoZSBzY2FsZVggb24gbXVsdGlwbGUgc2VxdWVudGlhbCB0d2VlbnMsIGl0IHdvdWxkIGtlZXAgdGhlIG5lZ2F0aXZlIHNjYWxlWSB3aXRob3V0IHRoYXQgYmVpbmcgdGhlIHVzZXIncyBpbnRlbnQuXG5cdFx0XHRcdFx0bWluID0gMC4wMDAwMixcblx0XHRcdFx0XHRybmQgPSAxMDAwMDAsXG5cdFx0XHRcdFx0ek9yaWdpbiA9IF9zdXBwb3J0czNEID8gcGFyc2VGbG9hdChfZ2V0U3R5bGUodCwgX3RyYW5zZm9ybU9yaWdpblByb3AsIGNzLCBmYWxzZSwgXCIwIDAgMFwiKS5zcGxpdChcIiBcIilbMl0pIHx8IHRtLnpPcmlnaW4gIHx8IDAgOiAwLFxuXHRcdFx0XHRcdGRlZmF1bHRUcmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IHBhcnNlRmxvYXQoQ1NTUGx1Z2luLmRlZmF1bHRUcmFuc2Zvcm1QZXJzcGVjdGl2ZSkgfHwgMCxcblx0XHRcdFx0XHRtLCBpLCBzY2FsZVgsIHNjYWxlWSwgcm90YXRpb24sIHNrZXdYO1xuXG5cdFx0XHRcdHRtLnN2ZyA9ICEhKHQuZ2V0Q1RNICYmIF9pc1NWRyh0KSk7XG5cdFx0XHRcdGlmICh0bS5zdmcpIHtcblx0XHRcdFx0XHRfcGFyc2VTVkdPcmlnaW4odCwgX2dldFN0eWxlKHQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wLCBjcywgZmFsc2UsIFwiNTAlIDUwJVwiKSArIFwiXCIsIHRtLCB0LmdldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiKSk7XG5cdFx0XHRcdFx0X3VzZVNWR1RyYW5zZm9ybUF0dHIgPSBDU1NQbHVnaW4udXNlU1ZHVHJhbnNmb3JtQXR0ciB8fCBfZm9yY2VTVkdUcmFuc2Zvcm1BdHRyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG0gPSBfZ2V0TWF0cml4KHQpO1xuXHRcdFx0XHRpZiAobSAhPT0gX2lkZW50aXR5MkRNYXRyaXgpIHtcblxuXHRcdFx0XHRcdGlmIChtLmxlbmd0aCA9PT0gMTYpIHtcblx0XHRcdFx0XHRcdC8vd2UnbGwgb25seSBsb29rIGF0IHRoZXNlIHBvc2l0aW9uLXJlbGF0ZWQgNiB2YXJpYWJsZXMgZmlyc3QgYmVjYXVzZSBpZiB4L3kveiBhbGwgbWF0Y2gsIGl0J3MgcmVsYXRpdmVseSBzYWZlIHRvIGFzc3VtZSB3ZSBkb24ndCBuZWVkIHRvIHJlLXBhcnNlIGV2ZXJ5dGhpbmcgd2hpY2ggcmlza3MgbG9zaW5nIGltcG9ydGFudCByb3RhdGlvbmFsIGluZm9ybWF0aW9uIChsaWtlIHJvdGF0aW9uWDoxODAgcGx1cyByb3RhdGlvblk6MTgwIHdvdWxkIGxvb2sgdGhlIHNhbWUgYXMgcm90YXRpb246MTgwIC0gdGhlcmUncyBubyB3YXkgdG8ga25vdyBmb3Igc3VyZSB3aGljaCBkaXJlY3Rpb24gd2FzIHRha2VuIGJhc2VkIHNvbGVseSBvbiB0aGUgbWF0cml4M2QoKSB2YWx1ZXMpXG5cdFx0XHRcdFx0XHR2YXIgYTExID0gbVswXSwgYTIxID0gbVsxXSwgYTMxID0gbVsyXSwgYTQxID0gbVszXSxcblx0XHRcdFx0XHRcdFx0YTEyID0gbVs0XSwgYTIyID0gbVs1XSwgYTMyID0gbVs2XSwgYTQyID0gbVs3XSxcblx0XHRcdFx0XHRcdFx0YTEzID0gbVs4XSwgYTIzID0gbVs5XSwgYTMzID0gbVsxMF0sXG5cdFx0XHRcdFx0XHRcdGExNCA9IG1bMTJdLCBhMjQgPSBtWzEzXSwgYTM0ID0gbVsxNF0sXG5cdFx0XHRcdFx0XHRcdGE0MyA9IG1bMTFdLFxuXHRcdFx0XHRcdFx0XHRhbmdsZSA9IE1hdGguYXRhbjIoYTMyLCBhMzMpLFxuXHRcdFx0XHRcdFx0XHR0MSwgdDIsIHQzLCB0NCwgY29zLCBzaW47XG5cdFx0XHRcdFx0XHQvL3dlIG1hbnVhbGx5IGNvbXBlbnNhdGUgZm9yIG5vbi16ZXJvIHogY29tcG9uZW50IG9mIHRyYW5zZm9ybU9yaWdpbiB0byB3b3JrIGFyb3VuZCBidWdzIGluIFNhZmFyaVxuXHRcdFx0XHRcdFx0aWYgKHRtLnpPcmlnaW4pIHtcblx0XHRcdFx0XHRcdFx0YTM0ID0gLXRtLnpPcmlnaW47XG5cdFx0XHRcdFx0XHRcdGExNCA9IGExMyphMzQtbVsxMl07XG5cdFx0XHRcdFx0XHRcdGEyNCA9IGEyMyphMzQtbVsxM107XG5cdFx0XHRcdFx0XHRcdGEzNCA9IGEzMyphMzQrdG0uek9yaWdpbi1tWzE0XTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vbm90ZSBmb3IgcG9zc2libGUgZnV0dXJlIGNvbnNvbGlkYXRpb246IHJvdGF0aW9uWDogTWF0aC5hdGFuMihhMzIsIGEzMyksIHJvdGF0aW9uWTogTWF0aC5hdGFuMigtYTMxLCBNYXRoLnNxcnQoYTMzICogYTMzICsgYTMyICogYTMyKSksIHJvdGF0aW9uOiBNYXRoLmF0YW4yKGEyMSwgYTExKSwgc2tldzogTWF0aC5hdGFuMihhMTIsIGEyMikuIEhvd2V2ZXIsIGl0IGRvZXNuJ3Qgc2VlbSB0byBiZSBxdWl0ZSBhcyByZWxpYWJsZSBhcyB0aGUgZnVsbC1vbiBiYWNrd2FyZHMgcm90YXRpb24gcHJvY2VkdXJlLlxuXHRcdFx0XHRcdFx0dG0ucm90YXRpb25YID0gYW5nbGUgKiBfUkFEMkRFRztcblx0XHRcdFx0XHRcdC8vcm90YXRpb25YXG5cdFx0XHRcdFx0XHRpZiAoYW5nbGUpIHtcblx0XHRcdFx0XHRcdFx0Y29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcblx0XHRcdFx0XHRcdFx0c2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcblx0XHRcdFx0XHRcdFx0dDEgPSBhMTIqY29zK2ExMypzaW47XG5cdFx0XHRcdFx0XHRcdHQyID0gYTIyKmNvcythMjMqc2luO1xuXHRcdFx0XHRcdFx0XHR0MyA9IGEzMipjb3MrYTMzKnNpbjtcblx0XHRcdFx0XHRcdFx0YTEzID0gYTEyKi1zaW4rYTEzKmNvcztcblx0XHRcdFx0XHRcdFx0YTIzID0gYTIyKi1zaW4rYTIzKmNvcztcblx0XHRcdFx0XHRcdFx0YTMzID0gYTMyKi1zaW4rYTMzKmNvcztcblx0XHRcdFx0XHRcdFx0YTQzID0gYTQyKi1zaW4rYTQzKmNvcztcblx0XHRcdFx0XHRcdFx0YTEyID0gdDE7XG5cdFx0XHRcdFx0XHRcdGEyMiA9IHQyO1xuXHRcdFx0XHRcdFx0XHRhMzIgPSB0Mztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vcm90YXRpb25ZXG5cdFx0XHRcdFx0XHRhbmdsZSA9IE1hdGguYXRhbjIoLWEzMSwgYTMzKTtcblx0XHRcdFx0XHRcdHRtLnJvdGF0aW9uWSA9IGFuZ2xlICogX1JBRDJERUc7XG5cdFx0XHRcdFx0XHRpZiAoYW5nbGUpIHtcblx0XHRcdFx0XHRcdFx0Y29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcblx0XHRcdFx0XHRcdFx0c2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcblx0XHRcdFx0XHRcdFx0dDEgPSBhMTEqY29zLWExMypzaW47XG5cdFx0XHRcdFx0XHRcdHQyID0gYTIxKmNvcy1hMjMqc2luO1xuXHRcdFx0XHRcdFx0XHR0MyA9IGEzMSpjb3MtYTMzKnNpbjtcblx0XHRcdFx0XHRcdFx0YTIzID0gYTIxKnNpbithMjMqY29zO1xuXHRcdFx0XHRcdFx0XHRhMzMgPSBhMzEqc2luK2EzMypjb3M7XG5cdFx0XHRcdFx0XHRcdGE0MyA9IGE0MSpzaW4rYTQzKmNvcztcblx0XHRcdFx0XHRcdFx0YTExID0gdDE7XG5cdFx0XHRcdFx0XHRcdGEyMSA9IHQyO1xuXHRcdFx0XHRcdFx0XHRhMzEgPSB0Mztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vcm90YXRpb25aXG5cdFx0XHRcdFx0XHRhbmdsZSA9IE1hdGguYXRhbjIoYTIxLCBhMTEpO1xuXHRcdFx0XHRcdFx0dG0ucm90YXRpb24gPSBhbmdsZSAqIF9SQUQyREVHO1xuXHRcdFx0XHRcdFx0aWYgKGFuZ2xlKSB7XG5cdFx0XHRcdFx0XHRcdGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcblx0XHRcdFx0XHRcdFx0c2luID0gTWF0aC5zaW4oYW5nbGUpO1xuXHRcdFx0XHRcdFx0XHR0MSA9IGExMSpjb3MrYTIxKnNpbjtcblx0XHRcdFx0XHRcdFx0dDIgPSBhMTIqY29zK2EyMipzaW47XG5cdFx0XHRcdFx0XHRcdHQzID0gYTEzKmNvcythMjMqc2luO1xuXHRcdFx0XHRcdFx0XHRhMjEgPSBhMjEqY29zLWExMSpzaW47XG5cdFx0XHRcdFx0XHRcdGEyMiA9IGEyMipjb3MtYTEyKnNpbjtcblx0XHRcdFx0XHRcdFx0YTIzID0gYTIzKmNvcy1hMTMqc2luO1xuXHRcdFx0XHRcdFx0XHRhMTEgPSB0MTtcblx0XHRcdFx0XHRcdFx0YTEyID0gdDI7XG5cdFx0XHRcdFx0XHRcdGExMyA9IHQzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAodG0ucm90YXRpb25YICYmIE1hdGguYWJzKHRtLnJvdGF0aW9uWCkgKyBNYXRoLmFicyh0bS5yb3RhdGlvbikgPiAzNTkuOSkgeyAvL3doZW4gcm90YXRpb25ZIGlzIHNldCwgaXQgd2lsbCBvZnRlbiBiZSBwYXJzZWQgYXMgMTgwIGRlZ3JlZXMgZGlmZmVyZW50IHRoYW4gaXQgc2hvdWxkIGJlLCBhbmQgcm90YXRpb25YIGFuZCByb3RhdGlvbiBib3RoIGJlaW5nIDE4MCAoaXQgbG9va3MgdGhlIHNhbWUpLCBzbyB3ZSBhZGp1c3QgZm9yIHRoYXQgaGVyZS5cblx0XHRcdFx0XHRcdFx0dG0ucm90YXRpb25YID0gdG0ucm90YXRpb24gPSAwO1xuXHRcdFx0XHRcdFx0XHR0bS5yb3RhdGlvblkgPSAxODAgLSB0bS5yb3RhdGlvblk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vc2tld1hcblx0XHRcdFx0XHRcdGFuZ2xlID0gTWF0aC5hdGFuMihhMTIsIGEyMik7XG5cblx0XHRcdFx0XHRcdC8vc2NhbGVzXG5cdFx0XHRcdFx0XHR0bS5zY2FsZVggPSAoKE1hdGguc3FydChhMTEgKiBhMTEgKyBhMjEgKiBhMjEgKyBhMzEgKiBhMzEpICogcm5kICsgMC41KSB8IDApIC8gcm5kO1xuXHRcdFx0XHRcdFx0dG0uc2NhbGVZID0gKChNYXRoLnNxcnQoYTIyICogYTIyICsgYTMyICogYTMyKSAqIHJuZCArIDAuNSkgfCAwKSAvIHJuZDtcblx0XHRcdFx0XHRcdHRtLnNjYWxlWiA9ICgoTWF0aC5zcXJ0KGExMyAqIGExMyArIGEyMyAqIGEyMyArIGEzMyAqIGEzMykgKiBybmQgKyAwLjUpIHwgMCkgLyBybmQ7XG5cdFx0XHRcdFx0XHRhMTEgLz0gdG0uc2NhbGVYO1xuXHRcdFx0XHRcdFx0YTEyIC89IHRtLnNjYWxlWTtcblx0XHRcdFx0XHRcdGEyMSAvPSB0bS5zY2FsZVg7XG5cdFx0XHRcdFx0XHRhMjIgLz0gdG0uc2NhbGVZO1xuXHRcdFx0XHRcdFx0aWYgKE1hdGguYWJzKGFuZ2xlKSA+IG1pbikge1xuXHRcdFx0XHRcdFx0XHR0bS5za2V3WCA9IGFuZ2xlICogX1JBRDJERUc7XG5cdFx0XHRcdFx0XHRcdGExMiA9IDA7IC8vdW5za2V3c1xuXHRcdFx0XHRcdFx0XHRpZiAodG0uc2tld1R5cGUgIT09IFwic2ltcGxlXCIpIHtcblx0XHRcdFx0XHRcdFx0XHR0bS5zY2FsZVkgKj0gMSAvIE1hdGguY29zKGFuZ2xlKTsgLy9ieSBkZWZhdWx0LCB3ZSBjb21wZW5zYXRlIHRoZSBzY2FsZSBiYXNlZCBvbiB0aGUgc2tldyBzbyB0aGF0IHRoZSBlbGVtZW50IG1haW50YWlucyBhIHNpbWlsYXIgcHJvcG9ydGlvbiB3aGVuIHNrZXdlZCwgc28gd2UgaGF2ZSB0byBhbHRlciB0aGUgc2NhbGVZIGhlcmUgYWNjb3JkaW5nbHkgdG8gbWF0Y2ggdGhlIGRlZmF1bHQgKG5vbi1hZGp1c3RlZCkgc2tld2luZyB0aGF0IENTUyBkb2VzIChzdHJldGNoaW5nIG1vcmUgYW5kIG1vcmUgYXMgaXQgc2tld3MpLlxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRtLnNrZXdYID0gMDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0LyogLy9mb3IgdGVzdGluZyBwdXJwb3Nlc1xuXHRcdFx0XHRcdFx0dmFyIHRyYW5zZm9ybSA9IFwibWF0cml4M2QoXCIsXG5cdFx0XHRcdFx0XHRcdGNvbW1hID0gXCIsXCIsXG5cdFx0XHRcdFx0XHRcdHplcm8gPSBcIjBcIjtcblx0XHRcdFx0XHRcdGExMyAvPSB0bS5zY2FsZVo7XG5cdFx0XHRcdFx0XHRhMjMgLz0gdG0uc2NhbGVaO1xuXHRcdFx0XHRcdFx0YTMxIC89IHRtLnNjYWxlWDtcblx0XHRcdFx0XHRcdGEzMiAvPSB0bS5zY2FsZVk7XG5cdFx0XHRcdFx0XHRhMzMgLz0gdG0uc2NhbGVaO1xuXHRcdFx0XHRcdFx0dHJhbnNmb3JtICs9ICgoYTExIDwgbWluICYmIGExMSA+IC1taW4pID8gemVybyA6IGExMSkgKyBjb21tYSArICgoYTIxIDwgbWluICYmIGEyMSA+IC1taW4pID8gemVybyA6IGEyMSkgKyBjb21tYSArICgoYTMxIDwgbWluICYmIGEzMSA+IC1taW4pID8gemVybyA6IGEzMSk7XG5cdFx0XHRcdFx0XHR0cmFuc2Zvcm0gKz0gY29tbWEgKyAoKGE0MSA8IG1pbiAmJiBhNDEgPiAtbWluKSA/IHplcm8gOiBhNDEpICsgY29tbWEgKyAoKGExMiA8IG1pbiAmJiBhMTIgPiAtbWluKSA/IHplcm8gOiBhMTIpICsgY29tbWEgKyAoKGEyMiA8IG1pbiAmJiBhMjIgPiAtbWluKSA/IHplcm8gOiBhMjIpO1xuXHRcdFx0XHRcdFx0dHJhbnNmb3JtICs9IGNvbW1hICsgKChhMzIgPCBtaW4gJiYgYTMyID4gLW1pbikgPyB6ZXJvIDogYTMyKSArIGNvbW1hICsgKChhNDIgPCBtaW4gJiYgYTQyID4gLW1pbikgPyB6ZXJvIDogYTQyKSArIGNvbW1hICsgKChhMTMgPCBtaW4gJiYgYTEzID4gLW1pbikgPyB6ZXJvIDogYTEzKTtcblx0XHRcdFx0XHRcdHRyYW5zZm9ybSArPSBjb21tYSArICgoYTIzIDwgbWluICYmIGEyMyA+IC1taW4pID8gemVybyA6IGEyMykgKyBjb21tYSArICgoYTMzIDwgbWluICYmIGEzMyA+IC1taW4pID8gemVybyA6IGEzMykgKyBjb21tYSArICgoYTQzIDwgbWluICYmIGE0MyA+IC1taW4pID8gemVybyA6IGE0MykgKyBjb21tYTtcblx0XHRcdFx0XHRcdHRyYW5zZm9ybSArPSBhMTQgKyBjb21tYSArIGEyNCArIGNvbW1hICsgYTM0ICsgY29tbWEgKyAodG0ucGVyc3BlY3RpdmUgPyAoMSArICgtYTM0IC8gdG0ucGVyc3BlY3RpdmUpKSA6IDEpICsgXCIpXCI7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyh0cmFuc2Zvcm0pO1xuXHRcdFx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50ZXN0XCIpLnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybTtcblx0XHRcdFx0XHRcdCovXG5cblx0XHRcdFx0XHRcdHRtLnBlcnNwZWN0aXZlID0gYTQzID8gMSAvICgoYTQzIDwgMCkgPyAtYTQzIDogYTQzKSA6IDA7XG5cdFx0XHRcdFx0XHR0bS54ID0gYTE0O1xuXHRcdFx0XHRcdFx0dG0ueSA9IGEyNDtcblx0XHRcdFx0XHRcdHRtLnogPSBhMzQ7XG5cdFx0XHRcdFx0XHRpZiAodG0uc3ZnKSB7XG5cdFx0XHRcdFx0XHRcdHRtLnggLT0gdG0ueE9yaWdpbiAtICh0bS54T3JpZ2luICogYTExIC0gdG0ueU9yaWdpbiAqIGExMik7XG5cdFx0XHRcdFx0XHRcdHRtLnkgLT0gdG0ueU9yaWdpbiAtICh0bS55T3JpZ2luICogYTIxIC0gdG0ueE9yaWdpbiAqIGEyMik7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCghX3N1cHBvcnRzM0QgfHwgcGFyc2UgfHwgIW0ubGVuZ3RoIHx8IHRtLnggIT09IG1bNF0gfHwgdG0ueSAhPT0gbVs1XSB8fCAoIXRtLnJvdGF0aW9uWCAmJiAhdG0ucm90YXRpb25ZKSkpIHsgLy9zb21ldGltZXMgYSA2LWVsZW1lbnQgbWF0cml4IGlzIHJldHVybmVkIGV2ZW4gd2hlbiB3ZSBwZXJmb3JtZWQgM0QgdHJhbnNmb3JtcywgbGlrZSBpZiByb3RhdGlvblggYW5kIHJvdGF0aW9uWSBhcmUgMTgwLiBJbiBjYXNlcyBsaWtlIHRoaXMsIHdlIHN0aWxsIG5lZWQgdG8gaG9ub3IgdGhlIDNEIHRyYW5zZm9ybXMuIElmIHdlIGp1c3QgcmVseSBvbiB0aGUgMkQgaW5mbywgaXQgY291bGQgYWZmZWN0IGhvdyB0aGUgZGF0YSBpcyBpbnRlcnByZXRlZCwgbGlrZSBzY2FsZVkgbWlnaHQgZ2V0IHNldCB0byAtMSBvciByb3RhdGlvbiBjb3VsZCBnZXQgb2Zmc2V0IGJ5IDE4MCBkZWdyZWVzLiBGb3IgZXhhbXBsZSwgZG8gYSBUd2VlbkxpdGUudG8oZWxlbWVudCwgMSwge2Nzczp7cm90YXRpb25YOjE4MCwgcm90YXRpb25ZOjE4MH19KSBhbmQgdGhlbiBsYXRlciwgVHdlZW5MaXRlLnRvKGVsZW1lbnQsIDEsIHtjc3M6e3JvdGF0aW9uWDowfX0pIGFuZCB3aXRob3V0IHRoaXMgY29uZGl0aW9uYWwgbG9naWMgaW4gcGxhY2UsIGl0J2QganVtcCB0byBhIHN0YXRlIG9mIGJlaW5nIHVucm90YXRlZCB3aGVuIHRoZSAybmQgdHdlZW4gc3RhcnRzLiBUaGVuIGFnYWluLCB3ZSBuZWVkIHRvIGhvbm9yIHRoZSBmYWN0IHRoYXQgdGhlIHVzZXIgQ09VTEQgYWx0ZXIgdGhlIHRyYW5zZm9ybXMgb3V0c2lkZSBvZiBDU1NQbHVnaW4sIGxpa2UgYnkgbWFudWFsbHkgYXBwbHlpbmcgbmV3IGNzcywgc28gd2UgdHJ5IHRvIHNlbnNlIHRoYXQgYnkgbG9va2luZyBhdCB4IGFuZCB5IGJlY2F1c2UgaWYgdGhvc2UgY2hhbmdlZCwgd2Uga25vdyB0aGUgY2hhbmdlcyB3ZXJlIG1hZGUgb3V0c2lkZSBDU1NQbHVnaW4gYW5kIHdlIGZvcmNlIGEgcmVpbnRlcnByZXRhdGlvbiBvZiB0aGUgbWF0cml4IHZhbHVlcy4gQWxzbywgaW4gV2Via2l0IGJyb3dzZXJzLCBpZiB0aGUgZWxlbWVudCdzIFwiZGlzcGxheVwiIGlzIFwibm9uZVwiLCBpdHMgY2FsY3VsYXRlZCBzdHlsZSB2YWx1ZSB3aWxsIGFsd2F5cyByZXR1cm4gZW1wdHksIHNvIGlmIHdlJ3ZlIGFscmVhZHkgcmVjb3JkZWQgdGhlIHZhbHVlcyBpbiB0aGUgX2dzVHJhbnNmb3JtIG9iamVjdCwgd2UnbGwganVzdCByZWx5IG9uIHRob3NlLlxuXHRcdFx0XHRcdFx0dmFyIGsgPSAobS5sZW5ndGggPj0gNiksXG5cdFx0XHRcdFx0XHRcdGEgPSBrID8gbVswXSA6IDEsXG5cdFx0XHRcdFx0XHRcdGIgPSBtWzFdIHx8IDAsXG5cdFx0XHRcdFx0XHRcdGMgPSBtWzJdIHx8IDAsXG5cdFx0XHRcdFx0XHRcdGQgPSBrID8gbVszXSA6IDE7XG5cdFx0XHRcdFx0XHR0bS54ID0gbVs0XSB8fCAwO1xuXHRcdFx0XHRcdFx0dG0ueSA9IG1bNV0gfHwgMDtcblx0XHRcdFx0XHRcdHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKTtcblx0XHRcdFx0XHRcdHNjYWxlWSA9IE1hdGguc3FydChkICogZCArIGMgKiBjKTtcblx0XHRcdFx0XHRcdHJvdGF0aW9uID0gKGEgfHwgYikgPyBNYXRoLmF0YW4yKGIsIGEpICogX1JBRDJERUcgOiB0bS5yb3RhdGlvbiB8fCAwOyAvL25vdGU6IGlmIHNjYWxlWCBpcyAwLCB3ZSBjYW5ub3QgYWNjdXJhdGVseSBtZWFzdXJlIHJvdGF0aW9uLiBTYW1lIGZvciBza2V3WCB3aXRoIGEgc2NhbGVZIG9mIDAuIFRoZXJlZm9yZSwgd2UgZGVmYXVsdCB0byB0aGUgcHJldmlvdXNseSByZWNvcmRlZCB2YWx1ZSAob3IgemVybyBpZiB0aGF0IGRvZXNuJ3QgZXhpc3QpLlxuXHRcdFx0XHRcdFx0c2tld1ggPSAoYyB8fCBkKSA/IE1hdGguYXRhbjIoYywgZCkgKiBfUkFEMkRFRyArIHJvdGF0aW9uIDogdG0uc2tld1ggfHwgMDtcblx0XHRcdFx0XHRcdHRtLnNjYWxlWCA9IHNjYWxlWDtcblx0XHRcdFx0XHRcdHRtLnNjYWxlWSA9IHNjYWxlWTtcblx0XHRcdFx0XHRcdHRtLnJvdGF0aW9uID0gcm90YXRpb247XG5cdFx0XHRcdFx0XHR0bS5za2V3WCA9IHNrZXdYO1xuXHRcdFx0XHRcdFx0aWYgKF9zdXBwb3J0czNEKSB7XG5cdFx0XHRcdFx0XHRcdHRtLnJvdGF0aW9uWCA9IHRtLnJvdGF0aW9uWSA9IHRtLnogPSAwO1xuXHRcdFx0XHRcdFx0XHR0bS5wZXJzcGVjdGl2ZSA9IGRlZmF1bHRUcmFuc2Zvcm1QZXJzcGVjdGl2ZTtcblx0XHRcdFx0XHRcdFx0dG0uc2NhbGVaID0gMTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICh0bS5zdmcpIHtcblx0XHRcdFx0XHRcdFx0dG0ueCAtPSB0bS54T3JpZ2luIC0gKHRtLnhPcmlnaW4gKiBhICsgdG0ueU9yaWdpbiAqIGMpO1xuXHRcdFx0XHRcdFx0XHR0bS55IC09IHRtLnlPcmlnaW4gLSAodG0ueE9yaWdpbiAqIGIgKyB0bS55T3JpZ2luICogZCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChNYXRoLmFicyh0bS5za2V3WCkgPiA5MCAmJiBNYXRoLmFicyh0bS5za2V3WCkgPCAyNzApIHtcblx0XHRcdFx0XHRcdGlmIChpbnZYKSB7XG5cdFx0XHRcdFx0XHRcdHRtLnNjYWxlWCAqPSAtMTtcblx0XHRcdFx0XHRcdFx0dG0uc2tld1ggKz0gKHRtLnJvdGF0aW9uIDw9IDApID8gMTgwIDogLTE4MDtcblx0XHRcdFx0XHRcdFx0dG0ucm90YXRpb24gKz0gKHRtLnJvdGF0aW9uIDw9IDApID8gMTgwIDogLTE4MDtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRtLnNjYWxlWSAqPSAtMTtcblx0XHRcdFx0XHRcdFx0dG0uc2tld1ggKz0gKHRtLnNrZXdYIDw9IDApID8gMTgwIDogLTE4MDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dG0uek9yaWdpbiA9IHpPcmlnaW47XG5cdFx0XHRcdFx0Ly9zb21lIGJyb3dzZXJzIGhhdmUgYSBoYXJkIHRpbWUgd2l0aCB2ZXJ5IHNtYWxsIHZhbHVlcyBsaWtlIDIuNDQ5MjkzNTk4Mjk0NzA2NGUtMTYgKG5vdGljZSB0aGUgXCJlLVwiIHRvd2FyZHMgdGhlIGVuZCkgYW5kIHdvdWxkIHJlbmRlciB0aGUgb2JqZWN0IHNsaWdodGx5IG9mZi4gU28gd2Ugcm91bmQgdG8gMCBpbiB0aGVzZSBjYXNlcy4gVGhlIGNvbmRpdGlvbmFsIGxvZ2ljIGhlcmUgaXMgZmFzdGVyIHRoYW4gY2FsbGluZyBNYXRoLmFicygpLiBBbHNvLCBicm93c2VycyB0ZW5kIHRvIHJlbmRlciBhIFNMSUdIVExZIHJvdGF0ZWQgb2JqZWN0IGluIGEgZnV6enkgd2F5LCBzbyB3ZSBuZWVkIHRvIHNuYXAgdG8gZXhhY3RseSAwIHdoZW4gYXBwcm9wcmlhdGUuXG5cdFx0XHRcdFx0Zm9yIChpIGluIHRtKSB7XG5cdFx0XHRcdFx0XHRpZiAodG1baV0gPCBtaW4pIGlmICh0bVtpXSA+IC1taW4pIHtcblx0XHRcdFx0XHRcdFx0dG1baV0gPSAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHQvL0RFQlVHOiBfbG9nKFwicGFyc2VkIHJvdGF0aW9uIG9mIFwiICsgdC5nZXRBdHRyaWJ1dGUoXCJpZFwiKStcIjogXCIrKHRtLnJvdGF0aW9uWCkrXCIsIFwiKyh0bS5yb3RhdGlvblkpK1wiLCBcIisodG0ucm90YXRpb24pK1wiLCBzY2FsZTogXCIrdG0uc2NhbGVYK1wiLCBcIit0bS5zY2FsZVkrXCIsIFwiK3RtLnNjYWxlWitcIiwgcG9zaXRpb246IFwiK3RtLngrXCIsIFwiK3RtLnkrXCIsIFwiK3RtLnorXCIsIHBlcnNwZWN0aXZlOiBcIit0bS5wZXJzcGVjdGl2ZSsgXCIsIG9yaWdpbjogXCIrIHRtLnhPcmlnaW4rIFwiLFwiKyB0bS55T3JpZ2luKTtcblx0XHRcdFx0aWYgKHJlYykge1xuXHRcdFx0XHRcdHQuX2dzVHJhbnNmb3JtID0gdG07IC8vcmVjb3JkIHRvIHRoZSBvYmplY3QncyBfZ3NUcmFuc2Zvcm0gd2hpY2ggd2UgdXNlIHNvIHRoYXQgdHdlZW5zIGNhbiBjb250cm9sIGluZGl2aWR1YWwgcHJvcGVydGllcyBpbmRlcGVuZGVudGx5ICh3ZSBuZWVkIGFsbCB0aGUgcHJvcGVydGllcyB0byBhY2N1cmF0ZWx5IHJlY29tcG9zZSB0aGUgbWF0cml4IGluIHRoZSBzZXRSYXRpbygpIG1ldGhvZClcblx0XHRcdFx0XHRpZiAodG0uc3ZnKSB7IC8vaWYgd2UncmUgc3VwcG9zZWQgdG8gYXBwbHkgdHJhbnNmb3JtcyB0byB0aGUgU1ZHIGVsZW1lbnQncyBcInRyYW5zZm9ybVwiIGF0dHJpYnV0ZSwgbWFrZSBzdXJlIHRoZXJlIGFyZW4ndCBhbnkgQ1NTIHRyYW5zZm9ybXMgYXBwbGllZCBvciB0aGV5J2xsIG92ZXJyaWRlIHRoZSBhdHRyaWJ1dGUgb25lcy4gQWxzbyBjbGVhciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBpZiB3ZSdyZSB1c2luZyBDU1MsIGp1c3QgdG8gYmUgY2xlYW4uXG5cdFx0XHRcdFx0XHRpZiAoX3VzZVNWR1RyYW5zZm9ybUF0dHIgJiYgdC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0pIHtcblx0XHRcdFx0XHRcdFx0VHdlZW5MaXRlLmRlbGF5ZWRDYWxsKDAuMDAxLCBmdW5jdGlvbigpeyAvL2lmIHdlIGFwcGx5IHRoaXMgcmlnaHQgYXdheSAoYmVmb3JlIGFueXRoaW5nIGhhcyByZW5kZXJlZCksIHdlIHJpc2sgdGhlcmUgYmVpbmcgbm8gdHJhbnNmb3JtcyBmb3IgYSBicmllZiBtb21lbnQgYW5kIGl0IGFsc28gaW50ZXJmZXJlcyB3aXRoIGFkanVzdGluZyB0aGUgdHJhbnNmb3JtT3JpZ2luIGluIGEgdHdlZW4gd2l0aCBpbW1lZGlhdGVSZW5kZXI6dHJ1ZSAoaXQnZCB0cnkgcmVhZGluZyB0aGUgbWF0cml4IGFuZCBpdCB3b3VsZG4ndCBoYXZlIHRoZSBhcHByb3ByaWF0ZSBkYXRhIGluIHBsYWNlIGJlY2F1c2Ugd2UganVzdCByZW1vdmVkIGl0KS5cblx0XHRcdFx0XHRcdFx0XHRfcmVtb3ZlUHJvcCh0LnN0eWxlLCBfdHJhbnNmb3JtUHJvcCk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICghX3VzZVNWR1RyYW5zZm9ybUF0dHIgJiYgdC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIikpIHtcblx0XHRcdFx0XHRcdFx0VHdlZW5MaXRlLmRlbGF5ZWRDYWxsKDAuMDAxLCBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0XHRcdHQucmVtb3ZlQXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRtO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly9mb3Igc2V0dGluZyAyRCB0cmFuc2Zvcm1zIGluIElFNiwgSUU3LCBhbmQgSUU4IChtdXN0IHVzZSBhIFwiZmlsdGVyXCIgdG8gZW11bGF0ZSB0aGUgYmVoYXZpb3Igb2YgbW9kZXJuIGRheSBicm93c2VyIHRyYW5zZm9ybXMpXG5cdFx0XHRfc2V0SUVUcmFuc2Zvcm1SYXRpbyA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0dmFyIHQgPSB0aGlzLmRhdGEsIC8vcmVmZXJzIHRvIHRoZSBlbGVtZW50J3MgX2dzVHJhbnNmb3JtIG9iamVjdFxuXHRcdFx0XHRcdGFuZyA9IC10LnJvdGF0aW9uICogX0RFRzJSQUQsXG5cdFx0XHRcdFx0c2tldyA9IGFuZyArIHQuc2tld1ggKiBfREVHMlJBRCxcblx0XHRcdFx0XHRybmQgPSAxMDAwMDAsXG5cdFx0XHRcdFx0YSA9ICgoTWF0aC5jb3MoYW5nKSAqIHQuc2NhbGVYICogcm5kKSB8IDApIC8gcm5kLFxuXHRcdFx0XHRcdGIgPSAoKE1hdGguc2luKGFuZykgKiB0LnNjYWxlWCAqIHJuZCkgfCAwKSAvIHJuZCxcblx0XHRcdFx0XHRjID0gKChNYXRoLnNpbihza2V3KSAqIC10LnNjYWxlWSAqIHJuZCkgfCAwKSAvIHJuZCxcblx0XHRcdFx0XHRkID0gKChNYXRoLmNvcyhza2V3KSAqIHQuc2NhbGVZICogcm5kKSB8IDApIC8gcm5kLFxuXHRcdFx0XHRcdHN0eWxlID0gdGhpcy50LnN0eWxlLFxuXHRcdFx0XHRcdGNzID0gdGhpcy50LmN1cnJlbnRTdHlsZSxcblx0XHRcdFx0XHRmaWx0ZXJzLCB2YWw7XG5cdFx0XHRcdGlmICghY3MpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFsID0gYjsgLy9qdXN0IGZvciBzd2FwcGluZyB0aGUgdmFyaWFibGVzIGFuIGludmVydGluZyB0aGVtIChyZXVzZWQgXCJ2YWxcIiB0byBhdm9pZCBjcmVhdGluZyBhbm90aGVyIHZhcmlhYmxlIGluIG1lbW9yeSkuIElFJ3MgZmlsdGVyIG1hdHJpeCB1c2VzIGEgbm9uLXN0YW5kYXJkIG1hdHJpeCBjb25maWd1cmF0aW9uIChhbmdsZSBnb2VzIHRoZSBvcHBvc2l0ZSB3YXksIGFuZCBiIGFuZCBjIGFyZSByZXZlcnNlZCBhbmQgaW52ZXJ0ZWQpXG5cdFx0XHRcdGIgPSAtYztcblx0XHRcdFx0YyA9IC12YWw7XG5cdFx0XHRcdGZpbHRlcnMgPSBjcy5maWx0ZXI7XG5cdFx0XHRcdHN0eWxlLmZpbHRlciA9IFwiXCI7IC8vcmVtb3ZlIGZpbHRlcnMgc28gdGhhdCB3ZSBjYW4gYWNjdXJhdGVseSBtZWFzdXJlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodFxuXHRcdFx0XHR2YXIgdyA9IHRoaXMudC5vZmZzZXRXaWR0aCxcblx0XHRcdFx0XHRoID0gdGhpcy50Lm9mZnNldEhlaWdodCxcblx0XHRcdFx0XHRjbGlwID0gKGNzLnBvc2l0aW9uICE9PSBcImFic29sdXRlXCIpLFxuXHRcdFx0XHRcdG0gPSBcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5NYXRyaXgoTTExPVwiICsgYSArIFwiLCBNMTI9XCIgKyBiICsgXCIsIE0yMT1cIiArIGMgKyBcIiwgTTIyPVwiICsgZCxcblx0XHRcdFx0XHRveCA9IHQueCArICh3ICogdC54UGVyY2VudCAvIDEwMCksXG5cdFx0XHRcdFx0b3kgPSB0LnkgKyAoaCAqIHQueVBlcmNlbnQgLyAxMDApLFxuXHRcdFx0XHRcdGR4LCBkeTtcblxuXHRcdFx0XHQvL2lmIHRyYW5zZm9ybU9yaWdpbiBpcyBiZWluZyB1c2VkLCBhZGp1c3QgdGhlIG9mZnNldCB4IGFuZCB5XG5cdFx0XHRcdGlmICh0Lm94ICE9IG51bGwpIHtcblx0XHRcdFx0XHRkeCA9ICgodC5veHApID8gdyAqIHQub3ggKiAwLjAxIDogdC5veCkgLSB3IC8gMjtcblx0XHRcdFx0XHRkeSA9ICgodC5veXApID8gaCAqIHQub3kgKiAwLjAxIDogdC5veSkgLSBoIC8gMjtcblx0XHRcdFx0XHRveCArPSBkeCAtIChkeCAqIGEgKyBkeSAqIGIpO1xuXHRcdFx0XHRcdG95ICs9IGR5IC0gKGR4ICogYyArIGR5ICogZCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIWNsaXApIHtcblx0XHRcdFx0XHRtICs9IFwiLCBzaXppbmdNZXRob2Q9J2F1dG8gZXhwYW5kJylcIjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkeCA9ICh3IC8gMik7XG5cdFx0XHRcdFx0ZHkgPSAoaCAvIDIpO1xuXHRcdFx0XHRcdC8vdHJhbnNsYXRlIHRvIGVuc3VyZSB0aGF0IHRyYW5zZm9ybWF0aW9ucyBvY2N1ciBhcm91bmQgdGhlIGNvcnJlY3Qgb3JpZ2luIChkZWZhdWx0IGlzIGNlbnRlcikuXG5cdFx0XHRcdFx0bSArPSBcIiwgRHg9XCIgKyAoZHggLSAoZHggKiBhICsgZHkgKiBiKSArIG94KSArIFwiLCBEeT1cIiArIChkeSAtIChkeCAqIGMgKyBkeSAqIGQpICsgb3kpICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGZpbHRlcnMuaW5kZXhPZihcIkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0Lk1hdHJpeChcIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0c3R5bGUuZmlsdGVyID0gZmlsdGVycy5yZXBsYWNlKF9pZVNldE1hdHJpeEV4cCwgbSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGUuZmlsdGVyID0gbSArIFwiIFwiICsgZmlsdGVyczsgLy93ZSBtdXN0IGFsd2F5cyBwdXQgdGhlIHRyYW5zZm9ybS9tYXRyaXggRklSU1QgKGJlZm9yZSBhbHBoYShvcGFjaXR5PXh4KSkgdG8gYXZvaWQgYW4gSUUgYnVnIHRoYXQgc2xpY2VzIHBhcnQgb2YgdGhlIG9iamVjdCB3aGVuIHJvdGF0aW9uIGlzIGFwcGxpZWQgd2l0aCBhbHBoYS5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vYXQgdGhlIGVuZCBvciBiZWdpbm5pbmcgb2YgdGhlIHR3ZWVuLCBpZiB0aGUgbWF0cml4IGlzIG5vcm1hbCAoMSwgMCwgMCwgMSkgYW5kIG9wYWNpdHkgaXMgMTAwIChvciBkb2Vzbid0IGV4aXN0KSwgcmVtb3ZlIHRoZSBmaWx0ZXIgdG8gaW1wcm92ZSBicm93c2VyIHBlcmZvcm1hbmNlLlxuXHRcdFx0XHRpZiAodiA9PT0gMCB8fCB2ID09PSAxKSBpZiAoYSA9PT0gMSkgaWYgKGIgPT09IDApIGlmIChjID09PSAwKSBpZiAoZCA9PT0gMSkgaWYgKCFjbGlwIHx8IG0uaW5kZXhPZihcIkR4PTAsIER5PTBcIikgIT09IC0xKSBpZiAoIV9vcGFjaXR5RXhwLnRlc3QoZmlsdGVycykgfHwgcGFyc2VGbG9hdChSZWdFeHAuJDEpID09PSAxMDApIGlmIChmaWx0ZXJzLmluZGV4T2YoXCJncmFkaWVudChcIiAmJiBmaWx0ZXJzLmluZGV4T2YoXCJBbHBoYVwiKSkgPT09IC0xKSB7XG5cdFx0XHRcdFx0c3R5bGUucmVtb3ZlQXR0cmlidXRlKFwiZmlsdGVyXCIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly93ZSBtdXN0IHNldCB0aGUgbWFyZ2lucyBBRlRFUiBhcHBseWluZyB0aGUgZmlsdGVyIGluIG9yZGVyIHRvIGF2b2lkIHNvbWUgYnVncyBpbiBJRTggdGhhdCBjb3VsZCAoaW4gcmFyZSBzY2VuYXJpb3MpIGNhdXNlIHRoZW0gdG8gYmUgaWdub3JlZCBpbnRlcm1pdHRlbnRseSAodmlicmF0aW9uKS5cblx0XHRcdFx0aWYgKCFjbGlwKSB7XG5cdFx0XHRcdFx0dmFyIG11bHQgPSAoX2llVmVycyA8IDgpID8gMSA6IC0xLCAvL2luIEludGVybmV0IEV4cGxvcmVyIDcgYW5kIGJlZm9yZSwgdGhlIGJveCBtb2RlbCBpcyBicm9rZW4sIGNhdXNpbmcgdGhlIGJyb3dzZXIgdG8gdHJlYXQgdGhlIHdpZHRoL2hlaWdodCBvZiB0aGUgYWN0dWFsIHJvdGF0ZWQgZmlsdGVyZWQgaW1hZ2UgYXMgdGhlIHdpZHRoL2hlaWdodCBvZiB0aGUgYm94IGl0c2VsZiwgYnV0IE1pY3Jvc29mdCBjb3JyZWN0ZWQgdGhhdCBpbiBJRTguIFdlIG11c3QgdXNlIGEgbmVnYXRpdmUgb2Zmc2V0IGluIElFOCBvbiB0aGUgcmlnaHQvYm90dG9tXG5cdFx0XHRcdFx0XHRtYXJnLCBwcm9wLCBkaWY7XG5cdFx0XHRcdFx0ZHggPSB0LmllT2Zmc2V0WCB8fCAwO1xuXHRcdFx0XHRcdGR5ID0gdC5pZU9mZnNldFkgfHwgMDtcblx0XHRcdFx0XHR0LmllT2Zmc2V0WCA9IE1hdGgucm91bmQoKHcgLSAoKGEgPCAwID8gLWEgOiBhKSAqIHcgKyAoYiA8IDAgPyAtYiA6IGIpICogaCkpIC8gMiArIG94KTtcblx0XHRcdFx0XHR0LmllT2Zmc2V0WSA9IE1hdGgucm91bmQoKGggLSAoKGQgPCAwID8gLWQgOiBkKSAqIGggKyAoYyA8IDAgPyAtYyA6IGMpICogdykpIC8gMiArIG95KTtcblx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRwcm9wID0gX21hcmdpbnNbaV07XG5cdFx0XHRcdFx0XHRtYXJnID0gY3NbcHJvcF07XG5cdFx0XHRcdFx0XHQvL3dlIG5lZWQgdG8gZ2V0IHRoZSBjdXJyZW50IG1hcmdpbiBpbiBjYXNlIGl0IGlzIGJlaW5nIHR3ZWVuZWQgc2VwYXJhdGVseSAod2Ugd2FudCB0byByZXNwZWN0IHRoYXQgdHdlZW4ncyBjaGFuZ2VzKVxuXHRcdFx0XHRcdFx0dmFsID0gKG1hcmcuaW5kZXhPZihcInB4XCIpICE9PSAtMSkgPyBwYXJzZUZsb2F0KG1hcmcpIDogX2NvbnZlcnRUb1BpeGVscyh0aGlzLnQsIHByb3AsIHBhcnNlRmxvYXQobWFyZyksIG1hcmcucmVwbGFjZShfc3VmZml4RXhwLCBcIlwiKSkgfHwgMDtcblx0XHRcdFx0XHRcdGlmICh2YWwgIT09IHRbcHJvcF0pIHtcblx0XHRcdFx0XHRcdFx0ZGlmID0gKGkgPCAyKSA/IC10LmllT2Zmc2V0WCA6IC10LmllT2Zmc2V0WTsgLy9pZiBhbm90aGVyIHR3ZWVuIGlzIGNvbnRyb2xsaW5nIGEgbWFyZ2luLCB3ZSBjYW5ub3Qgb25seSBhcHBseSB0aGUgZGlmZmVyZW5jZSBpbiB0aGUgaWVPZmZzZXRzLCBzbyB3ZSBlc3NlbnRpYWxseSB6ZXJvLW91dCB0aGUgZHggYW5kIGR5IGhlcmUgaW4gdGhhdCBjYXNlLiBXZSByZWNvcmQgdGhlIG1hcmdpbihzKSBsYXRlciBzbyB0aGF0IHdlIGNhbiBrZWVwIGNvbXBhcmluZyB0aGVtLCBtYWtpbmcgdGhpcyBjb2RlIHZlcnkgZmxleGlibGUuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRkaWYgPSAoaSA8IDIpID8gZHggLSB0LmllT2Zmc2V0WCA6IGR5IC0gdC5pZU9mZnNldFk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzdHlsZVtwcm9wXSA9ICh0W3Byb3BdID0gTWF0aC5yb3VuZCggdmFsIC0gZGlmICogKChpID09PSAwIHx8IGkgPT09IDIpID8gMSA6IG11bHQpICkpICsgXCJweFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0LyogdHJhbnNsYXRlcyBhIHN1cGVyIHNtYWxsIGRlY2ltYWwgdG8gYSBzdHJpbmcgV0lUSE9VVCBzY2llbnRpZmljIG5vdGF0aW9uXG5cdFx0XHRfc2FmZURlY2ltYWwgPSBmdW5jdGlvbihuKSB7XG5cdFx0XHRcdHZhciBzID0gKG4gPCAwID8gLW4gOiBuKSArIFwiXCIsXG5cdFx0XHRcdFx0YSA9IHMuc3BsaXQoXCJlLVwiKTtcblx0XHRcdFx0cmV0dXJuIChuIDwgMCA/IFwiLTAuXCIgOiBcIjAuXCIpICsgbmV3IEFycmF5KHBhcnNlSW50KGFbMV0sIDEwKSB8fCAwKS5qb2luKFwiMFwiKSArIGFbMF0uc3BsaXQoXCIuXCIpLmpvaW4oXCJcIik7XG5cdFx0XHR9LFxuXHRcdFx0Ki9cblxuXHRcdFx0X3NldFRyYW5zZm9ybVJhdGlvID0gX2ludGVybmFscy5zZXQzRFRyYW5zZm9ybVJhdGlvID0gX2ludGVybmFscy5zZXRUcmFuc2Zvcm1SYXRpbyA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0dmFyIHQgPSB0aGlzLmRhdGEsIC8vcmVmZXJzIHRvIHRoZSBlbGVtZW50J3MgX2dzVHJhbnNmb3JtIG9iamVjdFxuXHRcdFx0XHRcdHN0eWxlID0gdGhpcy50LnN0eWxlLFxuXHRcdFx0XHRcdGFuZ2xlID0gdC5yb3RhdGlvbixcblx0XHRcdFx0XHRyb3RhdGlvblggPSB0LnJvdGF0aW9uWCxcblx0XHRcdFx0XHRyb3RhdGlvblkgPSB0LnJvdGF0aW9uWSxcblx0XHRcdFx0XHRzeCA9IHQuc2NhbGVYLFxuXHRcdFx0XHRcdHN5ID0gdC5zY2FsZVksXG5cdFx0XHRcdFx0c3ogPSB0LnNjYWxlWixcblx0XHRcdFx0XHR4ID0gdC54LFxuXHRcdFx0XHRcdHkgPSB0LnksXG5cdFx0XHRcdFx0eiA9IHQueixcblx0XHRcdFx0XHRpc1NWRyA9IHQuc3ZnLFxuXHRcdFx0XHRcdHBlcnNwZWN0aXZlID0gdC5wZXJzcGVjdGl2ZSxcblx0XHRcdFx0XHRmb3JjZTNEID0gdC5mb3JjZTNELFxuXHRcdFx0XHRcdHNrZXdZID0gdC5za2V3WSxcblx0XHRcdFx0XHRza2V3WCA9IHQuc2tld1gsXG5cdFx0XHRcdFx0dDEsXHRhMTEsIGExMiwgYTEzLCBhMjEsIGEyMiwgYTIzLCBhMzEsIGEzMiwgYTMzLCBhNDEsIGE0MiwgYTQzLFxuXHRcdFx0XHRcdHpPcmlnaW4sIG1pbiwgY29zLCBzaW4sIHQyLCB0cmFuc2Zvcm0sIGNvbW1hLCB6ZXJvLCBza2V3LCBybmQ7XG5cdFx0XHRcdGlmIChza2V3WSkgeyAvL2ZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBjb21iaW5lIGFsbCBza2V3aW5nIGludG8gdGhlIHNrZXdYIGFuZCByb3RhdGlvbiB2YWx1ZXMuIFJlbWVtYmVyLCBhIHNrZXdZIG9mIDEwIGRlZ3JlZXMgbG9va3MgdGhlIHNhbWUgYXMgYSByb3RhdGlvbiBvZiAxMCBkZWdyZWVzIHBsdXMgYSBza2V3WCBvZiAxMCBkZWdyZWVzLlxuXHRcdFx0XHRcdHNrZXdYICs9IHNrZXdZO1xuXHRcdFx0XHRcdGFuZ2xlICs9IHNrZXdZO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9jaGVjayB0byBzZWUgaWYgd2Ugc2hvdWxkIHJlbmRlciBhcyAyRCAoYW5kIFNWR3MgbXVzdCB1c2UgMkQgd2hlbiBfdXNlU1ZHVHJhbnNmb3JtQXR0ciBpcyB0cnVlKVxuXHRcdFx0XHRpZiAoKCgoKHYgPT09IDEgfHwgdiA9PT0gMCkgJiYgZm9yY2UzRCA9PT0gXCJhdXRvXCIgJiYgKHRoaXMudHdlZW4uX3RvdGFsVGltZSA9PT0gdGhpcy50d2Vlbi5fdG90YWxEdXJhdGlvbiB8fCAhdGhpcy50d2Vlbi5fdG90YWxUaW1lKSkgfHwgIWZvcmNlM0QpICYmICF6ICYmICFwZXJzcGVjdGl2ZSAmJiAhcm90YXRpb25ZICYmICFyb3RhdGlvblggJiYgc3ogPT09IDEpIHx8IChfdXNlU1ZHVHJhbnNmb3JtQXR0ciAmJiBpc1NWRykgfHwgIV9zdXBwb3J0czNEKSB7IC8vb24gdGhlIGZpbmFsIHJlbmRlciAod2hpY2ggY291bGQgYmUgMCBmb3IgYSBmcm9tIHR3ZWVuKSwgaWYgdGhlcmUgYXJlIG5vIDNEIGFzcGVjdHMsIHJlbmRlciBpbiAyRCB0byBmcmVlIHVwIG1lbW9yeSBhbmQgaW1wcm92ZSBwZXJmb3JtYW5jZSBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLiBDaGVjayB0aGUgdHdlZW4ncyB0b3RhbFRpbWUvdG90YWxEdXJhdGlvbiB0b28gaW4gb3JkZXIgdG8gbWFrZSBzdXJlIGl0IGRvZXNuJ3QgaGFwcGVuIGJldHdlZW4gcmVwZWF0cyBpZiBpdCdzIGEgcmVwZWF0aW5nIHR3ZWVuLlxuXG5cdFx0XHRcdFx0Ly8yRFxuXHRcdFx0XHRcdGlmIChhbmdsZSB8fCBza2V3WCB8fCBpc1NWRykge1xuXHRcdFx0XHRcdFx0YW5nbGUgKj0gX0RFRzJSQUQ7XG5cdFx0XHRcdFx0XHRza2V3ID0gc2tld1ggKiBfREVHMlJBRDtcblx0XHRcdFx0XHRcdHJuZCA9IDEwMDAwMDtcblx0XHRcdFx0XHRcdGExMSA9IE1hdGguY29zKGFuZ2xlKSAqIHN4O1xuXHRcdFx0XHRcdFx0YTIxID0gTWF0aC5zaW4oYW5nbGUpICogc3g7XG5cdFx0XHRcdFx0XHRhMTIgPSBNYXRoLnNpbihhbmdsZSAtIHNrZXcpICogLXN5O1xuXHRcdFx0XHRcdFx0YTIyID0gTWF0aC5jb3MoYW5nbGUgLSBza2V3KSAqIHN5O1xuXHRcdFx0XHRcdFx0aWYgKHNrZXcgJiYgdC5za2V3VHlwZSA9PT0gXCJzaW1wbGVcIikgeyAvL2J5IGRlZmF1bHQsIHdlIGNvbXBlbnNhdGUgc2tld2luZyBvbiB0aGUgb3RoZXIgYXhpcyB0byBtYWtlIGl0IGxvb2sgbW9yZSBuYXR1cmFsLCBidXQgeW91IGNhbiBzZXQgdGhlIHNrZXdUeXBlIHRvIFwic2ltcGxlXCIgdG8gdXNlIHRoZSB1bmNvbXBlbnNhdGVkIHNrZXdpbmcgdGhhdCBDU1MgZG9lc1xuXHRcdFx0XHRcdFx0XHR0MSA9IE1hdGgudGFuKHNrZXcgLSBza2V3WSAqIF9ERUcyUkFEKTtcblx0XHRcdFx0XHRcdFx0dDEgPSBNYXRoLnNxcnQoMSArIHQxICogdDEpO1xuXHRcdFx0XHRcdFx0XHRhMTIgKj0gdDE7XG5cdFx0XHRcdFx0XHRcdGEyMiAqPSB0MTtcblx0XHRcdFx0XHRcdFx0aWYgKHNrZXdZKSB7XG5cdFx0XHRcdFx0XHRcdFx0dDEgPSBNYXRoLnRhbihza2V3WSAqIF9ERUcyUkFEKTtcblx0XHRcdFx0XHRcdFx0XHR0MSA9IE1hdGguc3FydCgxICsgdDEgKiB0MSk7XG5cdFx0XHRcdFx0XHRcdFx0YTExICo9IHQxO1xuXHRcdFx0XHRcdFx0XHRcdGEyMSAqPSB0MTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGlzU1ZHKSB7XG5cdFx0XHRcdFx0XHRcdHggKz0gdC54T3JpZ2luIC0gKHQueE9yaWdpbiAqIGExMSArIHQueU9yaWdpbiAqIGExMikgKyB0LnhPZmZzZXQ7XG5cdFx0XHRcdFx0XHRcdHkgKz0gdC55T3JpZ2luIC0gKHQueE9yaWdpbiAqIGEyMSArIHQueU9yaWdpbiAqIGEyMikgKyB0LnlPZmZzZXQ7XG5cdFx0XHRcdFx0XHRcdGlmIChfdXNlU1ZHVHJhbnNmb3JtQXR0ciAmJiAodC54UGVyY2VudCB8fCB0LnlQZXJjZW50KSkgeyAvL1RoZSBTVkcgc3BlYyBkb2Vzbid0IHN1cHBvcnQgcGVyY2VudGFnZS1iYXNlZCB0cmFuc2xhdGlvbiBpbiB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUsIHNvIHdlIG1lcmdlIGl0IGludG8gdGhlIG1hdHJpeCB0byBzaW11bGF0ZSBpdC5cblx0XHRcdFx0XHRcdFx0XHRtaW4gPSB0aGlzLnQuZ2V0QkJveCgpO1xuXHRcdFx0XHRcdFx0XHRcdHggKz0gdC54UGVyY2VudCAqIDAuMDEgKiBtaW4ud2lkdGg7XG5cdFx0XHRcdFx0XHRcdFx0eSArPSB0LnlQZXJjZW50ICogMC4wMSAqIG1pbi5oZWlnaHQ7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0bWluID0gMC4wMDAwMDE7XG5cdFx0XHRcdFx0XHRcdGlmICh4IDwgbWluKSBpZiAoeCA+IC1taW4pIHtcblx0XHRcdFx0XHRcdFx0XHR4ID0gMDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoeSA8IG1pbikgaWYgKHkgPiAtbWluKSB7XG5cdFx0XHRcdFx0XHRcdFx0eSA9IDA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRyYW5zZm9ybSA9ICgoKGExMSAqIHJuZCkgfCAwKSAvIHJuZCkgKyBcIixcIiArICgoKGEyMSAqIHJuZCkgfCAwKSAvIHJuZCkgKyBcIixcIiArICgoKGExMiAqIHJuZCkgfCAwKSAvIHJuZCkgKyBcIixcIiArICgoKGEyMiAqIHJuZCkgfCAwKSAvIHJuZCkgKyBcIixcIiArIHggKyBcIixcIiArIHkgKyBcIilcIjtcblx0XHRcdFx0XHRcdGlmIChpc1NWRyAmJiBfdXNlU1ZHVHJhbnNmb3JtQXR0cikge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwibWF0cml4KFwiICsgdHJhbnNmb3JtKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vc29tZSBicm93c2VycyBoYXZlIGEgaGFyZCB0aW1lIHdpdGggdmVyeSBzbWFsbCB2YWx1ZXMgbGlrZSAyLjQ0OTI5MzU5ODI5NDcwNjRlLTE2IChub3RpY2UgdGhlIFwiZS1cIiB0b3dhcmRzIHRoZSBlbmQpIGFuZCB3b3VsZCByZW5kZXIgdGhlIG9iamVjdCBzbGlnaHRseSBvZmYuIFNvIHdlIHJvdW5kIHRvIDUgZGVjaW1hbCBwbGFjZXMuXG5cdFx0XHRcdFx0XHRcdHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9ICgodC54UGVyY2VudCB8fCB0LnlQZXJjZW50KSA/IFwidHJhbnNsYXRlKFwiICsgdC54UGVyY2VudCArIFwiJSxcIiArIHQueVBlcmNlbnQgKyBcIiUpIG1hdHJpeChcIiA6IFwibWF0cml4KFwiKSArIHRyYW5zZm9ybTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c3R5bGVbX3RyYW5zZm9ybVByb3BdID0gKCh0LnhQZXJjZW50IHx8IHQueVBlcmNlbnQpID8gXCJ0cmFuc2xhdGUoXCIgKyB0LnhQZXJjZW50ICsgXCIlLFwiICsgdC55UGVyY2VudCArIFwiJSkgbWF0cml4KFwiIDogXCJtYXRyaXgoXCIpICsgc3ggKyBcIiwwLDAsXCIgKyBzeSArIFwiLFwiICsgeCArIFwiLFwiICsgeSArIFwiKVwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoX2lzRmlyZWZveCkgeyAvL0ZpcmVmb3ggaGFzIGEgYnVnIChhdCBsZWFzdCBpbiB2MjUpIHRoYXQgY2F1c2VzIGl0IHRvIHJlbmRlciB0aGUgdHJhbnNwYXJlbnQgcGFydCBvZiAzMi1iaXQgUE5HIGltYWdlcyBhcyBibGFjayB3aGVuIGRpc3BsYXllZCBpbnNpZGUgYW4gaWZyYW1lIGFuZCB0aGUgM0Qgc2NhbGUgaXMgdmVyeSBzbWFsbCBhbmQgZG9lc24ndCBjaGFuZ2Ugc3VmZmljaWVudGx5IGVub3VnaCBiZXR3ZWVuIHJlbmRlcnMgKGxpa2UgaWYgeW91IHVzZSBhIFBvd2VyNC5lYXNlSW5PdXQgdG8gc2NhbGUgZnJvbSAwIHRvIDEgd2hlcmUgdGhlIGJlZ2lubmluZyB2YWx1ZXMgb25seSBjaGFuZ2UgYSB0aW55IGFtb3VudCB0byBiZWdpbiB0aGUgdHdlZW4gYmVmb3JlIGFjY2VsZXJhdGluZykuIEluIHRoaXMgY2FzZSwgd2UgZm9yY2UgdGhlIHNjYWxlIHRvIGJlIDAuMDAwMDIgaW5zdGVhZCB3aGljaCBpcyB2aXN1YWxseSB0aGUgc2FtZSBidXQgd29ya3MgYXJvdW5kIHRoZSBGaXJlZm94IGlzc3VlLlxuXHRcdFx0XHRcdG1pbiA9IDAuMDAwMTtcblx0XHRcdFx0XHRpZiAoc3ggPCBtaW4gJiYgc3ggPiAtbWluKSB7XG5cdFx0XHRcdFx0XHRzeCA9IHN6ID0gMC4wMDAwMjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHN5IDwgbWluICYmIHN5ID4gLW1pbikge1xuXHRcdFx0XHRcdFx0c3kgPSBzeiA9IDAuMDAwMDI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwZXJzcGVjdGl2ZSAmJiAhdC56ICYmICF0LnJvdGF0aW9uWCAmJiAhdC5yb3RhdGlvblkpIHsgLy9GaXJlZm94IGhhcyBhIGJ1ZyB0aGF0IGNhdXNlcyBlbGVtZW50cyB0byBoYXZlIGFuIG9kZCBzdXBlci10aGluLCBicm9rZW4vZG90dGVkIGJsYWNrIGJvcmRlciBvbiBlbGVtZW50cyB0aGF0IGhhdmUgYSBwZXJzcGVjdGl2ZSBzZXQgYnV0IGFyZW4ndCB1dGlsaXppbmcgM0Qgc3BhY2UgKG5vIHJvdGF0aW9uWCwgcm90YXRpb25ZLCBvciB6KS5cblx0XHRcdFx0XHRcdHBlcnNwZWN0aXZlID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGFuZ2xlIHx8IHNrZXdYKSB7XG5cdFx0XHRcdFx0YW5nbGUgKj0gX0RFRzJSQUQ7XG5cdFx0XHRcdFx0Y29zID0gYTExID0gTWF0aC5jb3MoYW5nbGUpO1xuXHRcdFx0XHRcdHNpbiA9IGEyMSA9IE1hdGguc2luKGFuZ2xlKTtcblx0XHRcdFx0XHRpZiAoc2tld1gpIHtcblx0XHRcdFx0XHRcdGFuZ2xlIC09IHNrZXdYICogX0RFRzJSQUQ7XG5cdFx0XHRcdFx0XHRjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG5cdFx0XHRcdFx0XHRzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG5cdFx0XHRcdFx0XHRpZiAodC5za2V3VHlwZSA9PT0gXCJzaW1wbGVcIikgeyAvL2J5IGRlZmF1bHQsIHdlIGNvbXBlbnNhdGUgc2tld2luZyBvbiB0aGUgb3RoZXIgYXhpcyB0byBtYWtlIGl0IGxvb2sgbW9yZSBuYXR1cmFsLCBidXQgeW91IGNhbiBzZXQgdGhlIHNrZXdUeXBlIHRvIFwic2ltcGxlXCIgdG8gdXNlIHRoZSB1bmNvbXBlbnNhdGVkIHNrZXdpbmcgdGhhdCBDU1MgZG9lc1xuXHRcdFx0XHRcdFx0XHR0MSA9IE1hdGgudGFuKChza2V3WCAtIHNrZXdZKSAqIF9ERUcyUkFEKTtcblx0XHRcdFx0XHRcdFx0dDEgPSBNYXRoLnNxcnQoMSArIHQxICogdDEpO1xuXHRcdFx0XHRcdFx0XHRjb3MgKj0gdDE7XG5cdFx0XHRcdFx0XHRcdHNpbiAqPSB0MTtcblx0XHRcdFx0XHRcdFx0aWYgKHQuc2tld1kpIHtcblx0XHRcdFx0XHRcdFx0XHR0MSA9IE1hdGgudGFuKHNrZXdZICogX0RFRzJSQUQpO1xuXHRcdFx0XHRcdFx0XHRcdHQxID0gTWF0aC5zcXJ0KDEgKyB0MSAqIHQxKTtcblx0XHRcdFx0XHRcdFx0XHRhMTEgKj0gdDE7XG5cdFx0XHRcdFx0XHRcdFx0YTIxICo9IHQxO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGExMiA9IC1zaW47XG5cdFx0XHRcdFx0YTIyID0gY29zO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIXJvdGF0aW9uWSAmJiAhcm90YXRpb25YICYmIHN6ID09PSAxICYmICFwZXJzcGVjdGl2ZSAmJiAhaXNTVkcpIHsgLy9pZiB3ZSdyZSBvbmx5IHRyYW5zbGF0aW5nIGFuZC9vciAyRCBzY2FsaW5nLCB0aGlzIGlzIGZhc3Rlci4uLlxuXHRcdFx0XHRcdHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9ICgodC54UGVyY2VudCB8fCB0LnlQZXJjZW50KSA/IFwidHJhbnNsYXRlKFwiICsgdC54UGVyY2VudCArIFwiJSxcIiArIHQueVBlcmNlbnQgKyBcIiUpIHRyYW5zbGF0ZTNkKFwiIDogXCJ0cmFuc2xhdGUzZChcIikgKyB4ICsgXCJweCxcIiArIHkgKyBcInB4LFwiICsgeiArXCJweClcIiArICgoc3ggIT09IDEgfHwgc3kgIT09IDEpID8gXCIgc2NhbGUoXCIgKyBzeCArIFwiLFwiICsgc3kgKyBcIilcIiA6IFwiXCIpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRhMTEgPSBhMjIgPSAxO1xuXHRcdFx0XHRcdGExMiA9IGEyMSA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gS0VZICBJTkRFWCAgIEFGRkVDVFMgYVtyb3ddW2NvbHVtbl1cblx0XHRcdFx0Ly8gYTExICAwICAgICAgIHJvdGF0aW9uLCByb3RhdGlvblksIHNjYWxlWFxuXHRcdFx0XHQvLyBhMjEgIDEgICAgICAgcm90YXRpb24sIHJvdGF0aW9uWSwgc2NhbGVYXG5cdFx0XHRcdC8vIGEzMSAgMiAgICAgICByb3RhdGlvblksIHNjYWxlWFxuXHRcdFx0XHQvLyBhNDEgIDMgICAgICAgcm90YXRpb25ZLCBzY2FsZVhcblx0XHRcdFx0Ly8gYTEyICA0ICAgICAgIHJvdGF0aW9uLCBza2V3WCwgcm90YXRpb25YLCBzY2FsZVlcblx0XHRcdFx0Ly8gYTIyICA1ICAgICAgIHJvdGF0aW9uLCBza2V3WCwgcm90YXRpb25YLCBzY2FsZVlcblx0XHRcdFx0Ly8gYTMyICA2ICAgICAgIHJvdGF0aW9uWCwgc2NhbGVZXG5cdFx0XHRcdC8vIGE0MiAgNyAgICAgICByb3RhdGlvblgsIHNjYWxlWVxuXHRcdFx0XHQvLyBhMTMgIDggICAgICAgcm90YXRpb25ZLCByb3RhdGlvblgsIHNjYWxlWlxuXHRcdFx0XHQvLyBhMjMgIDkgICAgICAgcm90YXRpb25ZLCByb3RhdGlvblgsIHNjYWxlWlxuXHRcdFx0XHQvLyBhMzMgIDEwICAgICAgcm90YXRpb25ZLCByb3RhdGlvblgsIHNjYWxlWlxuXHRcdFx0XHQvLyBhNDMgIDExICAgICAgcm90YXRpb25ZLCByb3RhdGlvblgsIHBlcnNwZWN0aXZlLCBzY2FsZVpcblx0XHRcdFx0Ly8gYTE0ICAxMiAgICAgIHgsIHpPcmlnaW4sIHN2Z09yaWdpblxuXHRcdFx0XHQvLyBhMjQgIDEzICAgICAgeSwgek9yaWdpbiwgc3ZnT3JpZ2luXG5cdFx0XHRcdC8vIGEzNCAgMTQgICAgICB6LCB6T3JpZ2luXG5cdFx0XHRcdC8vIGE0NCAgMTVcblx0XHRcdFx0Ly8gcm90YXRpb246IE1hdGguYXRhbjIoYTIxLCBhMTEpXG5cdFx0XHRcdC8vIHJvdGF0aW9uWTogTWF0aC5hdGFuMihhMTMsIGEzMykgKG9yIE1hdGguYXRhbjIoYTEzLCBhMTEpKVxuXHRcdFx0XHQvLyByb3RhdGlvblg6IE1hdGguYXRhbjIoYTMyLCBhMzMpXG5cdFx0XHRcdGEzMyA9IDE7XG5cdFx0XHRcdGExMyA9IGEyMyA9IGEzMSA9IGEzMiA9IGE0MSA9IGE0MiA9IDA7XG5cdFx0XHRcdGE0MyA9IChwZXJzcGVjdGl2ZSkgPyAtMSAvIHBlcnNwZWN0aXZlIDogMDtcblx0XHRcdFx0ek9yaWdpbiA9IHQuek9yaWdpbjtcblx0XHRcdFx0bWluID0gMC4wMDAwMDE7IC8vdGhyZXNob2xkIGJlbG93IHdoaWNoIGJyb3dzZXJzIHVzZSBzY2llbnRpZmljIG5vdGF0aW9uIHdoaWNoIHdvbid0IHdvcmsuXG5cdFx0XHRcdGNvbW1hID0gXCIsXCI7XG5cdFx0XHRcdHplcm8gPSBcIjBcIjtcblx0XHRcdFx0YW5nbGUgPSByb3RhdGlvblkgKiBfREVHMlJBRDtcblx0XHRcdFx0aWYgKGFuZ2xlKSB7XG5cdFx0XHRcdFx0Y29zID0gTWF0aC5jb3MoYW5nbGUpO1xuXHRcdFx0XHRcdHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcblx0XHRcdFx0XHRhMzEgPSAtc2luO1xuXHRcdFx0XHRcdGE0MSA9IGE0Myotc2luO1xuXHRcdFx0XHRcdGExMyA9IGExMSpzaW47XG5cdFx0XHRcdFx0YTIzID0gYTIxKnNpbjtcblx0XHRcdFx0XHRhMzMgPSBjb3M7XG5cdFx0XHRcdFx0YTQzICo9IGNvcztcblx0XHRcdFx0XHRhMTEgKj0gY29zO1xuXHRcdFx0XHRcdGEyMSAqPSBjb3M7XG5cdFx0XHRcdH1cblx0XHRcdFx0YW5nbGUgPSByb3RhdGlvblggKiBfREVHMlJBRDtcblx0XHRcdFx0aWYgKGFuZ2xlKSB7XG5cdFx0XHRcdFx0Y29zID0gTWF0aC5jb3MoYW5nbGUpO1xuXHRcdFx0XHRcdHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcblx0XHRcdFx0XHR0MSA9IGExMipjb3MrYTEzKnNpbjtcblx0XHRcdFx0XHR0MiA9IGEyMipjb3MrYTIzKnNpbjtcblx0XHRcdFx0XHRhMzIgPSBhMzMqc2luO1xuXHRcdFx0XHRcdGE0MiA9IGE0MypzaW47XG5cdFx0XHRcdFx0YTEzID0gYTEyKi1zaW4rYTEzKmNvcztcblx0XHRcdFx0XHRhMjMgPSBhMjIqLXNpbithMjMqY29zO1xuXHRcdFx0XHRcdGEzMyA9IGEzMypjb3M7XG5cdFx0XHRcdFx0YTQzID0gYTQzKmNvcztcblx0XHRcdFx0XHRhMTIgPSB0MTtcblx0XHRcdFx0XHRhMjIgPSB0Mjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoc3ogIT09IDEpIHtcblx0XHRcdFx0XHRhMTMqPXN6O1xuXHRcdFx0XHRcdGEyMyo9c3o7XG5cdFx0XHRcdFx0YTMzKj1zejtcblx0XHRcdFx0XHRhNDMqPXN6O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChzeSAhPT0gMSkge1xuXHRcdFx0XHRcdGExMio9c3k7XG5cdFx0XHRcdFx0YTIyKj1zeTtcblx0XHRcdFx0XHRhMzIqPXN5O1xuXHRcdFx0XHRcdGE0Mio9c3k7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHN4ICE9PSAxKSB7XG5cdFx0XHRcdFx0YTExKj1zeDtcblx0XHRcdFx0XHRhMjEqPXN4O1xuXHRcdFx0XHRcdGEzMSo9c3g7XG5cdFx0XHRcdFx0YTQxKj1zeDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh6T3JpZ2luIHx8IGlzU1ZHKSB7XG5cdFx0XHRcdFx0aWYgKHpPcmlnaW4pIHtcblx0XHRcdFx0XHRcdHggKz0gYTEzKi16T3JpZ2luO1xuXHRcdFx0XHRcdFx0eSArPSBhMjMqLXpPcmlnaW47XG5cdFx0XHRcdFx0XHR6ICs9IGEzMyotek9yaWdpbit6T3JpZ2luO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoaXNTVkcpIHsgLy9kdWUgdG8gYnVncyBpbiBzb21lIGJyb3dzZXJzLCB3ZSBuZWVkIHRvIG1hbmFnZSB0aGUgdHJhbnNmb3JtLW9yaWdpbiBvZiBTVkcgbWFudWFsbHlcblx0XHRcdFx0XHRcdHggKz0gdC54T3JpZ2luIC0gKHQueE9yaWdpbiAqIGExMSArIHQueU9yaWdpbiAqIGExMikgKyB0LnhPZmZzZXQ7XG5cdFx0XHRcdFx0XHR5ICs9IHQueU9yaWdpbiAtICh0LnhPcmlnaW4gKiBhMjEgKyB0LnlPcmlnaW4gKiBhMjIpICsgdC55T2Zmc2V0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoeCA8IG1pbiAmJiB4ID4gLW1pbikge1xuXHRcdFx0XHRcdFx0eCA9IHplcm87XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh5IDwgbWluICYmIHkgPiAtbWluKSB7XG5cdFx0XHRcdFx0XHR5ID0gemVybztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHogPCBtaW4gJiYgeiA+IC1taW4pIHtcblx0XHRcdFx0XHRcdHogPSAwOyAvL2Rvbid0IHVzZSBzdHJpbmcgYmVjYXVzZSB3ZSBjYWxjdWxhdGUgcGVyc3BlY3RpdmUgbGF0ZXIgYW5kIG5lZWQgdGhlIG51bWJlci5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL29wdGltaXplZCB3YXkgb2YgY29uY2F0ZW5hdGluZyBhbGwgdGhlIHZhbHVlcyBpbnRvIGEgc3RyaW5nLiBJZiB3ZSBkbyBpdCBhbGwgaW4gb25lIHNob3QsIGl0J3Mgc2xvd2VyIGJlY2F1c2Ugb2YgdGhlIHdheSBicm93c2VycyBoYXZlIHRvIGNyZWF0ZSB0ZW1wIHN0cmluZ3MgYW5kIHRoZSB3YXkgaXQgYWZmZWN0cyBtZW1vcnkuIElmIHdlIGRvIGl0IHBpZWNlLWJ5LXBpZWNlIHdpdGggKz0sIGl0J3MgYSBiaXQgc2xvd2VyIHRvby4gV2UgZm91bmQgdGhhdCBkb2luZyBpdCBpbiB0aGVzZSBzaXplZCBjaHVua3Mgd29ya3MgYmVzdCBvdmVyYWxsOlxuXHRcdFx0XHR0cmFuc2Zvcm0gPSAoKHQueFBlcmNlbnQgfHwgdC55UGVyY2VudCkgPyBcInRyYW5zbGF0ZShcIiArIHQueFBlcmNlbnQgKyBcIiUsXCIgKyB0LnlQZXJjZW50ICsgXCIlKSBtYXRyaXgzZChcIiA6IFwibWF0cml4M2QoXCIpO1xuXHRcdFx0XHR0cmFuc2Zvcm0gKz0gKChhMTEgPCBtaW4gJiYgYTExID4gLW1pbikgPyB6ZXJvIDogYTExKSArIGNvbW1hICsgKChhMjEgPCBtaW4gJiYgYTIxID4gLW1pbikgPyB6ZXJvIDogYTIxKSArIGNvbW1hICsgKChhMzEgPCBtaW4gJiYgYTMxID4gLW1pbikgPyB6ZXJvIDogYTMxKTtcblx0XHRcdFx0dHJhbnNmb3JtICs9IGNvbW1hICsgKChhNDEgPCBtaW4gJiYgYTQxID4gLW1pbikgPyB6ZXJvIDogYTQxKSArIGNvbW1hICsgKChhMTIgPCBtaW4gJiYgYTEyID4gLW1pbikgPyB6ZXJvIDogYTEyKSArIGNvbW1hICsgKChhMjIgPCBtaW4gJiYgYTIyID4gLW1pbikgPyB6ZXJvIDogYTIyKTtcblx0XHRcdFx0aWYgKHJvdGF0aW9uWCB8fCByb3RhdGlvblkgfHwgc3ogIT09IDEpIHsgLy9wZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gKG9mdGVuIHRoZXJlJ3Mgbm8gcm90YXRpb25YIG9yIHJvdGF0aW9uWSwgc28gd2UgY2FuIHNraXAgdGhlc2UgY2FsY3VsYXRpb25zKVxuXHRcdFx0XHRcdHRyYW5zZm9ybSArPSBjb21tYSArICgoYTMyIDwgbWluICYmIGEzMiA+IC1taW4pID8gemVybyA6IGEzMikgKyBjb21tYSArICgoYTQyIDwgbWluICYmIGE0MiA+IC1taW4pID8gemVybyA6IGE0MikgKyBjb21tYSArICgoYTEzIDwgbWluICYmIGExMyA+IC1taW4pID8gemVybyA6IGExMyk7XG5cdFx0XHRcdFx0dHJhbnNmb3JtICs9IGNvbW1hICsgKChhMjMgPCBtaW4gJiYgYTIzID4gLW1pbikgPyB6ZXJvIDogYTIzKSArIGNvbW1hICsgKChhMzMgPCBtaW4gJiYgYTMzID4gLW1pbikgPyB6ZXJvIDogYTMzKSArIGNvbW1hICsgKChhNDMgPCBtaW4gJiYgYTQzID4gLW1pbikgPyB6ZXJvIDogYTQzKSArIGNvbW1hO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRyYW5zZm9ybSArPSBcIiwwLDAsMCwwLDEsMCxcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0cmFuc2Zvcm0gKz0geCArIGNvbW1hICsgeSArIGNvbW1hICsgeiArIGNvbW1hICsgKHBlcnNwZWN0aXZlID8gKDEgKyAoLXogLyBwZXJzcGVjdGl2ZSkpIDogMSkgKyBcIilcIjtcblxuXHRcdFx0XHRzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm07XG5cdFx0XHR9O1xuXG5cdFx0cCA9IFRyYW5zZm9ybS5wcm90b3R5cGU7XG5cdFx0cC54ID0gcC55ID0gcC56ID0gcC5za2V3WCA9IHAuc2tld1kgPSBwLnJvdGF0aW9uID0gcC5yb3RhdGlvblggPSBwLnJvdGF0aW9uWSA9IHAuek9yaWdpbiA9IHAueFBlcmNlbnQgPSBwLnlQZXJjZW50ID0gcC54T2Zmc2V0ID0gcC55T2Zmc2V0ID0gMDtcblx0XHRwLnNjYWxlWCA9IHAuc2NhbGVZID0gcC5zY2FsZVogPSAxO1xuXG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwidHJhbnNmb3JtLHNjYWxlLHNjYWxlWCxzY2FsZVksc2NhbGVaLHgseSx6LHJvdGF0aW9uLHJvdGF0aW9uWCxyb3RhdGlvblkscm90YXRpb25aLHNrZXdYLHNrZXdZLHNob3J0Um90YXRpb24sc2hvcnRSb3RhdGlvblgsc2hvcnRSb3RhdGlvblksc2hvcnRSb3RhdGlvblosdHJhbnNmb3JtT3JpZ2luLHN2Z09yaWdpbix0cmFuc2Zvcm1QZXJzcGVjdGl2ZSxkaXJlY3Rpb25hbFJvdGF0aW9uLHBhcnNlVHJhbnNmb3JtLGZvcmNlM0Qsc2tld1R5cGUseFBlcmNlbnQseVBlcmNlbnQsc21vb3RoT3JpZ2luXCIsIHtwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcGFyc2luZ1Byb3AsIGNzc3AsIHB0LCBwbHVnaW4sIHZhcnMpIHtcblx0XHRcdGlmIChjc3NwLl9sYXN0UGFyc2VkVHJhbnNmb3JtID09PSB2YXJzKSB7IHJldHVybiBwdDsgfSAvL29ubHkgbmVlZCB0byBwYXJzZSB0aGUgdHJhbnNmb3JtIG9uY2UsIGFuZCBvbmx5IGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIGl0LlxuXHRcdFx0Y3NzcC5fbGFzdFBhcnNlZFRyYW5zZm9ybSA9IHZhcnM7XG5cdFx0XHR2YXIgc2NhbGVGdW5jID0gKHZhcnMuc2NhbGUgJiYgdHlwZW9mKHZhcnMuc2NhbGUpID09PSBcImZ1bmN0aW9uXCIpID8gdmFycy5zY2FsZSA6IDA7IC8vaWYgdGhlcmUncyBhIGZ1bmN0aW9uLWJhc2VkIFwic2NhbGVcIiB2YWx1ZSwgc3dhcCBpbiB0aGUgcmVzdWx0aW5nIG51bWVyaWMgdmFsdWUgdGVtcG9yYXJpbHkuIE90aGVyd2lzZSwgaWYgaXQncyBjYWxsZWQgZm9yIGJvdGggc2NhbGVYIGFuZCBzY2FsZVkgaW5kZXBlbmRlbnRseSwgdGhleSBtYXkgbm90IG1hdGNoIChsaWtlIGlmIHRoZSBmdW5jdGlvbiB1c2VzIE1hdGgucmFuZG9tKCkpLlxuXHRcdFx0aWYgKHNjYWxlRnVuYykge1xuXHRcdFx0XHR2YXJzLnNjYWxlID0gc2NhbGVGdW5jKF9pbmRleCwgdCk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgb3JpZ2luYWxHU1RyYW5zZm9ybSA9IHQuX2dzVHJhbnNmb3JtLFxuXHRcdFx0XHRzdHlsZSA9IHQuc3R5bGUsXG5cdFx0XHRcdG1pbiA9IDAuMDAwMDAxLFxuXHRcdFx0XHRpID0gX3RyYW5zZm9ybVByb3BzLmxlbmd0aCxcblx0XHRcdFx0diA9IHZhcnMsXG5cdFx0XHRcdGVuZFJvdGF0aW9ucyA9IHt9LFxuXHRcdFx0XHR0cmFuc2Zvcm1PcmlnaW5TdHJpbmcgPSBcInRyYW5zZm9ybU9yaWdpblwiLFxuXHRcdFx0XHRtMSA9IF9nZXRUcmFuc2Zvcm0odCwgX2NzLCB0cnVlLCB2LnBhcnNlVHJhbnNmb3JtKSxcblx0XHRcdFx0b3JpZyA9IHYudHJhbnNmb3JtICYmICgodHlwZW9mKHYudHJhbnNmb3JtKSA9PT0gXCJmdW5jdGlvblwiKSA/IHYudHJhbnNmb3JtKF9pbmRleCwgX3RhcmdldCkgOiB2LnRyYW5zZm9ybSksXG5cdFx0XHRcdG0yLCBjb3B5LCBoYXMzRCwgaGFzQ2hhbmdlLCBkciwgeCwgeSwgbWF0cml4LCBwO1xuXHRcdFx0bTEuc2tld1R5cGUgPSB2LnNrZXdUeXBlIHx8IG0xLnNrZXdUeXBlIHx8IENTU1BsdWdpbi5kZWZhdWx0U2tld1R5cGU7XG5cdFx0XHRjc3NwLl90cmFuc2Zvcm0gPSBtMTtcblx0XHRcdGlmIChcInJvdGF0aW9uWlwiIGluIHYpIHtcblx0XHRcdFx0di5yb3RhdGlvbiA9IHYucm90YXRpb25aO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG9yaWcgJiYgdHlwZW9mKG9yaWcpID09PSBcInN0cmluZ1wiICYmIF90cmFuc2Zvcm1Qcm9wKSB7IC8vZm9yIHZhbHVlcyBsaWtlIHRyYW5zZm9ybTpcInJvdGF0ZSg2MGRlZykgc2NhbGUoMC41LCAwLjgpXCJcblx0XHRcdFx0Y29weSA9IF90ZW1wRGl2LnN0eWxlOyAvL2Rvbid0IHVzZSB0aGUgb3JpZ2luYWwgdGFyZ2V0IGJlY2F1c2UgaXQgbWlnaHQgYmUgU1ZHIGluIHdoaWNoIGNhc2Ugc29tZSBicm93c2VycyBkb24ndCByZXBvcnQgY29tcHV0ZWQgc3R5bGUgY29ycmVjdGx5LlxuXHRcdFx0XHRjb3B5W190cmFuc2Zvcm1Qcm9wXSA9IG9yaWc7XG5cdFx0XHRcdGNvcHkuZGlzcGxheSA9IFwiYmxvY2tcIjsgLy9pZiBkaXNwbGF5IGlzIFwibm9uZVwiLCB0aGUgYnJvd3NlciBvZnRlbiByZWZ1c2VzIHRvIHJlcG9ydCB0aGUgdHJhbnNmb3JtIHByb3BlcnRpZXMgY29ycmVjdGx5LlxuXHRcdFx0XHRjb3B5LnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdFx0XHRpZiAob3JpZy5pbmRleE9mKFwiJVwiKSAhPT0gLTEpIHsgLy8lLWJhc2VkIHRyYW5zbGF0aW9ucyB3aWxsIGZhaWwgdW5sZXNzIHdlIHNldCB0aGUgd2lkdGgvaGVpZ2h0IHRvIG1hdGNoIHRoZSBvcmlnaW5hbCB0YXJnZXQuLi5cblx0XHRcdFx0XHRjb3B5LndpZHRoID0gX2dldFN0eWxlKHQsIFwid2lkdGhcIik7XG5cdFx0XHRcdFx0Y29weS5oZWlnaHQgPSBfZ2V0U3R5bGUodCwgXCJoZWlnaHRcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0X2RvYy5ib2R5LmFwcGVuZENoaWxkKF90ZW1wRGl2KTtcblx0XHRcdFx0bTIgPSBfZ2V0VHJhbnNmb3JtKF90ZW1wRGl2LCBudWxsLCBmYWxzZSk7XG5cdFx0XHRcdGlmIChtMS5za2V3VHlwZSA9PT0gXCJzaW1wbGVcIikgeyAvL3RoZSBkZWZhdWx0IF9nZXRUcmFuc2Zvcm0oKSByZXBvcnRzIHRoZSBza2V3WC9zY2FsZVkgYXMgaWYgc2tld1R5cGUgaXMgXCJjb21wZW5zYXRlZFwiLCB0aHVzIHdlIG5lZWQgdG8gYWRqdXN0IHRoYXQgaGVyZSBpZiBza2V3VHlwZSBpcyBcInNpbXBsZVwiLlxuXHRcdFx0XHRcdG0yLnNjYWxlWSAqPSBNYXRoLmNvcyhtMi5za2V3WCAqIF9ERUcyUkFEKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobTEuc3ZnKSB7IC8vaWYgaXQncyBhbiBTVkcgZWxlbWVudCwgeC95IHBhcnQgb2YgdGhlIG1hdHJpeCB3aWxsIGJlIGFmZmVjdGVkIGJ5IHdoYXRldmVyIHdlIHVzZSBhcyB0aGUgb3JpZ2luIGFuZCB0aGUgb2Zmc2V0cywgc28gY29tcGVuc2F0ZSBoZXJlLi4uXG5cdFx0XHRcdFx0eCA9IG0xLnhPcmlnaW47XG5cdFx0XHRcdFx0eSA9IG0xLnlPcmlnaW47XG5cdFx0XHRcdFx0bTIueCAtPSBtMS54T2Zmc2V0O1xuXHRcdFx0XHRcdG0yLnkgLT0gbTEueU9mZnNldDtcblx0XHRcdFx0XHRpZiAodi50cmFuc2Zvcm1PcmlnaW4gfHwgdi5zdmdPcmlnaW4pIHsgLy9pZiB0aGlzIHR3ZWVuIGlzIGFsdGVyaW5nIHRoZSBvcmlnaW4sIHdlIG11c3QgZmFjdG9yIHRoYXQgaW4gaGVyZS4gVGhlIGFjdHVhbCB3b3JrIG9mIHJlY29yZGluZyB0aGUgdHJhbnNmb3JtT3JpZ2luIHZhbHVlcyBhbmQgc2V0dGluZyB1cCB0aGUgUHJvcFR3ZWVuIGlzIGRvbmUgbGF0ZXIgKHN0aWxsIGluc2lkZSB0aGlzIGZ1bmN0aW9uKSBzbyB3ZSBjYW5ub3QgbGVhdmUgdGhlIGNoYW5nZXMgaW50YWN0IGhlcmUgLSB3ZSBvbmx5IHdhbnQgdG8gdXBkYXRlIHRoZSB4L3kgYWNjb3JkaW5nbHkuXG5cdFx0XHRcdFx0XHRvcmlnID0ge307XG5cdFx0XHRcdFx0XHRfcGFyc2VTVkdPcmlnaW4odCwgX3BhcnNlUG9zaXRpb24odi50cmFuc2Zvcm1PcmlnaW4pLCBvcmlnLCB2LnN2Z09yaWdpbiwgdi5zbW9vdGhPcmlnaW4sIHRydWUpO1xuXHRcdFx0XHRcdFx0eCA9IG9yaWcueE9yaWdpbjtcblx0XHRcdFx0XHRcdHkgPSBvcmlnLnlPcmlnaW47XG5cdFx0XHRcdFx0XHRtMi54IC09IG9yaWcueE9mZnNldCAtIG0xLnhPZmZzZXQ7XG5cdFx0XHRcdFx0XHRtMi55IC09IG9yaWcueU9mZnNldCAtIG0xLnlPZmZzZXQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh4IHx8IHkpIHtcblx0XHRcdFx0XHRcdG1hdHJpeCA9IF9nZXRNYXRyaXgoX3RlbXBEaXYsIHRydWUpO1xuXHRcdFx0XHRcdFx0bTIueCAtPSB4IC0gKHggKiBtYXRyaXhbMF0gKyB5ICogbWF0cml4WzJdKTtcblx0XHRcdFx0XHRcdG0yLnkgLT0geSAtICh4ICogbWF0cml4WzFdICsgeSAqIG1hdHJpeFszXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdF9kb2MuYm9keS5yZW1vdmVDaGlsZChfdGVtcERpdik7XG5cdFx0XHRcdGlmICghbTIucGVyc3BlY3RpdmUpIHtcblx0XHRcdFx0XHRtMi5wZXJzcGVjdGl2ZSA9IG0xLnBlcnNwZWN0aXZlOyAvL3R3ZWVuaW5nIHRvIG5vIHBlcnNwZWN0aXZlIGdpdmVzIHZlcnkgdW5pbnR1aXRpdmUgcmVzdWx0cyAtIGp1c3Qga2VlcCB0aGUgc2FtZSBwZXJzcGVjdGl2ZSBpbiB0aGF0IGNhc2UuXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHYueFBlcmNlbnQgIT0gbnVsbCkge1xuXHRcdFx0XHRcdG0yLnhQZXJjZW50ID0gX3BhcnNlVmFsKHYueFBlcmNlbnQsIG0xLnhQZXJjZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodi55UGVyY2VudCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0bTIueVBlcmNlbnQgPSBfcGFyc2VWYWwodi55UGVyY2VudCwgbTEueVBlcmNlbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHR5cGVvZih2KSA9PT0gXCJvYmplY3RcIikgeyAvL2ZvciB2YWx1ZXMgbGlrZSBzY2FsZVgsIHNjYWxlWSwgcm90YXRpb24sIHgsIHksIHNrZXdYLCBhbmQgc2tld1kgb3IgdHJhbnNmb3JtOnsuLi59IChvYmplY3QpXG5cdFx0XHRcdG0yID0ge3NjYWxlWDpfcGFyc2VWYWwoKHYuc2NhbGVYICE9IG51bGwpID8gdi5zY2FsZVggOiB2LnNjYWxlLCBtMS5zY2FsZVgpLFxuXHRcdFx0XHRcdHNjYWxlWTpfcGFyc2VWYWwoKHYuc2NhbGVZICE9IG51bGwpID8gdi5zY2FsZVkgOiB2LnNjYWxlLCBtMS5zY2FsZVkpLFxuXHRcdFx0XHRcdHNjYWxlWjpfcGFyc2VWYWwodi5zY2FsZVosIG0xLnNjYWxlWiksXG5cdFx0XHRcdFx0eDpfcGFyc2VWYWwodi54LCBtMS54KSxcblx0XHRcdFx0XHR5Ol9wYXJzZVZhbCh2LnksIG0xLnkpLFxuXHRcdFx0XHRcdHo6X3BhcnNlVmFsKHYueiwgbTEueiksXG5cdFx0XHRcdFx0eFBlcmNlbnQ6X3BhcnNlVmFsKHYueFBlcmNlbnQsIG0xLnhQZXJjZW50KSxcblx0XHRcdFx0XHR5UGVyY2VudDpfcGFyc2VWYWwodi55UGVyY2VudCwgbTEueVBlcmNlbnQpLFxuXHRcdFx0XHRcdHBlcnNwZWN0aXZlOl9wYXJzZVZhbCh2LnRyYW5zZm9ybVBlcnNwZWN0aXZlLCBtMS5wZXJzcGVjdGl2ZSl9O1xuXHRcdFx0XHRkciA9IHYuZGlyZWN0aW9uYWxSb3RhdGlvbjtcblx0XHRcdFx0aWYgKGRyICE9IG51bGwpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mKGRyKSA9PT0gXCJvYmplY3RcIikge1xuXHRcdFx0XHRcdFx0Zm9yIChjb3B5IGluIGRyKSB7XG5cdFx0XHRcdFx0XHRcdHZbY29weV0gPSBkcltjb3B5XTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0di5yb3RhdGlvbiA9IGRyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodHlwZW9mKHYueCkgPT09IFwic3RyaW5nXCIgJiYgdi54LmluZGV4T2YoXCIlXCIpICE9PSAtMSkge1xuXHRcdFx0XHRcdG0yLnggPSAwO1xuXHRcdFx0XHRcdG0yLnhQZXJjZW50ID0gX3BhcnNlVmFsKHYueCwgbTEueFBlcmNlbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0eXBlb2Yodi55KSA9PT0gXCJzdHJpbmdcIiAmJiB2LnkuaW5kZXhPZihcIiVcIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0bTIueSA9IDA7XG5cdFx0XHRcdFx0bTIueVBlcmNlbnQgPSBfcGFyc2VWYWwodi55LCBtMS55UGVyY2VudCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtMi5yb3RhdGlvbiA9IF9wYXJzZUFuZ2xlKChcInJvdGF0aW9uXCIgaW4gdikgPyB2LnJvdGF0aW9uIDogKFwic2hvcnRSb3RhdGlvblwiIGluIHYpID8gdi5zaG9ydFJvdGF0aW9uICsgXCJfc2hvcnRcIiA6IG0xLnJvdGF0aW9uLCBtMS5yb3RhdGlvbiwgXCJyb3RhdGlvblwiLCBlbmRSb3RhdGlvbnMpO1xuXHRcdFx0XHRpZiAoX3N1cHBvcnRzM0QpIHtcblx0XHRcdFx0XHRtMi5yb3RhdGlvblggPSBfcGFyc2VBbmdsZSgoXCJyb3RhdGlvblhcIiBpbiB2KSA/IHYucm90YXRpb25YIDogKFwic2hvcnRSb3RhdGlvblhcIiBpbiB2KSA/IHYuc2hvcnRSb3RhdGlvblggKyBcIl9zaG9ydFwiIDogbTEucm90YXRpb25YIHx8IDAsIG0xLnJvdGF0aW9uWCwgXCJyb3RhdGlvblhcIiwgZW5kUm90YXRpb25zKTtcblx0XHRcdFx0XHRtMi5yb3RhdGlvblkgPSBfcGFyc2VBbmdsZSgoXCJyb3RhdGlvbllcIiBpbiB2KSA/IHYucm90YXRpb25ZIDogKFwic2hvcnRSb3RhdGlvbllcIiBpbiB2KSA/IHYuc2hvcnRSb3RhdGlvblkgKyBcIl9zaG9ydFwiIDogbTEucm90YXRpb25ZIHx8IDAsIG0xLnJvdGF0aW9uWSwgXCJyb3RhdGlvbllcIiwgZW5kUm90YXRpb25zKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRtMi5za2V3WCA9IF9wYXJzZUFuZ2xlKHYuc2tld1gsIG0xLnNrZXdYKTtcblx0XHRcdFx0bTIuc2tld1kgPSBfcGFyc2VBbmdsZSh2LnNrZXdZLCBtMS5za2V3WSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoX3N1cHBvcnRzM0QgJiYgdi5mb3JjZTNEICE9IG51bGwpIHtcblx0XHRcdFx0bTEuZm9yY2UzRCA9IHYuZm9yY2UzRDtcblx0XHRcdFx0aGFzQ2hhbmdlID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aGFzM0QgPSAobTEuZm9yY2UzRCB8fCBtMS56IHx8IG0xLnJvdGF0aW9uWCB8fCBtMS5yb3RhdGlvblkgfHwgbTIueiB8fCBtMi5yb3RhdGlvblggfHwgbTIucm90YXRpb25ZIHx8IG0yLnBlcnNwZWN0aXZlKTtcblx0XHRcdGlmICghaGFzM0QgJiYgdi5zY2FsZSAhPSBudWxsKSB7XG5cdFx0XHRcdG0yLnNjYWxlWiA9IDE7IC8vbm8gbmVlZCB0byB0d2VlbiBzY2FsZVouXG5cdFx0XHR9XG5cblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRwID0gX3RyYW5zZm9ybVByb3BzW2ldO1xuXHRcdFx0XHRvcmlnID0gbTJbcF0gLSBtMVtwXTtcblx0XHRcdFx0aWYgKG9yaWcgPiBtaW4gfHwgb3JpZyA8IC1taW4gfHwgdltwXSAhPSBudWxsIHx8IF9mb3JjZVBUW3BdICE9IG51bGwpIHtcblx0XHRcdFx0XHRoYXNDaGFuZ2UgPSB0cnVlO1xuXHRcdFx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2VlbihtMSwgcCwgbTFbcF0sIG9yaWcsIHB0KTtcblx0XHRcdFx0XHRpZiAocCBpbiBlbmRSb3RhdGlvbnMpIHtcblx0XHRcdFx0XHRcdHB0LmUgPSBlbmRSb3RhdGlvbnNbcF07IC8vZGlyZWN0aW9uYWwgcm90YXRpb25zIHR5cGljYWxseSBoYXZlIGNvbXBlbnNhdGVkIHZhbHVlcyBkdXJpbmcgdGhlIHR3ZWVuLCBidXQgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhleSBlbmQgYXQgZXhhY3RseSB3aGF0IHRoZSB1c2VyIHJlcXVlc3RlZFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdC54czAgPSAwOyAvL2Vuc3VyZXMgdGhlIHZhbHVlIHN0YXlzIG51bWVyaWMgaW4gc2V0UmF0aW8oKVxuXHRcdFx0XHRcdHB0LnBsdWdpbiA9IHBsdWdpbjtcblx0XHRcdFx0XHRjc3NwLl9vdmVyd3JpdGVQcm9wcy5wdXNoKHB0Lm4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdG9yaWcgPSAodHlwZW9mKHYudHJhbnNmb3JtT3JpZ2luKSA9PT0gXCJmdW5jdGlvblwiKSA/IHYudHJhbnNmb3JtT3JpZ2luKF9pbmRleCwgX3RhcmdldCkgOiB2LnRyYW5zZm9ybU9yaWdpbjtcblx0XHRcdGlmIChtMS5zdmcgJiYgKG9yaWcgfHwgdi5zdmdPcmlnaW4pKSB7XG5cdFx0XHRcdHggPSBtMS54T2Zmc2V0OyAvL3doZW4gd2UgY2hhbmdlIHRoZSBvcmlnaW4sIGluIG9yZGVyIHRvIHByZXZlbnQgdGhpbmdzIGZyb20ganVtcGluZyB3ZSBhZGp1c3QgdGhlIHgveSBzbyB3ZSBtdXN0IHJlY29yZCB0aG9zZSBoZXJlIHNvIHRoYXQgd2UgY2FuIGNyZWF0ZSBQcm9wVHdlZW5zIGZvciB0aGVtIGFuZCBmbGlwIHRoZW0gYXQgdGhlIHNhbWUgdGltZSBhcyB0aGUgb3JpZ2luXG5cdFx0XHRcdHkgPSBtMS55T2Zmc2V0O1xuXHRcdFx0XHRfcGFyc2VTVkdPcmlnaW4odCwgX3BhcnNlUG9zaXRpb24ob3JpZyksIG0yLCB2LnN2Z09yaWdpbiwgdi5zbW9vdGhPcmlnaW4pO1xuXHRcdFx0XHRwdCA9IF9hZGROb25Ud2VlbmluZ051bWVyaWNQVChtMSwgXCJ4T3JpZ2luXCIsIChvcmlnaW5hbEdTVHJhbnNmb3JtID8gbTEgOiBtMikueE9yaWdpbiwgbTIueE9yaWdpbiwgcHQsIHRyYW5zZm9ybU9yaWdpblN0cmluZyk7IC8vbm90ZTogaWYgdGhlcmUgd2Fzbid0IGEgdHJhbnNmb3JtT3JpZ2luIGRlZmluZWQgeWV0LCBqdXN0IHN0YXJ0IHdpdGggdGhlIGRlc3RpbmF0aW9uIG9uZTsgaXQncyB3YXN0ZWZ1bCBvdGhlcndpc2UsIGFuZCBpdCBjYXVzZXMgcHJvYmxlbXMgd2l0aCBmcm9tVG8oKSB0d2VlbnMuIEZvciBleGFtcGxlLCBUd2VlbkxpdGUudG8oXCIjd2hlZWxcIiwgMywge3JvdGF0aW9uOjE4MCwgdHJhbnNmb3JtT3JpZ2luOlwiNTAlIDUwJVwiLCBkZWxheToxfSk7IFR3ZWVuTGl0ZS5mcm9tVG8oXCIjd2hlZWxcIiwgMywge3NjYWxlOjAuNSwgdHJhbnNmb3JtT3JpZ2luOlwiNTAlIDUwJVwifSwge3NjYWxlOjEsIGRlbGF5OjJ9KTsgd291bGQgY2F1c2UgYSBqdW1wIHdoZW4gdGhlIGZyb20gdmFsdWVzIHJldmVydCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSAybmQgdHdlZW4uXG5cdFx0XHRcdHB0ID0gX2FkZE5vblR3ZWVuaW5nTnVtZXJpY1BUKG0xLCBcInlPcmlnaW5cIiwgKG9yaWdpbmFsR1NUcmFuc2Zvcm0gPyBtMSA6IG0yKS55T3JpZ2luLCBtMi55T3JpZ2luLCBwdCwgdHJhbnNmb3JtT3JpZ2luU3RyaW5nKTtcblx0XHRcdFx0aWYgKHggIT09IG0xLnhPZmZzZXQgfHwgeSAhPT0gbTEueU9mZnNldCkge1xuXHRcdFx0XHRcdHB0ID0gX2FkZE5vblR3ZWVuaW5nTnVtZXJpY1BUKG0xLCBcInhPZmZzZXRcIiwgKG9yaWdpbmFsR1NUcmFuc2Zvcm0gPyB4IDogbTEueE9mZnNldCksIG0xLnhPZmZzZXQsIHB0LCB0cmFuc2Zvcm1PcmlnaW5TdHJpbmcpO1xuXHRcdFx0XHRcdHB0ID0gX2FkZE5vblR3ZWVuaW5nTnVtZXJpY1BUKG0xLCBcInlPZmZzZXRcIiwgKG9yaWdpbmFsR1NUcmFuc2Zvcm0gPyB5IDogbTEueU9mZnNldCksIG0xLnlPZmZzZXQsIHB0LCB0cmFuc2Zvcm1PcmlnaW5TdHJpbmcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9yaWcgPSBcIjBweCAwcHhcIjsgLy9jZXJ0YWluIGJyb3dzZXJzIChsaWtlIGZpcmVmb3gpIGNvbXBsZXRlbHkgYm90Y2ggdHJhbnNmb3JtLW9yaWdpbiwgc28gd2UgbXVzdCByZW1vdmUgaXQgdG8gcHJldmVudCBpdCBmcm9tIGNvbnRhbWluYXRpbmcgdHJhbnNmb3Jtcy4gV2UgbWFuYWdlIGl0IG91cnNlbHZlcyB3aXRoIHhPcmlnaW4gYW5kIHlPcmlnaW5cblx0XHRcdH1cblx0XHRcdGlmIChvcmlnIHx8IChfc3VwcG9ydHMzRCAmJiBoYXMzRCAmJiBtMS56T3JpZ2luKSkgeyAvL2lmIGFueXRoaW5nIDNEIGlzIGhhcHBlbmluZyBhbmQgdGhlcmUncyBhIHRyYW5zZm9ybU9yaWdpbiB3aXRoIGEgeiBjb21wb25lbnQgdGhhdCdzIG5vbi16ZXJvLCB3ZSBtdXN0IGVuc3VyZSB0aGF0IHRoZSB0cmFuc2Zvcm1PcmlnaW4ncyB6LWNvbXBvbmVudCBpcyBzZXQgdG8gMCBzbyB0aGF0IHdlIGNhbiBtYW51YWxseSBkbyB0aG9zZSBjYWxjdWxhdGlvbnMgdG8gZ2V0IGFyb3VuZCBTYWZhcmkgYnVncy4gRXZlbiBpZiB0aGUgdXNlciBkaWRuJ3Qgc3BlY2lmaWNhbGx5IGRlZmluZSBhIFwidHJhbnNmb3JtT3JpZ2luXCIgaW4gdGhpcyBwYXJ0aWN1bGFyIHR3ZWVuIChtYXliZSB0aGV5IGRpZCBpdCB2aWEgY3NzIGRpcmVjdGx5KS5cblx0XHRcdFx0aWYgKF90cmFuc2Zvcm1Qcm9wKSB7XG5cdFx0XHRcdFx0aGFzQ2hhbmdlID0gdHJ1ZTtcblx0XHRcdFx0XHRwID0gX3RyYW5zZm9ybU9yaWdpblByb3A7XG5cdFx0XHRcdFx0aWYgKCFvcmlnKSB7XG5cdFx0XHRcdFx0XHRvcmlnID0gKF9nZXRTdHlsZSh0LCBwLCBfY3MsIGZhbHNlLCBcIjUwJSA1MCVcIikgKyBcIlwiKS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0XHRvcmlnID0gb3JpZ1swXSArIFwiIFwiICsgb3JpZ1sxXSArIFwiIFwiICsgbTEuek9yaWdpbiArIFwicHhcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0b3JpZyArPSBcIlwiO1xuXHRcdFx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2VlbihzdHlsZSwgcCwgMCwgMCwgcHQsIC0xLCB0cmFuc2Zvcm1PcmlnaW5TdHJpbmcpO1xuXHRcdFx0XHRcdHB0LmIgPSBzdHlsZVtwXTtcblx0XHRcdFx0XHRwdC5wbHVnaW4gPSBwbHVnaW47XG5cdFx0XHRcdFx0aWYgKF9zdXBwb3J0czNEKSB7XG5cdFx0XHRcdFx0XHRjb3B5ID0gbTEuek9yaWdpbjtcblx0XHRcdFx0XHRcdG9yaWcgPSBvcmlnLnNwbGl0KFwiIFwiKTtcblx0XHRcdFx0XHRcdG0xLnpPcmlnaW4gPSAoKG9yaWcubGVuZ3RoID4gMikgPyBwYXJzZUZsb2F0KG9yaWdbMl0pIDogY29weSkgfHwgMDsgLy9TYWZhcmkgZG9lc24ndCBoYW5kbGUgdGhlIHogcGFydCBvZiB0cmFuc2Zvcm1PcmlnaW4gY29ycmVjdGx5LCBzbyB3ZSdsbCBtYW51YWxseSBoYW5kbGUgaXQgaW4gdGhlIF9zZXQzRFRyYW5zZm9ybVJhdGlvKCkgbWV0aG9kLlxuXHRcdFx0XHRcdFx0cHQueHMwID0gcHQuZSA9IG9yaWdbMF0gKyBcIiBcIiArIChvcmlnWzFdIHx8IFwiNTAlXCIpICsgXCIgMHB4XCI7IC8vd2UgbXVzdCBkZWZpbmUgYSB6IHZhbHVlIG9mIDBweCBzcGVjaWZpY2FsbHkgb3RoZXJ3aXNlIGlPUyA1IFNhZmFyaSB3aWxsIHN0aWNrIHdpdGggdGhlIG9sZCBvbmUgKGlmIG9uZSB3YXMgZGVmaW5lZCkhXG5cdFx0XHRcdFx0XHRwdCA9IG5ldyBDU1NQcm9wVHdlZW4obTEsIFwiek9yaWdpblwiLCAwLCAwLCBwdCwgLTEsIHB0Lm4pOyAvL3dlIG11c3QgY3JlYXRlIGEgQ1NTUHJvcFR3ZWVuIGZvciB0aGUgX2dzVHJhbnNmb3JtLnpPcmlnaW4gc28gdGhhdCBpdCBnZXRzIHJlc2V0IHByb3Blcmx5IGF0IHRoZSBiZWdpbm5pbmcgaWYgdGhlIHR3ZWVuIHJ1bnMgYmFja3dhcmQgKGFzIG9wcG9zZWQgdG8ganVzdCBzZXR0aW5nIG0xLnpPcmlnaW4gaGVyZSlcblx0XHRcdFx0XHRcdHB0LmIgPSBjb3B5O1xuXHRcdFx0XHRcdFx0cHQueHMwID0gcHQuZSA9IG0xLnpPcmlnaW47XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHB0LnhzMCA9IHB0LmUgPSBvcmlnO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vZm9yIG9sZGVyIHZlcnNpb25zIG9mIElFICg2LTgpLCB3ZSBuZWVkIHRvIG1hbnVhbGx5IGNhbGN1bGF0ZSB0aGluZ3MgaW5zaWRlIHRoZSBzZXRSYXRpbygpIGZ1bmN0aW9uLiBXZSByZWNvcmQgb3JpZ2luIHggYW5kIHkgKG94IGFuZCBveSkgYW5kIHdoZXRoZXIgb3Igbm90IHRoZSB2YWx1ZXMgYXJlIHBlcmNlbnRhZ2VzIChveHAgYW5kIG95cCkuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0X3BhcnNlUG9zaXRpb24ob3JpZyArIFwiXCIsIG0xKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGhhc0NoYW5nZSkge1xuXHRcdFx0XHRjc3NwLl90cmFuc2Zvcm1UeXBlID0gKCEobTEuc3ZnICYmIF91c2VTVkdUcmFuc2Zvcm1BdHRyKSAmJiAoaGFzM0QgfHwgdGhpcy5fdHJhbnNmb3JtVHlwZSA9PT0gMykpID8gMyA6IDI7IC8vcXVpY2tlciB0aGFuIGNhbGxpbmcgY3NzcC5fZW5hYmxlVHJhbnNmb3JtcygpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNjYWxlRnVuYykge1xuXHRcdFx0XHR2YXJzLnNjYWxlID0gc2NhbGVGdW5jO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHB0O1xuXHRcdH0sIGFsbG93RnVuYzp0cnVlLCBwcmVmaXg6dHJ1ZX0pO1xuXG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiYm94U2hhZG93XCIsIHtkZWZhdWx0VmFsdWU6XCIwcHggMHB4IDBweCAwcHggIzk5OVwiLCBwcmVmaXg6dHJ1ZSwgY29sb3I6dHJ1ZSwgbXVsdGk6dHJ1ZSwga2V5d29yZDpcImluc2V0XCJ9KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJjbGlwUGF0aFwiLCB7ZGVmYXVsdFZhbHVlOlwiaW5zZXQoMCUpXCIsIHByZWZpeDp0cnVlLCBtdWx0aTp0cnVlLCBmb3JtYXR0ZXI6X2dldEZvcm1hdHRlcihcImluc2V0KDAlIDAlIDAlIDAlKVwiLCBmYWxzZSwgdHJ1ZSl9KTtcblxuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImJvcmRlclJhZGl1c1wiLCB7ZGVmYXVsdFZhbHVlOlwiMHB4XCIsIHBhcnNlcjpmdW5jdGlvbih0LCBlLCBwLCBjc3NwLCBwdCwgcGx1Z2luKSB7XG5cdFx0XHRlID0gdGhpcy5mb3JtYXQoZSk7XG5cdFx0XHR2YXIgcHJvcHMgPSBbXCJib3JkZXJUb3BMZWZ0UmFkaXVzXCIsXCJib3JkZXJUb3BSaWdodFJhZGl1c1wiLFwiYm9yZGVyQm90dG9tUmlnaHRSYWRpdXNcIixcImJvcmRlckJvdHRvbUxlZnRSYWRpdXNcIl0sXG5cdFx0XHRcdHN0eWxlID0gdC5zdHlsZSxcblx0XHRcdFx0ZWExLCBpLCBlczIsIGJzMiwgYnMsIGVzLCBibiwgZW4sIHcsIGgsIGVzZngsIGJzZngsIHJlbCwgaG4sIHZuLCBlbTtcblx0XHRcdHcgPSBwYXJzZUZsb2F0KHQub2Zmc2V0V2lkdGgpO1xuXHRcdFx0aCA9IHBhcnNlRmxvYXQodC5vZmZzZXRIZWlnaHQpO1xuXHRcdFx0ZWExID0gZS5zcGxpdChcIiBcIik7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgLy9pZiB3ZSdyZSBkZWFsaW5nIHdpdGggcGVyY2VudGFnZXMsIHdlIG11c3QgY29udmVydCB0aGluZ3Mgc2VwYXJhdGVseSBmb3IgdGhlIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIGF4aXMhXG5cdFx0XHRcdGlmICh0aGlzLnAuaW5kZXhPZihcImJvcmRlclwiKSkgeyAvL29sZGVyIGJyb3dzZXJzIHVzZWQgYSBwcmVmaXhcblx0XHRcdFx0XHRwcm9wc1tpXSA9IF9jaGVja1Byb3BQcmVmaXgocHJvcHNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJzID0gYnMyID0gX2dldFN0eWxlKHQsIHByb3BzW2ldLCBfY3MsIGZhbHNlLCBcIjBweFwiKTtcblx0XHRcdFx0aWYgKGJzLmluZGV4T2YoXCIgXCIpICE9PSAtMSkge1xuXHRcdFx0XHRcdGJzMiA9IGJzLnNwbGl0KFwiIFwiKTtcblx0XHRcdFx0XHRicyA9IGJzMlswXTtcblx0XHRcdFx0XHRiczIgPSBiczJbMV07XG5cdFx0XHRcdH1cblx0XHRcdFx0ZXMgPSBlczIgPSBlYTFbaV07XG5cdFx0XHRcdGJuID0gcGFyc2VGbG9hdChicyk7XG5cdFx0XHRcdGJzZnggPSBicy5zdWJzdHIoKGJuICsgXCJcIikubGVuZ3RoKTtcblx0XHRcdFx0cmVsID0gKGVzLmNoYXJBdCgxKSA9PT0gXCI9XCIpO1xuXHRcdFx0XHRpZiAocmVsKSB7XG5cdFx0XHRcdFx0ZW4gPSBwYXJzZUludChlcy5jaGFyQXQoMCkrXCIxXCIsIDEwKTtcblx0XHRcdFx0XHRlcyA9IGVzLnN1YnN0cigyKTtcblx0XHRcdFx0XHRlbiAqPSBwYXJzZUZsb2F0KGVzKTtcblx0XHRcdFx0XHRlc2Z4ID0gZXMuc3Vic3RyKChlbiArIFwiXCIpLmxlbmd0aCAtIChlbiA8IDAgPyAxIDogMCkpIHx8IFwiXCI7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZW4gPSBwYXJzZUZsb2F0KGVzKTtcblx0XHRcdFx0XHRlc2Z4ID0gZXMuc3Vic3RyKChlbiArIFwiXCIpLmxlbmd0aCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGVzZnggPT09IFwiXCIpIHtcblx0XHRcdFx0XHRlc2Z4ID0gX3N1ZmZpeE1hcFtwXSB8fCBic2Z4O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChlc2Z4ICE9PSBic2Z4KSB7XG5cdFx0XHRcdFx0aG4gPSBfY29udmVydFRvUGl4ZWxzKHQsIFwiYm9yZGVyTGVmdFwiLCBibiwgYnNmeCk7IC8vaG9yaXpvbnRhbCBudW1iZXIgKHdlIHVzZSBhIGJvZ3VzIFwiYm9yZGVyTGVmdFwiIHByb3BlcnR5IGp1c3QgYmVjYXVzZSB0aGUgX2NvbnZlcnRUb1BpeGVscygpIG1ldGhvZCBzZWFyY2hlcyBmb3IgdGhlIGtleXdvcmRzIFwiTGVmdFwiLCBcIlJpZ2h0XCIsIFwiVG9wXCIsIGFuZCBcIkJvdHRvbVwiIHRvIGRldGVybWluZSBvZiBpdCdzIGEgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0eSwgYW5kIHdlIG5lZWQgXCJib3JkZXJcIiBpbiB0aGUgbmFtZSBzbyB0aGF0IGl0IGtub3dzIGl0IHNob3VsZCBtZWFzdXJlIHJlbGF0aXZlIHRvIHRoZSBlbGVtZW50IGl0c2VsZiwgbm90IGl0cyBwYXJlbnQuXG5cdFx0XHRcdFx0dm4gPSBfY29udmVydFRvUGl4ZWxzKHQsIFwiYm9yZGVyVG9wXCIsIGJuLCBic2Z4KTsgLy92ZXJ0aWNhbCBudW1iZXJcblx0XHRcdFx0XHRpZiAoZXNmeCA9PT0gXCIlXCIpIHtcblx0XHRcdFx0XHRcdGJzID0gKGhuIC8gdyAqIDEwMCkgKyBcIiVcIjtcblx0XHRcdFx0XHRcdGJzMiA9ICh2biAvIGggKiAxMDApICsgXCIlXCI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChlc2Z4ID09PSBcImVtXCIpIHtcblx0XHRcdFx0XHRcdGVtID0gX2NvbnZlcnRUb1BpeGVscyh0LCBcImJvcmRlckxlZnRcIiwgMSwgXCJlbVwiKTtcblx0XHRcdFx0XHRcdGJzID0gKGhuIC8gZW0pICsgXCJlbVwiO1xuXHRcdFx0XHRcdFx0YnMyID0gKHZuIC8gZW0pICsgXCJlbVwiO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRicyA9IGhuICsgXCJweFwiO1xuXHRcdFx0XHRcdFx0YnMyID0gdm4gKyBcInB4XCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChyZWwpIHtcblx0XHRcdFx0XHRcdGVzID0gKHBhcnNlRmxvYXQoYnMpICsgZW4pICsgZXNmeDtcblx0XHRcdFx0XHRcdGVzMiA9IChwYXJzZUZsb2F0KGJzMikgKyBlbikgKyBlc2Z4O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRwdCA9IF9wYXJzZUNvbXBsZXgoc3R5bGUsIHByb3BzW2ldLCBicyArIFwiIFwiICsgYnMyLCBlcyArIFwiIFwiICsgZXMyLCBmYWxzZSwgXCIwcHhcIiwgcHQpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHB0O1xuXHRcdH0sIHByZWZpeDp0cnVlLCBmb3JtYXR0ZXI6X2dldEZvcm1hdHRlcihcIjBweCAwcHggMHB4IDBweFwiLCBmYWxzZSwgdHJ1ZSl9KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzLGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzLGJvcmRlclRvcExlZnRSYWRpdXMsYm9yZGVyVG9wUmlnaHRSYWRpdXNcIiwge2RlZmF1bHRWYWx1ZTpcIjBweFwiLCBwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbikge1xuXHRcdFx0cmV0dXJuIF9wYXJzZUNvbXBsZXgodC5zdHlsZSwgcCwgdGhpcy5mb3JtYXQoX2dldFN0eWxlKHQsIHAsIF9jcywgZmFsc2UsIFwiMHB4IDBweFwiKSksIHRoaXMuZm9ybWF0KGUpLCBmYWxzZSwgXCIwcHhcIiwgcHQpO1xuXHRcdH0sIHByZWZpeDp0cnVlLCBmb3JtYXR0ZXI6X2dldEZvcm1hdHRlcihcIjBweCAwcHhcIiwgZmFsc2UsIHRydWUpfSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiYmFja2dyb3VuZFBvc2l0aW9uXCIsIHtkZWZhdWx0VmFsdWU6XCIwIDBcIiwgcGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4pIHtcblx0XHRcdHZhciBicCA9IFwiYmFja2dyb3VuZC1wb3NpdGlvblwiLFxuXHRcdFx0XHRjcyA9IChfY3MgfHwgX2dldENvbXB1dGVkU3R5bGUodCwgbnVsbCkpLFxuXHRcdFx0XHRicyA9IHRoaXMuZm9ybWF0KCAoKGNzKSA/IF9pZVZlcnMgPyBjcy5nZXRQcm9wZXJ0eVZhbHVlKGJwICsgXCIteFwiKSArIFwiIFwiICsgY3MuZ2V0UHJvcGVydHlWYWx1ZShicCArIFwiLXlcIikgOiBjcy5nZXRQcm9wZXJ0eVZhbHVlKGJwKSA6IHQuY3VycmVudFN0eWxlLmJhY2tncm91bmRQb3NpdGlvblggKyBcIiBcIiArIHQuY3VycmVudFN0eWxlLmJhY2tncm91bmRQb3NpdGlvblkpIHx8IFwiMCAwXCIpLCAvL0ludGVybmV0IEV4cGxvcmVyIGRvZXNuJ3QgcmVwb3J0IGJhY2tncm91bmQtcG9zaXRpb24gY29ycmVjdGx5IC0gd2UgbXVzdCBxdWVyeSBiYWNrZ3JvdW5kLXBvc2l0aW9uLXggYW5kIGJhY2tncm91bmQtcG9zaXRpb24teSBhbmQgY29tYmluZSB0aGVtIChldmVuIGluIElFMTApLiBCZWZvcmUgSUU5LCB3ZSBtdXN0IGRvIHRoZSBzYW1lIHdpdGggdGhlIGN1cnJlbnRTdHlsZSBvYmplY3QgYW5kIHVzZSBjYW1lbENhc2Vcblx0XHRcdFx0ZXMgPSB0aGlzLmZvcm1hdChlKSxcblx0XHRcdFx0YmEsIGVhLCBpLCBwY3QsIG92ZXJsYXAsIHNyYztcblx0XHRcdGlmICgoYnMuaW5kZXhPZihcIiVcIikgIT09IC0xKSAhPT0gKGVzLmluZGV4T2YoXCIlXCIpICE9PSAtMSkgJiYgZXMuc3BsaXQoXCIsXCIpLmxlbmd0aCA8IDIpIHtcblx0XHRcdFx0c3JjID0gX2dldFN0eWxlKHQsIFwiYmFja2dyb3VuZEltYWdlXCIpLnJlcGxhY2UoX3VybEV4cCwgXCJcIik7XG5cdFx0XHRcdGlmIChzcmMgJiYgc3JjICE9PSBcIm5vbmVcIikge1xuXHRcdFx0XHRcdGJhID0gYnMuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRcdGVhID0gZXMuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRcdF90ZW1wSW1nLnNldEF0dHJpYnV0ZShcInNyY1wiLCBzcmMpOyAvL3NldCB0aGUgdGVtcCBJTUcncyBzcmMgdG8gdGhlIGJhY2tncm91bmQtaW1hZ2Ugc28gdGhhdCB3ZSBjYW4gbWVhc3VyZSBpdHMgd2lkdGgvaGVpZ2h0XG5cdFx0XHRcdFx0aSA9IDI7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRicyA9IGJhW2ldO1xuXHRcdFx0XHRcdFx0cGN0ID0gKGJzLmluZGV4T2YoXCIlXCIpICE9PSAtMSk7XG5cdFx0XHRcdFx0XHRpZiAocGN0ICE9PSAoZWFbaV0uaW5kZXhPZihcIiVcIikgIT09IC0xKSkge1xuXHRcdFx0XHRcdFx0XHRvdmVybGFwID0gKGkgPT09IDApID8gdC5vZmZzZXRXaWR0aCAtIF90ZW1wSW1nLndpZHRoIDogdC5vZmZzZXRIZWlnaHQgLSBfdGVtcEltZy5oZWlnaHQ7XG5cdFx0XHRcdFx0XHRcdGJhW2ldID0gcGN0ID8gKHBhcnNlRmxvYXQoYnMpIC8gMTAwICogb3ZlcmxhcCkgKyBcInB4XCIgOiAocGFyc2VGbG9hdChicykgLyBvdmVybGFwICogMTAwKSArIFwiJVwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicyA9IGJhLmpvaW4oXCIgXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXJzZUNvbXBsZXgodC5zdHlsZSwgYnMsIGVzLCBwdCwgcGx1Z2luKTtcblx0XHR9LCBmb3JtYXR0ZXI6X3BhcnNlUG9zaXRpb259KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJiYWNrZ3JvdW5kU2l6ZVwiLCB7ZGVmYXVsdFZhbHVlOlwiMCAwXCIsIGZvcm1hdHRlcjpmdW5jdGlvbih2KSB7XG5cdFx0XHR2ICs9IFwiXCI7IC8vZW5zdXJlIGl0J3MgYSBzdHJpbmdcblx0XHRcdHJldHVybiAodi5zdWJzdHIoMCwyKSA9PT0gXCJjb1wiKSA/IHYgOiBfcGFyc2VQb3NpdGlvbih2LmluZGV4T2YoXCIgXCIpID09PSAtMSA/IHYgKyBcIiBcIiArIHYgOiB2KTsgLy9pZiBzZXQgdG8gc29tZXRoaW5nIGxpa2UgXCIxMDAlIDEwMCVcIiwgU2FmYXJpIHR5cGljYWxseSByZXBvcnRzIHRoZSBjb21wdXRlZCBzdHlsZSBhcyBqdXN0IFwiMTAwJVwiIChubyAybmQgdmFsdWUpLCBidXQgd2Ugc2hvdWxkIGVuc3VyZSB0aGF0IHRoZXJlIGFyZSB0d28gdmFsdWVzLCBzbyBjb3B5IHRoZSBmaXJzdCBvbmUuIE90aGVyd2lzZSwgaXQnZCBiZSBpbnRlcnByZXRlZCBhcyBcIjEwMCUgMFwiICh3cm9uZykuIEFsc28gcmVtZW1iZXIgdGhhdCBpdCBjb3VsZCBiZSBcImNvdmVyXCIgb3IgXCJjb250YWluXCIgd2hpY2ggd2UgY2FuJ3QgdHdlZW4gYnV0IHNob3VsZCBiZSBhYmxlIHRvIHNldC5cblx0XHR9fSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwicGVyc3BlY3RpdmVcIiwge2RlZmF1bHRWYWx1ZTpcIjBweFwiLCBwcmVmaXg6dHJ1ZX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcInBlcnNwZWN0aXZlT3JpZ2luXCIsIHtkZWZhdWx0VmFsdWU6XCI1MCUgNTAlXCIsIHByZWZpeDp0cnVlfSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwidHJhbnNmb3JtU3R5bGVcIiwge3ByZWZpeDp0cnVlfSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiYmFja2ZhY2VWaXNpYmlsaXR5XCIsIHtwcmVmaXg6dHJ1ZX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcInVzZXJTZWxlY3RcIiwge3ByZWZpeDp0cnVlfSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwibWFyZ2luXCIsIHtwYXJzZXI6X2dldEVkZ2VQYXJzZXIoXCJtYXJnaW5Ub3AsbWFyZ2luUmlnaHQsbWFyZ2luQm90dG9tLG1hcmdpbkxlZnRcIil9KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJwYWRkaW5nXCIsIHtwYXJzZXI6X2dldEVkZ2VQYXJzZXIoXCJwYWRkaW5nVG9wLHBhZGRpbmdSaWdodCxwYWRkaW5nQm90dG9tLHBhZGRpbmdMZWZ0XCIpfSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiY2xpcFwiLCB7ZGVmYXVsdFZhbHVlOlwicmVjdCgwcHgsMHB4LDBweCwwcHgpXCIsIHBhcnNlcjpmdW5jdGlvbih0LCBlLCBwLCBjc3NwLCBwdCwgcGx1Z2luKXtcblx0XHRcdHZhciBiLCBjcywgZGVsaW07XG5cdFx0XHRpZiAoX2llVmVycyA8IDkpIHsgLy9JRTggYW5kIGVhcmxpZXIgZG9uJ3QgcmVwb3J0IGEgXCJjbGlwXCIgdmFsdWUgaW4gdGhlIGN1cnJlbnRTdHlsZSAtIGluc3RlYWQsIHRoZSB2YWx1ZXMgYXJlIHNwbGl0IGFwYXJ0IGludG8gY2xpcFRvcCwgY2xpcFJpZ2h0LCBjbGlwQm90dG9tLCBhbmQgY2xpcExlZnQuIEFsc28sIGluIElFNyBhbmQgZWFybGllciwgdGhlIHZhbHVlcyBpbnNpZGUgcmVjdCgpIGFyZSBzcGFjZS1kZWxpbWl0ZWQsIG5vdCBjb21tYS1kZWxpbWl0ZWQuXG5cdFx0XHRcdGNzID0gdC5jdXJyZW50U3R5bGU7XG5cdFx0XHRcdGRlbGltID0gX2llVmVycyA8IDggPyBcIiBcIiA6IFwiLFwiO1xuXHRcdFx0XHRiID0gXCJyZWN0KFwiICsgY3MuY2xpcFRvcCArIGRlbGltICsgY3MuY2xpcFJpZ2h0ICsgZGVsaW0gKyBjcy5jbGlwQm90dG9tICsgZGVsaW0gKyBjcy5jbGlwTGVmdCArIFwiKVwiO1xuXHRcdFx0XHRlID0gdGhpcy5mb3JtYXQoZSkuc3BsaXQoXCIsXCIpLmpvaW4oZGVsaW0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YiA9IHRoaXMuZm9ybWF0KF9nZXRTdHlsZSh0LCB0aGlzLnAsIF9jcywgZmFsc2UsIHRoaXMuZGZsdCkpO1xuXHRcdFx0XHRlID0gdGhpcy5mb3JtYXQoZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXJzZUNvbXBsZXgodC5zdHlsZSwgYiwgZSwgcHQsIHBsdWdpbik7XG5cdFx0fX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcInRleHRTaGFkb3dcIiwge2RlZmF1bHRWYWx1ZTpcIjBweCAwcHggMHB4ICM5OTlcIiwgY29sb3I6dHJ1ZSwgbXVsdGk6dHJ1ZX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImF1dG9Sb3VuZCxzdHJpY3RVbml0c1wiLCB7cGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0KSB7cmV0dXJuIHB0O319KTsgLy9qdXN0IHNvIHRoYXQgd2UgY2FuIGlnbm9yZSB0aGVzZSBwcm9wZXJ0aWVzIChub3QgdHdlZW4gdGhlbSlcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJib3JkZXJcIiwge2RlZmF1bHRWYWx1ZTpcIjBweCBzb2xpZCAjMDAwXCIsIHBhcnNlcjpmdW5jdGlvbih0LCBlLCBwLCBjc3NwLCBwdCwgcGx1Z2luKSB7XG5cdFx0XHR2YXIgYncgPSBfZ2V0U3R5bGUodCwgXCJib3JkZXJUb3BXaWR0aFwiLCBfY3MsIGZhbHNlLCBcIjBweFwiKSxcblx0XHRcdFx0ZW5kID0gdGhpcy5mb3JtYXQoZSkuc3BsaXQoXCIgXCIpLFxuXHRcdFx0XHRlc2Z4ID0gZW5kWzBdLnJlcGxhY2UoX3N1ZmZpeEV4cCwgXCJcIik7XG5cdFx0XHRpZiAoZXNmeCAhPT0gXCJweFwiKSB7IC8vaWYgd2UncmUgYW5pbWF0aW5nIHRvIGEgbm9uLXB4IHZhbHVlLCB3ZSBuZWVkIHRvIGNvbnZlcnQgdGhlIGJlZ2lubmluZyB3aWR0aCB0byB0aGF0IHVuaXQuXG5cdFx0XHRcdGJ3ID0gKHBhcnNlRmxvYXQoYncpIC8gX2NvbnZlcnRUb1BpeGVscyh0LCBcImJvcmRlclRvcFdpZHRoXCIsIDEsIGVzZngpKSArIGVzZng7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXJzZUNvbXBsZXgodC5zdHlsZSwgdGhpcy5mb3JtYXQoYncgKyBcIiBcIiArIF9nZXRTdHlsZSh0LCBcImJvcmRlclRvcFN0eWxlXCIsIF9jcywgZmFsc2UsIFwic29saWRcIikgKyBcIiBcIiArIF9nZXRTdHlsZSh0LCBcImJvcmRlclRvcENvbG9yXCIsIF9jcywgZmFsc2UsIFwiIzAwMFwiKSksIGVuZC5qb2luKFwiIFwiKSwgcHQsIHBsdWdpbik7XG5cdFx0XHR9LCBjb2xvcjp0cnVlLCBmb3JtYXR0ZXI6ZnVuY3Rpb24odikge1xuXHRcdFx0XHR2YXIgYSA9IHYuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRyZXR1cm4gYVswXSArIFwiIFwiICsgKGFbMV0gfHwgXCJzb2xpZFwiKSArIFwiIFwiICsgKHYubWF0Y2goX2NvbG9yRXhwKSB8fCBbXCIjMDAwXCJdKVswXTtcblx0XHRcdH19KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJib3JkZXJXaWR0aFwiLCB7cGFyc2VyOl9nZXRFZGdlUGFyc2VyKFwiYm9yZGVyVG9wV2lkdGgsYm9yZGVyUmlnaHRXaWR0aCxib3JkZXJCb3R0b21XaWR0aCxib3JkZXJMZWZ0V2lkdGhcIil9KTsgLy9GaXJlZm94IGRvZXNuJ3QgcGljayB1cCBvbiBib3JkZXJXaWR0aCBzZXQgaW4gc3R5bGUgc2hlZXRzIChvbmx5IGlubGluZSkuXG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiZmxvYXQsY3NzRmxvYXQsc3R5bGVGbG9hdFwiLCB7cGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4pIHtcblx0XHRcdHZhciBzID0gdC5zdHlsZSxcblx0XHRcdFx0cHJvcCA9IChcImNzc0Zsb2F0XCIgaW4gcykgPyBcImNzc0Zsb2F0XCIgOiBcInN0eWxlRmxvYXRcIjtcblx0XHRcdHJldHVybiBuZXcgQ1NTUHJvcFR3ZWVuKHMsIHByb3AsIDAsIDAsIHB0LCAtMSwgcCwgZmFsc2UsIDAsIHNbcHJvcF0sIGUpO1xuXHRcdH19KTtcblxuXHRcdC8vb3BhY2l0eS1yZWxhdGVkXG5cdFx0dmFyIF9zZXRJRU9wYWNpdHlSYXRpbyA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0dmFyIHQgPSB0aGlzLnQsIC8vcmVmZXJzIHRvIHRoZSBlbGVtZW50J3Mgc3R5bGUgcHJvcGVydHlcblx0XHRcdFx0XHRmaWx0ZXJzID0gdC5maWx0ZXIgfHwgX2dldFN0eWxlKHRoaXMuZGF0YSwgXCJmaWx0ZXJcIikgfHwgXCJcIixcblx0XHRcdFx0XHR2YWwgPSAodGhpcy5zICsgdGhpcy5jICogdikgfCAwLFxuXHRcdFx0XHRcdHNraXA7XG5cdFx0XHRcdGlmICh2YWwgPT09IDEwMCkgeyAvL2ZvciBvbGRlciB2ZXJzaW9ucyBvZiBJRSB0aGF0IG5lZWQgdG8gdXNlIGEgZmlsdGVyIHRvIGFwcGx5IG9wYWNpdHksIHdlIHNob3VsZCByZW1vdmUgdGhlIGZpbHRlciBpZiBvcGFjaXR5IGhpdHMgMSBpbiBvcmRlciB0byBpbXByb3ZlIHBlcmZvcm1hbmNlLCBidXQgbWFrZSBzdXJlIHRoZXJlIGlzbid0IGEgdHJhbnNmb3JtIChtYXRyaXgpIG9yIGdyYWRpZW50IGluIHRoZSBmaWx0ZXJzLlxuXHRcdFx0XHRcdGlmIChmaWx0ZXJzLmluZGV4T2YoXCJhdHJpeChcIikgPT09IC0xICYmIGZpbHRlcnMuaW5kZXhPZihcInJhZGllbnQoXCIpID09PSAtMSAmJiBmaWx0ZXJzLmluZGV4T2YoXCJvYWRlcihcIikgPT09IC0xKSB7XG5cdFx0XHRcdFx0XHR0LnJlbW92ZUF0dHJpYnV0ZShcImZpbHRlclwiKTtcblx0XHRcdFx0XHRcdHNraXAgPSAoIV9nZXRTdHlsZSh0aGlzLmRhdGEsIFwiZmlsdGVyXCIpKTsgLy9pZiBhIGNsYXNzIGlzIGFwcGxpZWQgdGhhdCBoYXMgYW4gYWxwaGEgZmlsdGVyLCBpdCB3aWxsIHRha2UgZWZmZWN0ICh3ZSBkb24ndCB3YW50IHRoYXQpLCBzbyByZS1hcHBseSBvdXIgYWxwaGEgZmlsdGVyIGluIHRoYXQgY2FzZS4gV2UgbXVzdCBmaXJzdCByZW1vdmUgaXQgYW5kIHRoZW4gY2hlY2suXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHQuZmlsdGVyID0gZmlsdGVycy5yZXBsYWNlKF9hbHBoYUZpbHRlckV4cCwgXCJcIik7XG5cdFx0XHRcdFx0XHRza2lwID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFza2lwKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMueG4xKSB7XG5cdFx0XHRcdFx0XHR0LmZpbHRlciA9IGZpbHRlcnMgPSBmaWx0ZXJzIHx8IChcImFscGhhKG9wYWNpdHk9XCIgKyB2YWwgKyBcIilcIik7IC8vd29ya3MgYXJvdW5kIGJ1ZyBpbiBJRTcvOCB0aGF0IHByZXZlbnRzIGNoYW5nZXMgdG8gXCJ2aXNpYmlsaXR5XCIgZnJvbSBiZWluZyBhcHBsaWVkIHByb3Blcmx5IGlmIHRoZSBmaWx0ZXIgaXMgY2hhbmdlZCB0byBhIGRpZmZlcmVudCBhbHBoYSBvbiB0aGUgc2FtZSBmcmFtZS5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGZpbHRlcnMuaW5kZXhPZihcInBhY2l0eVwiKSA9PT0gLTEpIHsgLy9vbmx5IHVzZWQgaWYgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdGhlIHN0YW5kYXJkIG9wYWNpdHkgc3R5bGUgcHJvcGVydHkgKElFIDcgYW5kIDgpLiBXZSBvbWl0IHRoZSBcIk9cIiB0byBhdm9pZCBjYXNlLXNlbnNpdGl2aXR5IGlzc3Vlc1xuXHRcdFx0XHRcdFx0aWYgKHZhbCAhPT0gMCB8fCAhdGhpcy54bjEpIHsgLy9idWdzIGluIElFNy84IHdvbid0IHJlbmRlciB0aGUgZmlsdGVyIHByb3Blcmx5IGlmIG9wYWNpdHkgaXMgQURERUQgb24gdGhlIHNhbWUgZnJhbWUvcmVuZGVyIGFzIFwidmlzaWJpbGl0eVwiIGNoYW5nZXMgKHRoaXMueG4xIGlzIDEgaWYgdGhpcyB0d2VlbiBpcyBhbiBcImF1dG9BbHBoYVwiIHR3ZWVuKVxuXHRcdFx0XHRcdFx0XHR0LmZpbHRlciA9IGZpbHRlcnMgKyBcIiBhbHBoYShvcGFjaXR5PVwiICsgdmFsICsgXCIpXCI7IC8vd2Ugcm91bmQgdGhlIHZhbHVlIGJlY2F1c2Ugb3RoZXJ3aXNlLCBidWdzIGluIElFNy84IGNhbiBwcmV2ZW50IFwidmlzaWJpbGl0eVwiIGNoYW5nZXMgZnJvbSBiZWluZyBhcHBsaWVkIHByb3Blcmx5LlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0LmZpbHRlciA9IGZpbHRlcnMucmVwbGFjZShfb3BhY2l0eUV4cCwgXCJvcGFjaXR5PVwiICsgdmFsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwib3BhY2l0eSxhbHBoYSxhdXRvQWxwaGFcIiwge2RlZmF1bHRWYWx1ZTpcIjFcIiwgcGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4pIHtcblx0XHRcdHZhciBiID0gcGFyc2VGbG9hdChfZ2V0U3R5bGUodCwgXCJvcGFjaXR5XCIsIF9jcywgZmFsc2UsIFwiMVwiKSksXG5cdFx0XHRcdHN0eWxlID0gdC5zdHlsZSxcblx0XHRcdFx0aXNBdXRvQWxwaGEgPSAocCA9PT0gXCJhdXRvQWxwaGFcIik7XG5cdFx0XHRpZiAodHlwZW9mKGUpID09PSBcInN0cmluZ1wiICYmIGUuY2hhckF0KDEpID09PSBcIj1cIikge1xuXHRcdFx0XHRlID0gKChlLmNoYXJBdCgwKSA9PT0gXCItXCIpID8gLTEgOiAxKSAqIHBhcnNlRmxvYXQoZS5zdWJzdHIoMikpICsgYjtcblx0XHRcdH1cblx0XHRcdGlmIChpc0F1dG9BbHBoYSAmJiBiID09PSAxICYmIF9nZXRTdHlsZSh0LCBcInZpc2liaWxpdHlcIiwgX2NzKSA9PT0gXCJoaWRkZW5cIiAmJiBlICE9PSAwKSB7IC8vaWYgdmlzaWJpbGl0eSBpcyBpbml0aWFsbHkgc2V0IHRvIFwiaGlkZGVuXCIsIHdlIHNob3VsZCBpbnRlcnByZXQgdGhhdCBhcyBpbnRlbnQgdG8gbWFrZSBvcGFjaXR5IDAgKGEgY29udmVuaWVuY2UpXG5cdFx0XHRcdGIgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aWYgKF9zdXBwb3J0c09wYWNpdHkpIHtcblx0XHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHN0eWxlLCBcIm9wYWNpdHlcIiwgYiwgZSAtIGIsIHB0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2VlbihzdHlsZSwgXCJvcGFjaXR5XCIsIGIgKiAxMDAsIChlIC0gYikgKiAxMDAsIHB0KTtcblx0XHRcdFx0cHQueG4xID0gaXNBdXRvQWxwaGEgPyAxIDogMDsgLy93ZSBuZWVkIHRvIHJlY29yZCB3aGV0aGVyIG9yIG5vdCB0aGlzIGlzIGFuIGF1dG9BbHBoYSBzbyB0aGF0IGluIHRoZSBzZXRSYXRpbygpLCB3ZSBrbm93IHRvIGR1cGxpY2F0ZSB0aGUgc2V0dGluZyBvZiB0aGUgYWxwaGEgaW4gb3JkZXIgdG8gd29yayBhcm91bmQgYSBidWcgaW4gSUU3IGFuZCBJRTggdGhhdCBwcmV2ZW50cyBjaGFuZ2VzIHRvIFwidmlzaWJpbGl0eVwiIGZyb20gdGFraW5nIGVmZmVjdCBpZiB0aGUgZmlsdGVyIGlzIGNoYW5nZWQgdG8gYSBkaWZmZXJlbnQgYWxwaGEob3BhY2l0eSkgYXQgdGhlIHNhbWUgdGltZS4gU2V0dGluZyBpdCB0byB0aGUgU0FNRSB2YWx1ZSBmaXJzdCwgdGhlbiB0aGUgbmV3IHZhbHVlIHdvcmtzIGFyb3VuZCB0aGUgSUU3LzggYnVnLlxuXHRcdFx0XHRzdHlsZS56b29tID0gMTsgLy9oZWxwcyBjb3JyZWN0IGFuIElFIGlzc3VlLlxuXHRcdFx0XHRwdC50eXBlID0gMjtcblx0XHRcdFx0cHQuYiA9IFwiYWxwaGEob3BhY2l0eT1cIiArIHB0LnMgKyBcIilcIjtcblx0XHRcdFx0cHQuZSA9IFwiYWxwaGEob3BhY2l0eT1cIiArIChwdC5zICsgcHQuYykgKyBcIilcIjtcblx0XHRcdFx0cHQuZGF0YSA9IHQ7XG5cdFx0XHRcdHB0LnBsdWdpbiA9IHBsdWdpbjtcblx0XHRcdFx0cHQuc2V0UmF0aW8gPSBfc2V0SUVPcGFjaXR5UmF0aW87XG5cdFx0XHR9XG5cdFx0XHRpZiAoaXNBdXRvQWxwaGEpIHsgLy93ZSBoYXZlIHRvIGNyZWF0ZSB0aGUgXCJ2aXNpYmlsaXR5XCIgUHJvcFR3ZWVuIGFmdGVyIHRoZSBvcGFjaXR5IG9uZSBpbiB0aGUgbGlua2VkIGxpc3Qgc28gdGhhdCB0aGV5IHJ1biBpbiB0aGUgb3JkZXIgdGhhdCB3b3JrcyBwcm9wZXJseSBpbiBJRTggYW5kIGVhcmxpZXJcblx0XHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHN0eWxlLCBcInZpc2liaWxpdHlcIiwgMCwgMCwgcHQsIC0xLCBudWxsLCBmYWxzZSwgMCwgKChiICE9PSAwKSA/IFwiaW5oZXJpdFwiIDogXCJoaWRkZW5cIiksICgoZSA9PT0gMCkgPyBcImhpZGRlblwiIDogXCJpbmhlcml0XCIpKTtcblx0XHRcdFx0cHQueHMwID0gXCJpbmhlcml0XCI7XG5cdFx0XHRcdGNzc3AuX292ZXJ3cml0ZVByb3BzLnB1c2gocHQubik7XG5cdFx0XHRcdGNzc3AuX292ZXJ3cml0ZVByb3BzLnB1c2gocCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcHQ7XG5cdFx0fX0pO1xuXG5cblx0XHR2YXIgX3JlbW92ZVByb3AgPSBmdW5jdGlvbihzLCBwKSB7XG5cdFx0XHRcdGlmIChwKSB7XG5cdFx0XHRcdFx0aWYgKHMucmVtb3ZlUHJvcGVydHkpIHtcblx0XHRcdFx0XHRcdGlmIChwLnN1YnN0cigwLDIpID09PSBcIm1zXCIgfHwgcC5zdWJzdHIoMCw2KSA9PT0gXCJ3ZWJraXRcIikgeyAvL01pY3Jvc29mdCBhbmQgc29tZSBXZWJraXQgYnJvd3NlcnMgZG9uJ3QgY29uZm9ybSB0byB0aGUgc3RhbmRhcmQgb2YgY2FwaXRhbGl6aW5nIHRoZSBmaXJzdCBwcmVmaXggY2hhcmFjdGVyLCBzbyB3ZSBhZGp1c3Qgc28gdGhhdCB3aGVuIHdlIHByZWZpeCB0aGUgY2FwcyB3aXRoIGEgZGFzaCwgaXQncyBjb3JyZWN0IChvdGhlcndpc2UgaXQnZCBiZSBcIm1zLXRyYW5zZm9ybVwiIGluc3RlYWQgb2YgXCItbXMtdHJhbnNmb3JtXCIgZm9yIElFOSwgZm9yIGV4YW1wbGUpXG5cdFx0XHRcdFx0XHRcdHAgPSBcIi1cIiArIHA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzLnJlbW92ZVByb3BlcnR5KHAucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG5cdFx0XHRcdFx0fSBlbHNlIHsgLy9ub3RlOiBvbGQgdmVyc2lvbnMgb2YgSUUgdXNlIFwicmVtb3ZlQXR0cmlidXRlKClcIiBpbnN0ZWFkIG9mIFwicmVtb3ZlUHJvcGVydHkoKVwiXG5cdFx0XHRcdFx0XHRzLnJlbW92ZUF0dHJpYnV0ZShwKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRfc2V0Q2xhc3NOYW1lUmF0aW8gPSBmdW5jdGlvbih2KSB7XG5cdFx0XHRcdHRoaXMudC5fZ3NDbGFzc1BUID0gdGhpcztcblx0XHRcdFx0aWYgKHYgPT09IDEgfHwgdiA9PT0gMCkge1xuXHRcdFx0XHRcdHRoaXMudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCAodiA9PT0gMCkgPyB0aGlzLmIgOiB0aGlzLmUpO1xuXHRcdFx0XHRcdHZhciBtcHQgPSB0aGlzLmRhdGEsIC8vZmlyc3QgTWluaVByb3BUd2VlblxuXHRcdFx0XHRcdFx0cyA9IHRoaXMudC5zdHlsZTtcblx0XHRcdFx0XHR3aGlsZSAobXB0KSB7XG5cdFx0XHRcdFx0XHRpZiAoIW1wdC52KSB7XG5cdFx0XHRcdFx0XHRcdF9yZW1vdmVQcm9wKHMsIG1wdC5wKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHNbbXB0LnBdID0gbXB0LnY7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtcHQgPSBtcHQuX25leHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh2ID09PSAxICYmIHRoaXMudC5fZ3NDbGFzc1BUID09PSB0aGlzKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnQuX2dzQ2xhc3NQVCA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMudC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSAhPT0gdGhpcy5lKSB7XG5cdFx0XHRcdFx0dGhpcy50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuZSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiY2xhc3NOYW1lXCIsIHtwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbiwgdmFycykge1xuXHRcdFx0dmFyIGIgPSB0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIsIC8vZG9uJ3QgdXNlIHQuY2xhc3NOYW1lIGJlY2F1c2UgaXQgZG9lc24ndCB3b3JrIGNvbnNpc3RlbnRseSBvbiBTVkcgZWxlbWVudHM7IGdldEF0dHJpYnV0ZShcImNsYXNzXCIpIGFuZCBzZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB2YWx1ZVwiKSBpcyBtb3JlIHJlbGlhYmxlLlxuXHRcdFx0XHRjc3NUZXh0ID0gdC5zdHlsZS5jc3NUZXh0LFxuXHRcdFx0XHRkaWZEYXRhLCBicywgY25wdCwgY25wdExvb2t1cCwgbXB0O1xuXHRcdFx0cHQgPSBjc3NwLl9jbGFzc05hbWVQVCA9IG5ldyBDU1NQcm9wVHdlZW4odCwgcCwgMCwgMCwgcHQsIDIpO1xuXHRcdFx0cHQuc2V0UmF0aW8gPSBfc2V0Q2xhc3NOYW1lUmF0aW87XG5cdFx0XHRwdC5wciA9IC0xMTtcblx0XHRcdF9oYXNQcmlvcml0eSA9IHRydWU7XG5cdFx0XHRwdC5iID0gYjtcblx0XHRcdGJzID0gX2dldEFsbFN0eWxlcyh0LCBfY3MpO1xuXHRcdFx0Ly9pZiB0aGVyZSdzIGEgY2xhc3NOYW1lIHR3ZWVuIGFscmVhZHkgb3BlcmF0aW5nIG9uIHRoZSB0YXJnZXQsIGZvcmNlIGl0IHRvIGl0cyBlbmQgc28gdGhhdCB0aGUgbmVjZXNzYXJ5IGlubGluZSBzdHlsZXMgYXJlIHJlbW92ZWQgYW5kIHRoZSBjbGFzcyBuYW1lIGlzIGFwcGxpZWQgYmVmb3JlIHdlIGRldGVybWluZSB0aGUgZW5kIHN0YXRlICh3ZSBkb24ndCB3YW50IGlubGluZSBzdHlsZXMgaW50ZXJmZXJpbmcgdGhhdCB3ZXJlIHRoZXJlIGp1c3QgZm9yIGNsYXNzLXNwZWNpZmljIHZhbHVlcylcblx0XHRcdGNucHQgPSB0Ll9nc0NsYXNzUFQ7XG5cdFx0XHRpZiAoY25wdCkge1xuXHRcdFx0XHRjbnB0TG9va3VwID0ge307XG5cdFx0XHRcdG1wdCA9IGNucHQuZGF0YTsgLy9maXJzdCBNaW5pUHJvcFR3ZWVuIHdoaWNoIHN0b3JlcyB0aGUgaW5saW5lIHN0eWxlcyAtIHdlIG5lZWQgdG8gZm9yY2UgdGhlc2Ugc28gdGhhdCB0aGUgaW5saW5lIHN0eWxlcyBkb24ndCBjb250YW1pbmF0ZSB0aGluZ3MuIE90aGVyd2lzZSwgdGhlcmUncyBhIHNtYWxsIGNoYW5jZSB0aGF0IGEgdHdlZW4gY291bGQgc3RhcnQgYW5kIHRoZSBpbmxpbmUgdmFsdWVzIG1hdGNoIHRoZSBkZXN0aW5hdGlvbiB2YWx1ZXMgYW5kIHRoZXkgbmV2ZXIgZ2V0IGNsZWFuZWQuXG5cdFx0XHRcdHdoaWxlIChtcHQpIHtcblx0XHRcdFx0XHRjbnB0TG9va3VwW21wdC5wXSA9IDE7XG5cdFx0XHRcdFx0bXB0ID0gbXB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNucHQuc2V0UmF0aW8oMSk7XG5cdFx0XHR9XG5cdFx0XHR0Ll9nc0NsYXNzUFQgPSBwdDtcblx0XHRcdHB0LmUgPSAoZS5jaGFyQXQoMSkgIT09IFwiPVwiKSA/IGUgOiBiLnJlcGxhY2UobmV3IFJlZ0V4cChcIig/OlxcXFxzfF4pXCIgKyBlLnN1YnN0cigyKSArIFwiKD8hW1xcXFx3LV0pXCIpLCBcIlwiKSArICgoZS5jaGFyQXQoMCkgPT09IFwiK1wiKSA/IFwiIFwiICsgZS5zdWJzdHIoMikgOiBcIlwiKTtcblx0XHRcdHQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcHQuZSk7XG5cdFx0XHRkaWZEYXRhID0gX2Nzc0RpZih0LCBicywgX2dldEFsbFN0eWxlcyh0KSwgdmFycywgY25wdExvb2t1cCk7XG5cdFx0XHR0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGIpO1xuXHRcdFx0cHQuZGF0YSA9IGRpZkRhdGEuZmlyc3RNUFQ7XG5cdFx0XHRpZiAodC5zdHlsZS5jc3NUZXh0ICE9PSBjc3NUZXh0KSB7IC8vb25seSBhcHBseSBpZiB0aGluZ3MgY2hhbmdlLiBPdGhlcndpc2UsIGluIGNhc2VzIGxpa2UgYSBiYWNrZ3JvdW5kLWltYWdlIHRoYXQncyBwdWxsZWQgZHluYW1pY2FsbHksIGl0IGNvdWxkIGNhdXNlIGEgcmVmcmVzaC4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjAzNjgtcG9zc2libGUtZ3NhcC1idWctc3dpdGNoaW5nLWNsYXNzbmFtZXMtaW4tY2hyb21lLy5cblx0XHRcdFx0dC5zdHlsZS5jc3NUZXh0ID0gY3NzVGV4dDsgLy93ZSByZWNvcmRlZCBjc3NUZXh0IGJlZm9yZSB3ZSBzd2FwcGVkIGNsYXNzZXMgYW5kIHJhbiBfZ2V0QWxsU3R5bGVzKCkgYmVjYXVzZSBpbiBjYXNlcyB3aGVuIGEgY2xhc3NOYW1lIHR3ZWVuIGlzIG92ZXJ3cml0dGVuLCB3ZSByZW1vdmUgYWxsIHRoZSByZWxhdGVkIHR3ZWVuaW5nIHByb3BlcnRpZXMgZnJvbSB0aGF0IGNsYXNzIGNoYW5nZSAob3RoZXJ3aXNlIGNsYXNzLXNwZWNpZmljIHN0dWZmIGNhbid0IG92ZXJyaWRlIHByb3BlcnRpZXMgd2UndmUgZGlyZWN0bHkgc2V0IG9uIHRoZSB0YXJnZXQncyBzdHlsZSBvYmplY3QgZHVlIHRvIHNwZWNpZmljaXR5KS5cblx0XHRcdH1cblx0XHRcdHB0ID0gcHQueGZpcnN0ID0gY3NzcC5wYXJzZSh0LCBkaWZEYXRhLmRpZnMsIHB0LCBwbHVnaW4pOyAvL3dlIHJlY29yZCB0aGUgQ1NTUHJvcFR3ZWVuIGFzIHRoZSB4Zmlyc3Qgc28gdGhhdCB3ZSBjYW4gaGFuZGxlIG92ZXJ3cml0aW5nIHByb3BlcnRseSAoaWYgXCJjbGFzc05hbWVcIiBnZXRzIG92ZXJ3cml0dGVuLCB3ZSBtdXN0IGtpbGwgYWxsIHRoZSBwcm9wZXJ0aWVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgY2xhc3NOYW1lIHBhcnQgb2YgdGhlIHR3ZWVuLCBzbyB3ZSBjYW4gbG9vcCB0aHJvdWdoIGZyb20geGZpcnN0IHRvIHRoZSBwdCBpdHNlbGYpXG5cdFx0XHRyZXR1cm4gcHQ7XG5cdFx0fX0pO1xuXG5cblx0XHR2YXIgX3NldENsZWFyUHJvcHNSYXRpbyA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdGlmICh2ID09PSAxIHx8IHYgPT09IDApIGlmICh0aGlzLmRhdGEuX3RvdGFsVGltZSA9PT0gdGhpcy5kYXRhLl90b3RhbER1cmF0aW9uICYmIHRoaXMuZGF0YS5kYXRhICE9PSBcImlzRnJvbVN0YXJ0XCIpIHsgLy90aGlzLmRhdGEgcmVmZXJzIHRvIHRoZSB0d2Vlbi4gT25seSBjbGVhciBhdCB0aGUgRU5EIG9mIHRoZSB0d2VlbiAocmVtZW1iZXIsIGZyb20oKSB0d2VlbnMgbWFrZSB0aGUgcmF0aW8gZ28gZnJvbSAxIHRvIDAsIHNvIHdlIGNhbid0IGp1c3QgY2hlY2sgdGhhdCBhbmQgaWYgdGhlIHR3ZWVuIGlzIHRoZSB6ZXJvLWR1cmF0aW9uIG9uZSB0aGF0J3MgY3JlYXRlZCBpbnRlcm5hbGx5IHRvIHJlbmRlciB0aGUgc3RhcnRpbmcgdmFsdWVzIGluIGEgZnJvbSgpIHR3ZWVuLCBpZ25vcmUgdGhhdCBiZWNhdXNlIG90aGVyd2lzZSwgZm9yIGV4YW1wbGUsIGZyb20oLi4ue2hlaWdodDoxMDAsIGNsZWFyUHJvcHM6XCJoZWlnaHRcIiwgZGVsYXk6MX0pIHdvdWxkIHdpcGUgdGhlIGhlaWdodCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0d2VlbiBhbmQgYWZ0ZXIgMSBzZWNvbmQsIGl0J2Qga2ljayBiYWNrIGluKS5cblx0XHRcdFx0dmFyIHMgPSB0aGlzLnQuc3R5bGUsXG5cdFx0XHRcdFx0dHJhbnNmb3JtUGFyc2UgPSBfc3BlY2lhbFByb3BzLnRyYW5zZm9ybS5wYXJzZSxcblx0XHRcdFx0XHRhLCBwLCBpLCBjbGVhclRyYW5zZm9ybSwgdHJhbnNmb3JtO1xuXHRcdFx0XHRpZiAodGhpcy5lID09PSBcImFsbFwiKSB7XG5cdFx0XHRcdFx0cy5jc3NUZXh0ID0gXCJcIjtcblx0XHRcdFx0XHRjbGVhclRyYW5zZm9ybSA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YSA9IHRoaXMuZS5zcGxpdChcIiBcIikuam9pbihcIlwiKS5zcGxpdChcIixcIik7XG5cdFx0XHRcdFx0aSA9IGEubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0cCA9IGFbaV07XG5cdFx0XHRcdFx0XHRpZiAoX3NwZWNpYWxQcm9wc1twXSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoX3NwZWNpYWxQcm9wc1twXS5wYXJzZSA9PT0gdHJhbnNmb3JtUGFyc2UpIHtcblx0XHRcdFx0XHRcdFx0XHRjbGVhclRyYW5zZm9ybSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0cCA9IChwID09PSBcInRyYW5zZm9ybU9yaWdpblwiKSA/IF90cmFuc2Zvcm1PcmlnaW5Qcm9wIDogX3NwZWNpYWxQcm9wc1twXS5wOyAvL2Vuc3VyZXMgdGhhdCBzcGVjaWFsIHByb3BlcnRpZXMgdXNlIHRoZSBwcm9wZXIgYnJvd3Nlci1zcGVjaWZpYyBwcm9wZXJ0eSBuYW1lLCBsaWtlIFwic2NhbGVYXCIgbWlnaHQgYmUgXCItd2Via2l0LXRyYW5zZm9ybVwiIG9yIFwiYm94U2hhZG93XCIgbWlnaHQgYmUgXCItbW96LWJveC1zaGFkb3dcIlxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRfcmVtb3ZlUHJvcChzLCBwKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGNsZWFyVHJhbnNmb3JtKSB7XG5cdFx0XHRcdFx0X3JlbW92ZVByb3AocywgX3RyYW5zZm9ybVByb3ApO1xuXHRcdFx0XHRcdHRyYW5zZm9ybSA9IHRoaXMudC5fZ3NUcmFuc2Zvcm07XG5cdFx0XHRcdFx0aWYgKHRyYW5zZm9ybSkge1xuXHRcdFx0XHRcdFx0aWYgKHRyYW5zZm9ybS5zdmcpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy50LnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiKTtcblx0XHRcdFx0XHRcdFx0dGhpcy50LnJlbW92ZUF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGRlbGV0ZSB0aGlzLnQuX2dzVHJhbnNmb3JtO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cdFx0fTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJjbGVhclByb3BzXCIsIHtwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQpIHtcblx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2Vlbih0LCBwLCAwLCAwLCBwdCwgMik7XG5cdFx0XHRwdC5zZXRSYXRpbyA9IF9zZXRDbGVhclByb3BzUmF0aW87XG5cdFx0XHRwdC5lID0gZTtcblx0XHRcdHB0LnByID0gLTEwO1xuXHRcdFx0cHQuZGF0YSA9IGNzc3AuX3R3ZWVuO1xuXHRcdFx0X2hhc1ByaW9yaXR5ID0gdHJ1ZTtcblx0XHRcdHJldHVybiBwdDtcblx0XHR9fSk7XG5cblx0XHRwID0gXCJiZXppZXIsdGhyb3dQcm9wcyxwaHlzaWNzUHJvcHMscGh5c2ljczJEXCIuc3BsaXQoXCIsXCIpO1xuXHRcdGkgPSBwLmxlbmd0aDtcblx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRfcmVnaXN0ZXJQbHVnaW5Qcm9wKHBbaV0pO1xuXHRcdH1cblxuXG5cblxuXG5cblxuXG5cdFx0cCA9IENTU1BsdWdpbi5wcm90b3R5cGU7XG5cdFx0cC5fZmlyc3RQVCA9IHAuX2xhc3RQYXJzZWRUcmFuc2Zvcm0gPSBwLl90cmFuc2Zvcm0gPSBudWxsO1xuXG5cdFx0Ly9nZXRzIGNhbGxlZCB3aGVuIHRoZSB0d2VlbiByZW5kZXJzIGZvciB0aGUgZmlyc3QgdGltZS4gVGhpcyBraWNrcyBldmVyeXRoaW5nIG9mZiwgcmVjb3JkaW5nIHN0YXJ0L2VuZCB2YWx1ZXMsIGV0Yy5cblx0XHRwLl9vbkluaXRUd2VlbiA9IGZ1bmN0aW9uKHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4KSB7XG5cdFx0XHRpZiAoIXRhcmdldC5ub2RlVHlwZSkgeyAvL2NzcyBpcyBvbmx5IGZvciBkb20gZWxlbWVudHNcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fdGFyZ2V0ID0gX3RhcmdldCA9IHRhcmdldDtcblx0XHRcdHRoaXMuX3R3ZWVuID0gdHdlZW47XG5cdFx0XHR0aGlzLl92YXJzID0gdmFycztcblx0XHRcdF9pbmRleCA9IGluZGV4O1xuXHRcdFx0X2F1dG9Sb3VuZCA9IHZhcnMuYXV0b1JvdW5kO1xuXHRcdFx0X2hhc1ByaW9yaXR5ID0gZmFsc2U7XG5cdFx0XHRfc3VmZml4TWFwID0gdmFycy5zdWZmaXhNYXAgfHwgQ1NTUGx1Z2luLnN1ZmZpeE1hcDtcblx0XHRcdF9jcyA9IF9nZXRDb21wdXRlZFN0eWxlKHRhcmdldCwgXCJcIik7XG5cdFx0XHRfb3ZlcndyaXRlUHJvcHMgPSB0aGlzLl9vdmVyd3JpdGVQcm9wcztcblx0XHRcdHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZSxcblx0XHRcdFx0diwgcHQsIHB0MiwgZmlyc3QsIGxhc3QsIG5leHQsIHpJbmRleCwgdHB0LCB0aHJlZUQ7XG5cdFx0XHRpZiAoX3JlcVNhZmFyaUZpeCkgaWYgKHN0eWxlLnpJbmRleCA9PT0gXCJcIikge1xuXHRcdFx0XHR2ID0gX2dldFN0eWxlKHRhcmdldCwgXCJ6SW5kZXhcIiwgX2NzKTtcblx0XHRcdFx0aWYgKHYgPT09IFwiYXV0b1wiIHx8IHYgPT09IFwiXCIpIHtcblx0XHRcdFx0XHQvL2NvcnJlY3RzIGEgYnVnIGluIFtub24tQW5kcm9pZF0gU2FmYXJpIHRoYXQgcHJldmVudHMgaXQgZnJvbSByZXBhaW50aW5nIGVsZW1lbnRzIGluIHRoZWlyIG5ldyBwb3NpdGlvbnMgaWYgdGhleSBkb24ndCBoYXZlIGEgekluZGV4IHNldC4gV2UgYWxzbyBjYW4ndCBqdXN0IGFwcGx5IHRoaXMgaW5zaWRlIF9wYXJzZVRyYW5zZm9ybSgpIGJlY2F1c2UgYW55dGhpbmcgdGhhdCdzIG1vdmVkIGluIGFueSB3YXkgKGxpa2UgdXNpbmcgXCJsZWZ0XCIgb3IgXCJ0b3BcIiBpbnN0ZWFkIG9mIHRyYW5zZm9ybXMgbGlrZSBcInhcIiBhbmQgXCJ5XCIpIGNhbiBiZSBhZmZlY3RlZCwgc28gaXQgaXMgYmVzdCB0byBlbnN1cmUgdGhhdCBhbnl0aGluZyB0aGF0J3MgdHdlZW5pbmcgaGFzIGEgei1pbmRleC4gU2V0dGluZyBcIldlYmtpdFBlcnNwZWN0aXZlXCIgdG8gYSBub24temVybyB2YWx1ZSB3b3JrZWQgdG9vIGV4Y2VwdCB0aGF0IG9uIGlPUyBTYWZhcmkgdGhpbmdzIHdvdWxkIGZsaWNrZXIgcmFuZG9tbHkuIFBsdXMgekluZGV4IGlzIGxlc3MgbWVtb3J5LWludGVuc2l2ZS5cblx0XHRcdFx0XHR0aGlzLl9hZGRMYXp5U2V0KHN0eWxlLCBcInpJbmRleFwiLCAwKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mKHZhcnMpID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdGZpcnN0ID0gc3R5bGUuY3NzVGV4dDtcblx0XHRcdFx0diA9IF9nZXRBbGxTdHlsZXModGFyZ2V0LCBfY3MpO1xuXHRcdFx0XHRzdHlsZS5jc3NUZXh0ID0gZmlyc3QgKyBcIjtcIiArIHZhcnM7XG5cdFx0XHRcdHYgPSBfY3NzRGlmKHRhcmdldCwgdiwgX2dldEFsbFN0eWxlcyh0YXJnZXQpKS5kaWZzO1xuXHRcdFx0XHRpZiAoIV9zdXBwb3J0c09wYWNpdHkgJiYgX29wYWNpdHlWYWxFeHAudGVzdCh2YXJzKSkge1xuXHRcdFx0XHRcdHYub3BhY2l0eSA9IHBhcnNlRmxvYXQoIFJlZ0V4cC4kMSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhcnMgPSB2O1xuXHRcdFx0XHRzdHlsZS5jc3NUZXh0ID0gZmlyc3Q7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh2YXJzLmNsYXNzTmFtZSkgeyAvL2NsYXNzTmFtZSB0d2VlbnMgd2lsbCBjb21iaW5lIGFueSBkaWZmZXJlbmNlcyB0aGV5IGZpbmQgaW4gdGhlIGNzcyB3aXRoIHRoZSB2YXJzIHRoYXQgYXJlIHBhc3NlZCBpbiwgc28ge2NsYXNzTmFtZTpcIm15Q2xhc3NcIiwgc2NhbGU6MC41LCBsZWZ0OjIwfSB3b3VsZCB3b3JrLlxuXHRcdFx0XHR0aGlzLl9maXJzdFBUID0gcHQgPSBfc3BlY2lhbFByb3BzLmNsYXNzTmFtZS5wYXJzZSh0YXJnZXQsIHZhcnMuY2xhc3NOYW1lLCBcImNsYXNzTmFtZVwiLCB0aGlzLCBudWxsLCBudWxsLCB2YXJzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX2ZpcnN0UFQgPSBwdCA9IHRoaXMucGFyc2UodGFyZ2V0LCB2YXJzLCBudWxsKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuX3RyYW5zZm9ybVR5cGUpIHtcblx0XHRcdFx0dGhyZWVEID0gKHRoaXMuX3RyYW5zZm9ybVR5cGUgPT09IDMpO1xuXHRcdFx0XHRpZiAoIV90cmFuc2Zvcm1Qcm9wKSB7XG5cdFx0XHRcdFx0c3R5bGUuem9vbSA9IDE7IC8vaGVscHMgY29ycmVjdCBhbiBJRSBpc3N1ZS5cblx0XHRcdFx0fSBlbHNlIGlmIChfaXNTYWZhcmkpIHtcblx0XHRcdFx0XHRfcmVxU2FmYXJpRml4ID0gdHJ1ZTtcblx0XHRcdFx0XHQvL2lmIHpJbmRleCBpc24ndCBzZXQsIGlPUyBTYWZhcmkgZG9lc24ndCByZXBhaW50IHRoaW5ncyBjb3JyZWN0bHkgc29tZXRpbWVzIChzZWVtaW5nbHkgYXQgcmFuZG9tKS5cblx0XHRcdFx0XHRpZiAoc3R5bGUuekluZGV4ID09PSBcIlwiKSB7XG5cdFx0XHRcdFx0XHR6SW5kZXggPSBfZ2V0U3R5bGUodGFyZ2V0LCBcInpJbmRleFwiLCBfY3MpO1xuXHRcdFx0XHRcdFx0aWYgKHpJbmRleCA9PT0gXCJhdXRvXCIgfHwgekluZGV4ID09PSBcIlwiKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2FkZExhenlTZXQoc3R5bGUsIFwiekluZGV4XCIsIDApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvL1NldHRpbmcgV2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5IGNvcnJlY3RzIDMgYnVnczpcblx0XHRcdFx0XHQvLyAxKSBbbm9uLUFuZHJvaWRdIFNhZmFyaSBza2lwcyByZW5kZXJpbmcgY2hhbmdlcyB0byBcInRvcFwiIGFuZCBcImxlZnRcIiB0aGF0IGFyZSBtYWRlIG9uIHRoZSBzYW1lIGZyYW1lL3JlbmRlciBhcyBhIHRyYW5zZm9ybSB1cGRhdGUuXG5cdFx0XHRcdFx0Ly8gMikgaU9TIFNhZmFyaSBzb21ldGltZXMgbmVnbGVjdHMgdG8gcmVwYWludCBlbGVtZW50cyBpbiB0aGVpciBuZXcgcG9zaXRpb25zLiBTZXR0aW5nIFwiV2Via2l0UGVyc3BlY3RpdmVcIiB0byBhIG5vbi16ZXJvIHZhbHVlIHdvcmtlZCB0b28gZXhjZXB0IHRoYXQgb24gaU9TIFNhZmFyaSB0aGluZ3Mgd291bGQgZmxpY2tlciByYW5kb21seS5cblx0XHRcdFx0XHQvLyAzKSBTYWZhcmkgc29tZXRpbWVzIGRpc3BsYXllZCBvZGQgYXJ0aWZhY3RzIHdoZW4gdHdlZW5pbmcgdGhlIHRyYW5zZm9ybSAob3IgV2Via2l0VHJhbnNmb3JtKSBwcm9wZXJ0eSwgbGlrZSBnaG9zdHMgb2YgdGhlIGVkZ2VzIG9mIHRoZSBlbGVtZW50IHJlbWFpbmVkLiBEZWZpbml0ZWx5IGEgYnJvd3NlciBidWcuXG5cdFx0XHRcdFx0Ly9Ob3RlOiB3ZSBhbGxvdyB0aGUgdXNlciB0byBvdmVycmlkZSB0aGUgYXV0by1zZXR0aW5nIGJ5IGRlZmluaW5nIFdlYmtpdEJhY2tmYWNlVmlzaWJpbGl0eSBpbiB0aGUgdmFycyBvZiB0aGUgdHdlZW4uXG5cdFx0XHRcdFx0aWYgKF9pc1NhZmFyaUxUNikge1xuXHRcdFx0XHRcdFx0dGhpcy5fYWRkTGF6eVNldChzdHlsZSwgXCJXZWJraXRCYWNrZmFjZVZpc2liaWxpdHlcIiwgdGhpcy5fdmFycy5XZWJraXRCYWNrZmFjZVZpc2liaWxpdHkgfHwgKHRocmVlRCA/IFwidmlzaWJsZVwiIDogXCJoaWRkZW5cIikpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRwdDIgPSBwdDtcblx0XHRcdFx0d2hpbGUgKHB0MiAmJiBwdDIuX25leHQpIHtcblx0XHRcdFx0XHRwdDIgPSBwdDIuX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0dHB0ID0gbmV3IENTU1Byb3BUd2Vlbih0YXJnZXQsIFwidHJhbnNmb3JtXCIsIDAsIDAsIG51bGwsIDIpO1xuXHRcdFx0XHR0aGlzLl9saW5rQ1NTUCh0cHQsIG51bGwsIHB0Mik7XG5cdFx0XHRcdHRwdC5zZXRSYXRpbyA9IF90cmFuc2Zvcm1Qcm9wID8gX3NldFRyYW5zZm9ybVJhdGlvIDogX3NldElFVHJhbnNmb3JtUmF0aW87XG5cdFx0XHRcdHRwdC5kYXRhID0gdGhpcy5fdHJhbnNmb3JtIHx8IF9nZXRUcmFuc2Zvcm0odGFyZ2V0LCBfY3MsIHRydWUpO1xuXHRcdFx0XHR0cHQudHdlZW4gPSB0d2Vlbjtcblx0XHRcdFx0dHB0LnByID0gLTE7IC8vZW5zdXJlcyB0aGF0IHRoZSB0cmFuc2Zvcm1zIGdldCBhcHBsaWVkIGFmdGVyIHRoZSBjb21wb25lbnRzIGFyZSB1cGRhdGVkLlxuXHRcdFx0XHRfb3ZlcndyaXRlUHJvcHMucG9wKCk7IC8vd2UgZG9uJ3Qgd2FudCB0byBmb3JjZSB0aGUgb3ZlcndyaXRlIG9mIGFsbCBcInRyYW5zZm9ybVwiIHR3ZWVucyBvZiB0aGUgdGFyZ2V0IC0gd2Ugb25seSBjYXJlIGFib3V0IGluZGl2aWR1YWwgdHJhbnNmb3JtIHByb3BlcnRpZXMgbGlrZSBzY2FsZVgsIHJvdGF0aW9uLCBldGMuIFRoZSBDU1NQcm9wVHdlZW4gY29uc3RydWN0b3IgYXV0b21hdGljYWxseSBhZGRzIHRoZSBwcm9wZXJ0eSB0byBfb3ZlcndyaXRlUHJvcHMgd2hpY2ggaXMgd2h5IHdlIG5lZWQgdG8gcG9wKCkgaGVyZS5cblx0XHRcdH1cblxuXHRcdFx0aWYgKF9oYXNQcmlvcml0eSkge1xuXHRcdFx0XHQvL3Jlb3JkZXJzIHRoZSBsaW5rZWQgbGlzdCBpbiBvcmRlciBvZiBwciAocHJpb3JpdHkpXG5cdFx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHRcdG5leHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0XHRwdDIgPSBmaXJzdDtcblx0XHRcdFx0XHR3aGlsZSAocHQyICYmIHB0Mi5wciA+IHB0LnByKSB7XG5cdFx0XHRcdFx0XHRwdDIgPSBwdDIuX25leHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICgocHQuX3ByZXYgPSBwdDIgPyBwdDIuX3ByZXYgOiBsYXN0KSkge1xuXHRcdFx0XHRcdFx0cHQuX3ByZXYuX25leHQgPSBwdDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Zmlyc3QgPSBwdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKChwdC5fbmV4dCA9IHB0MikpIHtcblx0XHRcdFx0XHRcdHB0Mi5fcHJldiA9IHB0O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRsYXN0ID0gcHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0ID0gbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9maXJzdFBUID0gZmlyc3Q7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9O1xuXG5cblx0XHRwLnBhcnNlID0gZnVuY3Rpb24odGFyZ2V0LCB2YXJzLCBwdCwgcGx1Z2luKSB7XG5cdFx0XHR2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG5cdFx0XHRcdHAsIHNwLCBibiwgZW4sIGJzLCBlcywgYnNmeCwgZXNmeCwgaXNTdHIsIHJlbDtcblx0XHRcdGZvciAocCBpbiB2YXJzKSB7XG5cdFx0XHRcdGVzID0gdmFyc1twXTsgLy9lbmRpbmcgdmFsdWUgc3RyaW5nXG5cdFx0XHRcdHNwID0gX3NwZWNpYWxQcm9wc1twXTsgLy9TcGVjaWFsUHJvcCBsb29rdXAuXG5cdFx0XHRcdGlmICh0eXBlb2YoZXMpID09PSBcImZ1bmN0aW9uXCIgJiYgIShzcCAmJiBzcC5hbGxvd0Z1bmMpKSB7XG5cdFx0XHRcdFx0ZXMgPSBlcyhfaW5kZXgsIF90YXJnZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChzcCkge1xuXHRcdFx0XHRcdHB0ID0gc3AucGFyc2UodGFyZ2V0LCBlcywgcCwgdGhpcywgcHQsIHBsdWdpbiwgdmFycyk7XG5cdFx0XHRcdH0gZWxzZSBpZiAocC5zdWJzdHIoMCwyKSA9PT0gXCItLVwiKSB7IC8vZm9yIHR3ZWVuaW5nIENTUyB2YXJpYWJsZXMgKHdoaWNoIGFsd2F5cyBzdGFydCB3aXRoIFwiLS1cIikuIFRvIG1heGltaXplIHBlcmZvcm1hbmNlIGFuZCBzaW1wbGljaXR5LCB3ZSBieXBhc3MgQ1NTUGx1Z2luIGFsdG9nZXRoZXIgYW5kIGp1c3QgYWRkIGEgbm9ybWFsIHByb3BlcnR5IHR3ZWVuIHRvIHRoZSB0d2VlbiBpbnN0YW5jZSBpdHNlbGYuXG5cdFx0XHRcdFx0dGhpcy5fdHdlZW4uX3Byb3BMb29rdXBbcF0gPSB0aGlzLl9hZGRUd2Vlbi5jYWxsKHRoaXMuX3R3ZWVuLCB0YXJnZXQuc3R5bGUsIFwic2V0UHJvcGVydHlcIiwgX2dldENvbXB1dGVkU3R5bGUodGFyZ2V0KS5nZXRQcm9wZXJ0eVZhbHVlKHApICsgXCJcIiwgZXMgKyBcIlwiLCBwLCBmYWxzZSwgcCk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YnMgPSBfZ2V0U3R5bGUodGFyZ2V0LCBwLCBfY3MpICsgXCJcIjtcblx0XHRcdFx0XHRpc1N0ciA9ICh0eXBlb2YoZXMpID09PSBcInN0cmluZ1wiKTtcblx0XHRcdFx0XHRpZiAocCA9PT0gXCJjb2xvclwiIHx8IHAgPT09IFwiZmlsbFwiIHx8IHAgPT09IFwic3Ryb2tlXCIgfHwgcC5pbmRleE9mKFwiQ29sb3JcIikgIT09IC0xIHx8IChpc1N0ciAmJiBfcmdiaHNsRXhwLnRlc3QoZXMpKSkgeyAvL09wZXJhIHVzZXMgYmFja2dyb3VuZDogdG8gZGVmaW5lIGNvbG9yIHNvbWV0aW1lcyBpbiBhZGRpdGlvbiB0byBiYWNrZ3JvdW5kQ29sb3I6XG5cdFx0XHRcdFx0XHRpZiAoIWlzU3RyKSB7XG5cdFx0XHRcdFx0XHRcdGVzID0gX3BhcnNlQ29sb3IoZXMpO1xuXHRcdFx0XHRcdFx0XHRlcyA9ICgoZXMubGVuZ3RoID4gMykgPyBcInJnYmEoXCIgOiBcInJnYihcIikgKyBlcy5qb2luKFwiLFwiKSArIFwiKVwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cHQgPSBfcGFyc2VDb21wbGV4KHN0eWxlLCBwLCBicywgZXMsIHRydWUsIFwidHJhbnNwYXJlbnRcIiwgcHQsIDAsIHBsdWdpbik7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKGlzU3RyICYmIF9jb21wbGV4RXhwLnRlc3QoZXMpKSB7XG5cdFx0XHRcdFx0XHRwdCA9IF9wYXJzZUNvbXBsZXgoc3R5bGUsIHAsIGJzLCBlcywgdHJ1ZSwgbnVsbCwgcHQsIDAsIHBsdWdpbik7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ym4gPSBwYXJzZUZsb2F0KGJzKTtcblx0XHRcdFx0XHRcdGJzZnggPSAoYm4gfHwgYm4gPT09IDApID8gYnMuc3Vic3RyKChibiArIFwiXCIpLmxlbmd0aCkgOiBcIlwiOyAvL3JlbWVtYmVyLCBicyBjb3VsZCBiZSBub24tbnVtZXJpYyBsaWtlIFwibm9ybWFsXCIgZm9yIGZvbnRXZWlnaHQsIHNvIHdlIHNob3VsZCBkZWZhdWx0IHRvIGEgYmxhbmsgc3VmZml4IGluIHRoYXQgY2FzZS5cblxuXHRcdFx0XHRcdFx0aWYgKGJzID09PSBcIlwiIHx8IGJzID09PSBcImF1dG9cIikge1xuXHRcdFx0XHRcdFx0XHRpZiAocCA9PT0gXCJ3aWR0aFwiIHx8IHAgPT09IFwiaGVpZ2h0XCIpIHtcblx0XHRcdFx0XHRcdFx0XHRibiA9IF9nZXREaW1lbnNpb24odGFyZ2V0LCBwLCBfY3MpO1xuXHRcdFx0XHRcdFx0XHRcdGJzZnggPSBcInB4XCI7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAocCA9PT0gXCJsZWZ0XCIgfHwgcCA9PT0gXCJ0b3BcIikge1xuXHRcdFx0XHRcdFx0XHRcdGJuID0gX2NhbGN1bGF0ZU9mZnNldCh0YXJnZXQsIHAsIF9jcyk7XG5cdFx0XHRcdFx0XHRcdFx0YnNmeCA9IFwicHhcIjtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRibiA9IChwICE9PSBcIm9wYWNpdHlcIikgPyAwIDogMTtcblx0XHRcdFx0XHRcdFx0XHRic2Z4ID0gXCJcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZWwgPSAoaXNTdHIgJiYgZXMuY2hhckF0KDEpID09PSBcIj1cIik7XG5cdFx0XHRcdFx0XHRpZiAocmVsKSB7XG5cdFx0XHRcdFx0XHRcdGVuID0gcGFyc2VJbnQoZXMuY2hhckF0KDApICsgXCIxXCIsIDEwKTtcblx0XHRcdFx0XHRcdFx0ZXMgPSBlcy5zdWJzdHIoMik7XG5cdFx0XHRcdFx0XHRcdGVuICo9IHBhcnNlRmxvYXQoZXMpO1xuXHRcdFx0XHRcdFx0XHRlc2Z4ID0gZXMucmVwbGFjZShfc3VmZml4RXhwLCBcIlwiKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGVuID0gcGFyc2VGbG9hdChlcyk7XG5cdFx0XHRcdFx0XHRcdGVzZnggPSBpc1N0ciA/IGVzLnJlcGxhY2UoX3N1ZmZpeEV4cCwgXCJcIikgOiBcIlwiO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAoZXNmeCA9PT0gXCJcIikge1xuXHRcdFx0XHRcdFx0XHRlc2Z4ID0gKHAgaW4gX3N1ZmZpeE1hcCkgPyBfc3VmZml4TWFwW3BdIDogYnNmeDsgLy9wb3B1bGF0ZSB0aGUgZW5kIHN1ZmZpeCwgcHJpb3JpdGl6aW5nIHRoZSBtYXAsIHRoZW4gaWYgbm9uZSBpcyBmb3VuZCwgdXNlIHRoZSBiZWdpbm5pbmcgc3VmZml4LlxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRlcyA9IChlbiB8fCBlbiA9PT0gMCkgPyAocmVsID8gZW4gKyBibiA6IGVuKSArIGVzZnggOiB2YXJzW3BdOyAvL2Vuc3VyZXMgdGhhdCBhbnkgKz0gb3IgLT0gcHJlZml4ZXMgYXJlIHRha2VuIGNhcmUgb2YuIFJlY29yZCB0aGUgZW5kIHZhbHVlIGJlZm9yZSBub3JtYWxpemluZyB0aGUgc3VmZml4IGJlY2F1c2Ugd2UgYWx3YXlzIHdhbnQgdG8gZW5kIHRoZSB0d2VlbiBvbiBleGFjdGx5IHdoYXQgdGhleSBpbnRlbmRlZCBldmVuIGlmIGl0IGRvZXNuJ3QgbWF0Y2ggdGhlIGJlZ2lubmluZyB2YWx1ZSdzIHN1ZmZpeC5cblx0XHRcdFx0XHRcdC8vaWYgdGhlIGJlZ2lubmluZy9lbmRpbmcgc3VmZml4ZXMgZG9uJ3QgbWF0Y2gsIG5vcm1hbGl6ZSB0aGVtLi4uXG5cdFx0XHRcdFx0XHRpZiAoYnNmeCAhPT0gZXNmeCkgaWYgKGVzZnggIT09IFwiXCIgfHwgcCA9PT0gXCJsaW5lSGVpZ2h0XCIpIGlmIChlbiB8fCBlbiA9PT0gMCkgaWYgKGJuKSB7IC8vbm90ZTogaWYgdGhlIGJlZ2lubmluZyB2YWx1ZSAoYm4pIGlzIDAsIHdlIGRvbid0IG5lZWQgdG8gY29udmVydCB1bml0cyFcblx0XHRcdFx0XHRcdFx0Ym4gPSBfY29udmVydFRvUGl4ZWxzKHRhcmdldCwgcCwgYm4sIGJzZngpO1xuXHRcdFx0XHRcdFx0XHRpZiAoZXNmeCA9PT0gXCIlXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRibiAvPSBfY29udmVydFRvUGl4ZWxzKHRhcmdldCwgcCwgMTAwLCBcIiVcIikgLyAxMDA7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHZhcnMuc3RyaWN0VW5pdHMgIT09IHRydWUpIHsgLy9zb21lIGJyb3dzZXJzIHJlcG9ydCBvbmx5IFwicHhcIiB2YWx1ZXMgaW5zdGVhZCBvZiBhbGxvd2luZyBcIiVcIiB3aXRoIGdldENvbXB1dGVkU3R5bGUoKSwgc28gd2UgYXNzdW1lIHRoYXQgaWYgd2UncmUgdHdlZW5pbmcgdG8gYSAlLCB3ZSBzaG91bGQgc3RhcnQgdGhlcmUgdG9vIHVubGVzcyBzdHJpY3RVbml0czp0cnVlIGlzIGRlZmluZWQuIFRoaXMgYXBwcm9hY2ggaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3IgcmVzcG9uc2l2ZSBkZXNpZ25zIHRoYXQgdXNlIGZyb20oKSB0d2VlbnMuXG5cdFx0XHRcdFx0XHRcdFx0XHRicyA9IGJuICsgXCIlXCI7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoZXNmeCA9PT0gXCJlbVwiIHx8IGVzZnggPT09IFwicmVtXCIgfHwgZXNmeCA9PT0gXCJ2d1wiIHx8IGVzZnggPT09IFwidmhcIikge1xuXHRcdFx0XHRcdFx0XHRcdGJuIC89IF9jb252ZXJ0VG9QaXhlbHModGFyZ2V0LCBwLCAxLCBlc2Z4KTtcblxuXHRcdFx0XHRcdFx0XHQvL290aGVyd2lzZSBjb252ZXJ0IHRvIHBpeGVscy5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChlc2Z4ICE9PSBcInB4XCIpIHtcblx0XHRcdFx0XHRcdFx0XHRlbiA9IF9jb252ZXJ0VG9QaXhlbHModGFyZ2V0LCBwLCBlbiwgZXNmeCk7XG5cdFx0XHRcdFx0XHRcdFx0ZXNmeCA9IFwicHhcIjsgLy93ZSBkb24ndCB1c2UgYnNmeCBhZnRlciB0aGlzLCBzbyB3ZSBkb24ndCBuZWVkIHRvIHNldCBpdCB0byBweCB0b28uXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKHJlbCkgaWYgKGVuIHx8IGVuID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZXMgPSAoZW4gKyBibikgKyBlc2Z4OyAvL3RoZSBjaGFuZ2VzIHdlIG1hZGUgYWZmZWN0IHJlbGF0aXZlIGNhbGN1bGF0aW9ucywgc28gYWRqdXN0IHRoZSBlbmQgdmFsdWUgaGVyZS5cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAocmVsKSB7XG5cdFx0XHRcdFx0XHRcdGVuICs9IGJuO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAoKGJuIHx8IGJuID09PSAwKSAmJiAoZW4gfHwgZW4gPT09IDApKSB7IC8vZmFzdGVyIHRoYW4gaXNOYU4oKS4gQWxzbywgcHJldmlvdXNseSB3ZSByZXF1aXJlZCBlbiAhPT0gYm4gYnV0IHRoYXQgZG9lc24ndCByZWFsbHkgZ2FpbiBtdWNoIHBlcmZvcm1hbmNlIGFuZCBpdCBwcmV2ZW50cyBfcGFyc2VUb1Byb3h5KCkgZnJvbSB3b3JraW5nIHByb3Blcmx5IGlmIGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyBtYXRjaCBidXQgbmVlZCB0byBnZXQgdHdlZW5lZCBieSBhbiBleHRlcm5hbCBwbHVnaW4gYW55d2F5LiBGb3IgZXhhbXBsZSwgYSBiZXppZXIgdHdlZW4gd2hlcmUgdGhlIHRhcmdldCBzdGFydHMgYXQgbGVmdDowIGFuZCBoYXMgdGhlc2UgcG9pbnRzOiBbe2xlZnQ6NTB9LHtsZWZ0OjB9XSB3b3VsZG4ndCB3b3JrIHByb3Blcmx5IGJlY2F1c2Ugd2hlbiBwYXJzaW5nIHRoZSBsYXN0IHBvaW50LCBpdCdkIG1hdGNoIHRoZSBmaXJzdCAoY3VycmVudCkgb25lIGFuZCBhIG5vbi10d2VlbmluZyBDU1NQcm9wVHdlZW4gd291bGQgYmUgcmVjb3JkZWQgd2hlbiB3ZSBhY3R1YWxseSBuZWVkIGEgbm9ybWFsIHR3ZWVuICh0eXBlOjApIHNvIHRoYXQgdGhpbmdzIGdldCB1cGRhdGVkIGR1cmluZyB0aGUgdHdlZW4gcHJvcGVybHkuXG5cdFx0XHRcdFx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2VlbihzdHlsZSwgcCwgYm4sIGVuIC0gYm4sIHB0LCAwLCBwLCAoX2F1dG9Sb3VuZCAhPT0gZmFsc2UgJiYgKGVzZnggPT09IFwicHhcIiB8fCBwID09PSBcInpJbmRleFwiKSksIDAsIGJzLCBlcyk7XG5cdFx0XHRcdFx0XHRcdHB0LnhzMCA9IGVzZng7XG5cdFx0XHRcdFx0XHRcdC8vREVCVUc6IF9sb2coXCJ0d2VlbiBcIitwK1wiIGZyb20gXCIrcHQuYitcIiAoXCIrYm4rZXNmeCtcIikgdG8gXCIrcHQuZStcIiB3aXRoIHN1ZmZpeDogXCIrcHQueHMwKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoc3R5bGVbcF0gPT09IHVuZGVmaW5lZCB8fCAhZXMgJiYgKGVzICsgXCJcIiA9PT0gXCJOYU5cIiB8fCBlcyA9PSBudWxsKSkge1xuXHRcdFx0XHRcdFx0XHRfbG9nKFwiaW52YWxpZCBcIiArIHAgKyBcIiB0d2VlbiB2YWx1ZTogXCIgKyB2YXJzW3BdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2VlbihzdHlsZSwgcCwgZW4gfHwgYm4gfHwgMCwgMCwgcHQsIC0xLCBwLCBmYWxzZSwgMCwgYnMsIGVzKTtcblx0XHRcdFx0XHRcdFx0cHQueHMwID0gKGVzID09PSBcIm5vbmVcIiAmJiAocCA9PT0gXCJkaXNwbGF5XCIgfHwgcC5pbmRleE9mKFwiU3R5bGVcIikgIT09IC0xKSkgPyBicyA6IGVzOyAvL2ludGVybWVkaWF0ZSB2YWx1ZSBzaG91bGQgdHlwaWNhbGx5IGJlIHNldCBpbW1lZGlhdGVseSAoZW5kIHZhbHVlKSBleGNlcHQgZm9yIFwiZGlzcGxheVwiIG9yIHRoaW5ncyBsaWtlIGJvcmRlclRvcFN0eWxlLCBib3JkZXJCb3R0b21TdHlsZSwgZXRjLiB3aGljaCBzaG91bGQgdXNlIHRoZSBiZWdpbm5pbmcgdmFsdWUgZHVyaW5nIHRoZSB0d2Vlbi5cblx0XHRcdFx0XHRcdFx0Ly9ERUJVRzogX2xvZyhcIm5vbi10d2VlbmluZyB2YWx1ZSBcIitwK1wiOiBcIitwdC54czApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocGx1Z2luKSBpZiAocHQgJiYgIXB0LnBsdWdpbikge1xuXHRcdFx0XHRcdHB0LnBsdWdpbiA9IHBsdWdpbjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHB0O1xuXHRcdH07XG5cblxuXHRcdC8vZ2V0cyBjYWxsZWQgZXZlcnkgdGltZSB0aGUgdHdlZW4gdXBkYXRlcywgcGFzc2luZyB0aGUgbmV3IHJhdGlvICh0eXBpY2FsbHkgYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEsIGJ1dCBub3QgYWx3YXlzIChmb3IgZXhhbXBsZSwgaWYgYW4gRWxhc3RpYy5lYXNlT3V0IGlzIHVzZWQsIHRoZSB2YWx1ZSBjYW4ganVtcCBhYm92ZSAxIG1pZC10d2VlbikuIEl0IHdpbGwgYWx3YXlzIHN0YXJ0IGFuZCAwIGFuZCBlbmQgYXQgMS5cblx0XHRwLnNldFJhdGlvID0gZnVuY3Rpb24odikge1xuXHRcdFx0dmFyIHB0ID0gdGhpcy5fZmlyc3RQVCxcblx0XHRcdFx0bWluID0gMC4wMDAwMDEsXG5cdFx0XHRcdHZhbCwgc3RyLCBpO1xuXHRcdFx0Ly9hdCB0aGUgZW5kIG9mIHRoZSB0d2Vlbiwgd2Ugc2V0IHRoZSB2YWx1ZXMgdG8gZXhhY3RseSB3aGF0IHdlIHJlY2VpdmVkIGluIG9yZGVyIHRvIG1ha2Ugc3VyZSBub24tdHdlZW5pbmcgdmFsdWVzIChsaWtlIFwicG9zaXRpb25cIiBvciBcImZsb2F0XCIgb3Igd2hhdGV2ZXIpIGFyZSBzZXQgYW5kIHNvIHRoYXQgaWYgdGhlIGJlZ2lubmluZy9lbmRpbmcgc3VmZml4ZXMgKHVuaXRzKSBkaWRuJ3QgbWF0Y2ggYW5kIHdlIG5vcm1hbGl6ZWQgdG8gcHgsIHRoZSB2YWx1ZSB0aGF0IHRoZSB1c2VyIHBhc3NlZCBpbiBpcyB1c2VkIGhlcmUuIFdlIGNoZWNrIHRvIHNlZSBpZiB0aGUgdHdlZW4gaXMgYXQgaXRzIGJlZ2lubmluZyBpbiBjYXNlIGl0J3MgYSBmcm9tKCkgdHdlZW4gaW4gd2hpY2ggY2FzZSB0aGUgcmF0aW8gd2lsbCBhY3R1YWxseSBnbyBmcm9tIDEgdG8gMCBvdmVyIHRoZSBjb3Vyc2Ugb2YgdGhlIHR3ZWVuIChiYWNrd2FyZHMpLlxuXHRcdFx0aWYgKHYgPT09IDEgJiYgKHRoaXMuX3R3ZWVuLl90aW1lID09PSB0aGlzLl90d2Vlbi5fZHVyYXRpb24gfHwgdGhpcy5fdHdlZW4uX3RpbWUgPT09IDApKSB7XG5cdFx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHRcdGlmIChwdC50eXBlICE9PSAyKSB7XG5cdFx0XHRcdFx0XHRpZiAocHQuciAmJiBwdC50eXBlICE9PSAtMSkge1xuXHRcdFx0XHRcdFx0XHR2YWwgPSBwdC5yKHB0LnMgKyBwdC5jKTtcblx0XHRcdFx0XHRcdFx0aWYgKCFwdC50eXBlKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHZhbCArIHB0LnhzMDtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChwdC50eXBlID09PSAxKSB7IC8vY29tcGxleCB2YWx1ZSAob25lIHRoYXQgdHlwaWNhbGx5IGhhcyBtdWx0aXBsZSBudW1iZXJzIGluc2lkZSBhIHN0cmluZywgbGlrZSBcInJlY3QoNXB4LDEwcHgsMjBweCwyNXB4KVwiXG5cdFx0XHRcdFx0XHRcdFx0aSA9IHB0Lmw7XG5cdFx0XHRcdFx0XHRcdFx0c3RyID0gcHQueHMwICsgdmFsICsgcHQueHMxO1xuXHRcdFx0XHRcdFx0XHRcdGZvciAoaSA9IDE7IGkgPCBwdC5sOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0XHRcdHN0ciArPSBwdFtcInhuXCIraV0gKyBwdFtcInhzXCIrKGkrMSldO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRwdC50W3B0LnBdID0gc3RyO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRwdC50W3B0LnBdID0gcHQuZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cHQuc2V0UmF0aW8odik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICh2IHx8ICEodGhpcy5fdHdlZW4uX3RpbWUgPT09IHRoaXMuX3R3ZWVuLl9kdXJhdGlvbiB8fCB0aGlzLl90d2Vlbi5fdGltZSA9PT0gMCkgfHwgdGhpcy5fdHdlZW4uX3Jhd1ByZXZUaW1lID09PSAtMC4wMDAwMDEpIHtcblx0XHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdFx0dmFsID0gcHQuYyAqIHYgKyBwdC5zO1xuXHRcdFx0XHRcdGlmIChwdC5yKSB7XG5cdFx0XHRcdFx0XHR2YWwgPSBwdC5yKHZhbCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh2YWwgPCBtaW4pIGlmICh2YWwgPiAtbWluKSB7XG5cdFx0XHRcdFx0XHR2YWwgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIXB0LnR5cGUpIHtcblx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSB2YWwgKyBwdC54czA7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwdC50eXBlID09PSAxKSB7IC8vY29tcGxleCB2YWx1ZSAob25lIHRoYXQgdHlwaWNhbGx5IGhhcyBtdWx0aXBsZSBudW1iZXJzIGluc2lkZSBhIHN0cmluZywgbGlrZSBcInJlY3QoNXB4LDEwcHgsMjBweCwyNXB4KVwiXG5cdFx0XHRcdFx0XHRpID0gcHQubDtcblx0XHRcdFx0XHRcdGlmIChpID09PSAyKSB7XG5cdFx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSBwdC54czAgKyB2YWwgKyBwdC54czEgKyBwdC54bjEgKyBwdC54czI7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGkgPT09IDMpIHtcblx0XHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LnhzMCArIHZhbCArIHB0LnhzMSArIHB0LnhuMSArIHB0LnhzMiArIHB0LnhuMiArIHB0LnhzMztcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoaSA9PT0gNCkge1xuXHRcdFx0XHRcdFx0XHRwdC50W3B0LnBdID0gcHQueHMwICsgdmFsICsgcHQueHMxICsgcHQueG4xICsgcHQueHMyICsgcHQueG4yICsgcHQueHMzICsgcHQueG4zICsgcHQueHM0O1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChpID09PSA1KSB7XG5cdFx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSBwdC54czAgKyB2YWwgKyBwdC54czEgKyBwdC54bjEgKyBwdC54czIgKyBwdC54bjIgKyBwdC54czMgKyBwdC54bjMgKyBwdC54czQgKyBwdC54bjQgKyBwdC54czU7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRzdHIgPSBwdC54czAgKyB2YWwgKyBwdC54czE7XG5cdFx0XHRcdFx0XHRcdGZvciAoaSA9IDE7IGkgPCBwdC5sOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0XHRzdHIgKz0gcHRbXCJ4blwiK2ldICsgcHRbXCJ4c1wiKyhpKzEpXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRwdC50W3B0LnBdID0gc3RyO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwdC50eXBlID09PSAtMSkgeyAvL25vbi10d2VlbmluZyB2YWx1ZVxuXHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LnhzMDtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAocHQuc2V0UmF0aW8pIHsgLy9jdXN0b20gc2V0UmF0aW8oKSBmb3IgdGhpbmdzIGxpa2UgU3BlY2lhbFByb3BzLCBleHRlcm5hbCBwbHVnaW5zLCBldGMuXG5cdFx0XHRcdFx0XHRwdC5zZXRSYXRpbyh2KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHQvL2lmIHRoZSB0d2VlbiBpcyByZXZlcnNlZCBhbGwgdGhlIHdheSBiYWNrIHRvIHRoZSBiZWdpbm5pbmcsIHdlIG5lZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgdmFsdWVzIHdoaWNoIG1heSBoYXZlIGRpZmZlcmVudCB1bml0cyAobGlrZSAlIGluc3RlYWQgb2YgcHggb3IgZW0gb3Igd2hhdGV2ZXIpLlxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdFx0aWYgKHB0LnR5cGUgIT09IDIpIHtcblx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSBwdC5iO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRwdC5zZXRSYXRpbyh2KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEZvcmNlcyByZW5kZXJpbmcgb2YgdGhlIHRhcmdldCdzIHRyYW5zZm9ybXMgKHJvdGF0aW9uLCBzY2FsZSwgZXRjLikgd2hlbmV2ZXIgdGhlIENTU1BsdWdpbidzIHNldFJhdGlvKCkgaXMgY2FsbGVkLlxuXHRcdCAqIEJhc2ljYWxseSwgdGhpcyB0ZWxscyB0aGUgQ1NTUGx1Z2luIHRvIGNyZWF0ZSBhIENTU1Byb3BUd2VlbiAodHlwZSAyKSBhZnRlciBpbnN0YW50aWF0aW9uIHRoYXQgcnVucyBsYXN0IGluIHRoZSBsaW5rZWRcblx0XHQgKiBsaXN0IGFuZCBjYWxscyB0aGUgYXBwcm9wcmlhdGUgKDNEIG9yIDJEKSByZW5kZXJpbmcgZnVuY3Rpb24uIFdlIHNlcGFyYXRlIHRoaXMgaW50byBpdHMgb3duIG1ldGhvZCBzbyB0aGF0IHdlIGNhbiBjYWxsXG5cdFx0ICogaXQgZnJvbSBvdGhlciBwbHVnaW5zIGxpa2UgQmV6aWVyUGx1Z2luIGlmLCBmb3IgZXhhbXBsZSwgaXQgbmVlZHMgdG8gYXBwbHkgYW4gYXV0b1JvdGF0aW9uIGFuZCB0aGlzIENTU1BsdWdpblxuXHRcdCAqIGRvZXNuJ3QgaGF2ZSBhbnkgdHJhbnNmb3JtLXJlbGF0ZWQgcHJvcGVydGllcyBvZiBpdHMgb3duLiBZb3UgY2FuIGNhbGwgdGhpcyBtZXRob2QgYXMgbWFueSB0aW1lcyBhcyB5b3Vcblx0XHQgKiB3YW50IGFuZCBpdCB3b24ndCBjcmVhdGUgZHVwbGljYXRlIENTU1Byb3BUd2VlbnMuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IHRocmVlRCBpZiB0cnVlLCBpdCBzaG91bGQgYXBwbHkgM0QgdHdlZW5zIChvdGhlcndpc2UsIGp1c3QgMkQgb25lcyBhcmUgZmluZSBhbmQgdHlwaWNhbGx5IGZhc3Rlcilcblx0XHQgKi9cblx0XHRwLl9lbmFibGVUcmFuc2Zvcm1zID0gZnVuY3Rpb24odGhyZWVEKSB7XG5cdFx0XHR0aGlzLl90cmFuc2Zvcm0gPSB0aGlzLl90cmFuc2Zvcm0gfHwgX2dldFRyYW5zZm9ybSh0aGlzLl90YXJnZXQsIF9jcywgdHJ1ZSk7IC8vZW5zdXJlcyB0aGF0IHRoZSBlbGVtZW50IGhhcyBhIF9nc1RyYW5zZm9ybSBwcm9wZXJ0eSB3aXRoIHRoZSBhcHByb3ByaWF0ZSB2YWx1ZXMuXG5cdFx0XHR0aGlzLl90cmFuc2Zvcm1UeXBlID0gKCEodGhpcy5fdHJhbnNmb3JtLnN2ZyAmJiBfdXNlU1ZHVHJhbnNmb3JtQXR0cikgJiYgKHRocmVlRCB8fCB0aGlzLl90cmFuc2Zvcm1UeXBlID09PSAzKSkgPyAzIDogMjtcblx0XHR9O1xuXG5cdFx0dmFyIGxhenlTZXQgPSBmdW5jdGlvbih2KSB7XG5cdFx0XHR0aGlzLnRbdGhpcy5wXSA9IHRoaXMuZTtcblx0XHRcdHRoaXMuZGF0YS5fbGlua0NTU1AodGhpcywgdGhpcy5fbmV4dCwgbnVsbCwgdHJ1ZSk7IC8vd2UgcHVycG9zZWZ1bGx5IGtlZXAgdGhpcy5fbmV4dCBldmVuIHRob3VnaCBpdCdkIG1ha2Ugc2Vuc2UgdG8gbnVsbCBpdCwgYnV0IHRoaXMgaXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24sIGFzIHRoaXMgaGFwcGVucyBkdXJpbmcgdGhlIHdoaWxlIChwdCkge30gbG9vcCBpbiBzZXRSYXRpbygpIGF0IHRoZSBib3R0b20gb2Ygd2hpY2ggaXQgc2V0cyBwdCA9IHB0Ll9uZXh0LCBzbyBpZiB3ZSBudWxsIGl0LCB0aGUgbGlua2VkIGxpc3Qgd2lsbCBiZSBicm9rZW4gaW4gdGhhdCBsb29wLlxuXHRcdH07XG5cdFx0LyoqIEBwcml2YXRlIEdpdmVzIHVzIGEgd2F5IHRvIHNldCBhIHZhbHVlIG9uIHRoZSBmaXJzdCByZW5kZXIgKGFuZCBvbmx5IHRoZSBmaXJzdCByZW5kZXIpLiAqKi9cblx0XHRwLl9hZGRMYXp5U2V0ID0gZnVuY3Rpb24odCwgcCwgdikge1xuXHRcdFx0dmFyIHB0ID0gdGhpcy5fZmlyc3RQVCA9IG5ldyBDU1NQcm9wVHdlZW4odCwgcCwgMCwgMCwgdGhpcy5fZmlyc3RQVCwgMik7XG5cdFx0XHRwdC5lID0gdjtcblx0XHRcdHB0LnNldFJhdGlvID0gbGF6eVNldDtcblx0XHRcdHB0LmRhdGEgPSB0aGlzO1xuXHRcdH07XG5cblx0XHQvKiogQHByaXZhdGUgKiovXG5cdFx0cC5fbGlua0NTU1AgPSBmdW5jdGlvbihwdCwgbmV4dCwgcHJldiwgcmVtb3ZlKSB7XG5cdFx0XHRpZiAocHQpIHtcblx0XHRcdFx0aWYgKG5leHQpIHtcblx0XHRcdFx0XHRuZXh0Ll9wcmV2ID0gcHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHB0Ll9uZXh0KSB7XG5cdFx0XHRcdFx0cHQuX25leHQuX3ByZXYgPSBwdC5fcHJldjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocHQuX3ByZXYpIHtcblx0XHRcdFx0XHRwdC5fcHJldi5fbmV4dCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuX2ZpcnN0UFQgPT09IHB0KSB7XG5cdFx0XHRcdFx0dGhpcy5fZmlyc3RQVCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHRcdHJlbW92ZSA9IHRydWU7IC8vanVzdCB0byBwcmV2ZW50IHJlc2V0dGluZyB0aGlzLl9maXJzdFBUIDUgbGluZXMgZG93biBpbiBjYXNlIHB0Ll9uZXh0IGlzIG51bGwuIChvcHRpbWl6ZWQgZm9yIHNwZWVkKVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwcmV2KSB7XG5cdFx0XHRcdFx0cHJldi5fbmV4dCA9IHB0O1xuXHRcdFx0XHR9IGVsc2UgaWYgKCFyZW1vdmUgJiYgdGhpcy5fZmlyc3RQVCA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdHRoaXMuX2ZpcnN0UFQgPSBwdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRwdC5fbmV4dCA9IG5leHQ7XG5cdFx0XHRcdHB0Ll9wcmV2ID0gcHJldjtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwdDtcblx0XHR9O1xuXG5cdFx0cC5fbW9kID0gZnVuY3Rpb24obG9va3VwKSB7XG5cdFx0XHR2YXIgcHQgPSB0aGlzLl9maXJzdFBUO1xuXHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdGlmICh0eXBlb2YobG9va3VwW3B0LnBdKSA9PT0gXCJmdW5jdGlvblwiKSB7IC8vb25seSBnZXRzIGNhbGxlZCBieSBSb3VuZFByb3BzUGx1Z2luIChNb2RpZnlQbHVnaW4gbWFuYWdlcyBhbGwgdGhlIHJlbmRlcmluZyBpbnRlcm5hbGx5IGZvciBDU1NQbHVnaW4gcHJvcGVydGllcyB0aGF0IG5lZWQgbW9kaWZpY2F0aW9uKS4gUmVtZW1iZXIsIHdlIGhhbmRsZSByb3VuZGluZyBhIGJpdCBkaWZmZXJlbnRseSBpbiB0aGlzIHBsdWdpbiBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgbGV2ZXJhZ2luZyBcInJcIiBhcyBhbiBpbmRpY2F0b3IgdGhhdCB0aGUgdmFsdWUgc2hvdWxkIGJlIHJvdW5kZWQgaW50ZXJuYWxseS5cblx0XHRcdFx0XHRwdC5yID0gbG9va3VwW3B0LnBdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCBpZiBhbHBoYSBvciBhdXRvQWxwaGEgaXMga2lsbGVkLCBvcGFjaXR5IGlzIHRvby4gQW5kIGF1dG9BbHBoYSBhZmZlY3RzIHRoZSBcInZpc2liaWxpdHlcIiBwcm9wZXJ0eS5cblx0XHRwLl9raWxsID0gZnVuY3Rpb24obG9va3VwKSB7XG5cdFx0XHR2YXIgY29weSA9IGxvb2t1cCxcblx0XHRcdFx0cHQsIHAsIHhmaXJzdDtcblx0XHRcdGlmIChsb29rdXAuYXV0b0FscGhhIHx8IGxvb2t1cC5hbHBoYSkge1xuXHRcdFx0XHRjb3B5ID0ge307XG5cdFx0XHRcdGZvciAocCBpbiBsb29rdXApIHsgLy9jb3B5IHRoZSBsb29rdXAgc28gdGhhdCB3ZSdyZSBub3QgY2hhbmdpbmcgdGhlIG9yaWdpbmFsIHdoaWNoIG1heSBiZSBwYXNzZWQgZWxzZXdoZXJlLlxuXHRcdFx0XHRcdGNvcHlbcF0gPSBsb29rdXBbcF07XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29weS5vcGFjaXR5ID0gMTtcblx0XHRcdFx0aWYgKGNvcHkuYXV0b0FscGhhKSB7XG5cdFx0XHRcdFx0Y29weS52aXNpYmlsaXR5ID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGxvb2t1cC5jbGFzc05hbWUgJiYgKHB0ID0gdGhpcy5fY2xhc3NOYW1lUFQpKSB7IC8vZm9yIGNsYXNzTmFtZSB0d2VlbnMsIHdlIG5lZWQgdG8ga2lsbCBhbnkgYXNzb2NpYXRlZCBDU1NQcm9wVHdlZW5zIHRvbzsgYSBsaW5rZWQgbGlzdCBzdGFydHMgYXQgdGhlIGNsYXNzTmFtZSdzIFwieGZpcnN0XCIuXG5cdFx0XHRcdHhmaXJzdCA9IHB0LnhmaXJzdDtcblx0XHRcdFx0aWYgKHhmaXJzdCAmJiB4Zmlyc3QuX3ByZXYpIHtcblx0XHRcdFx0XHR0aGlzLl9saW5rQ1NTUCh4Zmlyc3QuX3ByZXYsIHB0Ll9uZXh0LCB4Zmlyc3QuX3ByZXYuX3ByZXYpOyAvL2JyZWFrIG9mZiB0aGUgcHJldlxuXHRcdFx0XHR9IGVsc2UgaWYgKHhmaXJzdCA9PT0gdGhpcy5fZmlyc3RQVCkge1xuXHRcdFx0XHRcdHRoaXMuX2ZpcnN0UFQgPSBwdC5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocHQuX25leHQpIHtcblx0XHRcdFx0XHR0aGlzLl9saW5rQ1NTUChwdC5fbmV4dCwgcHQuX25leHQuX25leHQsIHhmaXJzdC5fcHJldik7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5fY2xhc3NOYW1lUFQgPSBudWxsO1xuXHRcdFx0fVxuXHRcdFx0cHQgPSB0aGlzLl9maXJzdFBUO1xuXHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdGlmIChwdC5wbHVnaW4gJiYgcHQucGx1Z2luICE9PSBwICYmIHB0LnBsdWdpbi5fa2lsbCkgeyAvL2ZvciBwbHVnaW5zIHRoYXQgYXJlIHJlZ2lzdGVyZWQgd2l0aCBDU1NQbHVnaW4sIHdlIHNob3VsZCBub3RpZnkgdGhlbSBvZiB0aGUga2lsbC5cblx0XHRcdFx0XHRwdC5wbHVnaW4uX2tpbGwobG9va3VwKTtcblx0XHRcdFx0XHRwID0gcHQucGx1Z2luO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gVHdlZW5QbHVnaW4ucHJvdG90eXBlLl9raWxsLmNhbGwodGhpcywgY29weSk7XG5cdFx0fTtcblxuXG5cblx0XHQvL3VzZWQgYnkgY2FzY2FkZVRvKCkgZm9yIGdhdGhlcmluZyBhbGwgdGhlIHN0eWxlIHByb3BlcnRpZXMgb2YgZWFjaCBjaGlsZCBlbGVtZW50IGludG8gYW4gYXJyYXkgZm9yIGNvbXBhcmlzb24uXG5cdFx0dmFyIF9nZXRDaGlsZFN0eWxlcyA9IGZ1bmN0aW9uKGUsIHByb3BzLCB0YXJnZXRzKSB7XG5cdFx0XHRcdHZhciBjaGlsZHJlbiwgaSwgY2hpbGQsIHR5cGU7XG5cdFx0XHRcdGlmIChlLnNsaWNlKSB7XG5cdFx0XHRcdFx0aSA9IGUubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0X2dldENoaWxkU3R5bGVzKGVbaV0sIHByb3BzLCB0YXJnZXRzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNoaWxkcmVuID0gZS5jaGlsZE5vZGVzO1xuXHRcdFx0XHRpID0gY2hpbGRyZW4ubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRjaGlsZCA9IGNoaWxkcmVuW2ldO1xuXHRcdFx0XHRcdHR5cGUgPSBjaGlsZC50eXBlO1xuXHRcdFx0XHRcdGlmIChjaGlsZC5zdHlsZSkge1xuXHRcdFx0XHRcdFx0cHJvcHMucHVzaChfZ2V0QWxsU3R5bGVzKGNoaWxkKSk7XG5cdFx0XHRcdFx0XHRpZiAodGFyZ2V0cykge1xuXHRcdFx0XHRcdFx0XHR0YXJnZXRzLnB1c2goY2hpbGQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoKHR5cGUgPT09IDEgfHwgdHlwZSA9PT0gOSB8fCB0eXBlID09PSAxMSkgJiYgY2hpbGQuY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdF9nZXRDaGlsZFN0eWxlcyhjaGlsZCwgcHJvcHMsIHRhcmdldHMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFR5cGljYWxseSBvbmx5IHVzZWZ1bCBmb3IgY2xhc3NOYW1lIHR3ZWVucyB0aGF0IG1heSBhZmZlY3QgY2hpbGQgZWxlbWVudHMsIHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBUd2VlbkxpdGVcblx0XHQgKiBhbmQgdGhlbiBjb21wYXJlcyB0aGUgc3R5bGUgcHJvcGVydGllcyBvZiBhbGwgdGhlIHRhcmdldCdzIGNoaWxkIGVsZW1lbnRzIGF0IHRoZSB0d2VlbidzIHN0YXJ0IGFuZCBlbmQsIGFuZFxuXHRcdCAqIGlmIGFueSBhcmUgZGlmZmVyZW50LCBpdCBhbHNvIGNyZWF0ZXMgdHdlZW5zIGZvciB0aG9zZSBhbmQgcmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIEFMTCBvZiB0aGUgcmVzdWx0aW5nXG5cdFx0ICogdHdlZW5zIChzbyB0aGF0IHlvdSBjYW4gZWFzaWx5IGFkZCgpIHRoZW0gdG8gYSBUaW1lbGluZUxpdGUsIGZvciBleGFtcGxlKS4gVGhlIHJlYXNvbiB0aGlzIGZ1bmN0aW9uYWxpdHkgaXNcblx0XHQgKiB3cmFwcGVkIGludG8gYSBzZXBhcmF0ZSBzdGF0aWMgbWV0aG9kIG9mIENTU1BsdWdpbiBpbnN0ZWFkIG9mIGJlaW5nIGludGVncmF0ZWQgaW50byBhbGwgcmVndWxhciBjbGFzc05hbWUgdHdlZW5zXG5cdFx0ICogaXMgYmVjYXVzZSBpdCBjcmVhdGVzIGVudGlyZWx5IG5ldyB0d2VlbnMgdGhhdCBtYXkgaGF2ZSBjb21wbGV0ZWx5IGRpZmZlcmVudCB0YXJnZXRzIHRoYW4gdGhlIG9yaWdpbmFsIHR3ZWVuLFxuXHRcdCAqIHNvIGlmIHRoZXkgd2VyZSBhbGwgbHVtcGVkIGludG8gdGhlIG9yaWdpbmFsIHR3ZWVuIGluc3RhbmNlLCBpdCB3b3VsZCBiZSBpbmNvbnNpc3RlbnQgd2l0aCB0aGUgcmVzdCBvZiB0aGUgQVBJXG5cdFx0ICogYW5kIGl0IHdvdWxkIGNyZWF0ZSBvdGhlciBwcm9ibGVtcy4gRm9yIGV4YW1wbGU6XG5cdFx0ICogIC0gSWYgSSBjcmVhdGUgYSB0d2VlbiBvZiBlbGVtZW50QSwgdGhhdCB0d2VlbiBpbnN0YW5jZSBtYXkgc3VkZGVubHkgY2hhbmdlIGl0cyB0YXJnZXQgdG8gaW5jbHVkZSA1MCBvdGhlciBlbGVtZW50cyAodW5pbnR1aXRpdmUgaWYgSSBzcGVjaWZpY2FsbHkgZGVmaW5lZCB0aGUgdGFyZ2V0IEkgd2FudGVkKVxuXHRcdCAqICAtIFdlIGNhbid0IGp1c3QgY3JlYXRlIG5ldyBpbmRlcGVuZGVudCB0d2VlbnMgYmVjYXVzZSBvdGhlcndpc2UsIHdoYXQgaGFwcGVucyBpZiB0aGUgb3JpZ2luYWwvcGFyZW50IHR3ZWVuIGlzIHJldmVyc2VkIG9yIHBhdXNlIG9yIGRyb3BwZWQgaW50byBhIFRpbWVsaW5lTGl0ZSBmb3IgdGlnaHQgY29udHJvbD8gWW91J2QgZXhwZWN0IHRoYXQgdHdlZW4ncyBiZWhhdmlvciB0byBhZmZlY3QgYWxsIHRoZSBvdGhlcnMuXG5cdFx0ICogIC0gQW5hbHl6aW5nIGV2ZXJ5IHN0eWxlIHByb3BlcnR5IG9mIGV2ZXJ5IGNoaWxkIGJlZm9yZSBhbmQgYWZ0ZXIgdGhlIHR3ZWVuIGlzIGFuIGV4cGVuc2l2ZSBvcGVyYXRpb24gd2hlbiB0aGVyZSBhcmUgbWFueSBjaGlsZHJlbiwgc28gdGhpcyBiZWhhdmlvciBzaG91bGRuJ3QgYmUgaW1wb3NlZCBvbiBhbGwgY2xhc3NOYW1lIHR3ZWVucyBieSBkZWZhdWx0LCBlc3BlY2lhbGx5IHNpbmNlIGl0J3MgcHJvYmFibHkgcmFyZSB0aGF0IHRoaXMgZXh0cmEgZnVuY3Rpb25hbGl0eSBpcyBuZWVkZWQuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IG9iamVjdCB0byBiZSB0d2VlbmVkXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IER1cmF0aW9uIGluIHNlY29uZHMgKG9yIGZyYW1lcyBmb3IgZnJhbWVzLWJhc2VkIHR3ZWVucylcblx0XHQgKiBAcGFyYW0ge09iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIGVuZCB2YWx1ZXMsIGxpa2Uge2NsYXNzTmFtZTpcIm5ld0NsYXNzXCIsIGVhc2U6TGluZWFyLmVhc2VOb25lfVxuXHRcdCAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSBvZiBUd2VlbkxpdGUgaW5zdGFuY2VzXG5cdFx0ICovXG5cdFx0Q1NTUGx1Z2luLmNhc2NhZGVUbyA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpIHtcblx0XHRcdHZhciB0d2VlbiA9IFR3ZWVuTGl0ZS50byh0YXJnZXQsIGR1cmF0aW9uLCB2YXJzKSxcblx0XHRcdFx0cmVzdWx0cyA9IFt0d2Vlbl0sXG5cdFx0XHRcdGIgPSBbXSxcblx0XHRcdFx0ZSA9IFtdLFxuXHRcdFx0XHR0YXJnZXRzID0gW10sXG5cdFx0XHRcdF9yZXNlcnZlZFByb3BzID0gVHdlZW5MaXRlLl9pbnRlcm5hbHMucmVzZXJ2ZWRQcm9wcyxcblx0XHRcdFx0aSwgZGlmcywgcCwgZnJvbTtcblx0XHRcdHRhcmdldCA9IHR3ZWVuLl90YXJnZXRzIHx8IHR3ZWVuLnRhcmdldDtcblx0XHRcdF9nZXRDaGlsZFN0eWxlcyh0YXJnZXQsIGIsIHRhcmdldHMpO1xuXHRcdFx0dHdlZW4ucmVuZGVyKGR1cmF0aW9uLCB0cnVlLCB0cnVlKTtcblx0XHRcdF9nZXRDaGlsZFN0eWxlcyh0YXJnZXQsIGUpO1xuXHRcdFx0dHdlZW4ucmVuZGVyKDAsIHRydWUsIHRydWUpO1xuXHRcdFx0dHdlZW4uX2VuYWJsZWQodHJ1ZSk7XG5cdFx0XHRpID0gdGFyZ2V0cy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0ZGlmcyA9IF9jc3NEaWYodGFyZ2V0c1tpXSwgYltpXSwgZVtpXSk7XG5cdFx0XHRcdGlmIChkaWZzLmZpcnN0TVBUKSB7XG5cdFx0XHRcdFx0ZGlmcyA9IGRpZnMuZGlmcztcblx0XHRcdFx0XHRmb3IgKHAgaW4gdmFycykge1xuXHRcdFx0XHRcdFx0aWYgKF9yZXNlcnZlZFByb3BzW3BdKSB7XG5cdFx0XHRcdFx0XHRcdGRpZnNbcF0gPSB2YXJzW3BdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRmcm9tID0ge307XG5cdFx0XHRcdFx0Zm9yIChwIGluIGRpZnMpIHtcblx0XHRcdFx0XHRcdGZyb21bcF0gPSBiW2ldW3BdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXN1bHRzLnB1c2goVHdlZW5MaXRlLmZyb21Ubyh0YXJnZXRzW2ldLCBkdXJhdGlvbiwgZnJvbSwgZGlmcykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdFx0VHdlZW5QbHVnaW4uYWN0aXZhdGUoW0NTU1BsdWdpbl0pO1xuXHRcdHJldHVybiBDU1NQbHVnaW47XG5cblx0fSwgdHJ1ZSk7XG5cbmV4cG9ydCB2YXIgQ1NTUGx1Z2luID0gZ2xvYmFscy5DU1NQbHVnaW47XG5leHBvcnQgeyBDU1NQbHVnaW4gYXMgZGVmYXVsdCB9OyIsIi8qIVxuICogVkVSU0lPTjogMC42LjFcbiAqIERBVEU6IDIwMTgtMDgtMjdcbiAqIFVQREFURVMgQU5EIERPQ1MgQVQ6IGh0dHA6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDA4LTIwMTksIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgd29yayBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIHNvZnR3YXJlIGFncmVlbWVudCB0aGF0IHdhcyBpc3N1ZWQgd2l0aCB5b3VyIG1lbWJlcnNoaXAuXG4gKiBcbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG5pbXBvcnQgeyBfZ3NTY29wZSB9IGZyb20gXCIuL1R3ZWVuTGl0ZS5qc1wiO1xuXG5leHBvcnQgdmFyIEF0dHJQbHVnaW4gPSBfZ3NTY29wZS5fZ3NEZWZpbmUucGx1Z2luKHtcblx0cHJvcE5hbWU6IFwiYXR0clwiLFxuXHRBUEk6IDIsXG5cdHZlcnNpb246IFwiMC42LjFcIixcblxuXHQvL2NhbGxlZCB3aGVuIHRoZSB0d2VlbiByZW5kZXJzIGZvciB0aGUgZmlyc3QgdGltZS4gVGhpcyBpcyB3aGVyZSBpbml0aWFsIHZhbHVlcyBzaG91bGQgYmUgcmVjb3JkZWQgYW5kIGFueSBzZXR1cCByb3V0aW5lcyBzaG91bGQgcnVuLlxuXHRpbml0OiBmdW5jdGlvbih0YXJnZXQsIHZhbHVlLCB0d2VlbiwgaW5kZXgpIHtcblx0XHR2YXIgcCwgZW5kO1xuXHRcdGlmICh0eXBlb2YodGFyZ2V0LnNldEF0dHJpYnV0ZSkgIT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRmb3IgKHAgaW4gdmFsdWUpIHtcblx0XHRcdGVuZCA9IHZhbHVlW3BdO1xuXHRcdFx0aWYgKHR5cGVvZihlbmQpID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0ZW5kID0gZW5kKGluZGV4LCB0YXJnZXQpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fYWRkVHdlZW4odGFyZ2V0LCBcInNldEF0dHJpYnV0ZVwiLCB0YXJnZXQuZ2V0QXR0cmlidXRlKHApICsgXCJcIiwgZW5kICsgXCJcIiwgcCwgZmFsc2UsIHApO1xuXHRcdFx0dGhpcy5fb3ZlcndyaXRlUHJvcHMucHVzaChwKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxufSk7XG5cbmV4cG9ydCB7IEF0dHJQbHVnaW4gYXMgZGVmYXVsdCB9O1xuXG5cblxuIiwiLyohXG4gKiBWRVJTSU9OOiAxLjYuMFxuICogREFURTogMjAxOC0wOC0yN1xuICogVVBEQVRFUyBBTkQgRE9DUyBBVDogaHR0cDovL2dyZWVuc29jay5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxOSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyB3b3JrIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHA6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgc29mdHdhcmUgYWdyZWVtZW50IHRoYXQgd2FzIGlzc3VlZCB3aXRoIHlvdXIgbWVtYmVyc2hpcC5cbiAqIFxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4gKiovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG5pbXBvcnQgeyBfZ3NTY29wZSB9IGZyb20gXCIuL1R3ZWVuTGl0ZS5qc1wiO1xuXG5leHBvcnQgdmFyIFJvdW5kUHJvcHNQbHVnaW4gPSBfZ3NTY29wZS5fZ3NEZWZpbmUucGx1Z2luKHtcblx0XHRcdFx0cHJvcE5hbWU6IFwicm91bmRQcm9wc1wiLFxuXHRcdFx0XHR2ZXJzaW9uOiBcIjEuNy4wXCIsXG5cdFx0XHRcdHByaW9yaXR5OiAtMSxcblx0XHRcdFx0QVBJOiAyLFxuXG5cdFx0XHRcdC8vY2FsbGVkIHdoZW4gdGhlIHR3ZWVuIHJlbmRlcnMgZm9yIHRoZSBmaXJzdCB0aW1lLiBUaGlzIGlzIHdoZXJlIGluaXRpYWwgdmFsdWVzIHNob3VsZCBiZSByZWNvcmRlZCBhbmQgYW55IHNldHVwIHJvdXRpbmVzIHNob3VsZCBydW4uXG5cdFx0XHRcdGluaXQ6IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUsIHR3ZWVuKSB7XG5cdFx0XHRcdFx0dGhpcy5fdHdlZW4gPSB0d2Vlbjtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9KSxcblx0XHRcdF9nZXRSb3VuZEZ1bmMgPSBmdW5jdGlvbih2KSB7IC8vcGFzcyBpbiAwLjEgZ2V0IGEgZnVuY3Rpb24gdGhhdCdsbCByb3VuZCB0byB0aGUgbmVhcmVzdCB0ZW50aCwgb3IgNSB0byByb3VuZCB0byB0aGUgY2xvc2VzdCA1LCBvciAwLjAwMSB0byB0aGUgY2xvc2VzdCAxMDAwdGgsIGV0Yy5cblx0XHRcdFx0dmFyIHAgPSB2IDwgMSA/IE1hdGgucG93KDEwLCAodiArIFwiXCIpLmxlbmd0aCAtIDIpIDogMTsgLy90byBhdm9pZCBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAobGlrZSAyNCAqIDAuMSA9PSAyLjQwMDAwMDAwMDAwMDAwMDQpLCB3ZSBjaG9wIG9mZiBhdCBhIHNwZWNpZmljIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyAobXVjaCBmYXN0ZXIgdGhhbiB0b0ZpeGVkKClcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKG4pIHtcblx0XHRcdFx0XHRyZXR1cm4gKChNYXRoLnJvdW5kKG4gLyB2KSAqIHYgKiBwKSB8IDApIC8gcDtcblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cdFx0XHRfcm91bmRMaW5rZWRMaXN0ID0gZnVuY3Rpb24obm9kZSwgbW9kKSB7XG5cdFx0XHRcdHdoaWxlIChub2RlKSB7XG5cdFx0XHRcdFx0aWYgKCFub2RlLmYgJiYgIW5vZGUuYmxvYikge1xuXHRcdFx0XHRcdFx0bm9kZS5tID0gbW9kIHx8IE1hdGgucm91bmQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5vZGUgPSBub2RlLl9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0cCA9IFJvdW5kUHJvcHNQbHVnaW4ucHJvdG90eXBlO1xuXG5cdFx0cC5fb25Jbml0QWxsUHJvcHMgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuX3R3ZWVuLFxuXHRcdFx0XHRycCA9IHR3ZWVuLnZhcnMucm91bmRQcm9wcyxcblx0XHRcdFx0bG9va3VwID0ge30sXG5cdFx0XHRcdHJwdCA9IHR3ZWVuLl9wcm9wTG9va3VwLnJvdW5kUHJvcHMsXG5cdFx0XHRcdHB0LCBuZXh0LCBpLCBwO1xuXHRcdFx0aWYgKHR5cGVvZihycCkgPT09IFwib2JqZWN0XCIgJiYgIXJwLnB1c2gpIHtcblx0XHRcdFx0Zm9yIChwIGluIHJwKSB7XG5cdFx0XHRcdFx0bG9va3VwW3BdID0gX2dldFJvdW5kRnVuYyhycFtwXSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICh0eXBlb2YocnApID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0cnAgPSBycC5zcGxpdChcIixcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0aSA9IHJwLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0bG9va3VwW3JwW2ldXSA9IE1hdGgucm91bmQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yIChwIGluIGxvb2t1cCkge1xuXHRcdFx0XHRwdCA9IHR3ZWVuLl9maXJzdFBUO1xuXHRcdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0XHRuZXh0ID0gcHQuX25leHQ7IC8vcmVjb3JkIGhlcmUsIGJlY2F1c2UgaXQgbWF5IGdldCByZW1vdmVkXG5cdFx0XHRcdFx0aWYgKHB0LnBnKSB7XG5cdFx0XHRcdFx0XHRwdC50Ll9tb2QobG9va3VwKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHB0Lm4gPT09IHApIHtcblx0XHRcdFx0XHRcdGlmIChwdC5mID09PSAyICYmIHB0LnQpIHsgLy9hIGJsb2IgKHRleHQgY29udGFpbmluZyBtdWx0aXBsZSBudW1lcmljIHZhbHVlcylcblx0XHRcdFx0XHRcdFx0X3JvdW5kTGlua2VkTGlzdChwdC50Ll9maXJzdFBULCBsb29rdXBbcF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fYWRkKHB0LnQsIHAsIHB0LnMsIHB0LmMsIGxvb2t1cFtwXSk7XG5cdFx0XHRcdFx0XHRcdC8vcmVtb3ZlIGZyb20gbGlua2VkIGxpc3Rcblx0XHRcdFx0XHRcdFx0aWYgKG5leHQpIHtcblx0XHRcdFx0XHRcdFx0XHRuZXh0Ll9wcmV2ID0gcHQuX3ByZXY7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKHB0Ll9wcmV2KSB7XG5cdFx0XHRcdFx0XHRcdFx0cHQuX3ByZXYuX25leHQgPSBuZXh0O1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHR3ZWVuLl9maXJzdFBUID09PSBwdCkge1xuXHRcdFx0XHRcdFx0XHRcdHR3ZWVuLl9maXJzdFBUID0gbmV4dDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRwdC5fbmV4dCA9IHB0Ll9wcmV2ID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0dHdlZW4uX3Byb3BMb29rdXBbcF0gPSBycHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0ID0gbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0XHRwLl9hZGQgPSBmdW5jdGlvbih0YXJnZXQsIHAsIHMsIGMsIG1vZCkge1xuXHRcdFx0dGhpcy5fYWRkVHdlZW4odGFyZ2V0LCBwLCBzLCBzICsgYywgcCwgbW9kIHx8IE1hdGgucm91bmQpO1xuXHRcdFx0dGhpcy5fb3ZlcndyaXRlUHJvcHMucHVzaChwKTtcblx0XHR9O1xuXG5leHBvcnQgeyBSb3VuZFByb3BzUGx1Z2luIGFzIGRlZmF1bHQgfTtcbiIsIi8qIVxuICogVkVSU0lPTjogMC4zLjFcbiAqIERBVEU6IDIwMTgtMDgtMjdcbiAqIFVQREFURVMgQU5EIERPQ1MgQVQ6IGh0dHA6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDA4LTIwMTksIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgd29yayBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIHNvZnR3YXJlIGFncmVlbWVudCB0aGF0IHdhcyBpc3N1ZWQgd2l0aCB5b3VyIG1lbWJlcnNoaXAuXG4gKiBcbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuICoqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cblxuaW1wb3J0IHsgX2dzU2NvcGUgfSBmcm9tIFwiLi9Ud2VlbkxpdGUuanNcIjtcblxuZXhwb3J0IHZhciBEaXJlY3Rpb25hbFJvdGF0aW9uUGx1Z2luID0gX2dzU2NvcGUuX2dzRGVmaW5lLnBsdWdpbih7XG5cdFx0cHJvcE5hbWU6IFwiZGlyZWN0aW9uYWxSb3RhdGlvblwiLFxuXHRcdHZlcnNpb246IFwiMC4zLjFcIixcblx0XHRBUEk6IDIsXG5cblx0XHQvL2NhbGxlZCB3aGVuIHRoZSB0d2VlbiByZW5kZXJzIGZvciB0aGUgZmlyc3QgdGltZS4gVGhpcyBpcyB3aGVyZSBpbml0aWFsIHZhbHVlcyBzaG91bGQgYmUgcmVjb3JkZWQgYW5kIGFueSBzZXR1cCByb3V0aW5lcyBzaG91bGQgcnVuLlxuXHRcdGluaXQ6IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUsIHR3ZWVuLCBpbmRleCkge1xuXHRcdFx0aWYgKHR5cGVvZih2YWx1ZSkgIT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0dmFsdWUgPSB7cm90YXRpb246dmFsdWV9O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5maW5hbHMgPSB7fTtcblx0XHRcdHZhciBjYXAgPSAodmFsdWUudXNlUmFkaWFucyA9PT0gdHJ1ZSkgPyBNYXRoLlBJICogMiA6IDM2MCxcblx0XHRcdFx0bWluID0gMC4wMDAwMDEsXG5cdFx0XHRcdHAsIHYsIHN0YXJ0LCBlbmQsIGRpZiwgc3BsaXQ7XG5cdFx0XHRmb3IgKHAgaW4gdmFsdWUpIHtcblx0XHRcdFx0aWYgKHAgIT09IFwidXNlUmFkaWFuc1wiKSB7XG5cdFx0XHRcdFx0ZW5kID0gdmFsdWVbcF07XG5cdFx0XHRcdFx0aWYgKHR5cGVvZihlbmQpID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdGVuZCA9IGVuZChpbmRleCwgdGFyZ2V0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c3BsaXQgPSAoZW5kICsgXCJcIikuc3BsaXQoXCJfXCIpO1xuXHRcdFx0XHRcdHYgPSBzcGxpdFswXTtcblx0XHRcdFx0XHRzdGFydCA9IHBhcnNlRmxvYXQoICh0eXBlb2YodGFyZ2V0W3BdKSAhPT0gXCJmdW5jdGlvblwiKSA/IHRhcmdldFtwXSA6IHRhcmdldFsgKChwLmluZGV4T2YoXCJzZXRcIikgfHwgdHlwZW9mKHRhcmdldFtcImdldFwiICsgcC5zdWJzdHIoMyldKSAhPT0gXCJmdW5jdGlvblwiKSA/IHAgOiBcImdldFwiICsgcC5zdWJzdHIoMykpIF0oKSApO1xuXHRcdFx0XHRcdGVuZCA9IHRoaXMuZmluYWxzW3BdID0gKHR5cGVvZih2KSA9PT0gXCJzdHJpbmdcIiAmJiB2LmNoYXJBdCgxKSA9PT0gXCI9XCIpID8gc3RhcnQgKyBwYXJzZUludCh2LmNoYXJBdCgwKSArIFwiMVwiLCAxMCkgKiBOdW1iZXIodi5zdWJzdHIoMikpIDogTnVtYmVyKHYpIHx8IDA7XG5cdFx0XHRcdFx0ZGlmID0gZW5kIC0gc3RhcnQ7XG5cdFx0XHRcdFx0aWYgKHNwbGl0Lmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0diA9IHNwbGl0LmpvaW4oXCJfXCIpO1xuXHRcdFx0XHRcdFx0aWYgKHYuaW5kZXhPZihcInNob3J0XCIpICE9PSAtMSkge1xuXHRcdFx0XHRcdFx0XHRkaWYgPSBkaWYgJSBjYXA7XG5cdFx0XHRcdFx0XHRcdGlmIChkaWYgIT09IGRpZiAlIChjYXAgLyAyKSkge1xuXHRcdFx0XHRcdFx0XHRcdGRpZiA9IChkaWYgPCAwKSA/IGRpZiArIGNhcCA6IGRpZiAtIGNhcDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHYuaW5kZXhPZihcIl9jd1wiKSAhPT0gLTEgJiYgZGlmIDwgMCkge1xuXHRcdFx0XHRcdFx0XHRkaWYgPSAoKGRpZiArIGNhcCAqIDk5OTk5OTk5OTkpICUgY2FwKSAtICgoZGlmIC8gY2FwKSB8IDApICogY2FwO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICh2LmluZGV4T2YoXCJjY3dcIikgIT09IC0xICYmIGRpZiA+IDApIHtcblx0XHRcdFx0XHRcdFx0ZGlmID0gKChkaWYgLSBjYXAgKiA5OTk5OTk5OTk5KSAlIGNhcCkgLSAoKGRpZiAvIGNhcCkgfCAwKSAqIGNhcDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGRpZiA+IG1pbiB8fCBkaWYgPCAtbWluKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9hZGRUd2Vlbih0YXJnZXQsIHAsIHN0YXJ0LCBzdGFydCArIGRpZiwgcCk7XG5cdFx0XHRcdFx0XHR0aGlzLl9vdmVyd3JpdGVQcm9wcy5wdXNoKHApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdC8vY2FsbGVkIGVhY2ggdGltZSB0aGUgdmFsdWVzIHNob3VsZCBiZSB1cGRhdGVkLCBhbmQgdGhlIHJhdGlvIGdldHMgcGFzc2VkIGFzIHRoZSBvbmx5IHBhcmFtZXRlciAodHlwaWNhbGx5IGl0J3MgYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEsIGJ1dCBpdCBjYW4gZXhjZWVkIHRob3NlIHdoZW4gdXNpbmcgYW4gZWFzZSBsaWtlIEVsYXN0aWMuZWFzZU91dCBvciBCYWNrLmVhc2VPdXQsIGV0Yy4pXG5cdFx0c2V0OiBmdW5jdGlvbihyYXRpbykge1xuXHRcdFx0dmFyIHB0O1xuXHRcdFx0aWYgKHJhdGlvICE9PSAxKSB7XG5cdFx0XHRcdHRoaXMuX3N1cGVyLnNldFJhdGlvLmNhbGwodGhpcywgcmF0aW8pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHQgPSB0aGlzLl9maXJzdFBUO1xuXHRcdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0XHRpZiAocHQuZikge1xuXHRcdFx0XHRcdFx0cHQudFtwdC5wXSh0aGlzLmZpbmFsc1twdC5wXSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSB0aGlzLmZpbmFsc1twdC5wXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHR9KTtcblxuRGlyZWN0aW9uYWxSb3RhdGlvblBsdWdpbi5fYXV0b0NTUyA9IHRydWU7XG5cbmV4cG9ydCB7IERpcmVjdGlvbmFsUm90YXRpb25QbHVnaW4gYXMgZGVmYXVsdCB9OyIsIi8qIVxuICogVkVSU0lPTjogMi4xLjNcbiAqIERBVEU6IDIwMTktMDUtMTdcbiAqIFVQREFURVMgQU5EIERPQ1MgQVQ6IGh0dHA6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDA4LTIwMTksIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgd29yayBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIHNvZnR3YXJlIGFncmVlbWVudCB0aGF0IHdhcyBpc3N1ZWQgd2l0aCB5b3VyIG1lbWJlcnNoaXAuXG4gKiBcbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG5pbXBvcnQgVHdlZW5MaXRlLCB7IF9nc1Njb3BlLCBnbG9iYWxzLCBBbmltYXRpb24sIFNpbXBsZVRpbWVsaW5lIH0gZnJvbSBcIi4vVHdlZW5MaXRlLmpzXCI7XG5cbl9nc1Njb3BlLl9nc0RlZmluZShcIlRpbWVsaW5lTGl0ZVwiLCBbXCJjb3JlLkFuaW1hdGlvblwiLFwiY29yZS5TaW1wbGVUaW1lbGluZVwiLFwiVHdlZW5MaXRlXCJdLCBmdW5jdGlvbigpIHtcblxuXHRcdHZhciBUaW1lbGluZUxpdGUgPSBmdW5jdGlvbih2YXJzKSB7XG5cdFx0XHRcdFNpbXBsZVRpbWVsaW5lLmNhbGwodGhpcywgdmFycyk7XG5cdFx0XHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRcdFx0XHR2ID0gc2VsZi52YXJzLFxuXHRcdFx0XHRcdHZhbCwgcDtcblx0XHRcdFx0c2VsZi5fbGFiZWxzID0ge307XG5cdFx0XHRcdHNlbGYuYXV0b1JlbW92ZUNoaWxkcmVuID0gISF2LmF1dG9SZW1vdmVDaGlsZHJlbjtcblx0XHRcdFx0c2VsZi5zbW9vdGhDaGlsZFRpbWluZyA9ICEhdi5zbW9vdGhDaGlsZFRpbWluZztcblx0XHRcdFx0c2VsZi5fc29ydENoaWxkcmVuID0gdHJ1ZTtcblx0XHRcdFx0c2VsZi5fb25VcGRhdGUgPSB2Lm9uVXBkYXRlO1xuXHRcdFx0XHRmb3IgKHAgaW4gdikge1xuXHRcdFx0XHRcdHZhbCA9IHZbcF07XG5cdFx0XHRcdFx0aWYgKF9pc0FycmF5KHZhbCkpIGlmICh2YWwuam9pbihcIlwiKS5pbmRleE9mKFwie3NlbGZ9XCIpICE9PSAtMSkge1xuXHRcdFx0XHRcdFx0dltwXSA9IHNlbGYuX3N3YXBTZWxmSW5QYXJhbXModmFsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKF9pc0FycmF5KHYudHdlZW5zKSkge1xuXHRcdFx0XHRcdHNlbGYuYWRkKHYudHdlZW5zLCAwLCB2LmFsaWduLCB2LnN0YWdnZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0X3RpbnlOdW0gPSAwLjAwMDAwMDAxLFxuXHRcdFx0VHdlZW5MaXRlSW50ZXJuYWxzID0gVHdlZW5MaXRlLl9pbnRlcm5hbHMsXG5cdFx0XHRfaW50ZXJuYWxzID0gVGltZWxpbmVMaXRlLl9pbnRlcm5hbHMgPSB7fSxcblx0XHRcdF9pc1NlbGVjdG9yID0gVHdlZW5MaXRlSW50ZXJuYWxzLmlzU2VsZWN0b3IsXG5cdFx0XHRfaXNBcnJheSA9IFR3ZWVuTGl0ZUludGVybmFscy5pc0FycmF5LFxuXHRcdFx0X2xhenlUd2VlbnMgPSBUd2VlbkxpdGVJbnRlcm5hbHMubGF6eVR3ZWVucyxcblx0XHRcdF9sYXp5UmVuZGVyID0gVHdlZW5MaXRlSW50ZXJuYWxzLmxhenlSZW5kZXIsXG5cdFx0XHRfZ2xvYmFscyA9IF9nc1Njb3BlLl9nc0RlZmluZS5nbG9iYWxzLFxuXHRcdFx0X2NvcHkgPSBmdW5jdGlvbih2YXJzKSB7XG5cdFx0XHRcdHZhciBjb3B5ID0ge30sIHA7XG5cdFx0XHRcdGZvciAocCBpbiB2YXJzKSB7XG5cdFx0XHRcdFx0Y29weVtwXSA9IHZhcnNbcF07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGNvcHk7XG5cdFx0XHR9LFxuXHRcdFx0X2FwcGx5Q3ljbGUgPSBmdW5jdGlvbih2YXJzLCB0YXJnZXRzLCBpKSB7XG5cdFx0XHRcdHZhciBhbHQgPSB2YXJzLmN5Y2xlLFxuXHRcdFx0XHRcdHAsIHZhbDtcblx0XHRcdFx0Zm9yIChwIGluIGFsdCkge1xuXHRcdFx0XHRcdHZhbCA9IGFsdFtwXTtcblx0XHRcdFx0XHR2YXJzW3BdID0gKHR5cGVvZih2YWwpID09PSBcImZ1bmN0aW9uXCIpID8gdmFsKGksIHRhcmdldHNbaV0sIHRhcmdldHMpIDogdmFsW2kgJSB2YWwubGVuZ3RoXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWxldGUgdmFycy5jeWNsZTtcblx0XHRcdH0sXG5cdFx0XHRfcGF1c2VDYWxsYmFjayA9IF9pbnRlcm5hbHMucGF1c2VDYWxsYmFjayA9IGZ1bmN0aW9uKCkge30sXG5cdFx0XHRfc2xpY2UgPSBmdW5jdGlvbihhKSB7IC8vZG9uJ3QgdXNlIFtdLnNsaWNlIGJlY2F1c2UgdGhhdCBkb2Vzbid0IHdvcmsgaW4gSUU4IHdpdGggYSBOb2RlTGlzdCB0aGF0J3MgcmV0dXJuZWQgYnkgcXVlcnlTZWxlY3RvckFsbCgpXG5cdFx0XHRcdHZhciBiID0gW10sXG5cdFx0XHRcdFx0bCA9IGEubGVuZ3RoLFxuXHRcdFx0XHRcdGk7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgIT09IGw7IGIucHVzaChhW2krK10pKTtcblx0XHRcdFx0cmV0dXJuIGI7XG5cdFx0XHR9LFxuXHRcdFx0X2RlZmF1bHRJbW1lZGlhdGVSZW5kZXIgPSBmdW5jdGlvbih0bCwgdG9WYXJzLCBmcm9tVmFycywgZGVmYXVsdEZhbHNlKSB7IC8vZGVmYXVsdCB0byBpbW1lZGlhdGVSZW5kZXI6dHJ1ZSB1bmxlc3Mgb3RoZXJ3aXNlIHNldCBpbiB0b1ZhcnMsIGZyb21WYXJzIG9yIGlmIGRlZmF1bHRGYWxzZSBpcyBwYXNzZWQgaW4gYXMgdHJ1ZVxuXHRcdFx0XHR2YXIgaXIgPSBcImltbWVkaWF0ZVJlbmRlclwiO1xuXHRcdFx0XHRpZiAoIShpciBpbiB0b1ZhcnMpKSB7XG5cdFx0XHRcdFx0dG9WYXJzW2lyXSA9ICEoKGZyb21WYXJzICYmIGZyb21WYXJzW2lyXSA9PT0gZmFsc2UpIHx8IGRlZmF1bHRGYWxzZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRvVmFycztcblx0XHRcdH0sXG5cdFx0XHQvL2ZvciBkaXN0cmlidXRpbmcgdmFsdWVzIGFjcm9zcyBhbiBhcnJheS4gQ2FuIGFjY2VwdCBhIG51bWJlciwgYSBmdW5jdGlvbiBvciAobW9zdCBjb21tb25seSkgYSBmdW5jdGlvbiB3aGljaCBjYW4gY29udGFpbiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6IHtiYXNlLCBhbW91bnQsIGZyb20sIGVhc2UsIGdyaWQsIGF4aXMsIGxlbmd0aCwgZWFjaH0uIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGV4cGVjdHMgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOiBpbmRleCwgdGFyZ2V0LCBhcnJheS4gUmVjb2duaXplcyB0aGUgZm9sbG93aW5nXG5cdFx0XHRfZGlzdHJpYnV0ZSA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0aWYgKHR5cGVvZih2KSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHY7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIHZhcnMgPSAodHlwZW9mKHYpID09PSBcIm9iamVjdFwiKSA/IHYgOiB7ZWFjaDp2fSwgLy9uOjEgaXMganVzdCB0byBpbmRpY2F0ZSB2IHdhcyBhIG51bWJlcjsgd2UgbGV2ZXJhZ2UgdGhhdCBsYXRlciB0byBzZXQgdiBhY2NvcmRpbmcgdG8gdGhlIGxlbmd0aCB3ZSBnZXQuIElmIGEgbnVtYmVyIGlzIHBhc3NlZCBpbiwgd2UgdHJlYXQgaXQgbGlrZSB0aGUgb2xkIHN0YWdnZXIgdmFsdWUgd2hlcmUgMC4xLCBmb3IgZXhhbXBsZSwgd291bGQgbWVhbiB0aGF0IHRoaW5ncyB3b3VsZCBiZSBkaXN0cmlidXRlZCB3aXRoIDAuMSBiZXR3ZWVuIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkgcmF0aGVyIHRoYW4gYSB0b3RhbCBcImFtb3VudFwiIHRoYXQncyBjaHVua2VkIG91dCBhbW9uZyB0aGVtIGFsbC5cblx0XHRcdFx0XHRlYXNlID0gdmFycy5lYXNlLFxuXHRcdFx0XHRcdGZyb20gPSB2YXJzLmZyb20gfHwgMCxcblx0XHRcdFx0XHRiYXNlID0gdmFycy5iYXNlIHx8IDAsXG5cdFx0XHRcdFx0Y2FjaGUgPSB7fSxcblx0XHRcdFx0XHRpc0Zyb21LZXl3b3JkID0gaXNOYU4oZnJvbSksXG5cdFx0XHRcdFx0YXhpcyA9IHZhcnMuYXhpcyxcblx0XHRcdFx0XHRyYXRpbyA9IHtjZW50ZXI6MC41LCBlbmQ6MX1bZnJvbV0gfHwgMDtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGksIHRhcmdldCwgYSkge1xuXHRcdFx0XHRcdHZhciBsID0gKGEgfHwgdmFycykubGVuZ3RoLFxuXHRcdFx0XHRcdFx0ZGlzdGFuY2VzID0gY2FjaGVbbF0sXG5cdFx0XHRcdFx0XHRvcmlnaW5YLCBvcmlnaW5ZLCB4LCB5LCBkLCBqLCBtYXgsIG1pbiwgd3JhcDtcblx0XHRcdFx0XHRpZiAoIWRpc3RhbmNlcykge1xuXHRcdFx0XHRcdFx0d3JhcCA9ICh2YXJzLmdyaWQgPT09IFwiYXV0b1wiKSA/IDAgOiAodmFycy5ncmlkIHx8IFtJbmZpbml0eV0pWzBdO1xuXHRcdFx0XHRcdFx0aWYgKCF3cmFwKSB7XG5cdFx0XHRcdFx0XHRcdG1heCA9IC1JbmZpbml0eTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKG1heCA8IChtYXggPSBhW3dyYXArK10uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCkgJiYgd3JhcCA8IGwpIHsgfVxuXHRcdFx0XHRcdFx0XHR3cmFwLS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRkaXN0YW5jZXMgPSBjYWNoZVtsXSA9IFtdO1xuXHRcdFx0XHRcdFx0b3JpZ2luWCA9IGlzRnJvbUtleXdvcmQgPyAoTWF0aC5taW4od3JhcCwgbCkgKiByYXRpbykgLSAwLjUgOiBmcm9tICUgd3JhcDtcblx0XHRcdFx0XHRcdG9yaWdpblkgPSBpc0Zyb21LZXl3b3JkID8gbCAqIHJhdGlvIC8gd3JhcCAtIDAuNSA6IChmcm9tIC8gd3JhcCkgfCAwO1xuXHRcdFx0XHRcdFx0bWF4ID0gMDtcblx0XHRcdFx0XHRcdG1pbiA9IEluZmluaXR5O1xuXHRcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IGw7IGorKykge1xuXHRcdFx0XHRcdFx0XHR4ID0gKGogJSB3cmFwKSAtIG9yaWdpblg7XG5cdFx0XHRcdFx0XHRcdHkgPSBvcmlnaW5ZIC0gKChqIC8gd3JhcCkgfCAwKTtcblx0XHRcdFx0XHRcdFx0ZGlzdGFuY2VzW2pdID0gZCA9ICFheGlzID8gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpIDogTWF0aC5hYnMoKGF4aXMgPT09IFwieVwiKSA/IHkgOiB4KTtcblx0XHRcdFx0XHRcdFx0aWYgKGQgPiBtYXgpIHtcblx0XHRcdFx0XHRcdFx0XHRtYXggPSBkO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChkIDwgbWluKSB7XG5cdFx0XHRcdFx0XHRcdFx0bWluID0gZDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZGlzdGFuY2VzLm1heCA9IG1heCAtIG1pbjtcblx0XHRcdFx0XHRcdGRpc3RhbmNlcy5taW4gPSBtaW47XG5cdFx0XHRcdFx0XHRkaXN0YW5jZXMudiA9IGwgPSB2YXJzLmFtb3VudCB8fCAodmFycy5lYWNoICogKHdyYXAgPiBsID8gbCAtIDEgOiAhYXhpcyA/IE1hdGgubWF4KHdyYXAsIGwgLyB3cmFwKSA6IGF4aXMgPT09IFwieVwiID8gbCAvIHdyYXAgOiB3cmFwKSkgfHwgMDtcblx0XHRcdFx0XHRcdGRpc3RhbmNlcy5iID0gKGwgPCAwKSA/IGJhc2UgLSBsIDogYmFzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bCA9IChkaXN0YW5jZXNbaV0gLSBkaXN0YW5jZXMubWluKSAvIGRpc3RhbmNlcy5tYXg7XG5cdFx0XHRcdFx0cmV0dXJuIGRpc3RhbmNlcy5iICsgKGVhc2UgPyBlYXNlLmdldFJhdGlvKGwpIDogbCkgKiBkaXN0YW5jZXMudjtcblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cdFx0XHRwID0gVGltZWxpbmVMaXRlLnByb3RvdHlwZSA9IG5ldyBTaW1wbGVUaW1lbGluZSgpO1xuXG5cdFx0VGltZWxpbmVMaXRlLnZlcnNpb24gPSBcIjIuMS4zXCI7XG5cdFx0VGltZWxpbmVMaXRlLmRpc3RyaWJ1dGUgPSBfZGlzdHJpYnV0ZTtcblx0XHRwLmNvbnN0cnVjdG9yID0gVGltZWxpbmVMaXRlO1xuXHRcdHAua2lsbCgpLl9nYyA9IHAuX2ZvcmNpbmdQbGF5aGVhZCA9IHAuX2hhc1BhdXNlID0gZmFsc2U7XG5cblx0XHQvKiBtaWdodCB1c2UgbGF0ZXIuLi5cblx0XHQvL3RyYW5zbGF0ZXMgYSBsb2NhbCB0aW1lIGluc2lkZSBhbiBhbmltYXRpb24gdG8gdGhlIGNvcnJlc3BvbmRpbmcgdGltZSBvbiB0aGUgcm9vdC9nbG9iYWwgdGltZWxpbmUsIGZhY3RvcmluZyBpbiBhbGwgbmVzdGluZyBhbmQgdGltZVNjYWxlcy5cblx0XHRmdW5jdGlvbiBsb2NhbFRvR2xvYmFsKHRpbWUsIGFuaW1hdGlvbikge1xuXHRcdFx0d2hpbGUgKGFuaW1hdGlvbikge1xuXHRcdFx0XHR0aW1lID0gKHRpbWUgLyBhbmltYXRpb24uX3RpbWVTY2FsZSkgKyBhbmltYXRpb24uX3N0YXJ0VGltZTtcblx0XHRcdFx0YW5pbWF0aW9uID0gYW5pbWF0aW9uLnRpbWVsaW5lO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRpbWU7XG5cdFx0fVxuXG5cdFx0Ly90cmFuc2xhdGVzIHRoZSBzdXBwbGllZCB0aW1lIG9uIHRoZSByb290L2dsb2JhbCB0aW1lbGluZSBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIGxvY2FsIHRpbWUgaW5zaWRlIGEgcGFydGljdWxhciBhbmltYXRpb24sIGZhY3RvcmluZyBpbiBhbGwgbmVzdGluZyBhbmQgdGltZVNjYWxlc1xuXHRcdGZ1bmN0aW9uIGdsb2JhbFRvTG9jYWwodGltZSwgYW5pbWF0aW9uKSB7XG5cdFx0XHR2YXIgc2NhbGUgPSAxO1xuXHRcdFx0dGltZSAtPSBsb2NhbFRvR2xvYmFsKDAsIGFuaW1hdGlvbik7XG5cdFx0XHR3aGlsZSAoYW5pbWF0aW9uKSB7XG5cdFx0XHRcdHNjYWxlICo9IGFuaW1hdGlvbi5fdGltZVNjYWxlO1xuXHRcdFx0XHRhbmltYXRpb24gPSBhbmltYXRpb24udGltZWxpbmU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGltZSAqIHNjYWxlO1xuXHRcdH1cblx0XHQqL1xuXG5cdFx0cC50byA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIHZhcnMsIHBvc2l0aW9uKSB7XG5cdFx0XHR2YXIgRW5naW5lID0gKHZhcnMucmVwZWF0ICYmIF9nbG9iYWxzLlR3ZWVuTWF4KSB8fCBUd2VlbkxpdGU7XG5cdFx0XHRyZXR1cm4gZHVyYXRpb24gPyB0aGlzLmFkZCggbmV3IEVuZ2luZSh0YXJnZXQsIGR1cmF0aW9uLCB2YXJzKSwgcG9zaXRpb24pIDogdGhpcy5zZXQodGFyZ2V0LCB2YXJzLCBwb3NpdGlvbik7XG5cdFx0fTtcblxuXHRcdHAuZnJvbSA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIHZhcnMsIHBvc2l0aW9uKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGQoICgodmFycy5yZXBlYXQgJiYgX2dsb2JhbHMuVHdlZW5NYXgpIHx8IFR3ZWVuTGl0ZSkuZnJvbSh0YXJnZXQsIGR1cmF0aW9uLCBfZGVmYXVsdEltbWVkaWF0ZVJlbmRlcih0aGlzLCB2YXJzKSksIHBvc2l0aW9uKTtcblx0XHR9O1xuXG5cdFx0cC5mcm9tVG8gPSBmdW5jdGlvbih0YXJnZXQsIGR1cmF0aW9uLCBmcm9tVmFycywgdG9WYXJzLCBwb3NpdGlvbikge1xuXHRcdFx0dmFyIEVuZ2luZSA9ICh0b1ZhcnMucmVwZWF0ICYmIF9nbG9iYWxzLlR3ZWVuTWF4KSB8fCBUd2VlbkxpdGU7XG5cdFx0XHR0b1ZhcnMgPSBfZGVmYXVsdEltbWVkaWF0ZVJlbmRlcih0aGlzLCB0b1ZhcnMsIGZyb21WYXJzKTtcblx0XHRcdHJldHVybiBkdXJhdGlvbiA/IHRoaXMuYWRkKCBFbmdpbmUuZnJvbVRvKHRhcmdldCwgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMpLCBwb3NpdGlvbikgOiB0aGlzLnNldCh0YXJnZXQsIHRvVmFycywgcG9zaXRpb24pO1xuXHRcdH07XG5cblx0XHRwLnN0YWdnZXJUbyA9IGZ1bmN0aW9uKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcywgb25Db21wbGV0ZUFsbFNjb3BlKSB7XG5cdFx0XHR2YXIgdGwgPSBuZXcgVGltZWxpbmVMaXRlKHtvbkNvbXBsZXRlOm9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVQYXJhbXM6b25Db21wbGV0ZUFsbFBhcmFtcywgY2FsbGJhY2tTY29wZTpvbkNvbXBsZXRlQWxsU2NvcGUsIHNtb290aENoaWxkVGltaW5nOnRoaXMuc21vb3RoQ2hpbGRUaW1pbmd9KSxcblx0XHRcdFx0c3RhZ2dlckZ1bmMgPSBfZGlzdHJpYnV0ZSh2YXJzLnN0YWdnZXIgfHwgc3RhZ2dlciksXG5cdFx0XHRcdHN0YXJ0QXQgPSB2YXJzLnN0YXJ0QXQsXG5cdFx0XHRcdGN5Y2xlID0gdmFycy5jeWNsZSxcblx0XHRcdFx0Y29weSwgaTtcblx0XHRcdGlmICh0eXBlb2YodGFyZ2V0cykgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0dGFyZ2V0cyA9IFR3ZWVuTGl0ZS5zZWxlY3Rvcih0YXJnZXRzKSB8fCB0YXJnZXRzO1xuXHRcdFx0fVxuXHRcdFx0dGFyZ2V0cyA9IHRhcmdldHMgfHwgW107XG5cdFx0XHRpZiAoX2lzU2VsZWN0b3IodGFyZ2V0cykpIHsgLy9pZiB0aGUgdGFyZ2V0cyBvYmplY3QgaXMgYSBzZWxlY3RvciwgdHJhbnNsYXRlIGl0IGludG8gYW4gYXJyYXkuXG5cdFx0XHRcdHRhcmdldHMgPSBfc2xpY2UodGFyZ2V0cyk7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjb3B5ID0gX2NvcHkodmFycyk7XG5cdFx0XHRcdGlmIChzdGFydEF0KSB7XG5cdFx0XHRcdFx0Y29weS5zdGFydEF0ID0gX2NvcHkoc3RhcnRBdCk7XG5cdFx0XHRcdFx0aWYgKHN0YXJ0QXQuY3ljbGUpIHtcblx0XHRcdFx0XHRcdF9hcHBseUN5Y2xlKGNvcHkuc3RhcnRBdCwgdGFyZ2V0cywgaSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChjeWNsZSkge1xuXHRcdFx0XHRcdF9hcHBseUN5Y2xlKGNvcHksIHRhcmdldHMsIGkpO1xuXHRcdFx0XHRcdGlmIChjb3B5LmR1cmF0aW9uICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdGR1cmF0aW9uID0gY29weS5kdXJhdGlvbjtcblx0XHRcdFx0XHRcdGRlbGV0ZSBjb3B5LmR1cmF0aW9uO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR0bC50byh0YXJnZXRzW2ldLCBkdXJhdGlvbiwgY29weSwgc3RhZ2dlckZ1bmMoaSwgdGFyZ2V0c1tpXSwgdGFyZ2V0cykpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuYWRkKHRsLCBwb3NpdGlvbik7XG5cdFx0fTtcblxuXHRcdHAuc3RhZ2dlckZyb20gPSBmdW5jdGlvbih0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMsIG9uQ29tcGxldGVBbGxTY29wZSkge1xuXHRcdFx0dmFycy5ydW5CYWNrd2FyZHMgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCBfZGVmYXVsdEltbWVkaWF0ZVJlbmRlcih0aGlzLCB2YXJzKSwgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMsIG9uQ29tcGxldGVBbGxTY29wZSk7XG5cdFx0fTtcblxuXHRcdHAuc3RhZ2dlckZyb21UbyA9IGZ1bmN0aW9uKHRhcmdldHMsIGR1cmF0aW9uLCBmcm9tVmFycywgdG9WYXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcywgb25Db21wbGV0ZUFsbFNjb3BlKSB7XG5cdFx0XHR0b1ZhcnMuc3RhcnRBdCA9IGZyb21WYXJzO1xuXHRcdFx0cmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCBfZGVmYXVsdEltbWVkaWF0ZVJlbmRlcih0aGlzLCB0b1ZhcnMsIGZyb21WYXJzKSwgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMsIG9uQ29tcGxldGVBbGxTY29wZSk7XG5cdFx0fTtcblxuXHRcdHAuY2FsbCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlLCBwb3NpdGlvbikge1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkKCBUd2VlbkxpdGUuZGVsYXllZENhbGwoMCwgY2FsbGJhY2ssIHBhcmFtcywgc2NvcGUpLCBwb3NpdGlvbik7XG5cdFx0fTtcblxuXHRcdHAuc2V0ID0gZnVuY3Rpb24odGFyZ2V0LCB2YXJzLCBwb3NpdGlvbikge1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkKCBuZXcgVHdlZW5MaXRlKHRhcmdldCwgMCwgX2RlZmF1bHRJbW1lZGlhdGVSZW5kZXIodGhpcywgdmFycywgbnVsbCwgdHJ1ZSkpLCBwb3NpdGlvbik7XG5cdFx0fTtcblxuXHRcdFRpbWVsaW5lTGl0ZS5leHBvcnRSb290ID0gZnVuY3Rpb24odmFycywgaWdub3JlRGVsYXllZENhbGxzKSB7XG5cdFx0XHR2YXJzID0gdmFycyB8fCB7fTtcblx0XHRcdGlmICh2YXJzLnNtb290aENoaWxkVGltaW5nID09IG51bGwpIHtcblx0XHRcdFx0dmFycy5zbW9vdGhDaGlsZFRpbWluZyA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHR2YXIgdGwgPSBuZXcgVGltZWxpbmVMaXRlKHZhcnMpLFxuXHRcdFx0XHRyb290ID0gdGwuX3RpbWVsaW5lLFxuXHRcdFx0XHRoYXNOZWdhdGl2ZVN0YXJ0LCB0aW1lLFx0dHdlZW4sIG5leHQ7XG5cdFx0XHRpZiAoaWdub3JlRGVsYXllZENhbGxzID09IG51bGwpIHtcblx0XHRcdFx0aWdub3JlRGVsYXllZENhbGxzID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHJvb3QuX3JlbW92ZSh0bCwgdHJ1ZSk7XG5cdFx0XHR0bC5fc3RhcnRUaW1lID0gMDtcblx0XHRcdHRsLl9yYXdQcmV2VGltZSA9IHRsLl90aW1lID0gdGwuX3RvdGFsVGltZSA9IHJvb3QuX3RpbWU7XG5cdFx0XHR0d2VlbiA9IHJvb3QuX2ZpcnN0O1xuXHRcdFx0d2hpbGUgKHR3ZWVuKSB7XG5cdFx0XHRcdG5leHQgPSB0d2Vlbi5fbmV4dDtcblx0XHRcdFx0aWYgKCFpZ25vcmVEZWxheWVkQ2FsbHMgfHwgISh0d2VlbiBpbnN0YW5jZW9mIFR3ZWVuTGl0ZSAmJiB0d2Vlbi50YXJnZXQgPT09IHR3ZWVuLnZhcnMub25Db21wbGV0ZSkpIHtcblx0XHRcdFx0XHR0aW1lID0gdHdlZW4uX3N0YXJ0VGltZSAtIHR3ZWVuLl9kZWxheTtcblx0XHRcdFx0XHRpZiAodGltZSA8IDApIHtcblx0XHRcdFx0XHRcdGhhc05lZ2F0aXZlU3RhcnQgPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0bC5hZGQodHdlZW4sIHRpbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHR3ZWVuID0gbmV4dDtcblx0XHRcdH1cblx0XHRcdHJvb3QuYWRkKHRsLCAwKTtcblx0XHRcdGlmIChoYXNOZWdhdGl2ZVN0YXJ0KSB7IC8vY2FsbGluZyB0b3RhbER1cmF0aW9uKCkgd2lsbCBmb3JjZSB0aGUgYWRqdXN0bWVudCBuZWNlc3NhcnkgdG8gc2hpZnQgdGhlIGNoaWxkcmVuIGZvcndhcmQgc28gbm9uZSBvZiB0aGVtIHN0YXJ0IGJlZm9yZSB6ZXJvLCBhbmQgbW92ZXMgdGhlIHRpbWVsaW5lIGJhY2t3YXJkcyB0aGUgc2FtZSBhbW91bnQsIHNvIHRoZSBwbGF5aGVhZCBpcyBzdGlsbCBhbGlnbmVkIHdoZXJlIGl0IHNob3VsZCBiZSBnbG9iYWxseSwgYnV0IHRoZSB0aW1lbGluZSBkb2Vzbid0IGhhdmUgaWxsZWdhbCBjaGlsZHJlbiB0aGF0IHN0YXJ0IGJlZm9yZSB6ZXJvLlxuXHRcdFx0XHR0bC50b3RhbER1cmF0aW9uKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGw7XG5cdFx0fTtcblxuXHRcdHAuYWRkID0gZnVuY3Rpb24odmFsdWUsIHBvc2l0aW9uLCBhbGlnbiwgc3RhZ2dlcikge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdFx0XHRjdXJUaW1lLCBsLCBpLCBjaGlsZCwgdGwsIGJlZm9yZVJhd1RpbWU7XG5cdFx0XHRpZiAodHlwZW9mKHBvc2l0aW9uKSAhPT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHRwb3NpdGlvbiA9IHNlbGYuX3BhcnNlVGltZU9yTGFiZWwocG9zaXRpb24sIDAsIHRydWUsIHZhbHVlKTtcblx0XHRcdH1cblx0XHRcdGlmICghKHZhbHVlIGluc3RhbmNlb2YgQW5pbWF0aW9uKSkge1xuXHRcdFx0XHRpZiAoKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHx8ICh2YWx1ZSAmJiB2YWx1ZS5wdXNoICYmIF9pc0FycmF5KHZhbHVlKSkpIHtcblx0XHRcdFx0XHRhbGlnbiA9IGFsaWduIHx8IFwibm9ybWFsXCI7XG5cdFx0XHRcdFx0c3RhZ2dlciA9IHN0YWdnZXIgfHwgMDtcblx0XHRcdFx0XHRjdXJUaW1lID0gcG9zaXRpb247XG5cdFx0XHRcdFx0bCA9IHZhbHVlLmxlbmd0aDtcblx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRpZiAoX2lzQXJyYXkoY2hpbGQgPSB2YWx1ZVtpXSkpIHtcblx0XHRcdFx0XHRcdFx0Y2hpbGQgPSBuZXcgVGltZWxpbmVMaXRlKHt0d2VlbnM6Y2hpbGR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHNlbGYuYWRkKGNoaWxkLCBjdXJUaW1lKTtcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YoY2hpbGQpICE9PSBcInN0cmluZ1wiICYmIHR5cGVvZihjaGlsZCkgIT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0XHRpZiAoYWxpZ24gPT09IFwic2VxdWVuY2VcIikge1xuXHRcdFx0XHRcdFx0XHRcdGN1clRpbWUgPSBjaGlsZC5fc3RhcnRUaW1lICsgKGNoaWxkLnRvdGFsRHVyYXRpb24oKSAvIGNoaWxkLl90aW1lU2NhbGUpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGFsaWduID09PSBcInN0YXJ0XCIpIHtcblx0XHRcdFx0XHRcdFx0XHRjaGlsZC5fc3RhcnRUaW1lIC09IGNoaWxkLmRlbGF5KCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGN1clRpbWUgKz0gc3RhZ2dlcjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHNlbGYuX3VuY2FjaGUodHJ1ZSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdHJldHVybiBzZWxmLmFkZExhYmVsKHZhbHVlLCBwb3NpdGlvbik7XG5cdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBUd2VlbkxpdGUuZGVsYXllZENhbGwoMCwgdmFsdWUpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm93KFwiQ2Fubm90IGFkZCBcIiArIHZhbHVlICsgXCIgaW50byB0aGUgdGltZWxpbmU7IGl0IGlzIG5vdCBhIHR3ZWVuLCB0aW1lbGluZSwgZnVuY3Rpb24sIG9yIHN0cmluZy5cIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0U2ltcGxlVGltZWxpbmUucHJvdG90eXBlLmFkZC5jYWxsKHNlbGYsIHZhbHVlLCBwb3NpdGlvbik7XG5cblx0XHRcdGlmICh2YWx1ZS5fdGltZSB8fCAoIXZhbHVlLl9kdXJhdGlvbiAmJiB2YWx1ZS5faW5pdHRlZCkpIHsgLy9pbiBjYXNlLCBmb3IgZXhhbXBsZSwgdGhlIF9zdGFydFRpbWUgaXMgbW92ZWQgb24gYSB0d2VlbiB0aGF0IGhhcyBhbHJlYWR5IHJlbmRlcmVkLiBJbWFnaW5lIGl0J3MgYXQgaXRzIGVuZCBzdGF0ZSwgdGhlbiB0aGUgc3RhcnRUaW1lIGlzIG1vdmVkIFdBWSBsYXRlciAoYWZ0ZXIgdGhlIGVuZCBvZiB0aGlzIHRpbWVsaW5lKSwgaXQgc2hvdWxkIHJlbmRlciBhdCBpdHMgYmVnaW5uaW5nLlxuXHRcdFx0XHRjdXJUaW1lID0gKHNlbGYucmF3VGltZSgpIC0gdmFsdWUuX3N0YXJ0VGltZSkgKiB2YWx1ZS5fdGltZVNjYWxlO1xuXHRcdFx0XHRpZiAoIXZhbHVlLl9kdXJhdGlvbiB8fCBNYXRoLmFicyhNYXRoLm1heCgwLCBNYXRoLm1pbih2YWx1ZS50b3RhbER1cmF0aW9uKCksIGN1clRpbWUpKSkgLSB2YWx1ZS5fdG90YWxUaW1lID4gMC4wMDAwMSkge1xuXHRcdFx0XHRcdHZhbHVlLnJlbmRlcihjdXJUaW1lLCBmYWxzZSwgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vaWYgdGhlIHRpbWVsaW5lIGhhcyBhbHJlYWR5IGVuZGVkIGJ1dCB0aGUgaW5zZXJ0ZWQgdHdlZW4vdGltZWxpbmUgZXh0ZW5kcyB0aGUgZHVyYXRpb24sIHdlIHNob3VsZCBlbmFibGUgdGhpcyB0aW1lbGluZSBhZ2FpbiBzbyB0aGF0IGl0IHJlbmRlcnMgcHJvcGVybHkuIFdlIHNob3VsZCBhbHNvIGFsaWduIHRoZSBwbGF5aGVhZCB3aXRoIHRoZSBwYXJlbnQgdGltZWxpbmUncyB3aGVuIGFwcHJvcHJpYXRlLlxuXHRcdFx0aWYgKHNlbGYuX2djIHx8IHNlbGYuX3RpbWUgPT09IHNlbGYuX2R1cmF0aW9uKSBpZiAoIXNlbGYuX3BhdXNlZCkgaWYgKHNlbGYuX2R1cmF0aW9uIDwgc2VsZi5kdXJhdGlvbigpKSB7XG5cdFx0XHRcdC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9ycyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQuLi5cblx0XHRcdFx0dGwgPSBzZWxmO1xuXHRcdFx0XHRiZWZvcmVSYXdUaW1lID0gKHRsLnJhd1RpbWUoKSA+IHZhbHVlLl9zdGFydFRpbWUpOyAvL2lmIHRoZSB0d2VlbiBpcyBwbGFjZWQgb24gdGhlIHRpbWVsaW5lIHNvIHRoYXQgaXQgc3RhcnRzIEJFRk9SRSB0aGUgY3VycmVudCByYXdUaW1lLCB3ZSBzaG91bGQgYWxpZ24gdGhlIHBsYXloZWFkIChtb3ZlIHRoZSB0aW1lbGluZSkuIFRoaXMgaXMgYmVjYXVzZSBzb21ldGltZXMgdXNlcnMgd2lsbCBjcmVhdGUgYSB0aW1lbGluZSwgbGV0IGl0IGZpbmlzaCwgYW5kIG11Y2ggbGF0ZXIgYXBwZW5kIGEgdHdlZW4gYW5kIGV4cGVjdCBpdCB0byBydW4gaW5zdGVhZCBvZiBqdW1waW5nIHRvIGl0cyBlbmQgc3RhdGUuIFdoaWxlIHRlY2huaWNhbGx5IG9uZSBjb3VsZCBhcmd1ZSB0aGF0IGl0IHNob3VsZCBqdW1wIHRvIGl0cyBlbmQgc3RhdGUsIHRoYXQncyBub3Qgd2hhdCB1c2VycyBpbnR1aXRpdmVseSBleHBlY3QuXG5cdFx0XHRcdHdoaWxlICh0bC5fdGltZWxpbmUpIHtcblx0XHRcdFx0XHRpZiAoYmVmb3JlUmF3VGltZSAmJiB0bC5fdGltZWxpbmUuc21vb3RoQ2hpbGRUaW1pbmcpIHtcblx0XHRcdFx0XHRcdHRsLnRvdGFsVGltZSh0bC5fdG90YWxUaW1lLCB0cnVlKTsgLy9tb3ZlcyB0aGUgdGltZWxpbmUgKHNoaWZ0cyBpdHMgc3RhcnRUaW1lKSBpZiBuZWNlc3NhcnksIGFuZCBhbHNvIGVuYWJsZXMgaXQuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0bC5fZ2MpIHtcblx0XHRcdFx0XHRcdHRsLl9lbmFibGVkKHRydWUsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGwgPSB0bC5fdGltZWxpbmU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNlbGY7XG5cdFx0fTtcblxuXHRcdHAucmVtb3ZlID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFuaW1hdGlvbikge1xuXHRcdFx0XHR0aGlzLl9yZW1vdmUodmFsdWUsIGZhbHNlKTtcblx0XHRcdFx0dmFyIHRsID0gdmFsdWUuX3RpbWVsaW5lID0gdmFsdWUudmFycy51c2VGcmFtZXMgPyBBbmltYXRpb24uX3Jvb3RGcmFtZXNUaW1lbGluZSA6IEFuaW1hdGlvbi5fcm9vdFRpbWVsaW5lOyAvL25vdyB0aGF0IGl0J3MgcmVtb3ZlZCwgZGVmYXVsdCBpdCB0byB0aGUgcm9vdCB0aW1lbGluZSBzbyB0aGF0IGlmIGl0IGdldHMgcGxheWVkIGFnYWluLCBpdCBkb2Vzbid0IGp1bXAgYmFjayBpbnRvIHRoaXMgdGltZWxpbmUuXG5cdFx0XHRcdHZhbHVlLl9zdGFydFRpbWUgPSAodmFsdWUuX3BhdXNlZCA/IHZhbHVlLl9wYXVzZVRpbWUgOiB0bC5fdGltZSkgLSAoKCF2YWx1ZS5fcmV2ZXJzZWQgPyB2YWx1ZS5fdG90YWxUaW1lIDogdmFsdWUudG90YWxEdXJhdGlvbigpIC0gdmFsdWUuX3RvdGFsVGltZSkgLyB2YWx1ZS5fdGltZVNjYWxlKTsgLy9lbnN1cmUgdGhhdCBpZiBpdCBnZXRzIHBsYXllZCBhZ2FpbiwgdGhlIHRpbWluZyBpcyBjb3JyZWN0LlxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSB8fCAodmFsdWUgJiYgdmFsdWUucHVzaCAmJiBfaXNBcnJheSh2YWx1ZSkpKSB7XG5cdFx0XHRcdHZhciBpID0gdmFsdWUubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHR0aGlzLnJlbW92ZSh2YWx1ZVtpXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9IGVsc2UgaWYgKHR5cGVvZih2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMucmVtb3ZlTGFiZWwodmFsdWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMua2lsbChudWxsLCB2YWx1ZSk7XG5cdFx0fTtcblxuXHRcdHAuX3JlbW92ZSA9IGZ1bmN0aW9uKHR3ZWVuLCBza2lwRGlzYWJsZSkge1xuXHRcdFx0U2ltcGxlVGltZWxpbmUucHJvdG90eXBlLl9yZW1vdmUuY2FsbCh0aGlzLCB0d2Vlbiwgc2tpcERpc2FibGUpO1xuXHRcdFx0dmFyIGxhc3QgPSB0aGlzLl9sYXN0O1xuXHRcdFx0aWYgKCFsYXN0KSB7XG5cdFx0XHRcdHRoaXMuX3RpbWUgPSB0aGlzLl90b3RhbFRpbWUgPSB0aGlzLl9kdXJhdGlvbiA9IHRoaXMuX3RvdGFsRHVyYXRpb24gPSAwO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLl90aW1lID4gdGhpcy5kdXJhdGlvbigpKSB7XG5cdFx0XHRcdHRoaXMuX3RpbWUgPSB0aGlzLl9kdXJhdGlvbjtcblx0XHRcdFx0dGhpcy5fdG90YWxUaW1lID0gdGhpcy5fdG90YWxEdXJhdGlvbjtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLmFwcGVuZCA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXRPckxhYmVsKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGQodmFsdWUsIHRoaXMuX3BhcnNlVGltZU9yTGFiZWwobnVsbCwgb2Zmc2V0T3JMYWJlbCwgdHJ1ZSwgdmFsdWUpKTtcblx0XHR9O1xuXG5cdFx0cC5pbnNlcnQgPSBwLmluc2VydE11bHRpcGxlID0gZnVuY3Rpb24odmFsdWUsIHBvc2l0aW9uLCBhbGlnbiwgc3RhZ2dlcikge1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkKHZhbHVlLCBwb3NpdGlvbiB8fCAwLCBhbGlnbiwgc3RhZ2dlcik7XG5cdFx0fTtcblxuXHRcdHAuYXBwZW5kTXVsdGlwbGUgPSBmdW5jdGlvbih0d2VlbnMsIG9mZnNldE9yTGFiZWwsIGFsaWduLCBzdGFnZ2VyKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGQodHdlZW5zLCB0aGlzLl9wYXJzZVRpbWVPckxhYmVsKG51bGwsIG9mZnNldE9yTGFiZWwsIHRydWUsIHR3ZWVucyksIGFsaWduLCBzdGFnZ2VyKTtcblx0XHR9O1xuXG5cdFx0cC5hZGRMYWJlbCA9IGZ1bmN0aW9uKGxhYmVsLCBwb3NpdGlvbikge1xuXHRcdFx0dGhpcy5fbGFiZWxzW2xhYmVsXSA9IHRoaXMuX3BhcnNlVGltZU9yTGFiZWwocG9zaXRpb24pO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHAuYWRkUGF1c2UgPSBmdW5jdGlvbihwb3NpdGlvbiwgY2FsbGJhY2ssIHBhcmFtcywgc2NvcGUpIHtcblx0XHRcdHZhciB0ID0gVHdlZW5MaXRlLmRlbGF5ZWRDYWxsKDAsIF9wYXVzZUNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlIHx8IHRoaXMpO1xuXHRcdFx0dC52YXJzLm9uQ29tcGxldGUgPSB0LnZhcnMub25SZXZlcnNlQ29tcGxldGUgPSBjYWxsYmFjaztcblx0XHRcdHQuZGF0YSA9IFwiaXNQYXVzZVwiO1xuXHRcdFx0dGhpcy5faGFzUGF1c2UgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkKHQsIHBvc2l0aW9uKTtcblx0XHR9O1xuXG5cdFx0cC5yZW1vdmVMYWJlbCA9IGZ1bmN0aW9uKGxhYmVsKSB7XG5cdFx0XHRkZWxldGUgdGhpcy5fbGFiZWxzW2xhYmVsXTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLmdldExhYmVsVGltZSA9IGZ1bmN0aW9uKGxhYmVsKSB7XG5cdFx0XHRyZXR1cm4gKHRoaXMuX2xhYmVsc1tsYWJlbF0gIT0gbnVsbCkgPyB0aGlzLl9sYWJlbHNbbGFiZWxdIDogLTE7XG5cdFx0fTtcblxuXHRcdHAuX3BhcnNlVGltZU9yTGFiZWwgPSBmdW5jdGlvbih0aW1lT3JMYWJlbCwgb2Zmc2V0T3JMYWJlbCwgYXBwZW5kSWZBYnNlbnQsIGlnbm9yZSkge1xuXHRcdFx0dmFyIGNsaXBwZWREdXJhdGlvbiwgaTtcblx0XHRcdC8vaWYgd2UncmUgYWJvdXQgdG8gYWRkIGEgdHdlZW4vdGltZWxpbmUgKG9yIGFuIGFycmF5IG9mIHRoZW0pIHRoYXQncyBhbHJlYWR5IGEgY2hpbGQgb2YgdGhpcyB0aW1lbGluZSwgd2Ugc2hvdWxkIHJlbW92ZSBpdCBmaXJzdCBzbyB0aGF0IGl0IGRvZXNuJ3QgY29udGFtaW5hdGUgdGhlIGR1cmF0aW9uKCkuXG5cdFx0XHRpZiAoaWdub3JlIGluc3RhbmNlb2YgQW5pbWF0aW9uICYmIGlnbm9yZS50aW1lbGluZSA9PT0gdGhpcykge1xuXHRcdFx0XHR0aGlzLnJlbW92ZShpZ25vcmUpO1xuXHRcdFx0fSBlbHNlIGlmIChpZ25vcmUgJiYgKChpZ25vcmUgaW5zdGFuY2VvZiBBcnJheSkgfHwgKGlnbm9yZS5wdXNoICYmIF9pc0FycmF5KGlnbm9yZSkpKSkge1xuXHRcdFx0XHRpID0gaWdub3JlLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0aWYgKGlnbm9yZVtpXSBpbnN0YW5jZW9mIEFuaW1hdGlvbiAmJiBpZ25vcmVbaV0udGltZWxpbmUgPT09IHRoaXMpIHtcblx0XHRcdFx0XHRcdHRoaXMucmVtb3ZlKGlnbm9yZVtpXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRjbGlwcGVkRHVyYXRpb24gPSAodHlwZW9mKHRpbWVPckxhYmVsKSA9PT0gXCJudW1iZXJcIiAmJiAhb2Zmc2V0T3JMYWJlbCkgPyAwIDogKHRoaXMuZHVyYXRpb24oKSA+IDk5OTk5OTk5OTk5KSA/IHRoaXMucmVjZW50KCkuZW5kVGltZShmYWxzZSkgOiB0aGlzLl9kdXJhdGlvbjsgLy9pbiBjYXNlIHRoZXJlJ3MgYSBjaGlsZCB0aGF0IGluZmluaXRlbHkgcmVwZWF0cywgdXNlcnMgYWxtb3N0IG5ldmVyIGludGVuZCBmb3IgdGhlIGluc2VydGlvbiBwb2ludCBvZiBhIG5ldyBjaGlsZCB0byBiZSBiYXNlZCBvbiBhIFNVUEVSIGxvbmcgdmFsdWUgbGlrZSB0aGF0IHNvIHdlIGNsaXAgaXQgYW5kIGFzc3VtZSB0aGUgbW9zdCByZWNlbnRseS1hZGRlZCBjaGlsZCdzIGVuZFRpbWUgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cblx0XHRcdGlmICh0eXBlb2Yob2Zmc2V0T3JMYWJlbCkgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3BhcnNlVGltZU9yTGFiZWwob2Zmc2V0T3JMYWJlbCwgKGFwcGVuZElmQWJzZW50ICYmIHR5cGVvZih0aW1lT3JMYWJlbCkgPT09IFwibnVtYmVyXCIgJiYgdGhpcy5fbGFiZWxzW29mZnNldE9yTGFiZWxdID09IG51bGwpID8gdGltZU9yTGFiZWwgLSBjbGlwcGVkRHVyYXRpb24gOiAwLCBhcHBlbmRJZkFic2VudCk7XG5cdFx0XHR9XG5cdFx0XHRvZmZzZXRPckxhYmVsID0gb2Zmc2V0T3JMYWJlbCB8fCAwO1xuXHRcdFx0aWYgKHR5cGVvZih0aW1lT3JMYWJlbCkgPT09IFwic3RyaW5nXCIgJiYgKGlzTmFOKHRpbWVPckxhYmVsKSB8fCB0aGlzLl9sYWJlbHNbdGltZU9yTGFiZWxdICE9IG51bGwpKSB7IC8vaWYgdGhlIHN0cmluZyBpcyBhIG51bWJlciBsaWtlIFwiMVwiLCBjaGVjayB0byBzZWUgaWYgdGhlcmUncyBhIGxhYmVsIHdpdGggdGhhdCBuYW1lLCBvdGhlcndpc2UgaW50ZXJwcmV0IGl0IGFzIGEgbnVtYmVyIChhYnNvbHV0ZSB2YWx1ZSkuXG5cdFx0XHRcdGkgPSB0aW1lT3JMYWJlbC5pbmRleE9mKFwiPVwiKTtcblx0XHRcdFx0aWYgKGkgPT09IC0xKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMuX2xhYmVsc1t0aW1lT3JMYWJlbF0gPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGFwcGVuZElmQWJzZW50ID8gKHRoaXMuX2xhYmVsc1t0aW1lT3JMYWJlbF0gPSBjbGlwcGVkRHVyYXRpb24gKyBvZmZzZXRPckxhYmVsKSA6IG9mZnNldE9yTGFiZWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzLl9sYWJlbHNbdGltZU9yTGFiZWxdICsgb2Zmc2V0T3JMYWJlbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRvZmZzZXRPckxhYmVsID0gcGFyc2VJbnQodGltZU9yTGFiZWwuY2hhckF0KGktMSkgKyBcIjFcIiwgMTApICogTnVtYmVyKHRpbWVPckxhYmVsLnN1YnN0cihpKzEpKTtcblx0XHRcdFx0dGltZU9yTGFiZWwgPSAoaSA+IDEpID8gdGhpcy5fcGFyc2VUaW1lT3JMYWJlbCh0aW1lT3JMYWJlbC5zdWJzdHIoMCwgaS0xKSwgMCwgYXBwZW5kSWZBYnNlbnQpIDogY2xpcHBlZER1cmF0aW9uO1xuXHRcdFx0fSBlbHNlIGlmICh0aW1lT3JMYWJlbCA9PSBudWxsKSB7XG5cdFx0XHRcdHRpbWVPckxhYmVsID0gY2xpcHBlZER1cmF0aW9uO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIE51bWJlcih0aW1lT3JMYWJlbCkgKyBvZmZzZXRPckxhYmVsO1xuXHRcdH07XG5cblx0XHRwLnNlZWsgPSBmdW5jdGlvbihwb3NpdGlvbiwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdHJldHVybiB0aGlzLnRvdGFsVGltZSgodHlwZW9mKHBvc2l0aW9uKSA9PT0gXCJudW1iZXJcIikgPyBwb3NpdGlvbiA6IHRoaXMuX3BhcnNlVGltZU9yTGFiZWwocG9zaXRpb24pLCAoc3VwcHJlc3NFdmVudHMgIT09IGZhbHNlKSk7XG5cdFx0fTtcblxuXHRcdHAuc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMucGF1c2VkKHRydWUpO1xuXHRcdH07XG5cblx0XHRwLmdvdG9BbmRQbGF5ID0gZnVuY3Rpb24ocG9zaXRpb24sIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wbGF5KHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cyk7XG5cdFx0fTtcblxuXHRcdHAuZ290b0FuZFN0b3AgPSBmdW5jdGlvbihwb3NpdGlvbiwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdHJldHVybiB0aGlzLnBhdXNlKHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cyk7XG5cdFx0fTtcblxuXHRcdHAucmVuZGVyID0gZnVuY3Rpb24odGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG5cdFx0XHRpZiAodGhpcy5fZ2MpIHtcblx0XHRcdFx0dGhpcy5fZW5hYmxlZCh0cnVlLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRcdHByZXZUaW1lID0gc2VsZi5fdGltZSxcblx0XHRcdFx0dG90YWxEdXIgPSAoIXNlbGYuX2RpcnR5KSA/IHNlbGYuX3RvdGFsRHVyYXRpb24gOiBzZWxmLnRvdGFsRHVyYXRpb24oKSxcblx0XHRcdFx0cHJldlN0YXJ0ID0gc2VsZi5fc3RhcnRUaW1lLFxuXHRcdFx0XHRwcmV2VGltZVNjYWxlID0gc2VsZi5fdGltZVNjYWxlLFxuXHRcdFx0XHRwcmV2UGF1c2VkID0gc2VsZi5fcGF1c2VkLFxuXHRcdFx0XHR0d2VlbiwgaXNDb21wbGV0ZSwgbmV4dCwgY2FsbGJhY2ssIGludGVybmFsRm9yY2UsIHBhdXNlVHdlZW4sIGN1clRpbWUsIHBhdXNlVGltZTtcblx0XHRcdGlmIChwcmV2VGltZSAhPT0gc2VsZi5fdGltZSkgeyAvL2lmIHRvdGFsRHVyYXRpb24oKSBmaW5kcyBhIGNoaWxkIHdpdGggYSBuZWdhdGl2ZSBzdGFydFRpbWUgYW5kIHNtb290aENoaWxkVGltaW5nIGlzIHRydWUsIHRoaW5ncyBnZXQgc2hpZnRlZCBhcm91bmQgaW50ZXJuYWxseSBzbyB3ZSBuZWVkIHRvIGFkanVzdCB0aGUgdGltZSBhY2NvcmRpbmdseS4gRm9yIGV4YW1wbGUsIGlmIGEgdHdlZW4gc3RhcnRzIGF0IC0zMCB3ZSBtdXN0IHNoaWZ0IEVWRVJZVEhJTkcgZm9yd2FyZCAzMCBzZWNvbmRzIGFuZCBtb3ZlIHRoaXMgdGltZWxpbmUncyBzdGFydFRpbWUgYmFja3dhcmQgYnkgMzAgc2Vjb25kcyBzbyB0aGF0IHRoaW5ncyBhbGlnbiB3aXRoIHRoZSBwbGF5aGVhZCAobm8ganVtcCkuXG5cdFx0XHRcdHRpbWUgKz0gc2VsZi5fdGltZSAtIHByZXZUaW1lO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNlbGYuX2hhc1BhdXNlICYmICFzZWxmLl9mb3JjaW5nUGxheWhlYWQgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRcdGlmICh0aW1lID4gcHJldlRpbWUpIHtcblx0XHRcdFx0XHR0d2VlbiA9IHNlbGYuX2ZpcnN0O1xuXHRcdFx0XHRcdHdoaWxlICh0d2VlbiAmJiB0d2Vlbi5fc3RhcnRUaW1lIDw9IHRpbWUgJiYgIXBhdXNlVHdlZW4pIHtcblx0XHRcdFx0XHRcdGlmICghdHdlZW4uX2R1cmF0aW9uKSBpZiAodHdlZW4uZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgIXR3ZWVuLnJhdGlvICYmICEodHdlZW4uX3N0YXJ0VGltZSA9PT0gMCAmJiBzZWxmLl9yYXdQcmV2VGltZSA9PT0gMCkpIHtcblx0XHRcdFx0XHRcdFx0cGF1c2VUd2VlbiA9IHR3ZWVuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dHdlZW4gPSB0d2Vlbi5fbmV4dDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dHdlZW4gPSBzZWxmLl9sYXN0O1xuXHRcdFx0XHRcdHdoaWxlICh0d2VlbiAmJiB0d2Vlbi5fc3RhcnRUaW1lID49IHRpbWUgJiYgIXBhdXNlVHdlZW4pIHtcblx0XHRcdFx0XHRcdGlmICghdHdlZW4uX2R1cmF0aW9uKSBpZiAodHdlZW4uZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgdHdlZW4uX3Jhd1ByZXZUaW1lID4gMCkge1xuXHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gdHdlZW47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0d2VlbiA9IHR3ZWVuLl9wcmV2O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocGF1c2VUd2Vlbikge1xuXHRcdFx0XHRcdHNlbGYuX3RpbWUgPSBzZWxmLl90b3RhbFRpbWUgPSB0aW1lID0gcGF1c2VUd2Vlbi5fc3RhcnRUaW1lO1xuXHRcdFx0XHRcdHBhdXNlVGltZSA9IHNlbGYuX3N0YXJ0VGltZSArIChzZWxmLl9yZXZlcnNlZCA/IHNlbGYuX2R1cmF0aW9uIC0gdGltZSA6IHRpbWUpIC8gc2VsZi5fdGltZVNjYWxlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAodGltZSA+PSB0b3RhbER1ciAtIF90aW55TnVtICYmIHRpbWUgPj0gMCkgeyAvL3RvIHdvcmsgYXJvdW5kIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgbWF0aCBhcnRpZmFjdHMuXG5cdFx0XHRcdHNlbGYuX3RvdGFsVGltZSA9IHNlbGYuX3RpbWUgPSB0b3RhbER1cjtcblx0XHRcdFx0aWYgKCFzZWxmLl9yZXZlcnNlZCkgaWYgKCFzZWxmLl9oYXNQYXVzZWRDaGlsZCgpKSB7XG5cdFx0XHRcdFx0aXNDb21wbGV0ZSA9IHRydWU7XG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uQ29tcGxldGVcIjtcblx0XHRcdFx0XHRpbnRlcm5hbEZvcmNlID0gISFzZWxmLl90aW1lbGluZS5hdXRvUmVtb3ZlQ2hpbGRyZW47IC8vb3RoZXJ3aXNlLCBpZiB0aGUgYW5pbWF0aW9uIGlzIHVucGF1c2VkL2FjdGl2YXRlZCBhZnRlciBpdCdzIGFscmVhZHkgZmluaXNoZWQsIGl0IGRvZXNuJ3QgZ2V0IHJlbW92ZWQgZnJvbSB0aGUgcGFyZW50IHRpbWVsaW5lLlxuXHRcdFx0XHRcdGlmIChzZWxmLl9kdXJhdGlvbiA9PT0gMCkgaWYgKCh0aW1lIDw9IDAgJiYgdGltZSA+PSAtX3RpbnlOdW0pIHx8IHNlbGYuX3Jhd1ByZXZUaW1lIDwgMCB8fCBzZWxmLl9yYXdQcmV2VGltZSA9PT0gX3RpbnlOdW0pIGlmIChzZWxmLl9yYXdQcmV2VGltZSAhPT0gdGltZSAmJiBzZWxmLl9maXJzdCkge1xuXHRcdFx0XHRcdFx0aW50ZXJuYWxGb3JjZSA9IHRydWU7XG5cdFx0XHRcdFx0XHRpZiAoc2VsZi5fcmF3UHJldlRpbWUgPiBfdGlueU51bSkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IFwib25SZXZlcnNlQ29tcGxldGVcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c2VsZi5fcmF3UHJldlRpbWUgPSAoc2VsZi5fZHVyYXRpb24gfHwgIXN1cHByZXNzRXZlbnRzIHx8IHRpbWUgfHwgc2VsZi5fcmF3UHJldlRpbWUgPT09IHRpbWUpID8gdGltZSA6IF90aW55TnVtOyAvL3doZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHRpbWVsaW5lIG9yIHR3ZWVuLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LiBXZSBzZXQgdGhlIF9yYXdQcmV2VGltZSB0byBiZSBhIHByZWNpc2UgdGlueSBudW1iZXIgdG8gaW5kaWNhdGUgdGhpcyBzY2VuYXJpbyByYXRoZXIgdGhhbiB1c2luZyBhbm90aGVyIHByb3BlcnR5L3ZhcmlhYmxlIHdoaWNoIHdvdWxkIGluY3JlYXNlIG1lbW9yeSB1c2FnZS4gVGhpcyB0ZWNobmlxdWUgaXMgbGVzcyByZWFkYWJsZSwgYnV0IG1vcmUgZWZmaWNpZW50LlxuXHRcdFx0XHR0aW1lID0gdG90YWxEdXIgKyAwLjAwMDE7IC8vdG8gYXZvaWQgb2NjYXNpb25hbCBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnMgLSBzb21ldGltZXMgY2hpbGQgdHdlZW5zL3RpbWVsaW5lcyB3ZXJlIG5vdCBiZWluZyBmdWxseSBjb21wbGV0ZWQgKHRoZWlyIHByb2dyZXNzIG1pZ2h0IGJlIDAuOTk5OTk5OTk5OTk5OTk4IGluc3RlYWQgb2YgMSBiZWNhdXNlIHdoZW4gX3RpbWUgLSB0d2Vlbi5fc3RhcnRUaW1lIGlzIHBlcmZvcm1lZCwgZmxvYXRpbmcgcG9pbnQgZXJyb3JzIHdvdWxkIHJldHVybiBhIHZhbHVlIHRoYXQgd2FzIFNMSUdIVExZIG9mZikuIFRyeSAoOTk5OTk5OTk5OTk5LjcgLSA5OTk5OTk5OTk5OTkpICogMSA9IDAuNjk5OTUxMTcxODc1IGluc3RlYWQgb2YgMC43LlxuXG5cdFx0XHR9IGVsc2UgaWYgKHRpbWUgPCBfdGlueU51bSkgeyAvL3RvIHdvcmsgYXJvdW5kIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgbWF0aCBhcnRpZmFjdHMsIHJvdW5kIHN1cGVyIHNtYWxsIHZhbHVlcyB0byAwLlxuXHRcdFx0XHRzZWxmLl90b3RhbFRpbWUgPSBzZWxmLl90aW1lID0gMDtcblx0XHRcdFx0aWYgKHRpbWUgPiAtX3RpbnlOdW0pIHtcblx0XHRcdFx0XHR0aW1lID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocHJldlRpbWUgIT09IDAgfHwgKHNlbGYuX2R1cmF0aW9uID09PSAwICYmIHNlbGYuX3Jhd1ByZXZUaW1lICE9PSBfdGlueU51bSAmJiAoc2VsZi5fcmF3UHJldlRpbWUgPiAwIHx8ICh0aW1lIDwgMCAmJiBzZWxmLl9yYXdQcmV2VGltZSA+PSAwKSkpKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uUmV2ZXJzZUNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0aXNDb21wbGV0ZSA9IHNlbGYuX3JldmVyc2VkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aW1lIDwgMCkge1xuXHRcdFx0XHRcdHNlbGYuX2FjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdGlmIChzZWxmLl90aW1lbGluZS5hdXRvUmVtb3ZlQ2hpbGRyZW4gJiYgc2VsZi5fcmV2ZXJzZWQpIHsgLy9lbnN1cmVzIHByb3BlciBHQyBpZiBhIHRpbWVsaW5lIGlzIHJlc3VtZWQgYWZ0ZXIgaXQncyBmaW5pc2hlZCByZXZlcnNpbmcuXG5cdFx0XHRcdFx0XHRpbnRlcm5hbEZvcmNlID0gaXNDb21wbGV0ZSA9IHRydWU7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IFwib25SZXZlcnNlQ29tcGxldGVcIjtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHNlbGYuX3Jhd1ByZXZUaW1lID49IDAgJiYgc2VsZi5fZmlyc3QpIHsgLy93aGVuIGdvaW5nIGJhY2sgYmV5b25kIHRoZSBzdGFydCwgZm9yY2UgYSByZW5kZXIgc28gdGhhdCB6ZXJvLWR1cmF0aW9uIHR3ZWVucyB0aGF0IHNpdCBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgcmVuZGVyIHRoZWlyIHN0YXJ0IHZhbHVlcyBwcm9wZXJseS4gT3RoZXJ3aXNlLCBpZiB0aGUgcGFyZW50IHRpbWVsaW5lJ3MgcGxheWhlYWQgbGFuZHMgZXhhY3RseSBhdCB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lLCBhbmQgdGhlbiBtb3ZlcyBiYWNrd2FyZHMsIHRoZSB6ZXJvLWR1cmF0aW9uIHR3ZWVucyBhdCB0aGUgYmVnaW5uaW5nIHdvdWxkIHN0aWxsIGJlIGF0IHRoZWlyIGVuZCBzdGF0ZS5cblx0XHRcdFx0XHRcdGludGVybmFsRm9yY2UgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzZWxmLl9yYXdQcmV2VGltZSA9IHRpbWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5fcmF3UHJldlRpbWUgPSAoc2VsZi5fZHVyYXRpb24gfHwgIXN1cHByZXNzRXZlbnRzIHx8IHRpbWUgfHwgc2VsZi5fcmF3UHJldlRpbWUgPT09IHRpbWUpID8gdGltZSA6IF90aW55TnVtOyAvL3doZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHRpbWVsaW5lIG9yIHR3ZWVuLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LiBXZSBzZXQgdGhlIF9yYXdQcmV2VGltZSB0byBiZSBhIHByZWNpc2UgdGlueSBudW1iZXIgdG8gaW5kaWNhdGUgdGhpcyBzY2VuYXJpbyByYXRoZXIgdGhhbiB1c2luZyBhbm90aGVyIHByb3BlcnR5L3ZhcmlhYmxlIHdoaWNoIHdvdWxkIGluY3JlYXNlIG1lbW9yeSB1c2FnZS4gVGhpcyB0ZWNobmlxdWUgaXMgbGVzcyByZWFkYWJsZSwgYnV0IG1vcmUgZWZmaWNpZW50LlxuXHRcdFx0XHRcdGlmICh0aW1lID09PSAwICYmIGlzQ29tcGxldGUpIHsgLy9pZiB0aGVyZSdzIGEgemVyby1kdXJhdGlvbiB0d2VlbiBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgYSB0aW1lbGluZSBhbmQgdGhlIHBsYXloZWFkIGxhbmRzIEVYQUNUTFkgYXQgdGltZSAwLCB0aGF0IHR3ZWVuIHdpbGwgY29ycmVjdGx5IHJlbmRlciBpdHMgZW5kIHZhbHVlcywgYnV0IHdlIG5lZWQgdG8ga2VlcCB0aGUgdGltZWxpbmUgYWxpdmUgZm9yIG9uZSBtb3JlIHJlbmRlciBzbyB0aGF0IHRoZSBiZWdpbm5pbmcgdmFsdWVzIHJlbmRlciBwcm9wZXJseSBhcyB0aGUgcGFyZW50J3MgcGxheWhlYWQga2VlcHMgbW92aW5nIGJleW9uZCB0aGUgYmVnaW5pbmcuIEltYWdpbmUgb2JqLnggc3RhcnRzIGF0IDAgYW5kIHRoZW4gd2UgZG8gdGwuc2V0KG9iaiwge3g6MTAwfSkudG8ob2JqLCAxLCB7eDoyMDB9KSBhbmQgdGhlbiBsYXRlciB3ZSB0bC5yZXZlcnNlKCkuLi50aGUgZ29hbCBpcyB0byBoYXZlIG9iai54IHJldmVydCB0byAwLiBJZiB0aGUgcGxheWhlYWQgaGFwcGVucyB0byBsYW5kIG9uIGV4YWN0bHkgMCwgd2l0aG91dCB0aGlzIGNodW5rIG9mIGNvZGUsIGl0J2QgY29tcGxldGUgdGhlIHRpbWVsaW5lIGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgcmVuZGVyaW5nIHF1ZXVlIChub3QgZ29vZCkuXG5cdFx0XHRcdFx0XHR0d2VlbiA9IHNlbGYuX2ZpcnN0O1xuXHRcdFx0XHRcdFx0d2hpbGUgKHR3ZWVuICYmIHR3ZWVuLl9zdGFydFRpbWUgPT09IDApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCF0d2Vlbi5fZHVyYXRpb24pIHtcblx0XHRcdFx0XHRcdFx0XHRpc0NvbXBsZXRlID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dHdlZW4gPSB0d2Vlbi5fbmV4dDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGltZSA9IDA7IC8vdG8gYXZvaWQgb2NjYXNpb25hbCBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnMgKGNvdWxkIGNhdXNlIHByb2JsZW1zIGVzcGVjaWFsbHkgd2l0aCB6ZXJvLWR1cmF0aW9uIHR3ZWVucyBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgdGhlIHRpbWVsaW5lKVxuXHRcdFx0XHRcdGlmICghc2VsZi5faW5pdHRlZCkge1xuXHRcdFx0XHRcdFx0aW50ZXJuYWxGb3JjZSA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuX3RvdGFsVGltZSA9IHNlbGYuX3RpbWUgPSBzZWxmLl9yYXdQcmV2VGltZSA9IHRpbWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoKHNlbGYuX3RpbWUgPT09IHByZXZUaW1lIHx8ICFzZWxmLl9maXJzdCkgJiYgIWZvcmNlICYmICFpbnRlcm5hbEZvcmNlICYmICFwYXVzZVR3ZWVuKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSBpZiAoIXNlbGYuX2luaXR0ZWQpIHtcblx0XHRcdFx0c2VsZi5faW5pdHRlZCA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghc2VsZi5fYWN0aXZlKSBpZiAoIXNlbGYuX3BhdXNlZCAmJiBzZWxmLl90aW1lICE9PSBwcmV2VGltZSAmJiB0aW1lID4gMCkge1xuXHRcdFx0XHRzZWxmLl9hY3RpdmUgPSB0cnVlOyAgLy9zbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgdGhlIHRpbWVsaW5lIChhcyBvcHBvc2VkIHRvIHRoZSBwYXJlbnQgdGltZWxpbmUgcmVuZGVyaW5nIGl0KSwgaXQgaXMgZm9yY2VkIHRvIHJlLXJlbmRlciBhbmQgYWxpZ24gaXQgd2l0aCB0aGUgcHJvcGVyIHRpbWUvZnJhbWUgb24gdGhlIG5leHQgcmVuZGVyaW5nIGN5Y2xlLiBNYXliZSB0aGUgdGltZWxpbmUgYWxyZWFkeSBmaW5pc2hlZCBidXQgdGhlIHVzZXIgbWFudWFsbHkgcmUtcmVuZGVycyBpdCBhcyBoYWxmd2F5IGRvbmUsIGZvciBleGFtcGxlLlxuXHRcdFx0fVxuXG5cdFx0XHRpZiAocHJldlRpbWUgPT09IDApIGlmIChzZWxmLnZhcnMub25TdGFydCkgaWYgKHNlbGYuX3RpbWUgIT09IDAgfHwgIXNlbGYuX2R1cmF0aW9uKSBpZiAoIXN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRcdHNlbGYuX2NhbGxiYWNrKFwib25TdGFydFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Y3VyVGltZSA9IHNlbGYuX3RpbWU7XG5cdFx0XHRpZiAoY3VyVGltZSA+PSBwcmV2VGltZSkge1xuXHRcdFx0XHR0d2VlbiA9IHNlbGYuX2ZpcnN0O1xuXHRcdFx0XHR3aGlsZSAodHdlZW4pIHtcblx0XHRcdFx0XHRuZXh0ID0gdHdlZW4uX25leHQ7IC8vcmVjb3JkIGl0IGhlcmUgYmVjYXVzZSB0aGUgdmFsdWUgY291bGQgY2hhbmdlIGFmdGVyIHJlbmRlcmluZy4uLlxuXHRcdFx0XHRcdGlmIChjdXJUaW1lICE9PSBzZWxmLl90aW1lIHx8IChzZWxmLl9wYXVzZWQgJiYgIXByZXZQYXVzZWQpKSB7IC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHdlZW4uX2FjdGl2ZSB8fCAodHdlZW4uX3N0YXJ0VGltZSA8PSBjdXJUaW1lICYmICF0d2Vlbi5fcGF1c2VkICYmICF0d2Vlbi5fZ2MpKSB7XG5cdFx0XHRcdFx0XHRpZiAocGF1c2VUd2VlbiA9PT0gdHdlZW4pIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5wYXVzZSgpO1xuXHRcdFx0XHRcdFx0XHRzZWxmLl9wYXVzZVRpbWUgPSBwYXVzZVRpbWU7IC8vc28gdGhhdCB3aGVuIHdlIHJlc3VtZSgpLCBpdCdzIHN0YXJ0aW5nIGZyb20gZXhhY3RseSB0aGUgcmlnaHQgc3BvdCAodGhlIHBhdXNlKCkgbWV0aG9kIHVzZXMgdGhlIHJhd1RpbWUgZm9yIHRoZSBwYXJlbnQsIGJ1dCB0aGF0IG1heSBiZSBhIGJpdCB0b28gZmFyIGFoZWFkKVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCF0d2Vlbi5fcmV2ZXJzZWQpIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCh0aW1lIC0gdHdlZW4uX3N0YXJ0VGltZSkgKiB0d2Vlbi5fdGltZVNjYWxlLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCgoIXR3ZWVuLl9kaXJ0eSkgPyB0d2Vlbi5fdG90YWxEdXJhdGlvbiA6IHR3ZWVuLnRvdGFsRHVyYXRpb24oKSkgLSAoKHRpbWUgLSB0d2Vlbi5fc3RhcnRUaW1lKSAqIHR3ZWVuLl90aW1lU2NhbGUpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0d2VlbiA9IG5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuID0gc2VsZi5fbGFzdDtcblx0XHRcdFx0d2hpbGUgKHR3ZWVuKSB7XG5cdFx0XHRcdFx0bmV4dCA9IHR3ZWVuLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGJlY2F1c2UgdGhlIHZhbHVlIGNvdWxkIGNoYW5nZSBhZnRlciByZW5kZXJpbmcuLi5cblx0XHRcdFx0XHRpZiAoY3VyVGltZSAhPT0gc2VsZi5fdGltZSB8fCAoc2VsZi5fcGF1c2VkICYmICFwcmV2UGF1c2VkKSkgeyAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR3ZWVuLl9hY3RpdmUgfHwgKHR3ZWVuLl9zdGFydFRpbWUgPD0gcHJldlRpbWUgJiYgIXR3ZWVuLl9wYXVzZWQgJiYgIXR3ZWVuLl9nYykpIHtcblx0XHRcdFx0XHRcdGlmIChwYXVzZVR3ZWVuID09PSB0d2Vlbikge1xuXHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gdHdlZW4uX3ByZXY7IC8vdGhlIGxpbmtlZCBsaXN0IGlzIG9yZ2FuaXplZCBieSBfc3RhcnRUaW1lLCB0aHVzIGl0J3MgcG9zc2libGUgdGhhdCBhIHR3ZWVuIGNvdWxkIHN0YXJ0IEJFRk9SRSB0aGUgcGF1c2UgYW5kIGVuZCBhZnRlciBpdCwgaW4gd2hpY2ggY2FzZSBpdCB3b3VsZCBiZSBwb3NpdGlvbmVkIGJlZm9yZSB0aGUgcGF1c2UgdHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0LCBidXQgd2Ugc2hvdWxkIHJlbmRlciBpdCBiZWZvcmUgd2UgcGF1c2UoKSB0aGUgdGltZWxpbmUgYW5kIGNlYXNlIHJlbmRlcmluZy4gVGhpcyBpcyBvbmx5IGEgY29uY2VybiB3aGVuIGdvaW5nIGluIHJldmVyc2UuXG5cdFx0XHRcdFx0XHRcdHdoaWxlIChwYXVzZVR3ZWVuICYmIHBhdXNlVHdlZW4uZW5kVGltZSgpID4gc2VsZi5fdGltZSkge1xuXHRcdFx0XHRcdFx0XHRcdHBhdXNlVHdlZW4ucmVuZGVyKCAocGF1c2VUd2Vlbi5fcmV2ZXJzZWQgPyBwYXVzZVR3ZWVuLnRvdGFsRHVyYXRpb24oKSAtICgodGltZSAtIHBhdXNlVHdlZW4uX3N0YXJ0VGltZSkgKiBwYXVzZVR3ZWVuLl90aW1lU2NhbGUpIDogKHRpbWUgLSBwYXVzZVR3ZWVuLl9zdGFydFRpbWUpICogcGF1c2VUd2Vlbi5fdGltZVNjYWxlKSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblx0XHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gcGF1c2VUd2Vlbi5fcHJldjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0c2VsZi5wYXVzZSgpO1xuXHRcdFx0XHRcdFx0XHRzZWxmLl9wYXVzZVRpbWUgPSBwYXVzZVRpbWU7IC8vc28gdGhhdCB3aGVuIHdlIHJlc3VtZSgpLCBpdCdzIHN0YXJ0aW5nIGZyb20gZXhhY3RseSB0aGUgcmlnaHQgc3BvdCAodGhlIHBhdXNlKCkgbWV0aG9kIHVzZXMgdGhlIHJhd1RpbWUgZm9yIHRoZSBwYXJlbnQsIGJ1dCB0aGF0IG1heSBiZSBhIGJpdCB0b28gZmFyIGFoZWFkKVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCF0d2Vlbi5fcmV2ZXJzZWQpIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCh0aW1lIC0gdHdlZW4uX3N0YXJ0VGltZSkgKiB0d2Vlbi5fdGltZVNjYWxlLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCgoIXR3ZWVuLl9kaXJ0eSkgPyB0d2Vlbi5fdG90YWxEdXJhdGlvbiA6IHR3ZWVuLnRvdGFsRHVyYXRpb24oKSkgLSAoKHRpbWUgLSB0d2Vlbi5fc3RhcnRUaW1lKSAqIHR3ZWVuLl90aW1lU2NhbGUpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0d2VlbiA9IG5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHNlbGYuX29uVXBkYXRlKSBpZiAoIXN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRcdGlmIChfbGF6eVR3ZWVucy5sZW5ndGgpIHsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIGEgdGltZWxpbmUgZmluaXNoZXMsIHVzZXJzIGV4cGVjdCB0aGluZ3MgdG8gaGF2ZSByZW5kZXJlZCBmdWxseS4gSW1hZ2luZSBhbiBvblVwZGF0ZSBvbiBhIHRpbWVsaW5lIHRoYXQgcmVwb3J0cy9jaGVja3MgdHdlZW5lZCB2YWx1ZXMuXG5cdFx0XHRcdFx0X2xhenlSZW5kZXIoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLl9jYWxsYmFjayhcIm9uVXBkYXRlXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY2FsbGJhY2spIGlmICghc2VsZi5fZ2MpIGlmIChwcmV2U3RhcnQgPT09IHNlbGYuX3N0YXJ0VGltZSB8fCBwcmV2VGltZVNjYWxlICE9PSBzZWxmLl90aW1lU2NhbGUpIGlmIChzZWxmLl90aW1lID09PSAwIHx8IHRvdGFsRHVyID49IHNlbGYudG90YWxEdXJhdGlvbigpKSB7IC8vaWYgb25lIG9mIHRoZSB0d2VlbnMgdGhhdCB3YXMgcmVuZGVyZWQgYWx0ZXJlZCB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lIChsaWtlIGlmIGFuIG9uQ29tcGxldGUgcmV2ZXJzZWQgdGhlIHRpbWVsaW5lKSwgaXQgcHJvYmFibHkgaXNuJ3QgY29tcGxldGUuIElmIGl0IGlzLCBkb24ndCB3b3JyeSwgYmVjYXVzZSB3aGF0ZXZlciBjYWxsIGFsdGVyZWQgdGhlIHN0YXJ0VGltZSB3b3VsZCBjb21wbGV0ZSBpZiBpdCB3YXMgbmVjZXNzYXJ5IGF0IHRoZSBuZXcgdGltZS4gVGhlIG9ubHkgZXhjZXB0aW9uIGlzIHRoZSB0aW1lU2NhbGUgcHJvcGVydHkuIEFsc28gY2hlY2sgX2djIGJlY2F1c2UgdGhlcmUncyBhIGNoYW5jZSB0aGF0IGtpbGwoKSBjb3VsZCBiZSBjYWxsZWQgaW4gYW4gb25VcGRhdGVcblx0XHRcdFx0aWYgKGlzQ29tcGxldGUpIHtcblx0XHRcdFx0XHRpZiAoX2xhenlUd2VlbnMubGVuZ3RoKSB7IC8vaW4gY2FzZSByZW5kZXJpbmcgY2F1c2VkIGFueSB0d2VlbnMgdG8gbGF6eS1pbml0LCB3ZSBzaG91bGQgcmVuZGVyIHRoZW0gYmVjYXVzZSB0eXBpY2FsbHkgd2hlbiBhIHRpbWVsaW5lIGZpbmlzaGVzLCB1c2VycyBleHBlY3QgdGhpbmdzIHRvIGhhdmUgcmVuZGVyZWQgZnVsbHkuIEltYWdpbmUgYW4gb25Db21wbGV0ZSBvbiBhIHRpbWVsaW5lIHRoYXQgcmVwb3J0cy9jaGVja3MgdHdlZW5lZCB2YWx1ZXMuXG5cdFx0XHRcdFx0XHRfbGF6eVJlbmRlcigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoc2VsZi5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuKSB7XG5cdFx0XHRcdFx0XHRzZWxmLl9lbmFibGVkKGZhbHNlLCBmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNlbGYuX2FjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghc3VwcHJlc3NFdmVudHMgJiYgc2VsZi52YXJzW2NhbGxiYWNrXSkge1xuXHRcdFx0XHRcdHNlbGYuX2NhbGxiYWNrKGNhbGxiYWNrKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRwLl9oYXNQYXVzZWRDaGlsZCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5fZmlyc3Q7XG5cdFx0XHR3aGlsZSAodHdlZW4pIHtcblx0XHRcdFx0aWYgKHR3ZWVuLl9wYXVzZWQgfHwgKCh0d2VlbiBpbnN0YW5jZW9mIFRpbWVsaW5lTGl0ZSkgJiYgdHdlZW4uX2hhc1BhdXNlZENoaWxkKCkpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0dHdlZW4gPSB0d2Vlbi5fbmV4dDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdFx0cC5nZXRDaGlsZHJlbiA9IGZ1bmN0aW9uKG5lc3RlZCwgdHdlZW5zLCB0aW1lbGluZXMsIGlnbm9yZUJlZm9yZVRpbWUpIHtcblx0XHRcdGlnbm9yZUJlZm9yZVRpbWUgPSBpZ25vcmVCZWZvcmVUaW1lIHx8IC05OTk5OTk5OTk5O1xuXHRcdFx0dmFyIGEgPSBbXSxcblx0XHRcdFx0dHdlZW4gPSB0aGlzLl9maXJzdCxcblx0XHRcdFx0Y250ID0gMDtcblx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRpZiAodHdlZW4uX3N0YXJ0VGltZSA8IGlnbm9yZUJlZm9yZVRpbWUpIHtcblx0XHRcdFx0XHQvL2RvIG5vdGhpbmdcblx0XHRcdFx0fSBlbHNlIGlmICh0d2VlbiBpbnN0YW5jZW9mIFR3ZWVuTGl0ZSkge1xuXHRcdFx0XHRcdGlmICh0d2VlbnMgIT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRhW2NudCsrXSA9IHR3ZWVuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAodGltZWxpbmVzICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0YVtjbnQrK10gPSB0d2Vlbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKG5lc3RlZCAhPT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdGEgPSBhLmNvbmNhdCh0d2Vlbi5nZXRDaGlsZHJlbih0cnVlLCB0d2VlbnMsIHRpbWVsaW5lcykpO1xuXHRcdFx0XHRcdFx0Y250ID0gYS5sZW5ndGg7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9O1xuXG5cdFx0cC5nZXRUd2VlbnNPZiA9IGZ1bmN0aW9uKHRhcmdldCwgbmVzdGVkKSB7XG5cdFx0XHR2YXIgZGlzYWJsZWQgPSB0aGlzLl9nYyxcblx0XHRcdFx0YSA9IFtdLFxuXHRcdFx0XHRjbnQgPSAwLFxuXHRcdFx0XHR0d2VlbnMsIGk7XG5cdFx0XHRpZiAoZGlzYWJsZWQpIHtcblx0XHRcdFx0dGhpcy5fZW5hYmxlZCh0cnVlLCB0cnVlKTsgLy9nZXRUd2VlbnNPZigpIGZpbHRlcnMgb3V0IGRpc2FibGVkIHR3ZWVucywgYW5kIHdlIGhhdmUgdG8gbWFyayB0aGVtIGFzIF9nYyA9IHRydWUgd2hlbiB0aGUgdGltZWxpbmUgY29tcGxldGVzIGluIG9yZGVyIHRvIGFsbG93IGNsZWFuIGdhcmJhZ2UgY29sbGVjdGlvbiwgc28gdGVtcG9yYXJpbHkgcmUtZW5hYmxlIHRoZSB0aW1lbGluZSBoZXJlLlxuXHRcdFx0fVxuXHRcdFx0dHdlZW5zID0gVHdlZW5MaXRlLmdldFR3ZWVuc09mKHRhcmdldCk7XG5cdFx0XHRpID0gdHdlZW5zLmxlbmd0aDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRpZiAodHdlZW5zW2ldLnRpbWVsaW5lID09PSB0aGlzIHx8IChuZXN0ZWQgJiYgdGhpcy5fY29udGFpbnModHdlZW5zW2ldKSkpIHtcblx0XHRcdFx0XHRhW2NudCsrXSA9IHR3ZWVuc1tpXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGRpc2FibGVkKSB7XG5cdFx0XHRcdHRoaXMuX2VuYWJsZWQoZmFsc2UsIHRydWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGE7XG5cdFx0fTtcblxuXHRcdHAucmVjZW50ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fcmVjZW50O1xuXHRcdH07XG5cblx0XHRwLl9jb250YWlucyA9IGZ1bmN0aW9uKHR3ZWVuKSB7XG5cdFx0XHR2YXIgdGwgPSB0d2Vlbi50aW1lbGluZTtcblx0XHRcdHdoaWxlICh0bCkge1xuXHRcdFx0XHRpZiAodGwgPT09IHRoaXMpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0bCA9IHRsLnRpbWVsaW5lO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0XHRwLnNoaWZ0Q2hpbGRyZW4gPSBmdW5jdGlvbihhbW91bnQsIGFkanVzdExhYmVscywgaWdub3JlQmVmb3JlVGltZSkge1xuXHRcdFx0aWdub3JlQmVmb3JlVGltZSA9IGlnbm9yZUJlZm9yZVRpbWUgfHwgMDtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuX2ZpcnN0LFxuXHRcdFx0XHRsYWJlbHMgPSB0aGlzLl9sYWJlbHMsXG5cdFx0XHRcdHA7XG5cdFx0XHR3aGlsZSAodHdlZW4pIHtcblx0XHRcdFx0aWYgKHR3ZWVuLl9zdGFydFRpbWUgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuXHRcdFx0XHRcdHR3ZWVuLl9zdGFydFRpbWUgKz0gYW1vdW50O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYWRqdXN0TGFiZWxzKSB7XG5cdFx0XHRcdGZvciAocCBpbiBsYWJlbHMpIHtcblx0XHRcdFx0XHRpZiAobGFiZWxzW3BdID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcblx0XHRcdFx0XHRcdGxhYmVsc1twXSArPSBhbW91bnQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5fdW5jYWNoZSh0cnVlKTtcblx0XHR9O1xuXG5cdFx0cC5fa2lsbCA9IGZ1bmN0aW9uKHZhcnMsIHRhcmdldCkge1xuXHRcdFx0aWYgKCF2YXJzICYmICF0YXJnZXQpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdH1cblx0XHRcdHZhciB0d2VlbnMgPSAoIXRhcmdldCkgPyB0aGlzLmdldENoaWxkcmVuKHRydWUsIHRydWUsIGZhbHNlKSA6IHRoaXMuZ2V0VHdlZW5zT2YodGFyZ2V0KSxcblx0XHRcdFx0aSA9IHR3ZWVucy5sZW5ndGgsXG5cdFx0XHRcdGNoYW5nZWQgPSBmYWxzZTtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRpZiAodHdlZW5zW2ldLl9raWxsKHZhcnMsIHRhcmdldCkpIHtcblx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdFx0fTtcblxuXHRcdHAuY2xlYXIgPSBmdW5jdGlvbihsYWJlbHMpIHtcblx0XHRcdHZhciB0d2VlbnMgPSB0aGlzLmdldENoaWxkcmVuKGZhbHNlLCB0cnVlLCB0cnVlKSxcblx0XHRcdFx0aSA9IHR3ZWVucy5sZW5ndGg7XG5cdFx0XHR0aGlzLl90aW1lID0gdGhpcy5fdG90YWxUaW1lID0gMDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHR0d2VlbnNbaV0uX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdH1cblx0XHRcdGlmIChsYWJlbHMgIT09IGZhbHNlKSB7XG5cdFx0XHRcdHRoaXMuX2xhYmVscyA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuX3VuY2FjaGUodHJ1ZSk7XG5cdFx0fTtcblxuXHRcdHAuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5fZmlyc3Q7XG5cdFx0XHR3aGlsZSAodHdlZW4pIHtcblx0XHRcdFx0dHdlZW4uaW52YWxpZGF0ZSgpO1xuXHRcdFx0XHR0d2VlbiA9IHR3ZWVuLl9uZXh0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIEFuaW1hdGlvbi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMpOztcblx0XHR9O1xuXG5cdFx0cC5fZW5hYmxlZCA9IGZ1bmN0aW9uKGVuYWJsZWQsIGlnbm9yZVRpbWVsaW5lKSB7XG5cdFx0XHRpZiAoZW5hYmxlZCA9PT0gdGhpcy5fZ2MpIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5fZmlyc3Q7XG5cdFx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRcdHR3ZWVuLl9lbmFibGVkKGVuYWJsZWQsIHRydWUpO1xuXHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBTaW1wbGVUaW1lbGluZS5wcm90b3R5cGUuX2VuYWJsZWQuY2FsbCh0aGlzLCBlbmFibGVkLCBpZ25vcmVUaW1lbGluZSk7XG5cdFx0fTtcblxuXHRcdHAudG90YWxUaW1lID0gZnVuY3Rpb24odGltZSwgc3VwcHJlc3NFdmVudHMsIHVuY2FwcGVkKSB7XG5cdFx0XHR0aGlzLl9mb3JjaW5nUGxheWhlYWQgPSB0cnVlO1xuXHRcdFx0dmFyIHZhbCA9IEFuaW1hdGlvbi5wcm90b3R5cGUudG90YWxUaW1lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHR0aGlzLl9mb3JjaW5nUGxheWhlYWQgPSBmYWxzZTtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fTtcblxuXHRcdHAuZHVyYXRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdGlmICh0aGlzLl9kaXJ0eSkge1xuXHRcdFx0XHRcdHRoaXMudG90YWxEdXJhdGlvbigpOyAvL2p1c3QgdHJpZ2dlcnMgcmVjYWxjdWxhdGlvblxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzLl9kdXJhdGlvbjtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLmR1cmF0aW9uKCkgIT09IDAgJiYgdmFsdWUgIT09IDApIHtcblx0XHRcdFx0dGhpcy50aW1lU2NhbGUodGhpcy5fZHVyYXRpb24gLyB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRpZiAodGhpcy5fZGlydHkpIHtcblx0XHRcdFx0XHR2YXIgbWF4ID0gMCxcblx0XHRcdFx0XHRcdHNlbGYgPSB0aGlzLFxuXHRcdFx0XHRcdFx0dHdlZW4gPSBzZWxmLl9sYXN0LFxuXHRcdFx0XHRcdFx0cHJldlN0YXJ0ID0gOTk5OTk5OTk5OTk5LFxuXHRcdFx0XHRcdFx0cHJldiwgZW5kO1xuXHRcdFx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRcdFx0cHJldiA9IHR3ZWVuLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGluIGNhc2UgdGhlIHR3ZWVuIGNoYW5nZXMgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlLi4uXG5cdFx0XHRcdFx0XHRpZiAodHdlZW4uX2RpcnR5KSB7XG5cdFx0XHRcdFx0XHRcdHR3ZWVuLnRvdGFsRHVyYXRpb24oKTsgLy9jb3VsZCBjaGFuZ2UgdGhlIHR3ZWVuLl9zdGFydFRpbWUsIHNvIG1ha2Ugc3VyZSB0aGUgdHdlZW4ncyBjYWNoZSBpcyBjbGVhbiBiZWZvcmUgYW5hbHl6aW5nIGl0LlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHR3ZWVuLl9zdGFydFRpbWUgPiBwcmV2U3RhcnQgJiYgc2VsZi5fc29ydENoaWxkcmVuICYmICF0d2Vlbi5fcGF1c2VkICYmICFzZWxmLl9jYWxjdWxhdGluZ0R1cmF0aW9uKSB7IC8vaW4gY2FzZSBvbmUgb2YgdGhlIHR3ZWVucyBzaGlmdGVkIG91dCBvZiBvcmRlciwgaXQgbmVlZHMgdG8gYmUgcmUtaW5zZXJ0ZWQgaW50byB0aGUgY29ycmVjdCBwb3NpdGlvbiBpbiB0aGUgc2VxdWVuY2Vcblx0XHRcdFx0XHRcdFx0c2VsZi5fY2FsY3VsYXRpbmdEdXJhdGlvbiA9IDE7IC8vcHJldmVudCBlbmRsZXNzIHJlY3Vyc2l2ZSBjYWxscyAtIHRoZXJlIGFyZSBtZXRob2RzIHRoYXQgZ2V0IHRyaWdnZXJlZCB0aGF0IGNoZWNrIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gd2hlbiB3ZSBhZGQoKSwgbGlrZSBfcGFyc2VUaW1lT3JMYWJlbCgpLlxuXHRcdFx0XHRcdFx0XHRzZWxmLmFkZCh0d2VlbiwgdHdlZW4uX3N0YXJ0VGltZSAtIHR3ZWVuLl9kZWxheSk7XG5cdFx0XHRcdFx0XHRcdHNlbGYuX2NhbGN1bGF0aW5nRHVyYXRpb24gPSAwO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cHJldlN0YXJ0ID0gdHdlZW4uX3N0YXJ0VGltZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICh0d2Vlbi5fc3RhcnRUaW1lIDwgMCAmJiAhdHdlZW4uX3BhdXNlZCkgeyAvL2NoaWxkcmVuIGFyZW4ndCBhbGxvd2VkIHRvIGhhdmUgbmVnYXRpdmUgc3RhcnRUaW1lcyB1bmxlc3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgc28gYWRqdXN0IGhlcmUgaWYgb25lIGlzIGZvdW5kLlxuXHRcdFx0XHRcdFx0XHRtYXggLT0gdHdlZW4uX3N0YXJ0VGltZTtcblx0XHRcdFx0XHRcdFx0aWYgKHNlbGYuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5fc3RhcnRUaW1lICs9IHR3ZWVuLl9zdGFydFRpbWUgLyBzZWxmLl90aW1lU2NhbGU7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5fdGltZSAtPSB0d2Vlbi5fc3RhcnRUaW1lO1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYuX3RvdGFsVGltZSAtPSB0d2Vlbi5fc3RhcnRUaW1lO1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYuX3Jhd1ByZXZUaW1lIC09IHR3ZWVuLl9zdGFydFRpbWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0c2VsZi5zaGlmdENoaWxkcmVuKC10d2Vlbi5fc3RhcnRUaW1lLCBmYWxzZSwgLTk5OTk5OTk5OTkpO1xuXHRcdFx0XHRcdFx0XHRwcmV2U3RhcnQgPSAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZW5kID0gdHdlZW4uX3N0YXJ0VGltZSArICh0d2Vlbi5fdG90YWxEdXJhdGlvbiAvIHR3ZWVuLl90aW1lU2NhbGUpO1xuXHRcdFx0XHRcdFx0aWYgKGVuZCA+IG1heCkge1xuXHRcdFx0XHRcdFx0XHRtYXggPSBlbmQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0d2VlbiA9IHByZXY7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNlbGYuX2R1cmF0aW9uID0gc2VsZi5fdG90YWxEdXJhdGlvbiA9IG1heDtcblx0XHRcdFx0XHRzZWxmLl9kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzLl90b3RhbER1cmF0aW9uO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICh2YWx1ZSAmJiB0aGlzLnRvdGFsRHVyYXRpb24oKSkgPyB0aGlzLnRpbWVTY2FsZSh0aGlzLl90b3RhbER1cmF0aW9uIC8gdmFsdWUpIDogdGhpcztcblx0XHR9O1xuXG5cdFx0cC5wYXVzZWQgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKHZhbHVlID09PSBmYWxzZSAmJiB0aGlzLl9wYXVzZWQpIHsgLy9pZiB0aGVyZSdzIGEgcGF1c2UgZGlyZWN0bHkgYXQgdGhlIHNwb3QgZnJvbSB3aGVyZSB3ZSdyZSB1bnBhdXNpbmcsIHNraXAgaXQuXG5cdFx0XHRcdHZhciB0d2VlbiA9IHRoaXMuX2ZpcnN0O1xuXHRcdFx0XHR3aGlsZSAodHdlZW4pIHtcblx0XHRcdFx0XHRpZiAodHdlZW4uX3N0YXJ0VGltZSA9PT0gdGhpcy5fdGltZSAmJiB0d2Vlbi5kYXRhID09PSBcImlzUGF1c2VcIikge1xuXHRcdFx0XHRcdFx0dHdlZW4uX3Jhd1ByZXZUaW1lID0gMDsgLy9yZW1lbWJlciwgX3Jhd1ByZXZUaW1lIGlzIGhvdyB6ZXJvLWR1cmF0aW9uIHR3ZWVucy9jYWxsYmFja3Mgc2Vuc2UgZGlyZWN0aW9uYWxpdHkgYW5kIGRldGVybWluZSB3aGV0aGVyIG9yIG5vdCB0byBmaXJlLiBJZiBfcmF3UHJldlRpbWUgaXMgdGhlIHNhbWUgYXMgX3N0YXJ0VGltZSBvbiB0aGUgbmV4dCByZW5kZXIsIGl0IHdvbid0IGZpcmUuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBBbmltYXRpb24ucHJvdG90eXBlLnBhdXNlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdH07XG5cblx0XHRwLnVzZXNGcmFtZXMgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0bCA9IHRoaXMuX3RpbWVsaW5lO1xuXHRcdFx0d2hpbGUgKHRsLl90aW1lbGluZSkge1xuXHRcdFx0XHR0bCA9IHRsLl90aW1lbGluZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAodGwgPT09IEFuaW1hdGlvbi5fcm9vdEZyYW1lc1RpbWVsaW5lKTtcblx0XHR9O1xuXG5cdFx0cC5yYXdUaW1lID0gZnVuY3Rpb24od3JhcFJlcGVhdHMpIHtcblx0XHRcdHJldHVybiAod3JhcFJlcGVhdHMgJiYgKHRoaXMuX3BhdXNlZCB8fCAodGhpcy5fcmVwZWF0ICYmIHRoaXMudGltZSgpID4gMCAmJiB0aGlzLnRvdGFsUHJvZ3Jlc3MoKSA8IDEpKSkgPyB0aGlzLl90b3RhbFRpbWUgJSAodGhpcy5fZHVyYXRpb24gKyB0aGlzLl9yZXBlYXREZWxheSkgOiB0aGlzLl9wYXVzZWQgPyB0aGlzLl90b3RhbFRpbWUgOiAodGhpcy5fdGltZWxpbmUucmF3VGltZSh3cmFwUmVwZWF0cykgLSB0aGlzLl9zdGFydFRpbWUpICogdGhpcy5fdGltZVNjYWxlO1xuXHRcdH07XG5cblx0XHRyZXR1cm4gVGltZWxpbmVMaXRlO1xuXG5cdH0sIHRydWUpO1xuXG5leHBvcnQgdmFyIFRpbWVsaW5lTGl0ZSA9IGdsb2JhbHMuVGltZWxpbmVMaXRlO1xuZXhwb3J0IHsgVGltZWxpbmVMaXRlIGFzIGRlZmF1bHQgfTtcbiIsIi8qIVxuICogVkVSU0lPTjogMi4xLjNcbiAqIERBVEU6IDIwMTktMDUtMTdcbiAqIFVQREFURVMgQU5EIERPQ1MgQVQ6IGh0dHA6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDA4LTIwMTksIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgd29yayBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIHNvZnR3YXJlIGFncmVlbWVudCB0aGF0IHdhcyBpc3N1ZWQgd2l0aCB5b3VyIG1lbWJlcnNoaXAuXG4gKiBcbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG5pbXBvcnQgVHdlZW5MaXRlLCB7IF9nc1Njb3BlLCBnbG9iYWxzLCBFYXNlLCBBbmltYXRpb24gfSBmcm9tIFwiLi9Ud2VlbkxpdGUuanNcIjtcbmltcG9ydCBUaW1lbGluZUxpdGUgZnJvbSBcIi4vVGltZWxpbmVMaXRlLmpzXCI7XG5cbl9nc1Njb3BlLl9nc0RlZmluZShcIlRpbWVsaW5lTWF4XCIsIFtcIlRpbWVsaW5lTGl0ZVwiLFwiVHdlZW5MaXRlXCIsXCJlYXNpbmcuRWFzZVwiXSwgZnVuY3Rpb24oKSB7XG5cdFx0XG5cdFx0dmFyIFRpbWVsaW5lTWF4ID0gZnVuY3Rpb24odmFycykge1xuXHRcdFx0XHRUaW1lbGluZUxpdGUuY2FsbCh0aGlzLCB2YXJzKTtcblx0XHRcdFx0dGhpcy5fcmVwZWF0ID0gdGhpcy52YXJzLnJlcGVhdCB8fCAwO1xuXHRcdFx0XHR0aGlzLl9yZXBlYXREZWxheSA9IHRoaXMudmFycy5yZXBlYXREZWxheSB8fCAwO1xuXHRcdFx0XHR0aGlzLl9jeWNsZSA9IDA7XG5cdFx0XHRcdHRoaXMuX3lveW8gPSAhIXRoaXMudmFycy55b3lvO1xuXHRcdFx0XHR0aGlzLl9kaXJ0eSA9IHRydWU7XG5cdFx0XHR9LFxuXHRcdFx0X3RpbnlOdW0gPSAwLjAwMDAwMDAxLFxuXHRcdFx0VHdlZW5MaXRlSW50ZXJuYWxzID0gVHdlZW5MaXRlLl9pbnRlcm5hbHMsXG5cdFx0XHRfbGF6eVR3ZWVucyA9IFR3ZWVuTGl0ZUludGVybmFscy5sYXp5VHdlZW5zLFxuXHRcdFx0X2xhenlSZW5kZXIgPSBUd2VlbkxpdGVJbnRlcm5hbHMubGF6eVJlbmRlcixcblx0XHRcdF9nbG9iYWxzID0gX2dzU2NvcGUuX2dzRGVmaW5lLmdsb2JhbHMsXG5cdFx0XHRfZWFzZU5vbmUgPSBuZXcgRWFzZShudWxsLCBudWxsLCAxLCAwKSxcblx0XHRcdHAgPSBUaW1lbGluZU1heC5wcm90b3R5cGUgPSBuZXcgVGltZWxpbmVMaXRlKCk7XG5cblx0XHRwLmNvbnN0cnVjdG9yID0gVGltZWxpbmVNYXg7XG5cdFx0cC5raWxsKCkuX2djID0gZmFsc2U7XG5cdFx0VGltZWxpbmVNYXgudmVyc2lvbiA9IFwiMi4xLjNcIjtcblxuXHRcdHAuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5feW95byA9ICEhdGhpcy52YXJzLnlveW87XG5cdFx0XHR0aGlzLl9yZXBlYXQgPSB0aGlzLnZhcnMucmVwZWF0IHx8IDA7XG5cdFx0XHR0aGlzLl9yZXBlYXREZWxheSA9IHRoaXMudmFycy5yZXBlYXREZWxheSB8fCAwO1xuXHRcdFx0dGhpcy5fdW5jYWNoZSh0cnVlKTtcblx0XHRcdHJldHVybiBUaW1lbGluZUxpdGUucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzKTtcblx0XHR9O1xuXG5cdFx0cC5hZGRDYWxsYmFjayA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBwb3NpdGlvbiwgcGFyYW1zLCBzY29wZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkKCBUd2VlbkxpdGUuZGVsYXllZENhbGwoMCwgY2FsbGJhY2ssIHBhcmFtcywgc2NvcGUpLCBwb3NpdGlvbik7XG5cdFx0fTtcblxuXHRcdHAucmVtb3ZlQ2FsbGJhY2sgPSBmdW5jdGlvbihjYWxsYmFjaywgcG9zaXRpb24pIHtcblx0XHRcdGlmIChjYWxsYmFjaykge1xuXHRcdFx0XHRpZiAocG9zaXRpb24gPT0gbnVsbCkge1xuXHRcdFx0XHRcdHRoaXMuX2tpbGwobnVsbCwgY2FsbGJhY2spO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBhID0gdGhpcy5nZXRUd2VlbnNPZihjYWxsYmFjaywgZmFsc2UpLFxuXHRcdFx0XHRcdFx0aSA9IGEubGVuZ3RoLFxuXHRcdFx0XHRcdFx0dGltZSA9IHRoaXMuX3BhcnNlVGltZU9yTGFiZWwocG9zaXRpb24pO1xuXHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0aWYgKGFbaV0uX3N0YXJ0VGltZSA9PT0gdGltZSkge1xuXHRcdFx0XHRcdFx0XHRhW2ldLl9lbmFibGVkKGZhbHNlLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5yZW1vdmVQYXVzZSA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5yZW1vdmVDYWxsYmFjayhUaW1lbGluZUxpdGUuX2ludGVybmFscy5wYXVzZUNhbGxiYWNrLCBwb3NpdGlvbik7XG5cdFx0fTtcblxuXHRcdHAudHdlZW5UbyA9IGZ1bmN0aW9uKHBvc2l0aW9uLCB2YXJzKSB7XG5cdFx0XHR2YXJzID0gdmFycyB8fCB7fTtcblx0XHRcdHZhciBjb3B5ID0ge2Vhc2U6X2Vhc2VOb25lLCB1c2VGcmFtZXM6dGhpcy51c2VzRnJhbWVzKCksIGltbWVkaWF0ZVJlbmRlcjpmYWxzZSwgbGF6eTpmYWxzZX0sXG5cdFx0XHRcdEVuZ2luZSA9ICh2YXJzLnJlcGVhdCAmJiBfZ2xvYmFscy5Ud2Vlbk1heCkgfHwgVHdlZW5MaXRlLFxuXHRcdFx0XHRkdXJhdGlvbiwgcCwgdDtcblx0XHRcdGZvciAocCBpbiB2YXJzKSB7XG5cdFx0XHRcdGNvcHlbcF0gPSB2YXJzW3BdO1xuXHRcdFx0fVxuXHRcdFx0Y29weS50aW1lID0gdGhpcy5fcGFyc2VUaW1lT3JMYWJlbChwb3NpdGlvbik7XG5cdFx0XHRkdXJhdGlvbiA9IChNYXRoLmFicyhOdW1iZXIoY29weS50aW1lKSAtIHRoaXMuX3RpbWUpIC8gdGhpcy5fdGltZVNjYWxlKSB8fCAwLjAwMTtcblx0XHRcdHQgPSBuZXcgRW5naW5lKHRoaXMsIGR1cmF0aW9uLCBjb3B5KTtcblx0XHRcdGNvcHkub25TdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0LnRhcmdldC5wYXVzZWQodHJ1ZSk7XG5cdFx0XHRcdGlmICh0LnZhcnMudGltZSAhPT0gdC50YXJnZXQudGltZSgpICYmIGR1cmF0aW9uID09PSB0LmR1cmF0aW9uKCkgJiYgIXQuaXNGcm9tVG8pIHsgLy9kb24ndCBtYWtlIHRoZSBkdXJhdGlvbiB6ZXJvIC0gaWYgaXQncyBzdXBwb3NlZCB0byBiZSB6ZXJvLCBkb24ndCB3b3JyeSBiZWNhdXNlIGl0J3MgYWxyZWFkeSBpbml0dGluZyB0aGUgdHdlZW4gYW5kIHdpbGwgY29tcGxldGUgaW1tZWRpYXRlbHksIGVmZmVjdGl2ZWx5IG1ha2luZyB0aGUgZHVyYXRpb24gemVybyBhbnl3YXkuIElmIHdlIG1ha2UgZHVyYXRpb24gemVybywgdGhlIHR3ZWVuIHdvbid0IHJ1biBhdCBhbGwuXG5cdFx0XHRcdFx0dC5kdXJhdGlvbiggTWF0aC5hYnMoIHQudmFycy50aW1lIC0gdC50YXJnZXQudGltZSgpKSAvIHQudGFyZ2V0Ll90aW1lU2NhbGUgKS5yZW5kZXIodC50aW1lKCksIHRydWUsIHRydWUpOyAvL3JlbmRlcigpIHJpZ2h0IGF3YXkgdG8gZW5zdXJlIHRoYXQgdGhpbmdzIGxvb2sgcmlnaHQsIGVzcGVjaWFsbHkgaW4gdGhlIGNhc2Ugb2YgLnR3ZWVuVG8oMCkuXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHZhcnMub25TdGFydCkgeyAvL2luIGNhc2UgdGhlIHVzZXIgaGFkIGFuIG9uU3RhcnQgaW4gdGhlIHZhcnMgLSB3ZSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSBpdC5cblx0XHRcdFx0XHR2YXJzLm9uU3RhcnQuYXBwbHkodmFycy5vblN0YXJ0U2NvcGUgfHwgdmFycy5jYWxsYmFja1Njb3BlIHx8IHQsIHZhcnMub25TdGFydFBhcmFtcyB8fCBbXSk7IC8vZG9uJ3QgdXNlIHQuX2NhbGxiYWNrKFwib25TdGFydFwiKSBvciBpdCdsbCBwb2ludCB0byB0aGUgY29weS5vblN0YXJ0IGFuZCB3ZSdsbCBnZXQgYSByZWN1cnNpb24gZXJyb3IuXG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRyZXR1cm4gdDtcblx0XHR9O1xuXG5cdFx0cC50d2VlbkZyb21UbyA9IGZ1bmN0aW9uKGZyb21Qb3NpdGlvbiwgdG9Qb3NpdGlvbiwgdmFycykge1xuXHRcdFx0dmFycyA9IHZhcnMgfHwge307XG5cdFx0XHRmcm9tUG9zaXRpb24gPSB0aGlzLl9wYXJzZVRpbWVPckxhYmVsKGZyb21Qb3NpdGlvbik7XG5cdFx0XHR2YXJzLnN0YXJ0QXQgPSB7b25Db21wbGV0ZTp0aGlzLnNlZWssIG9uQ29tcGxldGVQYXJhbXM6W2Zyb21Qb3NpdGlvbl0sIGNhbGxiYWNrU2NvcGU6dGhpc307XG5cdFx0XHR2YXJzLmltbWVkaWF0ZVJlbmRlciA9ICh2YXJzLmltbWVkaWF0ZVJlbmRlciAhPT0gZmFsc2UpO1xuXHRcdFx0dmFyIHQgPSB0aGlzLnR3ZWVuVG8odG9Qb3NpdGlvbiwgdmFycyk7XG5cdFx0XHR0LmlzRnJvbVRvID0gMTsgLy90byBlbnN1cmUgd2UgZG9uJ3QgbWVzcyB3aXRoIHRoZSBkdXJhdGlvbiBpbiB0aGUgb25TdGFydCAod2UndmUgZ290IHRoZSBzdGFydCBhbmQgZW5kIHZhbHVlcyBoZXJlLCBzbyBsb2NrIGl0IGluKVxuXHRcdFx0cmV0dXJuIHQuZHVyYXRpb24oKE1hdGguYWJzKCB0LnZhcnMudGltZSAtIGZyb21Qb3NpdGlvbikgLyB0aGlzLl90aW1lU2NhbGUpIHx8IDAuMDAxKTtcblx0XHR9O1xuXG5cdFx0cC5yZW5kZXIgPSBmdW5jdGlvbih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcblx0XHRcdGlmICh0aGlzLl9nYykge1xuXHRcdFx0XHR0aGlzLl9lbmFibGVkKHRydWUsIGZhbHNlKTtcblx0XHRcdH1cblx0XHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRcdFx0cHJldlRpbWUgPSBzZWxmLl90aW1lLFxuXHRcdFx0XHR0b3RhbER1ciA9ICghc2VsZi5fZGlydHkpID8gc2VsZi5fdG90YWxEdXJhdGlvbiA6IHNlbGYudG90YWxEdXJhdGlvbigpLFxuXHRcdFx0XHRkdXIgPSBzZWxmLl9kdXJhdGlvbixcblx0XHRcdFx0cHJldlRvdGFsVGltZSA9IHNlbGYuX3RvdGFsVGltZSxcblx0XHRcdFx0cHJldlN0YXJ0ID0gc2VsZi5fc3RhcnRUaW1lLFxuXHRcdFx0XHRwcmV2VGltZVNjYWxlID0gc2VsZi5fdGltZVNjYWxlLFxuXHRcdFx0XHRwcmV2UmF3UHJldlRpbWUgPSBzZWxmLl9yYXdQcmV2VGltZSxcblx0XHRcdFx0cHJldlBhdXNlZCA9IHNlbGYuX3BhdXNlZCxcblx0XHRcdFx0cHJldkN5Y2xlID0gc2VsZi5fY3ljbGUsXG5cdFx0XHRcdHR3ZWVuLCBpc0NvbXBsZXRlLCBuZXh0LCBjYWxsYmFjaywgaW50ZXJuYWxGb3JjZSwgY3ljbGVEdXJhdGlvbiwgcGF1c2VUd2VlbiwgY3VyVGltZSwgcGF1c2VUaW1lO1xuXHRcdFx0aWYgKHByZXZUaW1lICE9PSBzZWxmLl90aW1lKSB7IC8vaWYgdG90YWxEdXJhdGlvbigpIGZpbmRzIGEgY2hpbGQgd2l0aCBhIG5lZ2F0aXZlIHN0YXJ0VGltZSBhbmQgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgdGhpbmdzIGdldCBzaGlmdGVkIGFyb3VuZCBpbnRlcm5hbGx5IHNvIHdlIG5lZWQgdG8gYWRqdXN0IHRoZSB0aW1lIGFjY29yZGluZ2x5LiBGb3IgZXhhbXBsZSwgaWYgYSB0d2VlbiBzdGFydHMgYXQgLTMwIHdlIG11c3Qgc2hpZnQgRVZFUllUSElORyBmb3J3YXJkIDMwIHNlY29uZHMgYW5kIG1vdmUgdGhpcyB0aW1lbGluZSdzIHN0YXJ0VGltZSBiYWNrd2FyZCBieSAzMCBzZWNvbmRzIHNvIHRoYXQgdGhpbmdzIGFsaWduIHdpdGggdGhlIHBsYXloZWFkIChubyBqdW1wKS5cblx0XHRcdFx0dGltZSArPSBzZWxmLl90aW1lIC0gcHJldlRpbWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGltZSA+PSB0b3RhbER1ciAtIF90aW55TnVtICYmIHRpbWUgPj0gMCkgeyAvL3RvIHdvcmsgYXJvdW5kIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgbWF0aCBhcnRpZmFjdHMuXG5cdFx0XHRcdGlmICghc2VsZi5fbG9ja2VkKSB7XG5cdFx0XHRcdFx0c2VsZi5fdG90YWxUaW1lID0gdG90YWxEdXI7XG5cdFx0XHRcdFx0c2VsZi5fY3ljbGUgPSBzZWxmLl9yZXBlYXQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFzZWxmLl9yZXZlcnNlZCkgaWYgKCFzZWxmLl9oYXNQYXVzZWRDaGlsZCgpKSB7XG5cdFx0XHRcdFx0aXNDb21wbGV0ZSA9IHRydWU7XG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uQ29tcGxldGVcIjtcblx0XHRcdFx0XHRpbnRlcm5hbEZvcmNlID0gISFzZWxmLl90aW1lbGluZS5hdXRvUmVtb3ZlQ2hpbGRyZW47IC8vb3RoZXJ3aXNlLCBpZiB0aGUgYW5pbWF0aW9uIGlzIHVucGF1c2VkL2FjdGl2YXRlZCBhZnRlciBpdCdzIGFscmVhZHkgZmluaXNoZWQsIGl0IGRvZXNuJ3QgZ2V0IHJlbW92ZWQgZnJvbSB0aGUgcGFyZW50IHRpbWVsaW5lLlxuXHRcdFx0XHRcdGlmIChzZWxmLl9kdXJhdGlvbiA9PT0gMCkgaWYgKCh0aW1lIDw9IDAgJiYgdGltZSA+PSAtX3RpbnlOdW0pIHx8IHByZXZSYXdQcmV2VGltZSA8IDAgfHwgcHJldlJhd1ByZXZUaW1lID09PSBfdGlueU51bSkgaWYgKHByZXZSYXdQcmV2VGltZSAhPT0gdGltZSAmJiBzZWxmLl9maXJzdCkge1xuXHRcdFx0XHRcdFx0aW50ZXJuYWxGb3JjZSA9IHRydWU7XG5cdFx0XHRcdFx0XHRpZiAocHJldlJhd1ByZXZUaW1lID4gX3RpbnlOdW0pIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uUmV2ZXJzZUNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuX3Jhd1ByZXZUaW1lID0gKHNlbGYuX2R1cmF0aW9uIHx8ICFzdXBwcmVzc0V2ZW50cyB8fCB0aW1lIHx8IHNlbGYuX3Jhd1ByZXZUaW1lID09PSB0aW1lKSA/IHRpbWUgOiBfdGlueU51bTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSBvciB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC4gV2Ugc2V0IHRoZSBfcmF3UHJldlRpbWUgdG8gYmUgYSBwcmVjaXNlIHRpbnkgbnVtYmVyIHRvIGluZGljYXRlIHRoaXMgc2NlbmFyaW8gcmF0aGVyIHRoYW4gdXNpbmcgYW5vdGhlciBwcm9wZXJ0eS92YXJpYWJsZSB3aGljaCB3b3VsZCBpbmNyZWFzZSBtZW1vcnkgdXNhZ2UuIFRoaXMgdGVjaG5pcXVlIGlzIGxlc3MgcmVhZGFibGUsIGJ1dCBtb3JlIGVmZmljaWVudC5cblx0XHRcdFx0aWYgKHNlbGYuX3lveW8gJiYgKHNlbGYuX2N5Y2xlICYgMSkpIHtcblx0XHRcdFx0XHRzZWxmLl90aW1lID0gdGltZSA9IDA7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5fdGltZSA9IGR1cjtcblx0XHRcdFx0XHR0aW1lID0gZHVyICsgMC4wMDAxOyAvL3RvIGF2b2lkIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIC0gc29tZXRpbWVzIGNoaWxkIHR3ZWVucy90aW1lbGluZXMgd2VyZSBub3QgYmVpbmcgZnVsbHkgY29tcGxldGVkICh0aGVpciBwcm9ncmVzcyBtaWdodCBiZSAwLjk5OTk5OTk5OTk5OTk5OCBpbnN0ZWFkIG9mIDEgYmVjYXVzZSB3aGVuIF90aW1lIC0gdHdlZW4uX3N0YXJ0VGltZSBpcyBwZXJmb3JtZWQsIGZsb2F0aW5nIHBvaW50IGVycm9ycyB3b3VsZCByZXR1cm4gYSB2YWx1ZSB0aGF0IHdhcyBTTElHSFRMWSBvZmYpLiBUcnkgKDk5OTk5OTk5OTk5OS43IC0gOTk5OTk5OTk5OTk5KSAqIDEgPSAwLjY5OTk1MTE3MTg3NSBpbnN0ZWFkIG9mIDAuNy4gV2UgY2Fubm90IGRvIGxlc3MgdGhlbiAwLjAwMDEgYmVjYXVzZSB0aGUgc2FtZSBpc3N1ZSBjYW4gb2NjdXIgd2hlbiB0aGUgZHVyYXRpb24gaXMgZXh0cmVtZWx5IGxhcmdlIGxpa2UgOTk5OTk5OTk5OTk5IGluIHdoaWNoIGNhc2UgYWRkaW5nIDAuMDAwMDAwMDEsIGZvciBleGFtcGxlLCBjYXVzZXMgaXQgdG8gYWN0IGxpa2Ugbm90aGluZyB3YXMgYWRkZWQuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICh0aW1lIDwgX3RpbnlOdW0pIHsgLy90byB3b3JrIGFyb3VuZCBvY2Nhc2lvbmFsIGZsb2F0aW5nIHBvaW50IG1hdGggYXJ0aWZhY3RzLCByb3VuZCBzdXBlciBzbWFsbCB2YWx1ZXMgdG8gMC5cblx0XHRcdFx0aWYgKCFzZWxmLl9sb2NrZWQpIHtcblx0XHRcdFx0XHRzZWxmLl90b3RhbFRpbWUgPSBzZWxmLl9jeWNsZSA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2VsZi5fdGltZSA9IDA7XG5cdFx0XHRcdGlmICh0aW1lID4gLV90aW55TnVtKSB7XG5cdFx0XHRcdFx0dGltZSA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHByZXZUaW1lICE9PSAwIHx8IChkdXIgPT09IDAgJiYgcHJldlJhd1ByZXZUaW1lICE9PSBfdGlueU51bSAmJiAocHJldlJhd1ByZXZUaW1lID4gMCB8fCAodGltZSA8IDAgJiYgcHJldlJhd1ByZXZUaW1lID49IDApKSAmJiAhc2VsZi5fbG9ja2VkKSkgeyAvL2VkZ2UgY2FzZSBmb3IgY2hlY2tpbmcgdGltZSA8IDAgJiYgcHJldlJhd1ByZXZUaW1lID49IDA6IGEgemVyby1kdXJhdGlvbiBmcm9tVG8oKSB0d2VlbiBpbnNpZGUgYSB6ZXJvLWR1cmF0aW9uIHRpbWVsaW5lICh5ZWFoLCB2ZXJ5IHJhcmUpXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uUmV2ZXJzZUNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0aXNDb21wbGV0ZSA9IHNlbGYuX3JldmVyc2VkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aW1lIDwgMCkge1xuXHRcdFx0XHRcdHNlbGYuX2FjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdGlmIChzZWxmLl90aW1lbGluZS5hdXRvUmVtb3ZlQ2hpbGRyZW4gJiYgc2VsZi5fcmV2ZXJzZWQpIHtcblx0XHRcdFx0XHRcdGludGVybmFsRm9yY2UgPSBpc0NvbXBsZXRlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvblJldmVyc2VDb21wbGV0ZVwiO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocHJldlJhd1ByZXZUaW1lID49IDAgJiYgc2VsZi5fZmlyc3QpIHsgLy93aGVuIGdvaW5nIGJhY2sgYmV5b25kIHRoZSBzdGFydCwgZm9yY2UgYSByZW5kZXIgc28gdGhhdCB6ZXJvLWR1cmF0aW9uIHR3ZWVucyB0aGF0IHNpdCBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgcmVuZGVyIHRoZWlyIHN0YXJ0IHZhbHVlcyBwcm9wZXJseS4gT3RoZXJ3aXNlLCBpZiB0aGUgcGFyZW50IHRpbWVsaW5lJ3MgcGxheWhlYWQgbGFuZHMgZXhhY3RseSBhdCB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lLCBhbmQgdGhlbiBtb3ZlcyBiYWNrd2FyZHMsIHRoZSB6ZXJvLWR1cmF0aW9uIHR3ZWVucyBhdCB0aGUgYmVnaW5uaW5nIHdvdWxkIHN0aWxsIGJlIGF0IHRoZWlyIGVuZCBzdGF0ZS5cblx0XHRcdFx0XHRcdGludGVybmFsRm9yY2UgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzZWxmLl9yYXdQcmV2VGltZSA9IHRpbWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5fcmF3UHJldlRpbWUgPSAoZHVyIHx8ICFzdXBwcmVzc0V2ZW50cyB8fCB0aW1lIHx8IHNlbGYuX3Jhd1ByZXZUaW1lID09PSB0aW1lKSA/IHRpbWUgOiBfdGlueU51bTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSBvciB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC4gV2Ugc2V0IHRoZSBfcmF3UHJldlRpbWUgdG8gYmUgYSBwcmVjaXNlIHRpbnkgbnVtYmVyIHRvIGluZGljYXRlIHRoaXMgc2NlbmFyaW8gcmF0aGVyIHRoYW4gdXNpbmcgYW5vdGhlciBwcm9wZXJ0eS92YXJpYWJsZSB3aGljaCB3b3VsZCBpbmNyZWFzZSBtZW1vcnkgdXNhZ2UuIFRoaXMgdGVjaG5pcXVlIGlzIGxlc3MgcmVhZGFibGUsIGJ1dCBtb3JlIGVmZmljaWVudC5cblx0XHRcdFx0XHRpZiAodGltZSA9PT0gMCAmJiBpc0NvbXBsZXRlKSB7IC8vaWYgdGhlcmUncyBhIHplcm8tZHVyYXRpb24gdHdlZW4gYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9mIGEgdGltZWxpbmUgYW5kIHRoZSBwbGF5aGVhZCBsYW5kcyBFWEFDVExZIGF0IHRpbWUgMCwgdGhhdCB0d2VlbiB3aWxsIGNvcnJlY3RseSByZW5kZXIgaXRzIGVuZCB2YWx1ZXMsIGJ1dCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHRpbWVsaW5lIGFsaXZlIGZvciBvbmUgbW9yZSByZW5kZXIgc28gdGhhdCB0aGUgYmVnaW5uaW5nIHZhbHVlcyByZW5kZXIgcHJvcGVybHkgYXMgdGhlIHBhcmVudCdzIHBsYXloZWFkIGtlZXBzIG1vdmluZyBiZXlvbmQgdGhlIGJlZ2luaW5nLiBJbWFnaW5lIG9iai54IHN0YXJ0cyBhdCAwIGFuZCB0aGVuIHdlIGRvIHRsLnNldChvYmosIHt4OjEwMH0pLnRvKG9iaiwgMSwge3g6MjAwfSkgYW5kIHRoZW4gbGF0ZXIgd2UgdGwucmV2ZXJzZSgpLi4udGhlIGdvYWwgaXMgdG8gaGF2ZSBvYmoueCByZXZlcnQgdG8gMC4gSWYgdGhlIHBsYXloZWFkIGhhcHBlbnMgdG8gbGFuZCBvbiBleGFjdGx5IDAsIHdpdGhvdXQgdGhpcyBjaHVuayBvZiBjb2RlLCBpdCdkIGNvbXBsZXRlIHRoZSB0aW1lbGluZSBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHJlbmRlcmluZyBxdWV1ZSAobm90IGdvb2QpLlxuXHRcdFx0XHRcdFx0dHdlZW4gPSBzZWxmLl9maXJzdDtcblx0XHRcdFx0XHRcdHdoaWxlICh0d2VlbiAmJiB0d2Vlbi5fc3RhcnRUaW1lID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdGlmICghdHdlZW4uX2R1cmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdFx0aXNDb21wbGV0ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRpbWUgPSAwOyAvL3RvIGF2b2lkIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIChjb3VsZCBjYXVzZSBwcm9ibGVtcyBlc3BlY2lhbGx5IHdpdGggemVyby1kdXJhdGlvbiB0d2VlbnMgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSlcblx0XHRcdFx0XHRpZiAoIXNlbGYuX2luaXR0ZWQpIHtcblx0XHRcdFx0XHRcdGludGVybmFsRm9yY2UgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoZHVyID09PSAwICYmIHByZXZSYXdQcmV2VGltZSA8IDApIHsgLy93aXRob3V0IHRoaXMsIHplcm8tZHVyYXRpb24gcmVwZWF0aW5nIHRpbWVsaW5lcyAobGlrZSB3aXRoIGEgc2ltcGxlIGNhbGxiYWNrIG5lc3RlZCBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgYW5kIGEgcmVwZWF0RGVsYXkpIHdvdWxkbid0IHJlbmRlciB0aGUgZmlyc3QgdGltZSB0aHJvdWdoLlxuXHRcdFx0XHRcdGludGVybmFsRm9yY2UgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuX3RpbWUgPSBzZWxmLl9yYXdQcmV2VGltZSA9IHRpbWU7XG5cdFx0XHRcdGlmICghc2VsZi5fbG9ja2VkKSB7XG5cdFx0XHRcdFx0c2VsZi5fdG90YWxUaW1lID0gdGltZTtcblx0XHRcdFx0XHRpZiAoc2VsZi5fcmVwZWF0ICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRjeWNsZUR1cmF0aW9uID0gZHVyICsgc2VsZi5fcmVwZWF0RGVsYXk7XG5cdFx0XHRcdFx0XHRzZWxmLl9jeWNsZSA9IChzZWxmLl90b3RhbFRpbWUgLyBjeWNsZUR1cmF0aW9uKSA+PiAwOyAvL29yaWdpbmFsbHkgX3RvdGFsVGltZSAlIGN5Y2xlRHVyYXRpb24gYnV0IGZsb2F0aW5nIHBvaW50IGVycm9ycyBjYXVzZWQgcHJvYmxlbXMsIHNvIEkgbm9ybWFsaXplZCBpdC4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IGl0IGdldHMgcmVwb3J0ZWQgYXMgMC43OTk5OTk5OSEpXG5cdFx0XHRcdFx0XHRpZiAoc2VsZi5fY3ljbGUpIGlmIChzZWxmLl9jeWNsZSA9PT0gc2VsZi5fdG90YWxUaW1lIC8gY3ljbGVEdXJhdGlvbiAmJiBwcmV2VG90YWxUaW1lIDw9IHRpbWUpIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5fY3ljbGUtLTsgLy9vdGhlcndpc2Ugd2hlbiByZW5kZXJlZCBleGFjdGx5IGF0IHRoZSBlbmQgdGltZSwgaXQgd2lsbCBhY3QgYXMgdGhvdWdoIGl0IGlzIHJlcGVhdGluZyAoYXQgdGhlIGJlZ2lubmluZylcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHNlbGYuX3RpbWUgPSBzZWxmLl90b3RhbFRpbWUgLSAoc2VsZi5fY3ljbGUgKiBjeWNsZUR1cmF0aW9uKTtcblx0XHRcdFx0XHRcdGlmIChzZWxmLl95b3lvKSBpZiAoc2VsZi5fY3ljbGUgJiAxKSB7XG5cdFx0XHRcdFx0XHRcdHNlbGYuX3RpbWUgPSBkdXIgLSBzZWxmLl90aW1lO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHNlbGYuX3RpbWUgPiBkdXIpIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5fdGltZSA9IGR1cjtcblx0XHRcdFx0XHRcdFx0dGltZSA9IGR1ciArIDAuMDAwMTsgLy90byBhdm9pZCBvY2Nhc2lvbmFsIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9yXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHNlbGYuX3RpbWUgPCAwKSB7XG5cdFx0XHRcdFx0XHRcdHNlbGYuX3RpbWUgPSB0aW1lID0gMDtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRpbWUgPSBzZWxmLl90aW1lO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc2VsZi5faGFzUGF1c2UgJiYgIXNlbGYuX2ZvcmNpbmdQbGF5aGVhZCAmJiAhc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdFx0dGltZSA9IHNlbGYuX3RpbWU7XG5cdFx0XHRcdGlmICh0aW1lID4gcHJldlRpbWUgfHwgKHNlbGYuX3JlcGVhdCAmJiBwcmV2Q3ljbGUgIT09IHNlbGYuX2N5Y2xlKSkge1xuXHRcdFx0XHRcdHR3ZWVuID0gc2VsZi5fZmlyc3Q7XG5cdFx0XHRcdFx0d2hpbGUgKHR3ZWVuICYmIHR3ZWVuLl9zdGFydFRpbWUgPD0gdGltZSAmJiAhcGF1c2VUd2Vlbikge1xuXHRcdFx0XHRcdFx0aWYgKCF0d2Vlbi5fZHVyYXRpb24pIGlmICh0d2Vlbi5kYXRhID09PSBcImlzUGF1c2VcIiAmJiAhdHdlZW4ucmF0aW8gJiYgISh0d2Vlbi5fc3RhcnRUaW1lID09PSAwICYmIHNlbGYuX3Jhd1ByZXZUaW1lID09PSAwKSkge1xuXHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gdHdlZW47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0d2VlbiA9IHR3ZWVuLl9uZXh0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0d2VlbiA9IHNlbGYuX2xhc3Q7XG5cdFx0XHRcdFx0d2hpbGUgKHR3ZWVuICYmIHR3ZWVuLl9zdGFydFRpbWUgPj0gdGltZSAmJiAhcGF1c2VUd2Vlbikge1xuXHRcdFx0XHRcdFx0aWYgKCF0d2Vlbi5fZHVyYXRpb24pIGlmICh0d2Vlbi5kYXRhID09PSBcImlzUGF1c2VcIiAmJiB0d2Vlbi5fcmF3UHJldlRpbWUgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdHBhdXNlVHdlZW4gPSB0d2Vlbjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX3ByZXY7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwYXVzZVR3ZWVuKSB7XG5cdFx0XHRcdFx0cGF1c2VUaW1lID0gc2VsZi5fc3RhcnRUaW1lICsgKHNlbGYuX3JldmVyc2VkID8gc2VsZi5fZHVyYXRpb24gLSBwYXVzZVR3ZWVuLl9zdGFydFRpbWUgOiBwYXVzZVR3ZWVuLl9zdGFydFRpbWUpIC8gc2VsZi5fdGltZVNjYWxlO1xuXHRcdFx0XHRcdGlmIChwYXVzZVR3ZWVuLl9zdGFydFRpbWUgPCBkdXIpIHtcblx0XHRcdFx0XHRcdHNlbGYuX3RpbWUgPSBzZWxmLl9yYXdQcmV2VGltZSA9IHRpbWUgPSBwYXVzZVR3ZWVuLl9zdGFydFRpbWU7XG5cdFx0XHRcdFx0XHRzZWxmLl90b3RhbFRpbWUgPSB0aW1lICsgKHNlbGYuX2N5Y2xlICogKHNlbGYuX3RvdGFsRHVyYXRpb24gKyBzZWxmLl9yZXBlYXREZWxheSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc2VsZi5fY3ljbGUgIT09IHByZXZDeWNsZSkgaWYgKCFzZWxmLl9sb2NrZWQpIHtcblx0XHRcdFx0Lypcblx0XHRcdFx0bWFrZSBzdXJlIGNoaWxkcmVuIGF0IHRoZSBlbmQvYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSBhcmUgcmVuZGVyZWQgcHJvcGVybHkuIElmLCBmb3IgZXhhbXBsZSxcblx0XHRcdFx0YSAzLXNlY29uZCBsb25nIHRpbWVsaW5lIHJlbmRlcmVkIGF0IDIuOSBzZWNvbmRzIHByZXZpb3VzbHksIGFuZCBub3cgcmVuZGVycyBhdCAzLjIgc2Vjb25kcyAod2hpY2hcblx0XHRcdFx0d291bGQgZ2V0IHRyYW5zbGF0ZWQgdG8gMi44IHNlY29uZHMgaWYgdGhlIHRpbWVsaW5lIHlveW9zIG9yIDAuMiBzZWNvbmRzIGlmIGl0IGp1c3QgcmVwZWF0cyksIHRoZXJlXG5cdFx0XHRcdGNvdWxkIGJlIGEgY2FsbGJhY2sgb3IgYSBzaG9ydCB0d2VlbiB0aGF0J3MgYXQgMi45NSBvciAzIHNlY29uZHMgaW4gd2hpY2ggd291bGRuJ3QgcmVuZGVyLiBTb1xuXHRcdFx0XHR3ZSBuZWVkIHRvIHB1c2ggdGhlIHRpbWVsaW5lIHRvIHRoZSBlbmQgKGFuZC9vciBiZWdpbm5pbmcgZGVwZW5kaW5nIG9uIGl0cyB5b3lvIHZhbHVlKS4gQWxzbyB3ZSBtdXN0XG5cdFx0XHRcdGVuc3VyZSB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIFRpbWVsaW5lTWF4IHdvcmsuXG5cdFx0XHRcdCovXG5cdFx0XHRcdHZhciBiYWNrd2FyZHMgPSAoc2VsZi5feW95byAmJiAocHJldkN5Y2xlICYgMSkgIT09IDApLFxuXHRcdFx0XHRcdHdyYXAgPSAoYmFja3dhcmRzID09PSAoc2VsZi5feW95byAmJiAoc2VsZi5fY3ljbGUgJiAxKSAhPT0gMCkpLFxuXHRcdFx0XHRcdHJlY1RvdGFsVGltZSA9IHNlbGYuX3RvdGFsVGltZSxcblx0XHRcdFx0XHRyZWNDeWNsZSA9IHNlbGYuX2N5Y2xlLFxuXHRcdFx0XHRcdHJlY1Jhd1ByZXZUaW1lID0gc2VsZi5fcmF3UHJldlRpbWUsXG5cdFx0XHRcdFx0cmVjVGltZSA9IHNlbGYuX3RpbWU7XG5cblx0XHRcdFx0c2VsZi5fdG90YWxUaW1lID0gcHJldkN5Y2xlICogZHVyO1xuXHRcdFx0XHRpZiAoc2VsZi5fY3ljbGUgPCBwcmV2Q3ljbGUpIHtcblx0XHRcdFx0XHRiYWNrd2FyZHMgPSAhYmFja3dhcmRzO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNlbGYuX3RvdGFsVGltZSArPSBkdXI7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2VsZi5fdGltZSA9IHByZXZUaW1lOyAvL3RlbXBvcmFyaWx5IHJldmVydCBfdGltZSBzbyB0aGF0IHJlbmRlcigpIHJlbmRlcnMgdGhlIGNoaWxkcmVuIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBXaXRob3V0IHRoaXMsIHR3ZWVucyB3b24ndCByZXdpbmQgY29ycmVjdGx5LiBXZSBjb3VsZCBhcmhpY3RlY3QgdGhpbmdzIGluIGEgXCJjbGVhbmVyXCIgd2F5IGJ5IHNwbGl0dGluZyBvdXQgdGhlIHJlbmRlcmluZyBxdWV1ZSBpbnRvIGEgc2VwYXJhdGUgbWV0aG9kIGJ1dCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2Uga2VwdCBpdCBhbGwgaW5zaWRlIHRoaXMgbWV0aG9kLlxuXG5cdFx0XHRcdHNlbGYuX3Jhd1ByZXZUaW1lID0gKGR1ciA9PT0gMCkgPyBwcmV2UmF3UHJldlRpbWUgLSAwLjAwMDEgOiBwcmV2UmF3UHJldlRpbWU7XG5cdFx0XHRcdHNlbGYuX2N5Y2xlID0gcHJldkN5Y2xlO1xuXHRcdFx0XHRzZWxmLl9sb2NrZWQgPSB0cnVlOyAvL3ByZXZlbnRzIGNoYW5nZXMgdG8gdG90YWxUaW1lIGFuZCBza2lwcyByZXBlYXQveW95byBiZWhhdmlvciB3aGVuIHdlIHJlY3Vyc2l2ZWx5IGNhbGwgcmVuZGVyKClcblx0XHRcdFx0cHJldlRpbWUgPSAoYmFja3dhcmRzKSA/IDAgOiBkdXI7XG5cdFx0XHRcdHNlbGYucmVuZGVyKHByZXZUaW1lLCBzdXBwcmVzc0V2ZW50cywgKGR1ciA9PT0gMCkpO1xuXHRcdFx0XHRpZiAoIXN1cHByZXNzRXZlbnRzKSBpZiAoIXNlbGYuX2djKSB7XG5cdFx0XHRcdFx0aWYgKHNlbGYudmFycy5vblJlcGVhdCkge1xuXHRcdFx0XHRcdFx0c2VsZi5fY3ljbGUgPSByZWNDeWNsZTsgLy9pbiBjYXNlIHRoZSBvblJlcGVhdCBhbHRlcnMgdGhlIHBsYXloZWFkIG9yIGludmFsaWRhdGVzKCksIHdlIHNob3VsZG4ndCBzdGF5IGxvY2tlZCBvciB1c2UgdGhlIHByZXZpb3VzIGN5Y2xlLlxuXHRcdFx0XHRcdFx0c2VsZi5fbG9ja2VkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRzZWxmLl9jYWxsYmFjayhcIm9uUmVwZWF0XCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocHJldlRpbWUgIT09IHNlbGYuX3RpbWUpIHsgLy9pbiBjYXNlIHRoZXJlJ3MgYSBjYWxsYmFjayBsaWtlIG9uQ29tcGxldGUgaW4gYSBuZXN0ZWQgdHdlZW4vdGltZWxpbmUgdGhhdCBjaGFuZ2VzIHRoZSBwbGF5aGVhZCBwb3NpdGlvbiwgbGlrZSB2aWEgc2VlaygpLCB3ZSBzaG91bGQganVzdCBhYm9ydC5cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHdyYXApIHtcblx0XHRcdFx0XHRzZWxmLl9jeWNsZSA9IHByZXZDeWNsZTsgLy9pZiB0aGVyZSdzIGFuIG9uUmVwZWF0LCB3ZSByZXZlcnRlZCB0aGlzIGFib3ZlLCBzbyBtYWtlIHN1cmUgaXQncyBzZXQgcHJvcGVybHkgYWdhaW4uIFdlIGFsc28gdW5sb2NrZWQgaW4gdGhhdCBzY2VuYXJpbywgc28gcmVzZXQgdGhhdCB0b28uXG5cdFx0XHRcdFx0c2VsZi5fbG9ja2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRwcmV2VGltZSA9IChiYWNrd2FyZHMpID8gZHVyICsgMC4wMDAxIDogLTAuMDAwMTtcblx0XHRcdFx0XHRzZWxmLnJlbmRlcihwcmV2VGltZSwgdHJ1ZSwgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuX2xvY2tlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZiAoc2VsZi5fcGF1c2VkICYmICFwcmV2UGF1c2VkKSB7IC8vaWYgdGhlIHJlbmRlcigpIHRyaWdnZXJlZCBjYWxsYmFjayB0aGF0IHBhdXNlZCB0aGlzIHRpbWVsaW5lLCB3ZSBzaG91bGQgYWJvcnQgKHZlcnkgcmFyZSwgYnV0IHBvc3NpYmxlKVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLl90aW1lID0gcmVjVGltZTtcblx0XHRcdFx0c2VsZi5fdG90YWxUaW1lID0gcmVjVG90YWxUaW1lO1xuXHRcdFx0XHRzZWxmLl9jeWNsZSA9IHJlY0N5Y2xlO1xuXHRcdFx0XHRzZWxmLl9yYXdQcmV2VGltZSA9IHJlY1Jhd1ByZXZUaW1lO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoKHNlbGYuX3RpbWUgPT09IHByZXZUaW1lIHx8ICFzZWxmLl9maXJzdCkgJiYgIWZvcmNlICYmICFpbnRlcm5hbEZvcmNlICYmICFwYXVzZVR3ZWVuKSB7XG5cdFx0XHRcdGlmIChwcmV2VG90YWxUaW1lICE9PSBzZWxmLl90b3RhbFRpbWUpIGlmIChzZWxmLl9vblVwZGF0ZSkgaWYgKCFzdXBwcmVzc0V2ZW50cykgeyAvL3NvIHRoYXQgb25VcGRhdGUgZmlyZXMgZXZlbiBkdXJpbmcgdGhlIHJlcGVhdERlbGF5IC0gYXMgbG9uZyBhcyB0aGUgdG90YWxUaW1lIGNoYW5nZWQsIHdlIHNob3VsZCB0cmlnZ2VyIG9uVXBkYXRlLlxuXHRcdFx0XHRcdHNlbGYuX2NhbGxiYWNrKFwib25VcGRhdGVcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBlbHNlIGlmICghc2VsZi5faW5pdHRlZCkge1xuXHRcdFx0XHRzZWxmLl9pbml0dGVkID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFzZWxmLl9hY3RpdmUpIGlmICghc2VsZi5fcGF1c2VkICYmIHNlbGYuX3RvdGFsVGltZSAhPT0gcHJldlRvdGFsVGltZSAmJiB0aW1lID4gMCkge1xuXHRcdFx0XHRzZWxmLl9hY3RpdmUgPSB0cnVlOyAgLy9zbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgdGhlIHRpbWVsaW5lIChhcyBvcHBvc2VkIHRvIHRoZSBwYXJlbnQgdGltZWxpbmUgcmVuZGVyaW5nIGl0KSwgaXQgaXMgZm9yY2VkIHRvIHJlLXJlbmRlciBhbmQgYWxpZ24gaXQgd2l0aCB0aGUgcHJvcGVyIHRpbWUvZnJhbWUgb24gdGhlIG5leHQgcmVuZGVyaW5nIGN5Y2xlLiBNYXliZSB0aGUgdGltZWxpbmUgYWxyZWFkeSBmaW5pc2hlZCBidXQgdGhlIHVzZXIgbWFudWFsbHkgcmUtcmVuZGVycyBpdCBhcyBoYWxmd2F5IGRvbmUsIGZvciBleGFtcGxlLlxuXHRcdFx0fVxuXG5cdFx0XHRpZiAocHJldlRvdGFsVGltZSA9PT0gMCkgaWYgKHNlbGYudmFycy5vblN0YXJ0KSBpZiAoc2VsZi5fdG90YWxUaW1lICE9PSAwIHx8ICFzZWxmLl90b3RhbER1cmF0aW9uKSBpZiAoIXN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRcdHNlbGYuX2NhbGxiYWNrKFwib25TdGFydFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Y3VyVGltZSA9IHNlbGYuX3RpbWU7XG5cdFx0XHRpZiAoY3VyVGltZSA+PSBwcmV2VGltZSkge1xuXHRcdFx0XHR0d2VlbiA9IHNlbGYuX2ZpcnN0O1xuXHRcdFx0XHR3aGlsZSAodHdlZW4pIHtcblx0XHRcdFx0XHRuZXh0ID0gdHdlZW4uX25leHQ7IC8vcmVjb3JkIGl0IGhlcmUgYmVjYXVzZSB0aGUgdmFsdWUgY291bGQgY2hhbmdlIGFmdGVyIHJlbmRlcmluZy4uLlxuXHRcdFx0XHRcdGlmIChjdXJUaW1lICE9PSBzZWxmLl90aW1lIHx8IChzZWxmLl9wYXVzZWQgJiYgIXByZXZQYXVzZWQpKSB7IC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHdlZW4uX2FjdGl2ZSB8fCAodHdlZW4uX3N0YXJ0VGltZSA8PSBzZWxmLl90aW1lICYmICF0d2Vlbi5fcGF1c2VkICYmICF0d2Vlbi5fZ2MpKSB7XG5cdFx0XHRcdFx0XHRpZiAocGF1c2VUd2VlbiA9PT0gdHdlZW4pIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5wYXVzZSgpO1xuXHRcdFx0XHRcdFx0XHRzZWxmLl9wYXVzZVRpbWUgPSBwYXVzZVRpbWU7IC8vc28gdGhhdCB3aGVuIHdlIHJlc3VtZSgpLCBpdCdzIHN0YXJ0aW5nIGZyb20gZXhhY3RseSB0aGUgcmlnaHQgc3BvdCAodGhlIHBhdXNlKCkgbWV0aG9kIHVzZXMgdGhlIHJhd1RpbWUgZm9yIHRoZSBwYXJlbnQsIGJ1dCB0aGF0IG1heSBiZSBhIGJpdCB0b28gZmFyIGFoZWFkKVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCF0d2Vlbi5fcmV2ZXJzZWQpIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCh0aW1lIC0gdHdlZW4uX3N0YXJ0VGltZSkgKiB0d2Vlbi5fdGltZVNjYWxlLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCgoIXR3ZWVuLl9kaXJ0eSkgPyB0d2Vlbi5fdG90YWxEdXJhdGlvbiA6IHR3ZWVuLnRvdGFsRHVyYXRpb24oKSkgLSAoKHRpbWUgLSB0d2Vlbi5fc3RhcnRUaW1lKSAqIHR3ZWVuLl90aW1lU2NhbGUpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0d2VlbiA9IG5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuID0gc2VsZi5fbGFzdDtcblx0XHRcdFx0d2hpbGUgKHR3ZWVuKSB7XG5cdFx0XHRcdFx0bmV4dCA9IHR3ZWVuLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGJlY2F1c2UgdGhlIHZhbHVlIGNvdWxkIGNoYW5nZSBhZnRlciByZW5kZXJpbmcuLi5cblx0XHRcdFx0XHRpZiAoY3VyVGltZSAhPT0gc2VsZi5fdGltZSB8fCAoc2VsZi5fcGF1c2VkICYmICFwcmV2UGF1c2VkKSkgeyAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR3ZWVuLl9hY3RpdmUgfHwgKHR3ZWVuLl9zdGFydFRpbWUgPD0gcHJldlRpbWUgJiYgIXR3ZWVuLl9wYXVzZWQgJiYgIXR3ZWVuLl9nYykpIHtcblx0XHRcdFx0XHRcdGlmIChwYXVzZVR3ZWVuID09PSB0d2Vlbikge1xuXHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gdHdlZW4uX3ByZXY7IC8vdGhlIGxpbmtlZCBsaXN0IGlzIG9yZ2FuaXplZCBieSBfc3RhcnRUaW1lLCB0aHVzIGl0J3MgcG9zc2libGUgdGhhdCBhIHR3ZWVuIGNvdWxkIHN0YXJ0IEJFRk9SRSB0aGUgcGF1c2UgYW5kIGVuZCBhZnRlciBpdCwgaW4gd2hpY2ggY2FzZSBpdCB3b3VsZCBiZSBwb3NpdGlvbmVkIGJlZm9yZSB0aGUgcGF1c2UgdHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0LCBidXQgd2Ugc2hvdWxkIHJlbmRlciBpdCBiZWZvcmUgd2UgcGF1c2UoKSB0aGUgdGltZWxpbmUgYW5kIGNlYXNlIHJlbmRlcmluZy4gVGhpcyBpcyBvbmx5IGEgY29uY2VybiB3aGVuIGdvaW5nIGluIHJldmVyc2UuXG5cdFx0XHRcdFx0XHRcdHdoaWxlIChwYXVzZVR3ZWVuICYmIHBhdXNlVHdlZW4uZW5kVGltZSgpID4gc2VsZi5fdGltZSkge1xuXHRcdFx0XHRcdFx0XHRcdHBhdXNlVHdlZW4ucmVuZGVyKCAocGF1c2VUd2Vlbi5fcmV2ZXJzZWQgPyBwYXVzZVR3ZWVuLnRvdGFsRHVyYXRpb24oKSAtICgodGltZSAtIHBhdXNlVHdlZW4uX3N0YXJ0VGltZSkgKiBwYXVzZVR3ZWVuLl90aW1lU2NhbGUpIDogKHRpbWUgLSBwYXVzZVR3ZWVuLl9zdGFydFRpbWUpICogcGF1c2VUd2Vlbi5fdGltZVNjYWxlKSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblx0XHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gcGF1c2VUd2Vlbi5fcHJldjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0c2VsZi5wYXVzZSgpO1xuXHRcdFx0XHRcdFx0XHRzZWxmLl9wYXVzZVRpbWUgPSBwYXVzZVRpbWU7IC8vc28gdGhhdCB3aGVuIHdlIHJlc3VtZSgpLCBpdCdzIHN0YXJ0aW5nIGZyb20gZXhhY3RseSB0aGUgcmlnaHQgc3BvdCAodGhlIHBhdXNlKCkgbWV0aG9kIHVzZXMgdGhlIHJhd1RpbWUgZm9yIHRoZSBwYXJlbnQsIGJ1dCB0aGF0IG1heSBiZSBhIGJpdCB0b28gZmFyIGFoZWFkKVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCF0d2Vlbi5fcmV2ZXJzZWQpIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCh0aW1lIC0gdHdlZW4uX3N0YXJ0VGltZSkgKiB0d2Vlbi5fdGltZVNjYWxlLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCgoIXR3ZWVuLl9kaXJ0eSkgPyB0d2Vlbi5fdG90YWxEdXJhdGlvbiA6IHR3ZWVuLnRvdGFsRHVyYXRpb24oKSkgLSAoKHRpbWUgLSB0d2Vlbi5fc3RhcnRUaW1lKSAqIHR3ZWVuLl90aW1lU2NhbGUpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0d2VlbiA9IG5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHNlbGYuX29uVXBkYXRlKSBpZiAoIXN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRcdGlmIChfbGF6eVR3ZWVucy5sZW5ndGgpIHsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIGEgdGltZWxpbmUgZmluaXNoZXMsIHVzZXJzIGV4cGVjdCB0aGluZ3MgdG8gaGF2ZSByZW5kZXJlZCBmdWxseS4gSW1hZ2luZSBhbiBvblVwZGF0ZSBvbiBhIHRpbWVsaW5lIHRoYXQgcmVwb3J0cy9jaGVja3MgdHdlZW5lZCB2YWx1ZXMuXG5cdFx0XHRcdFx0X2xhenlSZW5kZXIoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLl9jYWxsYmFjayhcIm9uVXBkYXRlXCIpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGNhbGxiYWNrKSBpZiAoIXNlbGYuX2xvY2tlZCkgaWYgKCFzZWxmLl9nYykgaWYgKHByZXZTdGFydCA9PT0gc2VsZi5fc3RhcnRUaW1lIHx8IHByZXZUaW1lU2NhbGUgIT09IHNlbGYuX3RpbWVTY2FsZSkgaWYgKHNlbGYuX3RpbWUgPT09IDAgfHwgdG90YWxEdXIgPj0gc2VsZi50b3RhbER1cmF0aW9uKCkpIHsgLy9pZiBvbmUgb2YgdGhlIHR3ZWVucyB0aGF0IHdhcyByZW5kZXJlZCBhbHRlcmVkIHRoaXMgdGltZWxpbmUncyBzdGFydFRpbWUgKGxpa2UgaWYgYW4gb25Db21wbGV0ZSByZXZlcnNlZCB0aGUgdGltZWxpbmUpLCBpdCBwcm9iYWJseSBpc24ndCBjb21wbGV0ZS4gSWYgaXQgaXMsIGRvbid0IHdvcnJ5LCBiZWNhdXNlIHdoYXRldmVyIGNhbGwgYWx0ZXJlZCB0aGUgc3RhcnRUaW1lIHdvdWxkIGNvbXBsZXRlIGlmIGl0IHdhcyBuZWNlc3NhcnkgYXQgdGhlIG5ldyB0aW1lLiBUaGUgb25seSBleGNlcHRpb24gaXMgdGhlIHRpbWVTY2FsZSBwcm9wZXJ0eS4gQWxzbyBjaGVjayBfZ2MgYmVjYXVzZSB0aGVyZSdzIGEgY2hhbmNlIHRoYXQga2lsbCgpIGNvdWxkIGJlIGNhbGxlZCBpbiBhbiBvblVwZGF0ZVxuXHRcdFx0XHRpZiAoaXNDb21wbGV0ZSkge1xuXHRcdFx0XHRcdGlmIChfbGF6eVR3ZWVucy5sZW5ndGgpIHsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIGEgdGltZWxpbmUgZmluaXNoZXMsIHVzZXJzIGV4cGVjdCB0aGluZ3MgdG8gaGF2ZSByZW5kZXJlZCBmdWxseS4gSW1hZ2luZSBhbiBvbkNvbXBsZXRlIG9uIGEgdGltZWxpbmUgdGhhdCByZXBvcnRzL2NoZWNrcyB0d2VlbmVkIHZhbHVlcy5cblx0XHRcdFx0XHRcdF9sYXp5UmVuZGVyKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChzZWxmLl90aW1lbGluZS5hdXRvUmVtb3ZlQ2hpbGRyZW4pIHtcblx0XHRcdFx0XHRcdHNlbGYuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c2VsZi5fYWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFzdXBwcmVzc0V2ZW50cyAmJiBzZWxmLnZhcnNbY2FsbGJhY2tdKSB7XG5cdFx0XHRcdFx0c2VsZi5fY2FsbGJhY2soY2FsbGJhY2spO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHAuZ2V0QWN0aXZlID0gZnVuY3Rpb24obmVzdGVkLCB0d2VlbnMsIHRpbWVsaW5lcykge1xuXHRcdFx0dmFyIGEgPSBbXSxcblx0XHRcdFx0YWxsID0gdGhpcy5nZXRDaGlsZHJlbihuZXN0ZWQgfHwgKG5lc3RlZCA9PSBudWxsKSwgdHdlZW5zIHx8IChuZXN0ZWQgPT0gbnVsbCksICEhdGltZWxpbmVzKSxcblx0XHRcdFx0Y250ID0gMCxcblx0XHRcdFx0bCA9IGFsbC5sZW5ndGgsXG5cdFx0XHRcdGksIHR3ZWVuO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR0d2VlbiA9IGFsbFtpXTtcblx0XHRcdFx0aWYgKHR3ZWVuLmlzQWN0aXZlKCkpIHtcblx0XHRcdFx0XHRhW2NudCsrXSA9IHR3ZWVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9O1xuXG5cblx0XHRwLmdldExhYmVsQWZ0ZXIgPSBmdW5jdGlvbih0aW1lKSB7XG5cdFx0XHRpZiAoIXRpbWUpIGlmICh0aW1lICE9PSAwKSB7IC8vZmFzdGVyIHRoYW4gaXNOYW4oKVxuXHRcdFx0XHR0aW1lID0gdGhpcy5fdGltZTtcblx0XHRcdH1cblx0XHRcdHZhciBsYWJlbHMgPSB0aGlzLmdldExhYmVsc0FycmF5KCksXG5cdFx0XHRcdGwgPSBsYWJlbHMubGVuZ3RoLFxuXHRcdFx0XHRpO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRpZiAobGFiZWxzW2ldLnRpbWUgPiB0aW1lKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGxhYmVsc1tpXS5uYW1lO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9O1xuXG5cdFx0cC5nZXRMYWJlbEJlZm9yZSA9IGZ1bmN0aW9uKHRpbWUpIHtcblx0XHRcdGlmICh0aW1lID09IG51bGwpIHtcblx0XHRcdFx0dGltZSA9IHRoaXMuX3RpbWU7XG5cdFx0XHR9XG5cdFx0XHR2YXIgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHNBcnJheSgpLFxuXHRcdFx0XHRpID0gbGFiZWxzLmxlbmd0aDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRpZiAobGFiZWxzW2ldLnRpbWUgPCB0aW1lKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGxhYmVsc1tpXS5uYW1lO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9O1xuXG5cdFx0cC5nZXRMYWJlbHNBcnJheSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGEgPSBbXSxcblx0XHRcdFx0Y250ID0gMCxcblx0XHRcdFx0cDtcblx0XHRcdGZvciAocCBpbiB0aGlzLl9sYWJlbHMpIHtcblx0XHRcdFx0YVtjbnQrK10gPSB7dGltZTp0aGlzLl9sYWJlbHNbcF0sIG5hbWU6cH07XG5cdFx0XHR9XG5cdFx0XHRhLnNvcnQoZnVuY3Rpb24oYSxiKSB7XG5cdFx0XHRcdHJldHVybiBhLnRpbWUgLSBiLnRpbWU7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBhO1xuXHRcdH07XG5cblx0XHRwLmludmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX2xvY2tlZCA9IGZhbHNlOyAvL3VubG9jayBhbmQgc2V0IGN5Y2xlIGluIGNhc2UgaW52YWxpZGF0ZSgpIGlzIGNhbGxlZCBmcm9tIGluc2lkZSBhbiBvblJlcGVhdFxuXHRcdFx0cmV0dXJuIFRpbWVsaW5lTGl0ZS5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMpO1xuXHRcdH07XG5cblxuLy8tLS0tIEdFVFRFUlMgLyBTRVRURVJTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdHAucHJvZ3Jlc3MgPSBmdW5jdGlvbih2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdHJldHVybiAoIWFyZ3VtZW50cy5sZW5ndGgpID8gKHRoaXMuX3RpbWUgLyB0aGlzLmR1cmF0aW9uKCkpIHx8IDAgOiB0aGlzLnRvdGFsVGltZSggdGhpcy5kdXJhdGlvbigpICogKCh0aGlzLl95b3lvICYmICh0aGlzLl9jeWNsZSAmIDEpICE9PSAwKSA/IDEgLSB2YWx1ZSA6IHZhbHVlKSArICh0aGlzLl9jeWNsZSAqICh0aGlzLl9kdXJhdGlvbiArIHRoaXMuX3JlcGVhdERlbGF5KSksIHN1cHByZXNzRXZlbnRzKTtcblx0XHR9O1xuXG5cdFx0cC50b3RhbFByb2dyZXNzID0gZnVuY3Rpb24odmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRyZXR1cm4gKCFhcmd1bWVudHMubGVuZ3RoKSA/ICh0aGlzLl90b3RhbFRpbWUgLyB0aGlzLnRvdGFsRHVyYXRpb24oKSkgfHwgMCA6IHRoaXMudG90YWxUaW1lKCB0aGlzLnRvdGFsRHVyYXRpb24oKSAqIHZhbHVlLCBzdXBwcmVzc0V2ZW50cyk7XG5cdFx0fTtcblxuXHRcdHAudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0aWYgKHRoaXMuX2RpcnR5KSB7XG5cdFx0XHRcdFx0VGltZWxpbmVMaXRlLnByb3RvdHlwZS50b3RhbER1cmF0aW9uLmNhbGwodGhpcyk7IC8vanVzdCBmb3JjZXMgcmVmcmVzaFxuXHRcdFx0XHRcdC8vSW5zdGVhZCBvZiBJbmZpbml0eSwgd2UgdXNlIDk5OTk5OTk5OTk5OSBzbyB0aGF0IHdlIGNhbiBhY2NvbW1vZGF0ZSByZXZlcnNlcy5cblx0XHRcdFx0XHR0aGlzLl90b3RhbER1cmF0aW9uID0gKHRoaXMuX3JlcGVhdCA9PT0gLTEpID8gOTk5OTk5OTk5OTk5IDogdGhpcy5fZHVyYXRpb24gKiAodGhpcy5fcmVwZWF0ICsgMSkgKyAodGhpcy5fcmVwZWF0RGVsYXkgKiB0aGlzLl9yZXBlYXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzLl90b3RhbER1cmF0aW9uO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICh0aGlzLl9yZXBlYXQgPT09IC0xIHx8ICF2YWx1ZSkgPyB0aGlzIDogdGhpcy50aW1lU2NhbGUoIHRoaXMudG90YWxEdXJhdGlvbigpIC8gdmFsdWUgKTtcblx0XHR9O1xuXG5cdFx0cC50aW1lID0gZnVuY3Rpb24odmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3RpbWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5fZGlydHkpIHtcblx0XHRcdFx0dGhpcy50b3RhbER1cmF0aW9uKCk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgZHVyYXRpb24gPSB0aGlzLl9kdXJhdGlvbixcblx0XHRcdFx0Y3ljbGUgPSB0aGlzLl9jeWNsZSxcblx0XHRcdFx0Y3ljbGVEdXIgPSBjeWNsZSAqIChkdXJhdGlvbiArIHRoaXMuX3JlcGVhdERlbGF5KTtcblx0XHRcdGlmICh2YWx1ZSA+IGR1cmF0aW9uKSB7XG5cdFx0XHRcdHZhbHVlID0gZHVyYXRpb247XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy50b3RhbFRpbWUoKHRoaXMuX3lveW8gJiYgKGN5Y2xlICYgMSkpID8gZHVyYXRpb24gLSB2YWx1ZSArIGN5Y2xlRHVyIDogdGhpcy5fcmVwZWF0ID8gdmFsdWUgKyBjeWNsZUR1ciA6IHZhbHVlLCBzdXBwcmVzc0V2ZW50cyk7XG5cdFx0fTtcblxuXHRcdHAucmVwZWF0ID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fcmVwZWF0O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fcmVwZWF0ID0gdmFsdWU7XG5cdFx0XHRyZXR1cm4gdGhpcy5fdW5jYWNoZSh0cnVlKTtcblx0XHR9O1xuXG5cdFx0cC5yZXBlYXREZWxheSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3JlcGVhdERlbGF5O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fcmVwZWF0RGVsYXkgPSB2YWx1ZTtcblx0XHRcdHJldHVybiB0aGlzLl91bmNhY2hlKHRydWUpO1xuXHRcdH07XG5cblx0XHRwLnlveW8gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl95b3lvO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5feW95byA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHAuY3VycmVudExhYmVsID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5nZXRMYWJlbEJlZm9yZSh0aGlzLl90aW1lICsgX3RpbnlOdW0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuc2Vlayh2YWx1ZSwgdHJ1ZSk7XG5cdFx0fTtcblx0XHRcblx0XHRyZXR1cm4gVGltZWxpbmVNYXg7XG5cdFx0XG5cdH0sIHRydWUpO1xuXG5leHBvcnQgdmFyIFRpbWVsaW5lTWF4ID0gZ2xvYmFscy5UaW1lbGluZU1heDtcbmV4cG9ydCB7IFRpbWVsaW5lTGl0ZSwgVGltZWxpbmVNYXggYXMgZGVmYXVsdCB9OyIsIi8qIVxuICogVkVSU0lPTjogMS4zLjlcbiAqIERBVEU6IDIwMTktMDUtMTdcbiAqIFVQREFURVMgQU5EIERPQ1MgQVQ6IGh0dHA6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDA4LTIwMTksIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgd29yayBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIHNvZnR3YXJlIGFncmVlbWVudCB0aGF0IHdhcyBpc3N1ZWQgd2l0aCB5b3VyIG1lbWJlcnNoaXAuXG4gKiBcbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuICoqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IF9nc1Njb3BlIH0gZnJvbSBcIi4vVHdlZW5MaXRlLmpzXCI7XG5cblx0XHR2YXIgX1JBRDJERUcgPSAxODAgLyBNYXRoLlBJLFxuXHRcdFx0X3IxID0gW10sXG5cdFx0XHRfcjIgPSBbXSxcblx0XHRcdF9yMyA9IFtdLFxuXHRcdFx0X2NvclByb3BzID0ge30sXG5cdFx0XHRfZ2xvYmFscyA9IF9nc1Njb3BlLl9nc0RlZmluZS5nbG9iYWxzLFxuXHRcdFx0U2VnbWVudCA9IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcblx0XHRcdFx0aWYgKGMgPT09IGQpIHsgLy9pZiBjIGFuZCBkIG1hdGNoLCB0aGUgZmluYWwgYXV0b1JvdGF0ZSB2YWx1ZSBjb3VsZCBsb2NrIGF0IC05MCBkZWdyZWVzLCBzbyBkaWZmZXJlbnRpYXRlIHRoZW0gc2xpZ2h0bHkuXG5cdFx0XHRcdFx0YyA9IGQgLSAoZCAtIGIpIC8gMTAwMDAwMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoYSA9PT0gYikgeyAvL2lmIGEgYW5kIGIgbWF0Y2gsIHRoZSBzdGFydGluZyBhdXRvUm90YXRlIHZhbHVlIGNvdWxkIGxvY2sgYXQgLTkwIGRlZ3JlZXMsIHNvIGRpZmZlcmVudGlhdGUgdGhlbSBzbGlnaHRseS5cblx0XHRcdFx0XHRiID0gYSArIChjIC0gYSkgLyAxMDAwMDAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuYSA9IGE7XG5cdFx0XHRcdHRoaXMuYiA9IGI7XG5cdFx0XHRcdHRoaXMuYyA9IGM7XG5cdFx0XHRcdHRoaXMuZCA9IGQ7XG5cdFx0XHRcdHRoaXMuZGEgPSBkIC0gYTtcblx0XHRcdFx0dGhpcy5jYSA9IGMgLSBhO1xuXHRcdFx0XHR0aGlzLmJhID0gYiAtIGE7XG5cdFx0XHR9LFxuXHRcdFx0X2NvcnJlbGF0ZSA9IFwiLHgseSx6LGxlZnQsdG9wLHJpZ2h0LGJvdHRvbSxtYXJnaW5Ub3AsbWFyZ2luTGVmdCxtYXJnaW5SaWdodCxtYXJnaW5Cb3R0b20scGFkZGluZ0xlZnQscGFkZGluZ1RvcCxwYWRkaW5nUmlnaHQscGFkZGluZ0JvdHRvbSxiYWNrZ3JvdW5kUG9zaXRpb24sYmFja2dyb3VuZFBvc2l0aW9uX3ksXCIsXG5cdFx0XHRjdWJpY1RvUXVhZHJhdGljID0gZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuXHRcdFx0XHR2YXIgcTEgPSB7YTphfSxcblx0XHRcdFx0XHRxMiA9IHt9LFxuXHRcdFx0XHRcdHEzID0ge30sXG5cdFx0XHRcdFx0cTQgPSB7YzpkfSxcblx0XHRcdFx0XHRtYWIgPSAoYSArIGIpIC8gMixcblx0XHRcdFx0XHRtYmMgPSAoYiArIGMpIC8gMixcblx0XHRcdFx0XHRtY2QgPSAoYyArIGQpIC8gMixcblx0XHRcdFx0XHRtYWJjID0gKG1hYiArIG1iYykgLyAyLFxuXHRcdFx0XHRcdG1iY2QgPSAobWJjICsgbWNkKSAvIDIsXG5cdFx0XHRcdFx0bTggPSAobWJjZCAtIG1hYmMpIC8gODtcblx0XHRcdFx0cTEuYiA9IG1hYiArIChhIC0gbWFiKSAvIDQ7XG5cdFx0XHRcdHEyLmIgPSBtYWJjICsgbTg7XG5cdFx0XHRcdHExLmMgPSBxMi5hID0gKHExLmIgKyBxMi5iKSAvIDI7XG5cdFx0XHRcdHEyLmMgPSBxMy5hID0gKG1hYmMgKyBtYmNkKSAvIDI7XG5cdFx0XHRcdHEzLmIgPSBtYmNkIC0gbTg7XG5cdFx0XHRcdHE0LmIgPSBtY2QgKyAoZCAtIG1jZCkgLyA0O1xuXHRcdFx0XHRxMy5jID0gcTQuYSA9IChxMy5iICsgcTQuYikgLyAyO1xuXHRcdFx0XHRyZXR1cm4gW3ExLCBxMiwgcTMsIHE0XTtcblx0XHRcdH0sXG5cdFx0XHRfY2FsY3VsYXRlQ29udHJvbFBvaW50cyA9IGZ1bmN0aW9uKGEsIGN1cnZpbmVzcywgcXVhZCwgYmFzaWMsIGNvcnJlbGF0ZSkge1xuXHRcdFx0XHR2YXIgbCA9IGEubGVuZ3RoIC0gMSxcblx0XHRcdFx0XHRpaSA9IDAsXG5cdFx0XHRcdFx0Y3AxID0gYVswXS5hLFxuXHRcdFx0XHRcdGksIHAxLCBwMiwgcDMsIHNlZywgbTEsIG0yLCBtbSwgY3AyLCBxYiwgcjEsIHIyLCB0bDtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdHNlZyA9IGFbaWldO1xuXHRcdFx0XHRcdHAxID0gc2VnLmE7XG5cdFx0XHRcdFx0cDIgPSBzZWcuZDtcblx0XHRcdFx0XHRwMyA9IGFbaWkrMV0uZDtcblxuXHRcdFx0XHRcdGlmIChjb3JyZWxhdGUpIHtcblx0XHRcdFx0XHRcdHIxID0gX3IxW2ldO1xuXHRcdFx0XHRcdFx0cjIgPSBfcjJbaV07XG5cdFx0XHRcdFx0XHR0bCA9ICgocjIgKyByMSkgKiBjdXJ2aW5lc3MgKiAwLjI1KSAvIChiYXNpYyA/IDAuNSA6IF9yM1tpXSB8fCAwLjUpO1xuXHRcdFx0XHRcdFx0bTEgPSBwMiAtIChwMiAtIHAxKSAqIChiYXNpYyA/IGN1cnZpbmVzcyAqIDAuNSA6IChyMSAhPT0gMCA/IHRsIC8gcjEgOiAwKSk7XG5cdFx0XHRcdFx0XHRtMiA9IHAyICsgKHAzIC0gcDIpICogKGJhc2ljID8gY3VydmluZXNzICogMC41IDogKHIyICE9PSAwID8gdGwgLyByMiA6IDApKTtcblx0XHRcdFx0XHRcdG1tID0gcDIgLSAobTEgKyAoKChtMiAtIG0xKSAqICgocjEgKiAzIC8gKHIxICsgcjIpKSArIDAuNSkgLyA0KSB8fCAwKSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG0xID0gcDIgLSAocDIgLSBwMSkgKiBjdXJ2aW5lc3MgKiAwLjU7XG5cdFx0XHRcdFx0XHRtMiA9IHAyICsgKHAzIC0gcDIpICogY3VydmluZXNzICogMC41O1xuXHRcdFx0XHRcdFx0bW0gPSBwMiAtIChtMSArIG0yKSAvIDI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG0xICs9IG1tO1xuXHRcdFx0XHRcdG0yICs9IG1tO1xuXG5cdFx0XHRcdFx0c2VnLmMgPSBjcDIgPSBtMTtcblx0XHRcdFx0XHRpZiAoaSAhPT0gMCkge1xuXHRcdFx0XHRcdFx0c2VnLmIgPSBjcDE7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlZy5iID0gY3AxID0gc2VnLmEgKyAoc2VnLmMgLSBzZWcuYSkgKiAwLjY7IC8vaW5zdGVhZCBvZiBwbGFjaW5nIGIgb24gYSBleGFjdGx5LCB3ZSBtb3ZlIGl0IGlubGluZSB3aXRoIGMgc28gdGhhdCBpZiB0aGUgdXNlciBzcGVjaWZpZXMgYW4gZWFzZSBsaWtlIEJhY2suZWFzZUluIG9yIEVsYXN0aWMuZWFzZUluIHdoaWNoIGdvZXMgQkVZT05EIHRoZSBiZWdpbm5pbmcsIGl0IHdpbGwgZG8gc28gc21vb3RobHkuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c2VnLmRhID0gcDIgLSBwMTtcblx0XHRcdFx0XHRzZWcuY2EgPSBjcDIgLSBwMTtcblx0XHRcdFx0XHRzZWcuYmEgPSBjcDEgLSBwMTtcblxuXHRcdFx0XHRcdGlmIChxdWFkKSB7XG5cdFx0XHRcdFx0XHRxYiA9IGN1YmljVG9RdWFkcmF0aWMocDEsIGNwMSwgY3AyLCBwMik7XG5cdFx0XHRcdFx0XHRhLnNwbGljZShpaSwgMSwgcWJbMF0sIHFiWzFdLCBxYlsyXSwgcWJbM10pO1xuXHRcdFx0XHRcdFx0aWkgKz0gNDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWkrKztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjcDEgPSBtMjtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWcgPSBhW2lpXTtcblx0XHRcdFx0c2VnLmIgPSBjcDE7XG5cdFx0XHRcdHNlZy5jID0gY3AxICsgKHNlZy5kIC0gY3AxKSAqIDAuNDsgLy9pbnN0ZWFkIG9mIHBsYWNpbmcgYyBvbiBkIGV4YWN0bHksIHdlIG1vdmUgaXQgaW5saW5lIHdpdGggYiBzbyB0aGF0IGlmIHRoZSB1c2VyIHNwZWNpZmllcyBhbiBlYXNlIGxpa2UgQmFjay5lYXNlT3V0IG9yIEVsYXN0aWMuZWFzZU91dCB3aGljaCBnb2VzIEJFWU9ORCB0aGUgZW5kLCBpdCB3aWxsIGRvIHNvIHNtb290aGx5LlxuXHRcdFx0XHRzZWcuZGEgPSBzZWcuZCAtIHNlZy5hO1xuXHRcdFx0XHRzZWcuY2EgPSBzZWcuYyAtIHNlZy5hO1xuXHRcdFx0XHRzZWcuYmEgPSBjcDEgLSBzZWcuYTtcblx0XHRcdFx0aWYgKHF1YWQpIHtcblx0XHRcdFx0XHRxYiA9IGN1YmljVG9RdWFkcmF0aWMoc2VnLmEsIGNwMSwgc2VnLmMsIHNlZy5kKTtcblx0XHRcdFx0XHRhLnNwbGljZShpaSwgMSwgcWJbMF0sIHFiWzFdLCBxYlsyXSwgcWJbM10pO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0X3BhcnNlQW5jaG9ycyA9IGZ1bmN0aW9uKHZhbHVlcywgcCwgY29ycmVsYXRlLCBwcmVwZW5kKSB7XG5cdFx0XHRcdHZhciBhID0gW10sXG5cdFx0XHRcdFx0bCwgaSwgcDEsIHAyLCBwMywgdG1wO1xuXHRcdFx0XHRpZiAocHJlcGVuZCkge1xuXHRcdFx0XHRcdHZhbHVlcyA9IFtwcmVwZW5kXS5jb25jYXQodmFsdWVzKTtcblx0XHRcdFx0XHRpID0gdmFsdWVzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YoICh0bXAgPSB2YWx1ZXNbaV1bcF0pICkgPT09IFwic3RyaW5nXCIpIGlmICh0bXAuY2hhckF0KDEpID09PSBcIj1cIikge1xuXHRcdFx0XHRcdFx0XHR2YWx1ZXNbaV1bcF0gPSBwcmVwZW5kW3BdICsgTnVtYmVyKHRtcC5jaGFyQXQoMCkgKyB0bXAuc3Vic3RyKDIpKTsgLy9hY2NvbW1vZGF0ZSByZWxhdGl2ZSB2YWx1ZXMuIERvIGl0IGlubGluZSBpbnN0ZWFkIG9mIGJyZWFraW5nIGl0IG91dCBpbnRvIGEgZnVuY3Rpb24gZm9yIHNwZWVkIHJlYXNvbnNcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0bCA9IHZhbHVlcy5sZW5ndGggLSAyO1xuXHRcdFx0XHRpZiAobCA8IDApIHtcblx0XHRcdFx0XHRhWzBdID0gbmV3IFNlZ21lbnQodmFsdWVzWzBdW3BdLCAwLCAwLCB2YWx1ZXNbMF1bcF0pO1xuXHRcdFx0XHRcdHJldHVybiBhO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRwMSA9IHZhbHVlc1tpXVtwXTtcblx0XHRcdFx0XHRwMiA9IHZhbHVlc1tpKzFdW3BdO1xuXHRcdFx0XHRcdGFbaV0gPSBuZXcgU2VnbWVudChwMSwgMCwgMCwgcDIpO1xuXHRcdFx0XHRcdGlmIChjb3JyZWxhdGUpIHtcblx0XHRcdFx0XHRcdHAzID0gdmFsdWVzW2krMl1bcF07XG5cdFx0XHRcdFx0XHRfcjFbaV0gPSAoX3IxW2ldIHx8IDApICsgKHAyIC0gcDEpICogKHAyIC0gcDEpO1xuXHRcdFx0XHRcdFx0X3IyW2ldID0gKF9yMltpXSB8fCAwKSArIChwMyAtIHAyKSAqIChwMyAtIHAyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0YVtpXSA9IG5ldyBTZWdtZW50KHZhbHVlc1tpXVtwXSwgMCwgMCwgdmFsdWVzW2krMV1bcF0pO1xuXHRcdFx0XHRyZXR1cm4gYTtcblx0XHRcdH0sXG5cdFx0XHRiZXppZXJUaHJvdWdoID0gZnVuY3Rpb24odmFsdWVzLCBjdXJ2aW5lc3MsIHF1YWRyYXRpYywgYmFzaWMsIGNvcnJlbGF0ZSwgcHJlcGVuZCkge1xuXHRcdFx0XHR2YXIgb2JqID0ge30sXG5cdFx0XHRcdFx0cHJvcHMgPSBbXSxcblx0XHRcdFx0XHRmaXJzdCA9IHByZXBlbmQgfHwgdmFsdWVzWzBdLFxuXHRcdFx0XHRcdGksIHAsIGEsIGosIHIsIGwsIHNlYW1sZXNzLCBsYXN0O1xuXHRcdFx0XHRjb3JyZWxhdGUgPSAodHlwZW9mKGNvcnJlbGF0ZSkgPT09IFwic3RyaW5nXCIpID8gXCIsXCIrY29ycmVsYXRlK1wiLFwiIDogX2NvcnJlbGF0ZTtcblx0XHRcdFx0aWYgKGN1cnZpbmVzcyA9PSBudWxsKSB7XG5cdFx0XHRcdFx0Y3VydmluZXNzID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKHAgaW4gdmFsdWVzWzBdKSB7XG5cdFx0XHRcdFx0cHJvcHMucHVzaChwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvL2NoZWNrIHRvIHNlZSBpZiB0aGUgbGFzdCBhbmQgZmlyc3QgdmFsdWVzIGFyZSBpZGVudGljYWwgKHdlbGwsIHdpdGhpbiAwLjA1KS4gSWYgc28sIG1ha2Ugc2VhbWxlc3MgYnkgYXBwZW5kaW5nIHRoZSBzZWNvbmQgZWxlbWVudCB0byB0aGUgdmVyeSBlbmQgb2YgdGhlIHZhbHVlcyBhcnJheSBhbmQgdGhlIDJuZC10by1sYXN0IGVsZW1lbnQgdG8gdGhlIHZlcnkgYmVnaW5uaW5nICh3ZSdsbCByZW1vdmUgdGhvc2Ugc2VnbWVudHMgbGF0ZXIpXG5cdFx0XHRcdGlmICh2YWx1ZXMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdGxhc3QgPSB2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdO1xuXHRcdFx0XHRcdHNlYW1sZXNzID0gdHJ1ZTtcblx0XHRcdFx0XHRpID0gcHJvcHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0cCA9IHByb3BzW2ldO1xuXHRcdFx0XHRcdFx0aWYgKE1hdGguYWJzKGZpcnN0W3BdIC0gbGFzdFtwXSkgPiAwLjA1KSB7IC8vYnVpbGQgaW4gYSB0b2xlcmFuY2Ugb2YgKy8tMC4wNSB0byBhY2NvbW1vZGF0ZSByb3VuZGluZyBlcnJvcnMuXG5cdFx0XHRcdFx0XHRcdHNlYW1sZXNzID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoc2VhbWxlc3MpIHtcblx0XHRcdFx0XHRcdHZhbHVlcyA9IHZhbHVlcy5jb25jYXQoKTsgLy9kdXBsaWNhdGUgdGhlIGFycmF5IHRvIGF2b2lkIGNvbnRhbWluYXRpbmcgdGhlIG9yaWdpbmFsIHdoaWNoIHRoZSB1c2VyIG1heSBiZSByZXVzaW5nIGZvciBvdGhlciB0d2VlbnNcblx0XHRcdFx0XHRcdGlmIChwcmVwZW5kKSB7XG5cdFx0XHRcdFx0XHRcdHZhbHVlcy51bnNoaWZ0KHByZXBlbmQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2godmFsdWVzWzFdKTtcblx0XHRcdFx0XHRcdHByZXBlbmQgPSB2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDNdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRfcjEubGVuZ3RoID0gX3IyLmxlbmd0aCA9IF9yMy5sZW5ndGggPSAwO1xuXHRcdFx0XHRpID0gcHJvcHMubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRwID0gcHJvcHNbaV07XG5cdFx0XHRcdFx0X2NvclByb3BzW3BdID0gKGNvcnJlbGF0ZS5pbmRleE9mKFwiLFwiK3ArXCIsXCIpICE9PSAtMSk7XG5cdFx0XHRcdFx0b2JqW3BdID0gX3BhcnNlQW5jaG9ycyh2YWx1ZXMsIHAsIF9jb3JQcm9wc1twXSwgcHJlcGVuZCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aSA9IF9yMS5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdF9yMVtpXSA9IE1hdGguc3FydChfcjFbaV0pO1xuXHRcdFx0XHRcdF9yMltpXSA9IE1hdGguc3FydChfcjJbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghYmFzaWMpIHtcblx0XHRcdFx0XHRpID0gcHJvcHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0aWYgKF9jb3JQcm9wc1twXSkge1xuXHRcdFx0XHRcdFx0XHRhID0gb2JqW3Byb3BzW2ldXTtcblx0XHRcdFx0XHRcdFx0bCA9IGEubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IGw7IGorKykge1xuXHRcdFx0XHRcdFx0XHRcdHIgPSAoYVtqKzFdLmRhIC8gX3IyW2pdICsgYVtqXS5kYSAvIF9yMVtqXSkgfHwgMDtcblx0XHRcdFx0XHRcdFx0XHRfcjNbal0gPSAoX3IzW2pdIHx8IDApICsgciAqIHI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aSA9IF9yMy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRfcjNbaV0gPSBNYXRoLnNxcnQoX3IzW2ldKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aSA9IHByb3BzLmxlbmd0aDtcblx0XHRcdFx0aiA9IHF1YWRyYXRpYyA/IDQgOiAxO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRwID0gcHJvcHNbaV07XG5cdFx0XHRcdFx0YSA9IG9ialtwXTtcblx0XHRcdFx0XHRfY2FsY3VsYXRlQ29udHJvbFBvaW50cyhhLCBjdXJ2aW5lc3MsIHF1YWRyYXRpYywgYmFzaWMsIF9jb3JQcm9wc1twXSk7IC8vdGhpcyBtZXRob2QgcmVxdWlyZXMgdGhhdCBfcGFyc2VBbmNob3JzKCkgYW5kIF9zZXRTZWdtZW50UmF0aW9zKCkgcmFuIGZpcnN0IHNvIHRoYXQgX3IxLCBfcjIsIGFuZCBfcjMgdmFsdWVzIGFyZSBwb3B1bGF0ZWQgZm9yIGFsbCBwcm9wZXJ0aWVzXG5cdFx0XHRcdFx0aWYgKHNlYW1sZXNzKSB7XG5cdFx0XHRcdFx0XHRhLnNwbGljZSgwLCBqKTtcblx0XHRcdFx0XHRcdGEuc3BsaWNlKGEubGVuZ3RoIC0gaiwgaik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBvYmo7XG5cdFx0XHR9LFxuXHRcdFx0X3BhcnNlQmV6aWVyRGF0YSA9IGZ1bmN0aW9uKHZhbHVlcywgdHlwZSwgcHJlcGVuZCkge1xuXHRcdFx0XHR0eXBlID0gdHlwZSB8fCBcInNvZnRcIjtcblx0XHRcdFx0dmFyIG9iaiA9IHt9LFxuXHRcdFx0XHRcdGluYyA9ICh0eXBlID09PSBcImN1YmljXCIpID8gMyA6IDIsXG5cdFx0XHRcdFx0c29mdCA9ICh0eXBlID09PSBcInNvZnRcIiksXG5cdFx0XHRcdFx0cHJvcHMgPSBbXSxcblx0XHRcdFx0XHRhLCBiLCBjLCBkLCBjdXIsIGksIGosIGwsIHAsIGNudCwgdG1wO1xuXHRcdFx0XHRpZiAoc29mdCAmJiBwcmVwZW5kKSB7XG5cdFx0XHRcdFx0dmFsdWVzID0gW3ByZXBlbmRdLmNvbmNhdCh2YWx1ZXMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh2YWx1ZXMgPT0gbnVsbCB8fCB2YWx1ZXMubGVuZ3RoIDwgaW5jICsgMSkgeyB0aHJvdyBcImludmFsaWQgQmV6aWVyIGRhdGFcIjsgfVxuXHRcdFx0XHRmb3IgKHAgaW4gdmFsdWVzWzBdKSB7XG5cdFx0XHRcdFx0cHJvcHMucHVzaChwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpID0gcHJvcHMubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRwID0gcHJvcHNbaV07XG5cdFx0XHRcdFx0b2JqW3BdID0gY3VyID0gW107XG5cdFx0XHRcdFx0Y250ID0gMDtcblx0XHRcdFx0XHRsID0gdmFsdWVzLmxlbmd0aDtcblx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbDsgaisrKSB7XG5cdFx0XHRcdFx0XHRhID0gKHByZXBlbmQgPT0gbnVsbCkgPyB2YWx1ZXNbal1bcF0gOiAodHlwZW9mKCAodG1wID0gdmFsdWVzW2pdW3BdKSApID09PSBcInN0cmluZ1wiICYmIHRtcC5jaGFyQXQoMSkgPT09IFwiPVwiKSA/IHByZXBlbmRbcF0gKyBOdW1iZXIodG1wLmNoYXJBdCgwKSArIHRtcC5zdWJzdHIoMikpIDogTnVtYmVyKHRtcCk7XG5cdFx0XHRcdFx0XHRpZiAoc29mdCkgaWYgKGogPiAxKSBpZiAoaiA8IGwgLSAxKSB7XG5cdFx0XHRcdFx0XHRcdGN1cltjbnQrK10gPSAoYSArIGN1cltjbnQtMl0pIC8gMjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGN1cltjbnQrK10gPSBhO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRsID0gY250IC0gaW5jICsgMTtcblx0XHRcdFx0XHRjbnQgPSAwO1xuXHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBsOyBqICs9IGluYykge1xuXHRcdFx0XHRcdFx0YSA9IGN1cltqXTtcblx0XHRcdFx0XHRcdGIgPSBjdXJbaisxXTtcblx0XHRcdFx0XHRcdGMgPSBjdXJbaisyXTtcblx0XHRcdFx0XHRcdGQgPSAoaW5jID09PSAyKSA/IDAgOiBjdXJbaiszXTtcblx0XHRcdFx0XHRcdGN1cltjbnQrK10gPSB0bXAgPSAoaW5jID09PSAzKSA/IG5ldyBTZWdtZW50KGEsIGIsIGMsIGQpIDogbmV3IFNlZ21lbnQoYSwgKDIgKiBiICsgYSkgLyAzLCAoMiAqIGIgKyBjKSAvIDMsIGMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjdXIubGVuZ3RoID0gY250O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBvYmo7XG5cdFx0XHR9LFxuXHRcdFx0X2FkZEN1YmljTGVuZ3RocyA9IGZ1bmN0aW9uKGEsIHN0ZXBzLCByZXNvbHV0aW9uKSB7XG5cdFx0XHRcdHZhciBpbmMgPSAxIC8gcmVzb2x1dGlvbixcblx0XHRcdFx0XHRqID0gYS5sZW5ndGgsXG5cdFx0XHRcdFx0ZCwgZDEsIHMsIGRhLCBjYSwgYmEsIHAsIGksIGludiwgYmV6LCBpbmRleDtcblx0XHRcdFx0d2hpbGUgKC0taiA+IC0xKSB7XG5cdFx0XHRcdFx0YmV6ID0gYVtqXTtcblx0XHRcdFx0XHRzID0gYmV6LmE7XG5cdFx0XHRcdFx0ZGEgPSBiZXouZCAtIHM7XG5cdFx0XHRcdFx0Y2EgPSBiZXouYyAtIHM7XG5cdFx0XHRcdFx0YmEgPSBiZXouYiAtIHM7XG5cdFx0XHRcdFx0ZCA9IGQxID0gMDtcblx0XHRcdFx0XHRmb3IgKGkgPSAxOyBpIDw9IHJlc29sdXRpb247IGkrKykge1xuXHRcdFx0XHRcdFx0cCA9IGluYyAqIGk7XG5cdFx0XHRcdFx0XHRpbnYgPSAxIC0gcDtcblx0XHRcdFx0XHRcdGQgPSBkMSAtIChkMSA9IChwICogcCAqIGRhICsgMyAqIGludiAqIChwICogY2EgKyBpbnYgKiBiYSkpICogcCk7XG5cdFx0XHRcdFx0XHRpbmRleCA9IGogKiByZXNvbHV0aW9uICsgaSAtIDE7XG5cdFx0XHRcdFx0XHRzdGVwc1tpbmRleF0gPSAoc3RlcHNbaW5kZXhdIHx8IDApICsgZCAqIGQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0X3BhcnNlTGVuZ3RoRGF0YSA9IGZ1bmN0aW9uKG9iaiwgcmVzb2x1dGlvbikge1xuXHRcdFx0XHRyZXNvbHV0aW9uID0gcmVzb2x1dGlvbiA+PiAwIHx8IDY7XG5cdFx0XHRcdHZhciBhID0gW10sXG5cdFx0XHRcdFx0bGVuZ3RocyA9IFtdLFxuXHRcdFx0XHRcdGQgPSAwLFxuXHRcdFx0XHRcdHRvdGFsID0gMCxcblx0XHRcdFx0XHR0aHJlc2hvbGQgPSByZXNvbHV0aW9uIC0gMSxcblx0XHRcdFx0XHRzZWdtZW50cyA9IFtdLFxuXHRcdFx0XHRcdGN1ckxTID0gW10sIC8vY3VycmVudCBsZW5ndGggc2VnbWVudHMgYXJyYXlcblx0XHRcdFx0XHRwLCBpLCBsLCBpbmRleDtcblx0XHRcdFx0Zm9yIChwIGluIG9iaikge1xuXHRcdFx0XHRcdF9hZGRDdWJpY0xlbmd0aHMob2JqW3BdLCBhLCByZXNvbHV0aW9uKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRsID0gYS5sZW5ndGg7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRkICs9IE1hdGguc3FydChhW2ldKTtcblx0XHRcdFx0XHRpbmRleCA9IGkgJSByZXNvbHV0aW9uO1xuXHRcdFx0XHRcdGN1ckxTW2luZGV4XSA9IGQ7XG5cdFx0XHRcdFx0aWYgKGluZGV4ID09PSB0aHJlc2hvbGQpIHtcblx0XHRcdFx0XHRcdHRvdGFsICs9IGQ7XG5cdFx0XHRcdFx0XHRpbmRleCA9IChpIC8gcmVzb2x1dGlvbikgPj4gMDtcblx0XHRcdFx0XHRcdHNlZ21lbnRzW2luZGV4XSA9IGN1ckxTO1xuXHRcdFx0XHRcdFx0bGVuZ3Roc1tpbmRleF0gPSB0b3RhbDtcblx0XHRcdFx0XHRcdGQgPSAwO1xuXHRcdFx0XHRcdFx0Y3VyTFMgPSBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHtsZW5ndGg6dG90YWwsIGxlbmd0aHM6bGVuZ3Rocywgc2VnbWVudHM6c2VnbWVudHN9O1xuXHRcdFx0fSxcblxuXG5cblx0XHRcdEJlemllclBsdWdpbiA9IF9nc1Njb3BlLl9nc0RlZmluZS5wbHVnaW4oe1xuXHRcdFx0XHRcdHByb3BOYW1lOiBcImJlemllclwiLFxuXHRcdFx0XHRcdHByaW9yaXR5OiAtMSxcblx0XHRcdFx0XHR2ZXJzaW9uOiBcIjEuMy45XCIsXG5cdFx0XHRcdFx0QVBJOiAyLFxuXHRcdFx0XHRcdGdsb2JhbDp0cnVlLFxuXG5cdFx0XHRcdFx0Ly9nZXRzIGNhbGxlZCB3aGVuIHRoZSB0d2VlbiByZW5kZXJzIGZvciB0aGUgZmlyc3QgdGltZS4gVGhpcyBpcyB3aGVyZSBpbml0aWFsIHZhbHVlcyBzaG91bGQgYmUgcmVjb3JkZWQgYW5kIGFueSBzZXR1cCByb3V0aW5lcyBzaG91bGQgcnVuLlxuXHRcdFx0XHRcdGluaXQ6IGZ1bmN0aW9uKHRhcmdldCwgdmFycywgdHdlZW4pIHtcblx0XHRcdFx0XHRcdHRoaXMuX3RhcmdldCA9IHRhcmdldDtcblx0XHRcdFx0XHRcdGlmICh2YXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdFx0XHRcdFx0dmFycyA9IHt2YWx1ZXM6dmFyc307XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0aGlzLl9mdW5jID0ge307XG5cdFx0XHRcdFx0XHR0aGlzLl9tb2QgPSB7fTtcblx0XHRcdFx0XHRcdHRoaXMuX3Byb3BzID0gW107XG5cdFx0XHRcdFx0XHR0aGlzLl90aW1lUmVzID0gKHZhcnMudGltZVJlc29sdXRpb24gPT0gbnVsbCkgPyA2IDogcGFyc2VJbnQodmFycy50aW1lUmVzb2x1dGlvbiwgMTApO1xuXHRcdFx0XHRcdFx0dmFyIHZhbHVlcyA9IHZhcnMudmFsdWVzIHx8IFtdLFxuXHRcdFx0XHRcdFx0XHRmaXJzdCA9IHt9LFxuXHRcdFx0XHRcdFx0XHRzZWNvbmQgPSB2YWx1ZXNbMF0sXG5cdFx0XHRcdFx0XHRcdGF1dG9Sb3RhdGUgPSB2YXJzLmF1dG9Sb3RhdGUgfHwgdHdlZW4udmFycy5vcmllbnRUb0Jlemllcixcblx0XHRcdFx0XHRcdFx0cCwgaXNGdW5jLCBpLCBqLCBwcmVwZW5kO1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9hdXRvUm90YXRlID0gYXV0b1JvdGF0ZSA/IChhdXRvUm90YXRlIGluc3RhbmNlb2YgQXJyYXkpID8gYXV0b1JvdGF0ZSA6IFtbXCJ4XCIsXCJ5XCIsXCJyb3RhdGlvblwiLCgoYXV0b1JvdGF0ZSA9PT0gdHJ1ZSkgPyAwIDogTnVtYmVyKGF1dG9Sb3RhdGUpIHx8IDApXV0gOiBudWxsO1xuXHRcdFx0XHRcdFx0Zm9yIChwIGluIHNlY29uZCkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9wcm9wcy5wdXNoKHApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpID0gdGhpcy5fcHJvcHMubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRcdHAgPSB0aGlzLl9wcm9wc1tpXTtcblxuXHRcdFx0XHRcdFx0XHR0aGlzLl9vdmVyd3JpdGVQcm9wcy5wdXNoKHApO1xuXHRcdFx0XHRcdFx0XHRpc0Z1bmMgPSB0aGlzLl9mdW5jW3BdID0gKHR5cGVvZih0YXJnZXRbcF0pID09PSBcImZ1bmN0aW9uXCIpO1xuXHRcdFx0XHRcdFx0XHRmaXJzdFtwXSA9ICghaXNGdW5jKSA/IHBhcnNlRmxvYXQodGFyZ2V0W3BdKSA6IHRhcmdldFsgKChwLmluZGV4T2YoXCJzZXRcIikgfHwgdHlwZW9mKHRhcmdldFtcImdldFwiICsgcC5zdWJzdHIoMyldKSAhPT0gXCJmdW5jdGlvblwiKSA/IHAgOiBcImdldFwiICsgcC5zdWJzdHIoMykpIF0oKTtcblx0XHRcdFx0XHRcdFx0aWYgKCFwcmVwZW5kKSBpZiAoZmlyc3RbcF0gIT09IHZhbHVlc1swXVtwXSkge1xuXHRcdFx0XHRcdFx0XHRcdHByZXBlbmQgPSBmaXJzdDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dGhpcy5fYmV6aWVycyA9ICh2YXJzLnR5cGUgIT09IFwiY3ViaWNcIiAmJiB2YXJzLnR5cGUgIT09IFwicXVhZHJhdGljXCIgJiYgdmFycy50eXBlICE9PSBcInNvZnRcIikgPyBiZXppZXJUaHJvdWdoKHZhbHVlcywgaXNOYU4odmFycy5jdXJ2aW5lc3MpID8gMSA6IHZhcnMuY3VydmluZXNzLCBmYWxzZSwgKHZhcnMudHlwZSA9PT0gXCJ0aHJ1QmFzaWNcIiksIHZhcnMuY29ycmVsYXRlLCBwcmVwZW5kKSA6IF9wYXJzZUJlemllckRhdGEodmFsdWVzLCB2YXJzLnR5cGUsIGZpcnN0KTtcblx0XHRcdFx0XHRcdHRoaXMuX3NlZ0NvdW50ID0gdGhpcy5fYmV6aWVyc1twXS5sZW5ndGg7XG5cblx0XHRcdFx0XHRcdGlmICh0aGlzLl90aW1lUmVzKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBsZCA9IF9wYXJzZUxlbmd0aERhdGEodGhpcy5fYmV6aWVycywgdGhpcy5fdGltZVJlcyk7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2xlbmd0aCA9IGxkLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0dGhpcy5fbGVuZ3RocyA9IGxkLmxlbmd0aHM7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX3NlZ21lbnRzID0gbGQuc2VnbWVudHM7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2wxID0gdGhpcy5fbGkgPSB0aGlzLl9zMSA9IHRoaXMuX3NpID0gMDtcblx0XHRcdFx0XHRcdFx0dGhpcy5fbDIgPSB0aGlzLl9sZW5ndGhzWzBdO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9jdXJTZWcgPSB0aGlzLl9zZWdtZW50c1swXTtcblx0XHRcdFx0XHRcdFx0dGhpcy5fczIgPSB0aGlzLl9jdXJTZWdbMF07XG5cdFx0XHRcdFx0XHRcdHRoaXMuX3ByZWMgPSAxIC8gdGhpcy5fY3VyU2VnLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKChhdXRvUm90YXRlID0gdGhpcy5fYXV0b1JvdGF0ZSkpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5faW5pdGlhbFJvdGF0aW9ucyA9IFtdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIShhdXRvUm90YXRlWzBdIGluc3RhbmNlb2YgQXJyYXkpKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fYXV0b1JvdGF0ZSA9IGF1dG9Sb3RhdGUgPSBbYXV0b1JvdGF0ZV07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aSA9IGF1dG9Sb3RhdGUubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgMzsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwID0gYXV0b1JvdGF0ZVtpXVtqXTtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuX2Z1bmNbcF0gPSAodHlwZW9mKHRhcmdldFtwXSkgPT09IFwiZnVuY3Rpb25cIikgPyB0YXJnZXRbICgocC5pbmRleE9mKFwic2V0XCIpIHx8IHR5cGVvZih0YXJnZXRbXCJnZXRcIiArIHAuc3Vic3RyKDMpXSkgIT09IFwiZnVuY3Rpb25cIikgPyBwIDogXCJnZXRcIiArIHAuc3Vic3RyKDMpKSBdIDogZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHAgPSBhdXRvUm90YXRlW2ldWzJdO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2luaXRpYWxSb3RhdGlvbnNbaV0gPSAodGhpcy5fZnVuY1twXSA/IHRoaXMuX2Z1bmNbcF0uY2FsbCh0aGlzLl90YXJnZXQpIDogdGhpcy5fdGFyZ2V0W3BdKSB8fCAwO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX292ZXJ3cml0ZVByb3BzLnB1c2gocCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRoaXMuX3N0YXJ0UmF0aW8gPSB0d2Vlbi52YXJzLnJ1bkJhY2t3YXJkcyA/IDEgOiAwOyAvL3dlIGRldGVybWluZSB0aGUgc3RhcnRpbmcgcmF0aW8gd2hlbiB0aGUgdHdlZW4gaW5pdHMgd2hpY2ggaXMgYWx3YXlzIDAgdW5sZXNzIHRoZSB0d2VlbiBoYXMgcnVuQmFja3dhcmRzOnRydWUgKGluZGljYXRpbmcgaXQncyBhIGZyb20oKSB0d2VlbikgaW4gd2hpY2ggY2FzZSBpdCdzIDEuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly9jYWxsZWQgZWFjaCB0aW1lIHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHVwZGF0ZWQsIGFuZCB0aGUgcmF0aW8gZ2V0cyBwYXNzZWQgYXMgdGhlIG9ubHkgcGFyYW1ldGVyICh0eXBpY2FsbHkgaXQncyBhIHZhbHVlIGJldHdlZW4gMCBhbmQgMSwgYnV0IGl0IGNhbiBleGNlZWQgdGhvc2Ugd2hlbiB1c2luZyBhbiBlYXNlIGxpa2UgRWxhc3RpYy5lYXNlT3V0IG9yIEJhY2suZWFzZU91dCwgZXRjLilcblx0XHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0XHRcdHZhciBzZWdtZW50cyA9IHRoaXMuX3NlZ0NvdW50LFxuXHRcdFx0XHRcdFx0XHRmdW5jID0gdGhpcy5fZnVuYyxcblx0XHRcdFx0XHRcdFx0dGFyZ2V0ID0gdGhpcy5fdGFyZ2V0LFxuXHRcdFx0XHRcdFx0XHRub3RTdGFydCA9ICh2ICE9PSB0aGlzLl9zdGFydFJhdGlvKSxcblx0XHRcdFx0XHRcdFx0Y3VySW5kZXgsIGludiwgaSwgcCwgYiwgdCwgdmFsLCBsLCBsZW5ndGhzLCBjdXJTZWcsIHYxO1xuXHRcdFx0XHRcdFx0aWYgKCF0aGlzLl90aW1lUmVzKSB7XG5cdFx0XHRcdFx0XHRcdGN1ckluZGV4ID0gKHYgPCAwKSA/IDAgOiAodiA+PSAxKSA/IHNlZ21lbnRzIC0gMSA6IChzZWdtZW50cyAqIHYpID4+IDA7XG5cdFx0XHRcdFx0XHRcdHQgPSAodiAtIChjdXJJbmRleCAqICgxIC8gc2VnbWVudHMpKSkgKiBzZWdtZW50cztcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGxlbmd0aHMgPSB0aGlzLl9sZW5ndGhzO1xuXHRcdFx0XHRcdFx0XHRjdXJTZWcgPSB0aGlzLl9jdXJTZWc7XG5cdFx0XHRcdFx0XHRcdHYxID0gdiAqIHRoaXMuX2xlbmd0aDtcblx0XHRcdFx0XHRcdFx0aSA9IHRoaXMuX2xpO1xuXHRcdFx0XHRcdFx0XHQvL2ZpbmQgdGhlIGFwcHJvcHJpYXRlIHNlZ21lbnQgKGlmIHRoZSBjdXJyZW50bHkgY2FjaGVkIG9uZSBpc24ndCBjb3JyZWN0KVxuXHRcdFx0XHRcdFx0XHRpZiAodjEgPiB0aGlzLl9sMiAmJiBpIDwgc2VnbWVudHMgLSAxKSB7XG5cdFx0XHRcdFx0XHRcdFx0bCA9IHNlZ21lbnRzIC0gMTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoaSA8IGwgJiYgKHRoaXMuX2wyID0gbGVuZ3Roc1srK2ldKSA8PSB2MSkge1x0fVxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2wxID0gbGVuZ3Roc1tpLTFdO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2xpID0gaTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9jdXJTZWcgPSBjdXJTZWcgPSB0aGlzLl9zZWdtZW50c1tpXTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9zMiA9IGN1clNlZ1sodGhpcy5fczEgPSB0aGlzLl9zaSA9IDApXTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh2MSA8IHRoaXMuX2wxICYmIGkgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKGkgPiAwICYmICh0aGlzLl9sMSA9IGxlbmd0aHNbLS1pXSkgPj0gdjEpIHsgfVxuXHRcdFx0XHRcdFx0XHRcdGlmIChpID09PSAwICYmIHYxIDwgdGhpcy5fbDEpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuX2wxID0gMDtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0aSsrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9sMiA9IGxlbmd0aHNbaV07XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fbGkgPSBpO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2N1clNlZyA9IGN1clNlZyA9IHRoaXMuX3NlZ21lbnRzW2ldO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3MxID0gY3VyU2VnWyh0aGlzLl9zaSA9IGN1clNlZy5sZW5ndGggLSAxKSAtIDFdIHx8IDA7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fczIgPSBjdXJTZWdbdGhpcy5fc2ldO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGN1ckluZGV4ID0gaTtcblx0XHRcdFx0XHRcdFx0Ly9ub3cgZmluZCB0aGUgYXBwcm9wcmlhdGUgc3ViLXNlZ21lbnQgKHdlIHNwbGl0IGl0IGludG8gdGhlIG51bWJlciBvZiBwaWVjZXMgdGhhdCB3YXMgZGVmaW5lZCBieSBcInByZWNpc2lvblwiIGFuZCBtZWFzdXJlZCBlYWNoIG9uZSlcblx0XHRcdFx0XHRcdFx0djEgLT0gdGhpcy5fbDE7XG5cdFx0XHRcdFx0XHRcdGkgPSB0aGlzLl9zaTtcblx0XHRcdFx0XHRcdFx0aWYgKHYxID4gdGhpcy5fczIgJiYgaSA8IGN1clNlZy5sZW5ndGggLSAxKSB7XG5cdFx0XHRcdFx0XHRcdFx0bCA9IGN1clNlZy5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlIChpIDwgbCAmJiAodGhpcy5fczIgPSBjdXJTZWdbKytpXSkgPD0gdjEpIHtcdH1cblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9zMSA9IGN1clNlZ1tpLTFdO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3NpID0gaTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh2MSA8IHRoaXMuX3MxICYmIGkgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKGkgPiAwICYmICh0aGlzLl9zMSA9IGN1clNlZ1stLWldKSA+PSB2MSkge1x0fVxuXHRcdFx0XHRcdFx0XHRcdGlmIChpID09PSAwICYmIHYxIDwgdGhpcy5fczEpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuX3MxID0gMDtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0aSsrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9zMiA9IGN1clNlZ1tpXTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9zaSA9IGk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dCA9ICh2ID09PSAxKSA/IDEgOiAoKGkgKyAodjEgLSB0aGlzLl9zMSkgLyAodGhpcy5fczIgLSB0aGlzLl9zMSkpICogdGhpcy5fcHJlYykgfHwgMDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGludiA9IDEgLSB0O1xuXG5cdFx0XHRcdFx0XHRpID0gdGhpcy5fcHJvcHMubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRcdHAgPSB0aGlzLl9wcm9wc1tpXTtcblx0XHRcdFx0XHRcdFx0YiA9IHRoaXMuX2JlemllcnNbcF1bY3VySW5kZXhdO1xuXHRcdFx0XHRcdFx0XHR2YWwgPSAodCAqIHQgKiBiLmRhICsgMyAqIGludiAqICh0ICogYi5jYSArIGludiAqIGIuYmEpKSAqIHQgKyBiLmE7XG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLl9tb2RbcF0pIHtcblx0XHRcdFx0XHRcdFx0XHR2YWwgPSB0aGlzLl9tb2RbcF0odmFsLCB0YXJnZXQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChmdW5jW3BdKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGFyZ2V0W3BdKHZhbCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGFyZ2V0W3BdID0gdmFsO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICh0aGlzLl9hdXRvUm90YXRlKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBhciA9IHRoaXMuX2F1dG9Sb3RhdGUsXG5cdFx0XHRcdFx0XHRcdFx0YjIsIHgxLCB5MSwgeDIsIHkyLCBhZGQsIGNvbnY7XG5cdFx0XHRcdFx0XHRcdGkgPSBhci5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRcdHAgPSBhcltpXVsyXTtcblx0XHRcdFx0XHRcdFx0XHRhZGQgPSBhcltpXVszXSB8fCAwO1xuXHRcdFx0XHRcdFx0XHRcdGNvbnYgPSAoYXJbaV1bNF0gPT09IHRydWUpID8gMSA6IF9SQUQyREVHO1xuXHRcdFx0XHRcdFx0XHRcdGIgPSB0aGlzLl9iZXppZXJzW2FyW2ldWzBdXTtcblx0XHRcdFx0XHRcdFx0XHRiMiA9IHRoaXMuX2JlemllcnNbYXJbaV1bMV1dO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKGIgJiYgYjIpIHsgLy9pbiBjYXNlIG9uZSBvZiB0aGUgcHJvcGVydGllcyBnb3Qgb3ZlcndyaXR0ZW4uXG5cdFx0XHRcdFx0XHRcdFx0XHRiID0gYltjdXJJbmRleF07XG5cdFx0XHRcdFx0XHRcdFx0XHRiMiA9IGIyW2N1ckluZGV4XTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0eDEgPSBiLmEgKyAoYi5iIC0gYi5hKSAqIHQ7XG5cdFx0XHRcdFx0XHRcdFx0XHR4MiA9IGIuYiArIChiLmMgLSBiLmIpICogdDtcblx0XHRcdFx0XHRcdFx0XHRcdHgxICs9ICh4MiAtIHgxKSAqIHQ7XG5cdFx0XHRcdFx0XHRcdFx0XHR4MiArPSAoKGIuYyArIChiLmQgLSBiLmMpICogdCkgLSB4MikgKiB0O1xuXG5cdFx0XHRcdFx0XHRcdFx0XHR5MSA9IGIyLmEgKyAoYjIuYiAtIGIyLmEpICogdDtcblx0XHRcdFx0XHRcdFx0XHRcdHkyID0gYjIuYiArIChiMi5jIC0gYjIuYikgKiB0O1xuXHRcdFx0XHRcdFx0XHRcdFx0eTEgKz0gKHkyIC0geTEpICogdDtcblx0XHRcdFx0XHRcdFx0XHRcdHkyICs9ICgoYjIuYyArIChiMi5kIC0gYjIuYykgKiB0KSAtIHkyKSAqIHQ7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHZhbCA9IG5vdFN0YXJ0ID8gTWF0aC5hdGFuMih5MiAtIHkxLCB4MiAtIHgxKSAqIGNvbnYgKyBhZGQgOiB0aGlzLl9pbml0aWFsUm90YXRpb25zW2ldO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAodGhpcy5fbW9kW3BdKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhbCA9IHRoaXMuX21vZFtwXSh2YWwsIHRhcmdldCk7IC8vZm9yIG1vZFByb3BzXG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmIChmdW5jW3BdKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRhcmdldFtwXSh2YWwpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGFyZ2V0W3BdID0gdmFsO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdH0pLFxuXHRcdFx0cCA9IEJlemllclBsdWdpbi5wcm90b3R5cGU7XG5cblxuXHRcdEJlemllclBsdWdpbi5iZXppZXJUaHJvdWdoID0gYmV6aWVyVGhyb3VnaDtcblx0XHRCZXppZXJQbHVnaW4uY3ViaWNUb1F1YWRyYXRpYyA9IGN1YmljVG9RdWFkcmF0aWM7XG5cdFx0QmV6aWVyUGx1Z2luLl9hdXRvQ1NTID0gdHJ1ZTsgLy9pbmRpY2F0ZXMgdGhhdCB0aGlzIHBsdWdpbiBjYW4gYmUgaW5zZXJ0ZWQgaW50byB0aGUgXCJjc3NcIiBvYmplY3QgdXNpbmcgdGhlIGF1dG9DU1MgZmVhdHVyZSBvZiBUd2VlbkxpdGVcblx0XHRCZXppZXJQbHVnaW4ucXVhZHJhdGljVG9DdWJpYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcblx0XHRcdHJldHVybiBuZXcgU2VnbWVudChhLCAoMiAqIGIgKyBhKSAvIDMsICgyICogYiArIGMpIC8gMywgYyk7XG5cdFx0fTtcblxuXHRcdEJlemllclBsdWdpbi5fY3NzUmVnaXN0ZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBDU1NQbHVnaW4gPSBfZ2xvYmFscy5DU1NQbHVnaW47XG5cdFx0XHRpZiAoIUNTU1BsdWdpbikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR2YXIgX2ludGVybmFscyA9IENTU1BsdWdpbi5faW50ZXJuYWxzLFxuXHRcdFx0XHRfcGFyc2VUb1Byb3h5ID0gX2ludGVybmFscy5fcGFyc2VUb1Byb3h5LFxuXHRcdFx0XHRfc2V0UGx1Z2luUmF0aW8gPSBfaW50ZXJuYWxzLl9zZXRQbHVnaW5SYXRpbyxcblx0XHRcdFx0Q1NTUHJvcFR3ZWVuID0gX2ludGVybmFscy5DU1NQcm9wVHdlZW47XG5cdFx0XHRfaW50ZXJuYWxzLl9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImJlemllclwiLCB7cGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHByb3AsIGNzc3AsIHB0LCBwbHVnaW4pIHtcblx0XHRcdFx0aWYgKGUgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdFx0XHRcdGUgPSB7dmFsdWVzOmV9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHBsdWdpbiA9IG5ldyBCZXppZXJQbHVnaW4oKTtcblx0XHRcdFx0dmFyIHZhbHVlcyA9IGUudmFsdWVzLFxuXHRcdFx0XHRcdGwgPSB2YWx1ZXMubGVuZ3RoIC0gMSxcblx0XHRcdFx0XHRwbHVnaW5WYWx1ZXMgPSBbXSxcblx0XHRcdFx0XHR2ID0ge30sXG5cdFx0XHRcdFx0aSwgcCwgZGF0YTtcblx0XHRcdFx0aWYgKGwgPCAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHB0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPD0gbDsgaSsrKSB7XG5cdFx0XHRcdFx0ZGF0YSA9IF9wYXJzZVRvUHJveHkodCwgdmFsdWVzW2ldLCBjc3NwLCBwdCwgcGx1Z2luLCAobCAhPT0gaSkpO1xuXHRcdFx0XHRcdHBsdWdpblZhbHVlc1tpXSA9IGRhdGEuZW5kO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvciAocCBpbiBlKSB7XG5cdFx0XHRcdFx0dltwXSA9IGVbcF07IC8vZHVwbGljYXRlIHRoZSB2YXJzIG9iamVjdCBiZWNhdXNlIHdlIG5lZWQgdG8gYWx0ZXIgc29tZSB0aGluZ3Mgd2hpY2ggd291bGQgY2F1c2UgcHJvYmxlbXMgaWYgdGhlIHVzZXIgcGxhbnMgdG8gcmV1c2UgdGhlIHNhbWUgdmFycyBvYmplY3QgZm9yIGFub3RoZXIgdHdlZW4uXG5cdFx0XHRcdH1cblx0XHRcdFx0di52YWx1ZXMgPSBwbHVnaW5WYWx1ZXM7XG5cdFx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2Vlbih0LCBcImJlemllclwiLCAwLCAwLCBkYXRhLnB0LCAyKTtcblx0XHRcdFx0cHQuZGF0YSA9IGRhdGE7XG5cdFx0XHRcdHB0LnBsdWdpbiA9IHBsdWdpbjtcblx0XHRcdFx0cHQuc2V0UmF0aW8gPSBfc2V0UGx1Z2luUmF0aW87XG5cdFx0XHRcdGlmICh2LmF1dG9Sb3RhdGUgPT09IDApIHtcblx0XHRcdFx0XHR2LmF1dG9Sb3RhdGUgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh2LmF1dG9Sb3RhdGUgJiYgISh2LmF1dG9Sb3RhdGUgaW5zdGFuY2VvZiBBcnJheSkpIHtcblx0XHRcdFx0XHRpID0gKHYuYXV0b1JvdGF0ZSA9PT0gdHJ1ZSkgPyAwIDogTnVtYmVyKHYuYXV0b1JvdGF0ZSk7XG5cdFx0XHRcdFx0di5hdXRvUm90YXRlID0gKGRhdGEuZW5kLmxlZnQgIT0gbnVsbCkgPyBbW1wibGVmdFwiLFwidG9wXCIsXCJyb3RhdGlvblwiLGksZmFsc2VdXSA6IChkYXRhLmVuZC54ICE9IG51bGwpID8gW1tcInhcIixcInlcIixcInJvdGF0aW9uXCIsaSxmYWxzZV1dIDogZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHYuYXV0b1JvdGF0ZSkge1xuXHRcdFx0XHRcdGlmICghY3NzcC5fdHJhbnNmb3JtKSB7XG5cdFx0XHRcdFx0XHRjc3NwLl9lbmFibGVUcmFuc2Zvcm1zKGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YS5hdXRvUm90YXRlID0gY3NzcC5fdGFyZ2V0Ll9nc1RyYW5zZm9ybTtcblx0XHRcdFx0XHRkYXRhLnByb3h5LnJvdGF0aW9uID0gZGF0YS5hdXRvUm90YXRlLnJvdGF0aW9uIHx8IDA7XG5cdFx0XHRcdFx0Y3NzcC5fb3ZlcndyaXRlUHJvcHMucHVzaChcInJvdGF0aW9uXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHBsdWdpbi5fb25Jbml0VHdlZW4oZGF0YS5wcm94eSwgdiwgY3NzcC5fdHdlZW4pO1xuXHRcdFx0XHRyZXR1cm4gcHQ7XG5cdFx0XHR9fSk7XG5cdFx0fTtcblxuXHRcdHAuX21vZCA9IGZ1bmN0aW9uKGxvb2t1cCkge1xuXHRcdFx0dmFyIG9wID0gdGhpcy5fb3ZlcndyaXRlUHJvcHMsXG5cdFx0XHRcdGkgPSBvcC5sZW5ndGgsXG5cdFx0XHRcdHZhbDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHR2YWwgPSBsb29rdXBbb3BbaV1dO1xuXHRcdFx0XHRpZiAodmFsICYmIHR5cGVvZih2YWwpID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHR0aGlzLl9tb2Rbb3BbaV1dID0gdmFsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHAuX2tpbGwgPSBmdW5jdGlvbihsb29rdXApIHtcblx0XHRcdHZhciBhID0gdGhpcy5fcHJvcHMsXG5cdFx0XHRcdHAsIGk7XG5cdFx0XHRmb3IgKHAgaW4gdGhpcy5fYmV6aWVycykge1xuXHRcdFx0XHRpZiAocCBpbiBsb29rdXApIHtcblx0XHRcdFx0XHRkZWxldGUgdGhpcy5fYmV6aWVyc1twXTtcblx0XHRcdFx0XHRkZWxldGUgdGhpcy5fZnVuY1twXTtcblx0XHRcdFx0XHRpID0gYS5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRpZiAoYVtpXSA9PT0gcCkge1xuXHRcdFx0XHRcdFx0XHRhLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGEgPSB0aGlzLl9hdXRvUm90YXRlO1xuXHRcdFx0aWYgKGEpIHtcblx0XHRcdFx0aSA9IGEubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRpZiAobG9va3VwW2FbaV1bMl1dKSB7XG5cdFx0XHRcdFx0XHRhLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLl9zdXBlci5fa2lsbC5jYWxsKHRoaXMsIGxvb2t1cCk7XG5cdFx0fTtcblxuZXhwb3J0IHsgQmV6aWVyUGx1Z2luLCBCZXppZXJQbHVnaW4gYXMgZGVmYXVsdCB9OyIsIi8qIVxuICogVkVSU0lPTjogMS4xNi4xXG4gKiBEQVRFOiAyMDE4LTA4LTI3XG4gKiBVUERBVEVTIEFORCBET0NTIEFUOiBodHRwOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwOC0yMDE5LCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIHdvcmsgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cDovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBzb2Z0d2FyZSBhZ3JlZW1lbnQgdGhhdCB3YXMgaXNzdWVkIHdpdGggeW91ciBtZW1iZXJzaGlwLlxuICogXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiAqKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbmltcG9ydCB7IF9nc1Njb3BlLCBnbG9iYWxzLCBFYXNlLCBMaW5lYXIsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0IH0gZnJvbSBcIi4vVHdlZW5MaXRlLmpzXCI7XG5cbl9nc1Njb3BlLl9nc0RlZmluZShcImVhc2luZy5CYWNrXCIsIFtcImVhc2luZy5FYXNlXCJdLCBmdW5jdGlvbigpIHtcblx0XHRcblx0XHR2YXIgdyA9IChfZ3NTY29wZS5HcmVlblNvY2tHbG9iYWxzIHx8IF9nc1Njb3BlKSxcblx0XHRcdGdzID0gdy5jb20uZ3JlZW5zb2NrLFxuXHRcdFx0XzJQSSA9IE1hdGguUEkgKiAyLFxuXHRcdFx0X0hBTEZfUEkgPSBNYXRoLlBJIC8gMixcblx0XHRcdF9jbGFzcyA9IGdzLl9jbGFzcyxcblx0XHRcdF9jcmVhdGUgPSBmdW5jdGlvbihuLCBmKSB7XG5cdFx0XHRcdHZhciBDID0gX2NsYXNzKFwiZWFzaW5nLlwiICsgbiwgZnVuY3Rpb24oKXt9LCB0cnVlKSxcblx0XHRcdFx0XHRwID0gQy5wcm90b3R5cGUgPSBuZXcgRWFzZSgpO1xuXHRcdFx0XHRwLmNvbnN0cnVjdG9yID0gQztcblx0XHRcdFx0cC5nZXRSYXRpbyA9IGY7XG5cdFx0XHRcdHJldHVybiBDO1xuXHRcdFx0fSxcblx0XHRcdF9lYXNlUmVnID0gRWFzZS5yZWdpc3RlciB8fCBmdW5jdGlvbigpe30sIC8vcHV0IGFuIGVtcHR5IGZ1bmN0aW9uIGluIHBsYWNlIGp1c3QgYXMgYSBzYWZldHkgbWVhc3VyZSBpbiBjYXNlIHNvbWVvbmUgbG9hZHMgYW4gT0xEIHZlcnNpb24gb2YgVHdlZW5MaXRlLmpzIHdoZXJlIEVhc2UucmVnaXN0ZXIgZG9lc24ndCBleGlzdC5cblx0XHRcdF93cmFwID0gZnVuY3Rpb24obmFtZSwgRWFzZU91dCwgRWFzZUluLCBFYXNlSW5PdXQsIGFsaWFzZXMpIHtcblx0XHRcdFx0dmFyIEMgPSBfY2xhc3MoXCJlYXNpbmcuXCIrbmFtZSwge1xuXHRcdFx0XHRcdGVhc2VPdXQ6bmV3IEVhc2VPdXQoKSxcblx0XHRcdFx0XHRlYXNlSW46bmV3IEVhc2VJbigpLFxuXHRcdFx0XHRcdGVhc2VJbk91dDpuZXcgRWFzZUluT3V0KClcblx0XHRcdFx0fSwgdHJ1ZSk7XG5cdFx0XHRcdF9lYXNlUmVnKEMsIG5hbWUpO1xuXHRcdFx0XHRyZXR1cm4gQztcblx0XHRcdH0sXG5cdFx0XHRFYXNlUG9pbnQgPSBmdW5jdGlvbih0aW1lLCB2YWx1ZSwgbmV4dCkge1xuXHRcdFx0XHR0aGlzLnQgPSB0aW1lO1xuXHRcdFx0XHR0aGlzLnYgPSB2YWx1ZTtcblx0XHRcdFx0aWYgKG5leHQpIHtcblx0XHRcdFx0XHR0aGlzLm5leHQgPSBuZXh0O1xuXHRcdFx0XHRcdG5leHQucHJldiA9IHRoaXM7XG5cdFx0XHRcdFx0dGhpcy5jID0gbmV4dC52IC0gdmFsdWU7XG5cdFx0XHRcdFx0dGhpcy5nYXAgPSBuZXh0LnQgLSB0aW1lO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvL0JhY2tcblx0XHRcdF9jcmVhdGVCYWNrID0gZnVuY3Rpb24obiwgZikge1xuXHRcdFx0XHR2YXIgQyA9IF9jbGFzcyhcImVhc2luZy5cIiArIG4sIGZ1bmN0aW9uKG92ZXJzaG9vdCkge1xuXHRcdFx0XHRcdFx0dGhpcy5fcDEgPSAob3ZlcnNob290IHx8IG92ZXJzaG9vdCA9PT0gMCkgPyBvdmVyc2hvb3QgOiAxLjcwMTU4O1xuXHRcdFx0XHRcdFx0dGhpcy5fcDIgPSB0aGlzLl9wMSAqIDEuNTI1O1xuXHRcdFx0XHRcdH0sIHRydWUpLCBcblx0XHRcdFx0XHRwID0gQy5wcm90b3R5cGUgPSBuZXcgRWFzZSgpO1xuXHRcdFx0XHRwLmNvbnN0cnVjdG9yID0gQztcblx0XHRcdFx0cC5nZXRSYXRpbyA9IGY7XG5cdFx0XHRcdHAuY29uZmlnID0gZnVuY3Rpb24ob3ZlcnNob290KSB7XG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBDKG92ZXJzaG9vdCk7XG5cdFx0XHRcdH07XG5cdFx0XHRcdHJldHVybiBDO1xuXHRcdFx0fSxcblxuXHRcdFx0QmFjayA9IF93cmFwKFwiQmFja1wiLFxuXHRcdFx0XHRfY3JlYXRlQmFjayhcIkJhY2tPdXRcIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRcdHJldHVybiAoKHAgPSBwIC0gMSkgKiBwICogKCh0aGlzLl9wMSArIDEpICogcCArIHRoaXMuX3AxKSArIDEpO1xuXHRcdFx0XHR9KSxcblx0XHRcdFx0X2NyZWF0ZUJhY2soXCJCYWNrSW5cIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRcdHJldHVybiBwICogcCAqICgodGhpcy5fcDEgKyAxKSAqIHAgLSB0aGlzLl9wMSk7XG5cdFx0XHRcdH0pLFxuXHRcdFx0XHRfY3JlYXRlQmFjayhcIkJhY2tJbk91dFwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdFx0cmV0dXJuICgocCAqPSAyKSA8IDEpID8gMC41ICogcCAqIHAgKiAoKHRoaXMuX3AyICsgMSkgKiBwIC0gdGhpcy5fcDIpIDogMC41ICogKChwIC09IDIpICogcCAqICgodGhpcy5fcDIgKyAxKSAqIHAgKyB0aGlzLl9wMikgKyAyKTtcblx0XHRcdFx0fSlcblx0XHRcdCksXG5cblxuXHRcdFx0Ly9TbG93TW9cblx0XHRcdFNsb3dNbyA9IF9jbGFzcyhcImVhc2luZy5TbG93TW9cIiwgZnVuY3Rpb24obGluZWFyUmF0aW8sIHBvd2VyLCB5b3lvTW9kZSkge1xuXHRcdFx0XHRwb3dlciA9IChwb3dlciB8fCBwb3dlciA9PT0gMCkgPyBwb3dlciA6IDAuNztcblx0XHRcdFx0aWYgKGxpbmVhclJhdGlvID09IG51bGwpIHtcblx0XHRcdFx0XHRsaW5lYXJSYXRpbyA9IDAuNztcblx0XHRcdFx0fSBlbHNlIGlmIChsaW5lYXJSYXRpbyA+IDEpIHtcblx0XHRcdFx0XHRsaW5lYXJSYXRpbyA9IDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5fcCA9IChsaW5lYXJSYXRpbyAhPT0gMSkgPyBwb3dlciA6IDA7XG5cdFx0XHRcdHRoaXMuX3AxID0gKDEgLSBsaW5lYXJSYXRpbykgLyAyO1xuXHRcdFx0XHR0aGlzLl9wMiA9IGxpbmVhclJhdGlvO1xuXHRcdFx0XHR0aGlzLl9wMyA9IHRoaXMuX3AxICsgdGhpcy5fcDI7XG5cdFx0XHRcdHRoaXMuX2NhbGNFbmQgPSAoeW95b01vZGUgPT09IHRydWUpO1xuXHRcdFx0fSwgdHJ1ZSksXG5cdFx0XHRwID0gU2xvd01vLnByb3RvdHlwZSA9IG5ldyBFYXNlKCksXG5cdFx0XHRTdGVwcGVkRWFzZSwgRXhwb1NjYWxlRWFzZSwgUm91Z2hFYXNlLCBfY3JlYXRlRWxhc3RpYztcblx0XHRcdFxuXHRcdHAuY29uc3RydWN0b3IgPSBTbG93TW87XG5cdFx0cC5nZXRSYXRpbyA9IGZ1bmN0aW9uKHApIHtcblx0XHRcdHZhciByID0gcCArICgwLjUgLSBwKSAqIHRoaXMuX3A7XG5cdFx0XHRpZiAocCA8IHRoaXMuX3AxKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9jYWxjRW5kID8gMSAtICgocCA9IDEgLSAocCAvIHRoaXMuX3AxKSkgKiBwKSA6IHIgLSAoKHAgPSAxIC0gKHAgLyB0aGlzLl9wMSkpICogcCAqIHAgKiBwICogcik7XG5cdFx0XHR9IGVsc2UgaWYgKHAgPiB0aGlzLl9wMykge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fY2FsY0VuZCA/IChwID09PSAxID8gMCA6IDEgLSAocCA9IChwIC0gdGhpcy5fcDMpIC8gdGhpcy5fcDEpICogcCkgOiByICsgKChwIC0gcikgKiAocCA9IChwIC0gdGhpcy5fcDMpIC8gdGhpcy5fcDEpICogcCAqIHAgKiBwKTsgLy9hZGRlZCBwID09PSAxID8gMCB0byBhdm9pZCBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnMgZnJvbSBhZmZlY3RpbmcgdGhlIGZpbmFsIHZhbHVlLCBsaWtlIDEgLSAwLjcgPSAwLjMwMDAwMDAwMDAwMDAwMDA0IGluc3RlYWQgb2YgMC4zXG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5fY2FsY0VuZCA/IDEgOiByO1xuXHRcdH07XG5cdFx0U2xvd01vLmVhc2UgPSBuZXcgU2xvd01vKDAuNywgMC43KTtcblx0XHRcblx0XHRwLmNvbmZpZyA9IFNsb3dNby5jb25maWcgPSBmdW5jdGlvbihsaW5lYXJSYXRpbywgcG93ZXIsIHlveW9Nb2RlKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFNsb3dNbyhsaW5lYXJSYXRpbywgcG93ZXIsIHlveW9Nb2RlKTtcblx0XHR9O1xuXG5cblx0XHQvL1N0ZXBwZWRFYXNlXG5cdFx0U3RlcHBlZEVhc2UgPSBfY2xhc3MoXCJlYXNpbmcuU3RlcHBlZEVhc2VcIiwgZnVuY3Rpb24oc3RlcHMsIGltbWVkaWF0ZVN0YXJ0KSB7XG5cdFx0XHRcdHN0ZXBzID0gc3RlcHMgfHwgMTtcblx0XHRcdFx0dGhpcy5fcDEgPSAxIC8gc3RlcHM7XG5cdFx0XHRcdHRoaXMuX3AyID0gc3RlcHMgKyAoaW1tZWRpYXRlU3RhcnQgPyAwIDogMSk7XG5cdFx0XHRcdHRoaXMuX3AzID0gaW1tZWRpYXRlU3RhcnQgPyAxIDogMDtcblx0XHRcdH0sIHRydWUpO1xuXHRcdHAgPSBTdGVwcGVkRWFzZS5wcm90b3R5cGUgPSBuZXcgRWFzZSgpO1x0XG5cdFx0cC5jb25zdHJ1Y3RvciA9IFN0ZXBwZWRFYXNlO1xuXHRcdHAuZ2V0UmF0aW8gPSBmdW5jdGlvbihwKSB7XG5cdFx0XHRpZiAocCA8IDApIHtcblx0XHRcdFx0cCA9IDA7XG5cdFx0XHR9IGVsc2UgaWYgKHAgPj0gMSkge1xuXHRcdFx0XHRwID0gMC45OTk5OTk5OTk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gKCgodGhpcy5fcDIgKiBwKSB8IDApICsgdGhpcy5fcDMpICogdGhpcy5fcDE7XG5cdFx0fTtcblx0XHRwLmNvbmZpZyA9IFN0ZXBwZWRFYXNlLmNvbmZpZyA9IGZ1bmN0aW9uKHN0ZXBzLCBpbW1lZGlhdGVTdGFydCkge1xuXHRcdFx0cmV0dXJuIG5ldyBTdGVwcGVkRWFzZShzdGVwcywgaW1tZWRpYXRlU3RhcnQpO1xuXHRcdH07XG5cblxuXHRcdC8vRXhwb1NjYWxlRWFzZVxuXHRcdEV4cG9TY2FsZUVhc2UgPSBfY2xhc3MoXCJlYXNpbmcuRXhwb1NjYWxlRWFzZVwiLCBmdW5jdGlvbihzdGFydCwgZW5kLCBlYXNlKSB7XG5cdFx0XHR0aGlzLl9wMSA9IE1hdGgubG9nKGVuZCAvIHN0YXJ0KTtcblx0XHRcdHRoaXMuX3AyID0gZW5kIC0gc3RhcnQ7XG5cdFx0XHR0aGlzLl9wMyA9IHN0YXJ0O1xuXHRcdFx0dGhpcy5fZWFzZSA9IGVhc2U7XG5cdFx0fSwgdHJ1ZSk7XG5cdFx0cCA9IEV4cG9TY2FsZUVhc2UucHJvdG90eXBlID0gbmV3IEVhc2UoKTtcblx0XHRwLmNvbnN0cnVjdG9yID0gRXhwb1NjYWxlRWFzZTtcblx0XHRwLmdldFJhdGlvID0gZnVuY3Rpb24ocCkge1xuXHRcdFx0aWYgKHRoaXMuX2Vhc2UpIHtcblx0XHRcdFx0cCA9IHRoaXMuX2Vhc2UuZ2V0UmF0aW8ocCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gKHRoaXMuX3AzICogTWF0aC5leHAodGhpcy5fcDEgKiBwKSAtIHRoaXMuX3AzKSAvIHRoaXMuX3AyO1xuXHRcdH07XG5cdFx0cC5jb25maWcgPSBFeHBvU2NhbGVFYXNlLmNvbmZpZyA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIGVhc2UpIHtcblx0XHRcdHJldHVybiBuZXcgRXhwb1NjYWxlRWFzZShzdGFydCwgZW5kLCBlYXNlKTtcblx0XHR9O1xuXG5cblx0XHQvL1JvdWdoRWFzZVxuXHRcdFJvdWdoRWFzZSA9IF9jbGFzcyhcImVhc2luZy5Sb3VnaEVhc2VcIiwgZnVuY3Rpb24odmFycykge1xuXHRcdFx0dmFycyA9IHZhcnMgfHwge307XG5cdFx0XHR2YXIgdGFwZXIgPSB2YXJzLnRhcGVyIHx8IFwibm9uZVwiLFxuXHRcdFx0XHRhID0gW10sXG5cdFx0XHRcdGNudCA9IDAsXG5cdFx0XHRcdHBvaW50cyA9ICh2YXJzLnBvaW50cyB8fCAyMCkgfCAwLFxuXHRcdFx0XHRpID0gcG9pbnRzLFxuXHRcdFx0XHRyYW5kb21pemUgPSAodmFycy5yYW5kb21pemUgIT09IGZhbHNlKSxcblx0XHRcdFx0Y2xhbXAgPSAodmFycy5jbGFtcCA9PT0gdHJ1ZSksXG5cdFx0XHRcdHRlbXBsYXRlID0gKHZhcnMudGVtcGxhdGUgaW5zdGFuY2VvZiBFYXNlKSA/IHZhcnMudGVtcGxhdGUgOiBudWxsLFxuXHRcdFx0XHRzdHJlbmd0aCA9ICh0eXBlb2YodmFycy5zdHJlbmd0aCkgPT09IFwibnVtYmVyXCIpID8gdmFycy5zdHJlbmd0aCAqIDAuNCA6IDAuNCxcblx0XHRcdFx0eCwgeSwgYnVtcCwgaW52WCwgb2JqLCBwbnQ7XG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0eCA9IHJhbmRvbWl6ZSA/IE1hdGgucmFuZG9tKCkgOiAoMSAvIHBvaW50cykgKiBpO1xuXHRcdFx0XHR5ID0gdGVtcGxhdGUgPyB0ZW1wbGF0ZS5nZXRSYXRpbyh4KSA6IHg7XG5cdFx0XHRcdGlmICh0YXBlciA9PT0gXCJub25lXCIpIHtcblx0XHRcdFx0XHRidW1wID0gc3RyZW5ndGg7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGFwZXIgPT09IFwib3V0XCIpIHtcblx0XHRcdFx0XHRpbnZYID0gMSAtIHg7XG5cdFx0XHRcdFx0YnVtcCA9IGludlggKiBpbnZYICogc3RyZW5ndGg7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGFwZXIgPT09IFwiaW5cIikge1xuXHRcdFx0XHRcdGJ1bXAgPSB4ICogeCAqIHN0cmVuZ3RoO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHggPCAwLjUpIHsgIC8vXCJib3RoXCIgKHN0YXJ0KVxuXHRcdFx0XHRcdGludlggPSB4ICogMjtcblx0XHRcdFx0XHRidW1wID0gaW52WCAqIGludlggKiAwLjUgKiBzdHJlbmd0aDtcblx0XHRcdFx0fSBlbHNlIHtcdFx0XHRcdC8vXCJib3RoXCIgKGVuZClcblx0XHRcdFx0XHRpbnZYID0gKDEgLSB4KSAqIDI7XG5cdFx0XHRcdFx0YnVtcCA9IGludlggKiBpbnZYICogMC41ICogc3RyZW5ndGg7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHJhbmRvbWl6ZSkge1xuXHRcdFx0XHRcdHkgKz0gKE1hdGgucmFuZG9tKCkgKiBidW1wKSAtIChidW1wICogMC41KTtcblx0XHRcdFx0fSBlbHNlIGlmIChpICUgMikge1xuXHRcdFx0XHRcdHkgKz0gYnVtcCAqIDAuNTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR5IC09IGJ1bXAgKiAwLjU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGNsYW1wKSB7XG5cdFx0XHRcdFx0aWYgKHkgPiAxKSB7XG5cdFx0XHRcdFx0XHR5ID0gMTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHkgPCAwKSB7XG5cdFx0XHRcdFx0XHR5ID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0YVtjbnQrK10gPSB7eDp4LCB5Onl9O1xuXHRcdFx0fVxuXHRcdFx0YS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdFx0cmV0dXJuIGEueCAtIGIueDtcblx0XHRcdH0pO1xuXG5cdFx0XHRwbnQgPSBuZXcgRWFzZVBvaW50KDEsIDEsIG51bGwpO1xuXHRcdFx0aSA9IHBvaW50cztcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRvYmogPSBhW2ldO1xuXHRcdFx0XHRwbnQgPSBuZXcgRWFzZVBvaW50KG9iai54LCBvYmoueSwgcG50KTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fcHJldiA9IG5ldyBFYXNlUG9pbnQoMCwgMCwgKHBudC50ICE9PSAwKSA/IHBudCA6IHBudC5uZXh0KTtcblx0XHR9LCB0cnVlKTtcblx0XHRwID0gUm91Z2hFYXNlLnByb3RvdHlwZSA9IG5ldyBFYXNlKCk7XG5cdFx0cC5jb25zdHJ1Y3RvciA9IFJvdWdoRWFzZTtcblx0XHRwLmdldFJhdGlvID0gZnVuY3Rpb24ocCkge1xuXHRcdFx0dmFyIHBudCA9IHRoaXMuX3ByZXY7XG5cdFx0XHRpZiAocCA+IHBudC50KSB7XG5cdFx0XHRcdHdoaWxlIChwbnQubmV4dCAmJiBwID49IHBudC50KSB7XG5cdFx0XHRcdFx0cG50ID0gcG50Lm5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0cG50ID0gcG50LnByZXY7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAocG50LnByZXYgJiYgcCA8PSBwbnQudCkge1xuXHRcdFx0XHRcdHBudCA9IHBudC5wcmV2O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9wcmV2ID0gcG50O1xuXHRcdFx0cmV0dXJuIChwbnQudiArICgocCAtIHBudC50KSAvIHBudC5nYXApICogcG50LmMpO1xuXHRcdH07XG5cdFx0cC5jb25maWcgPSBmdW5jdGlvbih2YXJzKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFJvdWdoRWFzZSh2YXJzKTtcblx0XHR9O1xuXHRcdFJvdWdoRWFzZS5lYXNlID0gbmV3IFJvdWdoRWFzZSgpO1xuXG5cblx0XHQvL0JvdW5jZVxuXHRcdF93cmFwKFwiQm91bmNlXCIsXG5cdFx0XHRfY3JlYXRlKFwiQm91bmNlT3V0XCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0aWYgKHAgPCAxIC8gMi43NSkge1xuXHRcdFx0XHRcdHJldHVybiA3LjU2MjUgKiBwICogcDtcblx0XHRcdFx0fSBlbHNlIGlmIChwIDwgMiAvIDIuNzUpIHtcblx0XHRcdFx0XHRyZXR1cm4gNy41NjI1ICogKHAgLT0gMS41IC8gMi43NSkgKiBwICsgMC43NTtcblx0XHRcdFx0fSBlbHNlIGlmIChwIDwgMi41IC8gMi43NSkge1xuXHRcdFx0XHRcdHJldHVybiA3LjU2MjUgKiAocCAtPSAyLjI1IC8gMi43NSkgKiBwICsgMC45Mzc1O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiA3LjU2MjUgKiAocCAtPSAyLjYyNSAvIDIuNzUpICogcCArIDAuOTg0Mzc1O1xuXHRcdFx0fSksXG5cdFx0XHRfY3JlYXRlKFwiQm91bmNlSW5cIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRpZiAoKHAgPSAxIC0gcCkgPCAxIC8gMi43NSkge1xuXHRcdFx0XHRcdHJldHVybiAxIC0gKDcuNTYyNSAqIHAgKiBwKTtcblx0XHRcdFx0fSBlbHNlIGlmIChwIDwgMiAvIDIuNzUpIHtcblx0XHRcdFx0XHRyZXR1cm4gMSAtICg3LjU2MjUgKiAocCAtPSAxLjUgLyAyLjc1KSAqIHAgKyAwLjc1KTtcblx0XHRcdFx0fSBlbHNlIGlmIChwIDwgMi41IC8gMi43NSkge1xuXHRcdFx0XHRcdHJldHVybiAxIC0gKDcuNTYyNSAqIChwIC09IDIuMjUgLyAyLjc1KSAqIHAgKyAwLjkzNzUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAxIC0gKDcuNTYyNSAqIChwIC09IDIuNjI1IC8gMi43NSkgKiBwICsgMC45ODQzNzUpO1xuXHRcdFx0fSksXG5cdFx0XHRfY3JlYXRlKFwiQm91bmNlSW5PdXRcIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHR2YXIgaW52ZXJ0ID0gKHAgPCAwLjUpO1xuXHRcdFx0XHRpZiAoaW52ZXJ0KSB7XG5cdFx0XHRcdFx0cCA9IDEgLSAocCAqIDIpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHAgPSAocCAqIDIpIC0gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocCA8IDEgLyAyLjc1KSB7XG5cdFx0XHRcdFx0cCA9IDcuNTYyNSAqIHAgKiBwO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHAgPCAyIC8gMi43NSkge1xuXHRcdFx0XHRcdHAgPSA3LjU2MjUgKiAocCAtPSAxLjUgLyAyLjc1KSAqIHAgKyAwLjc1O1xuXHRcdFx0XHR9IGVsc2UgaWYgKHAgPCAyLjUgLyAyLjc1KSB7XG5cdFx0XHRcdFx0cCA9IDcuNTYyNSAqIChwIC09IDIuMjUgLyAyLjc1KSAqIHAgKyAwLjkzNzU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cCA9IDcuNTYyNSAqIChwIC09IDIuNjI1IC8gMi43NSkgKiBwICsgMC45ODQzNzU7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGludmVydCA/ICgxIC0gcCkgKiAwLjUgOiBwICogMC41ICsgMC41O1xuXHRcdFx0fSlcblx0XHQpO1xuXG5cblx0XHQvL0NJUkNcblx0XHRfd3JhcChcIkNpcmNcIixcblx0XHRcdF9jcmVhdGUoXCJDaXJjT3V0XCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0cmV0dXJuIE1hdGguc3FydCgxIC0gKHAgPSBwIC0gMSkgKiBwKTtcblx0XHRcdH0pLFxuXHRcdFx0X2NyZWF0ZShcIkNpcmNJblwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHJldHVybiAtKE1hdGguc3FydCgxIC0gKHAgKiBwKSkgLSAxKTtcblx0XHRcdH0pLFxuXHRcdFx0X2NyZWF0ZShcIkNpcmNJbk91dFwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHJldHVybiAoKHAqPTIpIDwgMSkgPyAtMC41ICogKE1hdGguc3FydCgxIC0gcCAqIHApIC0gMSkgOiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAocCAtPSAyKSAqIHApICsgMSk7XG5cdFx0XHR9KVxuXHRcdCk7XG5cblxuXHRcdC8vRWxhc3RpY1xuXHRcdF9jcmVhdGVFbGFzdGljID0gZnVuY3Rpb24obiwgZiwgZGVmKSB7XG5cdFx0XHR2YXIgQyA9IF9jbGFzcyhcImVhc2luZy5cIiArIG4sIGZ1bmN0aW9uKGFtcGxpdHVkZSwgcGVyaW9kKSB7XG5cdFx0XHRcdFx0dGhpcy5fcDEgPSAoYW1wbGl0dWRlID49IDEpID8gYW1wbGl0dWRlIDogMTsgLy9ub3RlOiBpZiBhbXBsaXR1ZGUgaXMgPCAxLCB3ZSBzaW1wbHkgYWRqdXN0IHRoZSBwZXJpb2QgZm9yIGEgbW9yZSBuYXR1cmFsIGZlZWwuIE90aGVyd2lzZSB0aGUgbWF0aCBkb2Vzbid0IHdvcmsgcmlnaHQgYW5kIHRoZSBjdXJ2ZSBzdGFydHMgYXQgMS5cblx0XHRcdFx0XHR0aGlzLl9wMiA9IChwZXJpb2QgfHwgZGVmKSAvIChhbXBsaXR1ZGUgPCAxID8gYW1wbGl0dWRlIDogMSk7XG5cdFx0XHRcdFx0dGhpcy5fcDMgPSB0aGlzLl9wMiAvIF8yUEkgKiAoTWF0aC5hc2luKDEgLyB0aGlzLl9wMSkgfHwgMCk7XG5cdFx0XHRcdFx0dGhpcy5fcDIgPSBfMlBJIC8gdGhpcy5fcDI7IC8vcHJlY2FsY3VsYXRlIHRvIG9wdGltaXplXG5cdFx0XHRcdH0sIHRydWUpLFxuXHRcdFx0XHRwID0gQy5wcm90b3R5cGUgPSBuZXcgRWFzZSgpO1xuXHRcdFx0cC5jb25zdHJ1Y3RvciA9IEM7XG5cdFx0XHRwLmdldFJhdGlvID0gZjtcblx0XHRcdHAuY29uZmlnID0gZnVuY3Rpb24oYW1wbGl0dWRlLCBwZXJpb2QpIHtcblx0XHRcdFx0cmV0dXJuIG5ldyBDKGFtcGxpdHVkZSwgcGVyaW9kKTtcblx0XHRcdH07XG5cdFx0XHRyZXR1cm4gQztcblx0XHR9O1xuXHRcdF93cmFwKFwiRWxhc3RpY1wiLFxuXHRcdFx0X2NyZWF0ZUVsYXN0aWMoXCJFbGFzdGljT3V0XCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3AxICogTWF0aC5wb3coMiwgLTEwICogcCkgKiBNYXRoLnNpbiggKHAgLSB0aGlzLl9wMykgKiB0aGlzLl9wMiApICsgMTtcblx0XHRcdH0sIDAuMyksXG5cdFx0XHRfY3JlYXRlRWxhc3RpYyhcIkVsYXN0aWNJblwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHJldHVybiAtKHRoaXMuX3AxICogTWF0aC5wb3coMiwgMTAgKiAocCAtPSAxKSkgKiBNYXRoLnNpbiggKHAgLSB0aGlzLl9wMykgKiB0aGlzLl9wMiApKTtcblx0XHRcdH0sIDAuMyksXG5cdFx0XHRfY3JlYXRlRWxhc3RpYyhcIkVsYXN0aWNJbk91dFwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHJldHVybiAoKHAgKj0gMikgPCAxKSA/IC0wLjUgKiAodGhpcy5fcDEgKiBNYXRoLnBvdygyLCAxMCAqIChwIC09IDEpKSAqIE1hdGguc2luKCAocCAtIHRoaXMuX3AzKSAqIHRoaXMuX3AyKSkgOiB0aGlzLl9wMSAqIE1hdGgucG93KDIsIC0xMCAqKHAgLT0gMSkpICogTWF0aC5zaW4oIChwIC0gdGhpcy5fcDMpICogdGhpcy5fcDIgKSAqIDAuNSArIDE7XG5cdFx0XHR9LCAwLjQ1KVxuXHRcdCk7XG5cblxuXHRcdC8vRXhwb1xuXHRcdF93cmFwKFwiRXhwb1wiLFxuXHRcdFx0X2NyZWF0ZShcIkV4cG9PdXRcIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRyZXR1cm4gMSAtIE1hdGgucG93KDIsIC0xMCAqIHApO1xuXHRcdFx0fSksXG5cdFx0XHRfY3JlYXRlKFwiRXhwb0luXCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0cmV0dXJuIE1hdGgucG93KDIsIDEwICogKHAgLSAxKSkgLSAwLjAwMTtcblx0XHRcdH0pLFxuXHRcdFx0X2NyZWF0ZShcIkV4cG9Jbk91dFwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHJldHVybiAoKHAgKj0gMikgPCAxKSA/IDAuNSAqIE1hdGgucG93KDIsIDEwICogKHAgLSAxKSkgOiAwLjUgKiAoMiAtIE1hdGgucG93KDIsIC0xMCAqIChwIC0gMSkpKTtcblx0XHRcdH0pXG5cdFx0KTtcblxuXG5cdFx0Ly9TaW5lXG5cdFx0X3dyYXAoXCJTaW5lXCIsXG5cdFx0XHRfY3JlYXRlKFwiU2luZU91dFwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHJldHVybiBNYXRoLnNpbihwICogX0hBTEZfUEkpO1xuXHRcdFx0fSksXG5cdFx0XHRfY3JlYXRlKFwiU2luZUluXCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0cmV0dXJuIC1NYXRoLmNvcyhwICogX0hBTEZfUEkpICsgMTtcblx0XHRcdH0pLFxuXHRcdFx0X2NyZWF0ZShcIlNpbmVJbk91dFwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHJldHVybiAtMC41ICogKE1hdGguY29zKE1hdGguUEkgKiBwKSAtIDEpO1xuXHRcdFx0fSlcblx0XHQpO1xuXG5cdFx0X2NsYXNzKFwiZWFzaW5nLkVhc2VMb29rdXBcIiwge1xuXHRcdFx0XHRmaW5kOmZ1bmN0aW9uKHMpIHtcblx0XHRcdFx0XHRyZXR1cm4gRWFzZS5tYXBbc107XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRydWUpO1xuXG5cdFx0Ly9yZWdpc3RlciB0aGUgbm9uLXN0YW5kYXJkIGVhc2VzXG5cdFx0X2Vhc2VSZWcody5TbG93TW8sIFwiU2xvd01vXCIsIFwiZWFzZSxcIik7XG5cdFx0X2Vhc2VSZWcoUm91Z2hFYXNlLCBcIlJvdWdoRWFzZVwiLCBcImVhc2UsXCIpO1xuXHRcdF9lYXNlUmVnKFN0ZXBwZWRFYXNlLCBcIlN0ZXBwZWRFYXNlXCIsIFwiZWFzZSxcIik7XG5cdFx0XG5cdFx0cmV0dXJuIEJhY2s7XG5cdFx0XG5cdH0sIHRydWUpO1xuXG5leHBvcnQgdmFyIEJhY2sgPSBnbG9iYWxzLkJhY2s7XG5leHBvcnQgdmFyIEVsYXN0aWMgPSBnbG9iYWxzLkVsYXN0aWM7XG5leHBvcnQgdmFyIEJvdW5jZSA9IGdsb2JhbHMuQm91bmNlO1xuZXhwb3J0IHZhciBSb3VnaEVhc2UgPSBnbG9iYWxzLlJvdWdoRWFzZTtcbmV4cG9ydCB2YXIgU2xvd01vID0gZ2xvYmFscy5TbG93TW87XG5leHBvcnQgdmFyIFN0ZXBwZWRFYXNlID0gZ2xvYmFscy5TdGVwcGVkRWFzZTtcbmV4cG9ydCB2YXIgQ2lyYyA9IGdsb2JhbHMuQ2lyYztcbmV4cG9ydCB2YXIgRXhwbyA9IGdsb2JhbHMuRXhwbztcbmV4cG9ydCB2YXIgU2luZSA9IGdsb2JhbHMuU2luZTtcbmV4cG9ydCB2YXIgRXhwb1NjYWxlRWFzZSA9IGdsb2JhbHMuRXhwb1NjYWxlRWFzZTtcbmV4cG9ydCB7IExpbmVhciwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQgfTsiLCIvKiFcbiAqIFZFUlNJT046IDIuMS4zXG4gKiBEQVRFOiAyMDE5LTA1LTE3XG4gKiBVUERBVEVTIEFORCBET0NTIEFUOiBodHRwOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwOC0yMDE5LCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIHdvcmsgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cDovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBzb2Z0d2FyZSBhZ3JlZW1lbnQgdGhhdCB3YXMgaXNzdWVkIHdpdGggeW91ciBtZW1iZXJzaGlwLlxuICogXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiAqKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbmltcG9ydCBUd2VlbkxpdGUsIHsgVHdlZW5QbHVnaW4sIEVhc2UsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIgfSBmcm9tIFwiLi9Ud2VlbkxpdGUuanNcIjtcbmltcG9ydCBUd2Vlbk1heEJhc2UgZnJvbSBcIi4vVHdlZW5NYXhCYXNlLmpzXCI7XG5pbXBvcnQgQ1NTUGx1Z2luIGZyb20gXCIuL0NTU1BsdWdpbi5qc1wiO1xuaW1wb3J0IEF0dHJQbHVnaW4gZnJvbSBcIi4vQXR0clBsdWdpbi5qc1wiO1xuaW1wb3J0IFJvdW5kUHJvcHNQbHVnaW4gZnJvbSBcIi4vUm91bmRQcm9wc1BsdWdpbi5qc1wiO1xuaW1wb3J0IERpcmVjdGlvbmFsUm90YXRpb25QbHVnaW4gZnJvbSBcIi4vRGlyZWN0aW9uYWxSb3RhdGlvblBsdWdpbi5qc1wiO1xuaW1wb3J0IFRpbWVsaW5lTGl0ZSBmcm9tIFwiLi9UaW1lbGluZUxpdGUuanNcIjtcbmltcG9ydCBUaW1lbGluZU1heCBmcm9tIFwiLi9UaW1lbGluZU1heC5qc1wiO1xuaW1wb3J0IEJlemllclBsdWdpbiBmcm9tIFwiLi9CZXppZXJQbHVnaW4uanNcIjtcbmltcG9ydCB7IEJhY2ssIEVsYXN0aWMsIEJvdW5jZSwgUm91Z2hFYXNlLCBTbG93TW8sIFN0ZXBwZWRFYXNlLCBDaXJjLCBFeHBvLCBTaW5lLCBFeHBvU2NhbGVFYXNlIH0gZnJvbSBcIi4vRWFzZVBhY2suanNcIjtcblxuLy90aGUgZm9sbG93aW5nIHR3byBsaW5lcyBhcmUgZGVzaWduZWQgdG8gcHJldmVudCB0cmVlIHNoYWtpbmcgb2YgdGhlIGNsYXNzZXMgdGhhdCB3ZXJlIGhpc3RvcmljYWxseSBpbmNsdWRlZCB3aXRoIFR3ZWVuTWF4IChvdGhlcndpc2UsIGZvbGtzIHdvdWxkIGhhdmUgdG8gcmVmZXJlbmNlIENTU1BsdWdpbiwgZm9yIGV4YW1wbGUsIHRvIGVuc3VyZSB0aGVpciBDU1MtcmVsYXRlZCBhbmltYXRpb25zIHdvcmtlZClcbmV4cG9ydCB2YXIgVHdlZW5NYXggPSBUd2Vlbk1heEJhc2U7XG5Ud2Vlbk1heC5fYXV0b0FjdGl2YXRlZCA9IFtUaW1lbGluZUxpdGUsIFRpbWVsaW5lTWF4LCBDU1NQbHVnaW4sIEF0dHJQbHVnaW4sIEJlemllclBsdWdpbiwgUm91bmRQcm9wc1BsdWdpbiwgRGlyZWN0aW9uYWxSb3RhdGlvblBsdWdpbiwgQmFjaywgRWxhc3RpYywgQm91bmNlLCBSb3VnaEVhc2UsIFNsb3dNbywgU3RlcHBlZEVhc2UsIENpcmMsIEV4cG8sIFNpbmUsIEV4cG9TY2FsZUVhc2VdO1xuXG5leHBvcnQgeyBUd2Vlbk1heCBhcyBkZWZhdWx0IH07XG5leHBvcnQgeyBUd2VlbkxpdGUsIFRpbWVsaW5lTGl0ZSwgVGltZWxpbmVNYXgsIENTU1BsdWdpbiwgQXR0clBsdWdpbiwgQmV6aWVyUGx1Z2luLCBEaXJlY3Rpb25hbFJvdGF0aW9uUGx1Z2luLCBSb3VuZFByb3BzUGx1Z2luLCBUd2VlblBsdWdpbiwgRWFzZSwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgQmFjaywgRWxhc3RpYywgQm91bmNlLCBSb3VnaEVhc2UsIFNsb3dNbywgU3RlcHBlZEVhc2UsIENpcmMsIEV4cG8sIFNpbmUsIEV4cG9TY2FsZUVhc2UgfTtcbiIsImV4cG9ydCBjb25zdCBBbmlDb25maWcgPSB7XG4gICAgaW5pdGlhbERlbGF5OiAwLjEsXG4gICAgLy8gQW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXMgdGltZSAqIGl0cyBvcmRlclxuICAgIGRlbGF5U3BlZWQ6IDAuMixcbiAgICBtb3ZlRGlzdGFuY2U6IDQwLFxuICAgIHpvb21TY2FsZTogMS42LFxuICAgIGluVmlld1RyaWdnZXJQZXJjZW50OiAwLjIsXG4gICAgc3BlZWQ6IDEsXG4gICAgZWFzZTogJ1Bvd2VyMi5lYXNlT3V0JyxcbiAgICB0ZXh0TGluZURlbGF5U3BlZWQ6IDAuMSxcbiAgICB0ZXh0TGluZVlPZmZzZXQ6IDAsXG59XG4iLCJleHBvcnQgY29uc3QgSGVscGVycyA9IHtcbiAgICBnZXRBdHRyaWJ1dGU6IGZ1bmN0aW9uKGVsLCBhdHQpIHtcbiAgICAgICAgaWYgKGVsLmhhc0F0dHJpYnV0ZShhdHQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKGF0dClcbiAgICAgICAgfSBlbHNlIGlmIChlbC5oYXNBdHRyaWJ1dGUoYGRhdGEtJHthdHR9YCkpIHtcbiAgICAgICAgICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoYGRhdGEtJHthdHR9YClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9LFxuICAgIGhhc0F0dHJpYnV0ZTogZnVuY3Rpb24oZWwsIGF0dCkge1xuICAgICAgICBpZiAoZWwuaGFzQXR0cmlidXRlKGF0dCkgfHwgZWwuaGFzQXR0cmlidXRlKGBkYXRhLSR7YXR0fWApKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH0sXG4gICAgaXNJblZpZXdwb3J0OiBmdW5jdGlvbihlbGVtLCBwYWRkaW5nID0gMCkge1xuICAgICAgICAvLyBJZiBhdCB0aGUgYm90dG9tIG9mIHRoZSBwYWdlOlxuICAgICAgICBpZiAod2luZG93LmlubmVySGVpZ2h0ICsgd2luZG93LnNjcm9sbFkgPj0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBwYWRkaW5nIGluIGNhc2UgYW4gZWwgaXMgbmVhciB0aGUgYm90dG9tXG4gICAgICAgICAgICBwYWRkaW5nID0gMFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJvdW5kaW5nID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICByZXR1cm4gYm91bmRpbmcudG9wIC0gcGFkZGluZyA8ICh3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodClcbiAgICB9LFxuICAgIHdyYXBMaW5lczogZnVuY3Rpb24oJGNvbnRhaW5lcikge1xuICAgICAgICAvLyBnZXQgdGhlIHRleHQgZnJvbSB0aGUgY29uYXRpbmVyXG4gICAgICAgIHZhciB0ZXh0ID0gJGNvbnRhaW5lci5pbm5lclRleHRcblxuICAgICAgICAvLyBzcGxpdCB0aGUgdGV4dCBpbnRvIHdvcmRzXG4gICAgICAgIHZhciB3b3JkcyA9IHRleHQuc3BsaXQoJyAnKVxuXG4gICAgICAgIHZhciBwYXJzZWRXb3JkcyA9IFtdXG4gICAgICAgIHdvcmRzLmZvckVhY2goKHdvcmQpID0+IHtcbiAgICAgICAgICAgIGlmICh3b3JkLmluZGV4T2YoJy0nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB2YXIgaHlwaGVuYXRlZFdvcmRzID0gd29yZC5zcGxpdCgnLScpXG4gICAgICAgICAgICAgICAgaHlwaGVuYXRlZFdvcmRzLmZvckVhY2goKGh3LCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB3b3JkVXBkYXRlZCA9IGh3XG4gICAgICAgICAgICAgICAgICAgIGlmIChpICE9PSBoeXBoZW5hdGVkV29yZHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd29yZFVwZGF0ZWQgKz0gJy0nXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkV29yZHMucHVzaCh3b3JkVXBkYXRlZClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJzZWRXb3Jkcy5wdXNoKHdvcmQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gd3JhcCBlYWNoIHdvcmQgaW4gYSBzcGFuIGFuZCBhZGQgaXQgdG8gYSB0bXBcbiAgICAgICAgdmFyIHRtcCA9ICcnXG4gICAgICAgIHBhcnNlZFdvcmRzLmZvckVhY2goKHdvcmQpID0+IHtcbiAgICAgICAgICAgIGxldCBzcGFjaW5nID0gd29yZC5pbmRleE9mKCctJykgIT09IC0xID8gJycgOiAnICdcbiAgICAgICAgICAgIHRtcCArPSBgPHNwYW4+JHt3b3JkfSR7c3BhY2luZ308L3NwYW4+YFxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIHJlbW92ZSB0aGUgdGV4dCBmcm9tIHRoZSBjb250YWluZXIsIGFuZCByZXBsYWNlIGl0IHdpdGggdGhlIHdyYXBwZWQgd29yZHNcbiAgICAgICAgJGNvbnRhaW5lci5pbm5lckhUTUwgPSB0bXBcblxuICAgICAgICAvLyBwcmVwYXJlIHRoZSBvZmZzZXQgdmFyaWFibGUgYW5kIHRtcFxuICAgICAgICB2YXIgdG1wID0gJydcbiAgICAgICAgdmFyIHRvcCA9IG51bGxcbiAgICAgICAgJGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuJykuZm9yRWFjaCgod29yZCkgPT4ge1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyB0aGUgZmlyc3QgaXRlcmF0aW9uXG4gICAgICAgICAgICBpZiAodG9wID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gc2V0IHRoZSB0b3BcbiAgICAgICAgICAgICAgICB0b3AgPSB3b3JkLm9mZnNldFRvcFxuICAgICAgICAgICAgICAgIC8vIG9wZW4gdGhlIGZpcnN0IGxpbmVcbiAgICAgICAgICAgICAgICB0bXAgPSAnPHNwYW4gY2xhc3M9XCJhbmktbGluZVwiPjxzcGFuIGNsYXNzPVwiYW5pLWxpbmUtZ3JvdXBcIj4nXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYSBuZXcgbGluZSAodG9wIGlzIGJpZ2dlciB0aGVuIHRoZSBwcmV2aW91cyB3b3JkKVxuICAgICAgICAgICAgaWYgKHRvcCA8IHdvcmQub2Zmc2V0VG9wKSB7XG4gICAgICAgICAgICAgICAgLy8gY2xvc2UgdGhlIHByZXZpb3VzIGxpbmUgYW5kIHN0YXJ0IGEgbmV3IG9uZVxuICAgICAgICAgICAgICAgIHRtcCArPSAnPC9zcGFuPjwvc3Bhbj48c3BhbiBjbGFzcz1cImFuaS1saW5lXCI+PHNwYW4gY2xhc3M9XCJhbmktbGluZS1ncm91cFwiPidcbiAgICAgICAgICAgICAgICAvLyBjaGFuZ2UgdGhlIHRvcFxuICAgICAgICAgICAgICAgIHRvcCA9IHdvcmQub2Zmc2V0VG9wXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgc3BhY2luZyA9IHdvcmQuaW5uZXJUZXh0LmluZGV4T2YoJy0nKSAhPT0gLTEgPyAnJyA6ICcgJ1xuICAgICAgICAgICAgLy8gYWRkIHRoZSBjb250ZW50IG9mIHRoZSB3b3JkIG5vZGUgKyBhIHNwYWNlXG4gICAgICAgICAgICB0bXAgKz0gd29yZC5pbm5lclRleHQgKyBzcGFjaW5nXG4gICAgICAgIH0pXG4gICAgICAgIC8vIGNsb3NlIHRoZSBsYXN0IGxpbmVcbiAgICAgICAgdG1wICs9ICc8L3NwYW4+J1xuXG4gICAgICAgIC8vIHJlbW92ZSB0aGUgY29udGVudCBvZiB0aGUgY29uYXRpbmVyLCBhbmQgcmVwbGFjZSBpdCB3aXRoIHRoZSB3cmFwcGVkIGxpbmVzXG4gICAgICAgICRjb250YWluZXIuaW5uZXJIVE1MID0gdG1wXG4gICAgfSxcbn1cbiIsImltcG9ydCB7IFR3ZWVuTWF4IH0gZnJvbSAnZ3NhcC9Ud2Vlbk1heCdcbmltcG9ydCB7IEFuaUNvbmZpZyB9IGZyb20gJy4vQW5pQ29uZmlnJ1xuaW1wb3J0IHsgSGVscGVycyB9IGZyb20gJy4vSGVscGVycydcblxuY2xhc3MgQW5pRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoZWwsIGluZGV4LCBwcmVzZXQsIGNvbXBsZXRlSGFuZGxlcikge1xuICAgICAgICB0aGlzLmVsID0gZWxcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4XG4gICAgICAgIHRoaXMuY29tcGxldGVIYW5kbGVyID0gY29tcGxldGVIYW5kbGVyXG4gICAgICAgIHRoaXMuZGVsYXlTcGVlZCA9IEFuaUNvbmZpZy5kZWxheVNwZWVkXG4gICAgICAgIGlmIChIZWxwZXJzLmhhc0F0dHJpYnV0ZSh0aGlzLmVsLCAnYW5pLWRlbGF5LXNwZWVkJykpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsYXlTcGVlZCA9IHBhcnNlRmxvYXQoSGVscGVycy5nZXRBdHRyaWJ1dGUodGhpcy5lbCwgJ2FuaS1kZWxheS1zcGVlZCcpKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubW92ZW1lbnQgPSBBbmlDb25maWcubW92ZURpc3RhbmNlXG4gICAgICAgIGlmIChIZWxwZXJzLmhhc0F0dHJpYnV0ZSh0aGlzLmVsLCAnYW5pLW1vdmUtZGlzdGFuY2UnKSkge1xuICAgICAgICAgICAgdGhpcy5tb3ZlbWVudCA9IHBhcnNlRmxvYXQoSGVscGVycy5nZXRBdHRyaWJ1dGUodGhpcy5lbCwgJ2FuaS1tb3ZlLWRpc3RhbmNlJykpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy56b29tU2NhbGUgPSBBbmlDb25maWcuem9vbVNjYWxlXG4gICAgICAgIGlmIChIZWxwZXJzLmhhc0F0dHJpYnV0ZSh0aGlzLmVsLCAnYW5pLXpvb20tc2NhbGUnKSkge1xuICAgICAgICAgICAgdGhpcy56b29tU2NhbGUgPSBwYXJzZUZsb2F0KEhlbHBlcnMuZ2V0QXR0cmlidXRlKHRoaXMuZWwsICdhbmktem9vbS1zY2FsZScpKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3BlZWQgPSBBbmlDb25maWcuc3BlZWRcbiAgICAgICAgaWYgKEhlbHBlcnMuaGFzQXR0cmlidXRlKHRoaXMuZWwsICdhbmktc3BlZWQnKSkge1xuICAgICAgICAgICAgdGhpcy5zcGVlZCA9IHBhcnNlRmxvYXQoSGVscGVycy5nZXRBdHRyaWJ1dGUodGhpcy5lbCwgJ2FuaS1zcGVlZCcpKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWFzZSA9IHdpbmRvdy5FYXNlTG9va3VwLmZpbmQoQW5pQ29uZmlnLmVhc2UpXG4gICAgICAgIGlmIChIZWxwZXJzLmhhc0F0dHJpYnV0ZSh0aGlzLmVsLCAnYW5pLWVhc2UnKSkge1xuICAgICAgICAgICAgY29uc3QgZWFzZSA9IHdpbmRvdy5FYXNlTG9va3VwLmZpbmQoSGVscGVycy5nZXRBdHRyaWJ1dGUodGhpcy5lbCwgJ2FuaS1lYXNlJykpXG4gICAgICAgICAgICBpZiAoZWFzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWFzZSA9IGVhc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRleHRMaW5lRGVsYXlTcGVlZCA9IEFuaUNvbmZpZy50ZXh0TGluZURlbGF5U3BlZWRcbiAgICAgICAgaWYgKEhlbHBlcnMuaGFzQXR0cmlidXRlKHRoaXMuZWwsICdhbmktdGV4dC1saW5lLWRlbGF5LXNwZWVkJykpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dExpbmVEZWxheVNwZWVkID0gcGFyc2VGbG9hdChBbmlDb25maWcudGV4dExpbmVEZWxheVNwZWVkKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudGV4dExpbmVZT2Zmc2V0ID0gQW5pQ29uZmlnLnRleHRMaW5lWU9mZnNldFxuICAgICAgICBpZiAoSGVscGVycy5oYXNBdHRyaWJ1dGUodGhpcy5lbCwgJ2FuaS10ZXh0LWxpbmUteS1vZmZzZXQnKSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0TGluZVlPZmZzZXQgPSBwYXJzZUZsb2F0KEFuaUNvbmZpZy50ZXh0TGluZVlPZmZzZXQpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXNldCAmJiB0eXBlb2YgcHJlc2V0ID09PSAnc3RyaW5nJyAmJiBwcmVzZXQgIT09ICcnKSB7XG4gICAgICAgICAgICB0aGlzLnByZXNldCA9IHByZXNldFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcmVzZXQgPSAnZmFkZSdcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsLnN0eWxlLm9wYWNpdHkgPSAwXG4gICAgfVxuXG4gICAgYXBwZWFyKCkge1xuICAgICAgICAvLyBvbmx5IHNob3cgdGhlIGVsZW1lbnQgaWYgaXQncyBpbiB0aGUgdmlld3BvcnQsXG4gICAgICAgIC8vIG90aGVyd2lzZSB3ZSB3YWl0IGZvciB0aGUgdXNlciB0byBzY3JvbGwgdG8gaXRcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuYXBwZWFyVGltZW91dClcbiAgICAgICAgaWYgKCFIZWxwZXJzLmlzSW5WaWV3cG9ydCh0aGlzLmVsKSkge1xuICAgICAgICAgICAgdGhpcy5hcHBlYXJUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlYXIoKVxuICAgICAgICAgICAgfSwgMjUwKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbC5zdHlsZS5vcGFjaXR5ID0gbnVsbFxuICAgICAgICBjb25zdCBtb3Rpb25zID0gdGhpcy5wcmVzZXQuc3BsaXQoJy0nKVxuICAgICAgICBjb25zdCBtb3Rpb25OYW1lID0gbW90aW9ucy5zaGlmdCgpXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IG1vdGlvbnMuam9pbignLScpXG4gICAgICAgIGlmIChtb3Rpb25OYW1lID09PSAnd2lwZScpIHtcbiAgICAgICAgICAgIHRoaXMud2lwZShvcHRpb24pXG4gICAgICAgIH0gZWxzZSBpZiAobW90aW9uTmFtZSA9PT0gJ3pvb20nKSB7XG4gICAgICAgICAgICB0aGlzLnpvb20ob3B0aW9uKVxuICAgICAgICB9IGVsc2UgaWYgKG1vdGlvbk5hbWUgPT09ICdjbGFzcycgJiYgb3B0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmFkZENsYXNzKG9wdGlvbilcbiAgICAgICAgfSBlbHNlIGlmIChtb3Rpb25OYW1lID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dChvcHRpb24pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZhZGUob3B0aW9uKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmFkZShkaXJlY3Rpb24pIHtcbiAgICAgICAgbGV0IHN0YXJ0UHJvcHMgPSB7IHg6IDAsIHk6IDAsIG9wYWNpdHk6IDAgfVxuICAgICAgICBpZiAodHlwZW9mIGRpcmVjdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UHJvcHMueCA9IHRoaXMubW92ZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UHJvcHMueCA9IC10aGlzLm1vdmVtZW50XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnZG93bic6XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UHJvcHMueSA9IC10aGlzLm1vdmVtZW50XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAndXAnOlxuICAgICAgICAgICAgICAgICAgICBzdGFydFByb3BzLnkgPSB0aGlzLm1vdmVtZW50XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQcm9wcy55ID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFR3ZWVuTWF4LmZyb21Ubyh0aGlzLmVsLCB0aGlzLnNwZWVkLCBzdGFydFByb3BzLCB7XG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICBlYXNlOiB0aGlzLmVhc2UsXG4gICAgICAgICAgICBkZWxheTogKDEgKyB0aGlzLmluZGV4KSAqIHRoaXMuZGVsYXlTcGVlZCxcbiAgICAgICAgICAgIG9uQ29tcGxldGU6IHRoaXMuY29tcGxldGVIYW5kbGVyLFxuICAgICAgICAgICAgY2xlYXJQcm9wczogJ3gseSxvcGFjaXR5JyxcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICB3aXBlKGRpcmVjdGlvbiA9ICdsZWZ0Jykge1xuICAgICAgICBsZXQgc3RhcnRQcm9wcyA9IHRoaXMuY2xpcFBhdGgoMTAwKVxuICAgICAgICBsZXQgZW5kUHJvcHMgPSB0aGlzLmNsaXBQYXRoKDApXG4gICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlICd1cCc6XG4gICAgICAgICAgICAgICAgc3RhcnRQcm9wcyA9IHRoaXMuY2xpcFBhdGgoNTAwLCAwLCAwLCAwKVxuICAgICAgICAgICAgICAgIGVuZFByb3BzID0gdGhpcy5jbGlwUGF0aCgwLCAwLCAwLCAwKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlICdkb3duJzpcbiAgICAgICAgICAgICAgICBzdGFydFByb3BzID0gdGhpcy5jbGlwUGF0aCgwLCAwLCA1MDAsIDApXG4gICAgICAgICAgICAgICAgZW5kUHJvcHMgPSB0aGlzLmNsaXBQYXRoKDAsIDAsIDAsIDApXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgIHN0YXJ0UHJvcHMgPSB0aGlzLmNsaXBQYXRoKDAsIDAsIDAsIDUwMClcbiAgICAgICAgICAgICAgICBlbmRQcm9wcyA9IHRoaXMuY2xpcFBhdGgoMCwgMCwgMCwgMClcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBzdGFydFByb3BzID0gdGhpcy5jbGlwUGF0aCgwLCA1MDAsIDApXG4gICAgICAgICAgICAgICAgZW5kUHJvcHMgPSB0aGlzLmNsaXBQYXRoKDAsIDAsIDApXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBlbmRQcm9wcy5kZWxheSA9ICgxICsgdGhpcy5pbmRleCkgKiB0aGlzLmRlbGF5U3BlZWRcbiAgICAgICAgZW5kUHJvcHMuZWFzZSA9IHRoaXMuZWFzZVxuICAgICAgICBlbmRQcm9wcy5vbkNvbXBsZXRlID0gdGhpcy5jb21wbGV0ZUhhbmRsZXJcbiAgICAgICAgVHdlZW5NYXguZnJvbVRvKHRoaXMuZWwsIHRoaXMuc3BlZWQsIHN0YXJ0UHJvcHMsIGVuZFByb3BzKVxuICAgIH1cblxuICAgIHpvb20oZGlyZWN0aW9uID0gJ2luJykge1xuICAgICAgICBjb25zdCB3cmFwcGVyID0gdGhpcy5lbC5wYXJlbnRFbGVtZW50XG5cbiAgICAgICAgd3JhcHBlci5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nXG4gICAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKHRoaXMuZWwsIG51bGwpLmRpc3BsYXkgPT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgICB3cmFwcGVyLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlci5zdHlsZS5kaXNwbGF5ID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsLCBudWxsKS5kaXNwbGF5XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAnb3V0Jykge1xuICAgICAgICAgICAgVHdlZW5NYXguZnJvbVRvKFxuICAgICAgICAgICAgICAgIHRoaXMuZWwsXG4gICAgICAgICAgICAgICAgdGhpcy5zcGVlZCxcbiAgICAgICAgICAgICAgICB7IG9wYWNpdHk6IDAsIHNjYWxlOiAxIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICBzY2FsZTogdGhpcy56b29tU2NhbGUsXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5OiAoMSArIHRoaXMuaW5kZXgpICogdGhpcy5kZWxheVNwZWVkLFxuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiB0aGlzLmNvbXBsZXRlSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgZWFzZTogdGhpcy5lYXNlLFxuICAgICAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIGtlZXAgc2NhbGVcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJQcm9wczogJ29wYWNpdHknLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFR3ZWVuTWF4LmZyb21UbyhcbiAgICAgICAgICAgICAgICB0aGlzLmVsLFxuICAgICAgICAgICAgICAgIHRoaXMuc3BlZWQsXG4gICAgICAgICAgICAgICAgeyBvcGFjaXR5OiAwLCBzY2FsZTogdGhpcy56b29tU2NhbGUgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiAxLFxuICAgICAgICAgICAgICAgICAgICBkZWxheTogKDEgKyB0aGlzLmluZGV4KSAqIHRoaXMuZGVsYXlTcGVlZCxcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZTogdGhpcy5jb21wbGV0ZUhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIGVhc2U6IHRoaXMuZWFzZSxcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJQcm9wczogJ29wYWNpdHksIHNjYWxlJyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0ZXh0KG9wdGlvbikge1xuICAgICAgICBjb25zdCBvcmlnaW5hbENvbnRlbnQgPSB0aGlzLmVsLmlubmVySFRNTFxuICAgICAgICBIZWxwZXJzLndyYXBMaW5lcyh0aGlzLmVsKVxuICAgICAgICBjb25zdCBsaW5lcyA9IHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbCgnLmFuaS1saW5lJylcbiAgICAgICAgY29uc3Qgc3BlZWQgPSB0aGlzLnNwZWVkIC8gbGluZXMubGVuZ3RoICsgMVxuICAgICAgICBjb25zdCBzdGFydGluZ0RlbGF5ID0gKDEgKyB0aGlzLmluZGV4KSAqIHRoaXMuZGVsYXlTcGVlZFxuICAgICAgICBsaW5lcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IHN0YXJ0aW5nT3BhY2l0eSA9IDBcbiAgICAgICAgICAgIGNvbnN0ICRncm91cCA9IGl0ZW0ucXVlcnlTZWxlY3RvcignLmFuaS1saW5lLWdyb3VwJylcbiAgICAgICAgICAgIGl0ZW0uc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICAgICAgICAgIGlmIChvcHRpb24gPT09ICdsaW5lLW1hc2snKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgc3RhcnRpbmdPcGFjaXR5ID0gMVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJGdyb3VwLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJ1xuICAgICAgICAgICAgY29uc3QgY29tcGxldGUgPSAoaSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpID09PSBsaW5lcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gb3JpZ2luYWxDb250ZW50XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGVIYW5kbGVyKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBUd2Vlbk1heC5mcm9tVG8oXG4gICAgICAgICAgICAgICAgJGdyb3VwLFxuICAgICAgICAgICAgICAgIHNwZWVkLFxuICAgICAgICAgICAgICAgIHsgeTogJGdyb3VwLm9mZnNldEhlaWdodCArIHRoaXMudGV4dExpbmVZT2Zmc2V0LCBvcGFjaXR5OiBzdGFydGluZ09wYWNpdHkgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgICAgIGVhc2U6IHRoaXMuZWFzZSxcbiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IHN0YXJ0aW5nRGVsYXkgKyBpbmRleCAqIHRoaXMuZGVsYXlTcGVlZCxcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZTogY29tcGxldGUsXG4gICAgICAgICAgICAgICAgICAgIG9uQ29tcGxldGVQYXJhbXM6IFtpbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyUHJvcHM6ICdhbGwnLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjbGlwUGF0aCh0b3AgPSAwLCByaWdodCA9IDAsIGJvdHRvbSA9IDAsIGxlZnQgPSAwKSB7XG4gICAgICAgIGNvbnN0IHBhdGhzID0ge1xuICAgICAgICAgICAgY2xpcFBhdGg6IGBpbnNldCgke3RvcH0lICR7cmlnaHR9JSAke2JvdHRvbX0lICR7bGVmdH0lKWAsXG4gICAgICAgICAgICAvLyBUT0RPOiBtYWtlIHVwL2Rvd24gd29yayBpbiBzYWZhcmlcbiAgICAgICAgICAgIHdlYmtpdENsaXBQYXRoOiBgaW5zZXQoJHt0b3B9JSAke3JpZ2h0fSUgJHtib3R0b219JSAke2xlZnR9JSlgLFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXRoc1xuICAgIH1cblxuICAgIGFkZENsYXNzKG5hbWUpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQobmFtZSlcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVIYW5kbGVyKClcbiAgICAgICAgfSwgKDEgKyB0aGlzLmluZGV4KSAqIHRoaXMuZGVsYXlTcGVlZClcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBBbmlFbGVtZW50XG4iLCJpbXBvcnQgQW5pRWxlbWVudCBmcm9tICcuL0FuaUVsZW1lbnQnXG5pbXBvcnQgeyBIZWxwZXJzIH0gZnJvbSAnLi9IZWxwZXJzJ1xuXG5leHBvcnQgY29uc3QgQW5pR3JvdXBBY3Rpb25zID0ge1xuICAgICdkZWZhdWx0LWFwcGVhcic6IChlbCkgPT4ge1xuICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMVxuICAgIH0sXG59XG5cbkFuaUdyb3VwQWN0aW9uc1snYmFzaWMtYXBwZWFyJ10gPSAoZWwsIGNoaWxkcmVuKSA9PiB7XG4gICAgZWwuc3R5bGUub3BhY2l0eSA9IDFcbiAgICBlbC5zdHlsZS50cmFuc2l0aW9uID0gJ25vbmUnXG4gICAgZWwuY2xhc3NMaXN0LmFkZCgnYW5pLWhhcy1hcHBlYXJlZCcpXG4gICAgZWwuY2xhc3NMaXN0LmFkZCgnYW5pLXN0YXJ0JylcbiAgICBsZXQgY291bnQgPSAwXG4gICAgbGV0IGNvbXBsZXRlQ291bnQgPSAwXG4gICAgY29uc3Qgb25Db21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgY29tcGxldGVDb3VudCsrXG4gICAgICAgIGlmIChjb21wbGV0ZUNvdW50ID09PSBjb3VudCkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnYW5pLXN0YXJ0JylcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2FuaS1jb21wbGV0ZScpXG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hpbGRyZW4uZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgbGV0IHByZXNldCA9ICcnXG4gICAgICAgIGNvdW50KytcbiAgICAgICAgaWYgKEhlbHBlcnMuaGFzQXR0cmlidXRlKGl0ZW0sICdhbmktcHJlc2V0JykpIHtcbiAgICAgICAgICAgIHByZXNldCA9IEhlbHBlcnMuZ2V0QXR0cmlidXRlKGl0ZW0sICdhbmktcHJlc2V0JylcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmkgPSBuZXcgQW5pRWxlbWVudChpdGVtLCBpbmRleCwgcHJlc2V0LCBvbkNvbXBsZXRlKVxuICAgICAgICBhbmkuYXBwZWFyKClcbiAgICB9KVxufVxuIiwiaW1wb3J0IHsgQW5pR3JvdXBBY3Rpb25zIH0gZnJvbSAnLi9BbmlHcm91cEFjdGlvbnMnXG5pbXBvcnQgeyBIZWxwZXJzIH0gZnJvbSAnLi9IZWxwZXJzJ1xuaW1wb3J0IHsgQW5pQ29uZmlnIH0gZnJvbSAnLi9BbmlDb25maWcnXG5cbmNsYXNzIEFuaW1hdGlvbkdyb3VwIHtcbiAgICBjb25zdHJ1Y3RvcihlbCkge1xuICAgICAgICB0aGlzLmVsID0gZWxcbiAgICAgICAgLy8gUmV2ZWFsIHdoZW4gYXQgdGhpcyBwZXJjZW50IG9mIHRoZSBzY3JlZW46XG4gICAgICAgIGlmIChIZWxwZXJzLmhhc0F0dHJpYnV0ZSh0aGlzLmVsLCAnYW5pLWluLXZpZXctdHJpZ2dlci1wZXJjZW50JykpIHtcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0UGVyY2VudGFnZSA9IHBhcnNlRmxvYXQoSGVscGVycy5nZXRBdHRyaWJ1dGUodGhpcy5lbCwgJ2FuaS1pbi12aWV3LXRyaWdnZXItcGVyY2VudCcpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vZmZzZXRQZXJjZW50YWdlID0gQW5pQ29uZmlnLmluVmlld1RyaWdnZXJQZXJjZW50XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW1hZ2VzID0gZWwucXVlcnlTZWxlY3RvckFsbCgnaW1nW2xvYWQtc3JjXSwgaW1nW2RhdGEtbG9hZC1zcmNdJylcbiAgICAgICAgdGhpcy5pbWFnZXMgPSBbLi4uaW1hZ2VzXS5maWx0ZXIoKGNoaWxkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGQuY2xvc2VzdCgnW2FuaV0sIFtkYXRhLWFuaV0nKSA9PT0gdGhpcy5lbFxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmltYWdlTG9hZGVkQ291bnQgPSAwXG4gICAgICAgIHRoaXMuaGFzQXBwZWFyZWQgPSBmYWxzZVxuXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbYW5pLWNoaWxkXSwgW2RhdGEtYW5pLWNoaWxkXScpXG5cbiAgICAgICAgY29uc3QgZmlsdGVyZWRDaGlsZHJlbiA9IFsuLi5jaGlsZHJlbl0uZmlsdGVyKChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkLmNsb3Nlc3QoJ1thbmldLCBbZGF0YS1hbmldJykgPT09IHRoaXMuZWxcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmNoaWxkcmVuID0gZmlsdGVyZWRDaGlsZHJlblxuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoSGVscGVycy5oYXNBdHRyaWJ1dGUoaXRlbSwgJ2FuaS1jaGlsZC1vcmRlcicpKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5vcmRlciA9IHBhcnNlSW50KEhlbHBlcnMuZ2V0QXR0cmlidXRlKGl0ZW0sICdhbmktY2hpbGQtb3JkZXInKSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbS5vcmRlciA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoICsgaW5kZXhcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5zb3J0KChhLCBiKSA9PiAoYS5vcmRlciA+IGIub3JkZXIgPyAxIDogLTEpKVxuICAgICAgICB0aGlzLm9uQXBwZWFyID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKCdhcHBlYXInKVxuICAgICAgICB9XG4gICAgICAgIGlmIChIZWxwZXJzLmhhc0F0dHJpYnV0ZShlbCwgJ2FuaScpKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIEFuaUdyb3VwQWN0aW9uc1tIZWxwZXJzLmdldEF0dHJpYnV0ZShlbCwgJ2FuaScpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMub25BcHBlYXIgPSBBbmlHcm91cEFjdGlvbnNbSGVscGVycy5nZXRBdHRyaWJ1dGUoZWwsICdhbmknKV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrKCkge1xuICAgICAgICBpZiAoSGVscGVycy5pc0luVmlld3BvcnQodGhpcy5lbCwgd2luZG93LmlubmVySGVpZ2h0KSkge1xuICAgICAgICAgICAgdGhpcy5sb2FkQXNzZXRzKClcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhdGhpcy5oYXNBcHBlYXJlZCAmJlxuICAgICAgICAgICAgdGhpcy5pbWFnZUxvYWRlZENvdW50ID09PSB0aGlzLmltYWdlcy5sZW5ndGggJiZcbiAgICAgICAgICAgIEhlbHBlcnMuaXNJblZpZXdwb3J0KHRoaXMuZWwsIHdpbmRvdy5pbm5lckhlaWdodCAqIC10aGlzLm9mZnNldFBlcmNlbnRhZ2UpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5hcHBlYXIoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXBwZWFyKCkge1xuICAgICAgICB0aGlzLmhhc0FwcGVhcmVkID0gdHJ1ZVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25BcHBlYXIodGhpcy5lbCwgdGhpcy5jaGlsZHJlbilcbiAgICAgICAgfSwgQW5pQ29uZmlnLmluaXRpYWxEZWxheSAqIDEwMDApXG4gICAgfVxuXG4gICAgaW1hZ2VMb2FkSGFuZGxlcigpIHtcbiAgICAgICAgdGhpcy5pbWFnZUxvYWRlZENvdW50KytcbiAgICAgICAgLy8gV2FudCB0byBjaGVjayBhZ2FpbiBpbiBjYXNlIHVzZXIgaGFzbid0IHNjcm9sbGVkXG4gICAgICAgIC8vIHdoaWxlIHRoZSBpbWFnZSBmaW5pc2hlcyBsb2FkaW5nXG4gICAgICAgIHRoaXMuY2hlY2soKVxuICAgIH1cblxuICAgIGxvYWRBc3NldHMoKSB7XG4gICAgICAgIHRoaXMuaW1hZ2VzLmZvckVhY2goKGltZykgPT4ge1xuICAgICAgICAgICAgaWYgKEhlbHBlcnMuaGFzQXR0cmlidXRlKGltZywgJ2xvYWQtc3JjJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzcmMgPSBIZWxwZXJzLmdldEF0dHJpYnV0ZShpbWcsICdsb2FkLXNyYycpXG4gICAgICAgICAgICAgICAgaW1nLnJlbW92ZUF0dHJpYnV0ZSgnbG9hZC1zcmMnKVxuICAgICAgICAgICAgICAgIGltZy5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtbG9hZC1zcmMnKVxuICAgICAgICAgICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5pbWFnZUxvYWRIYW5kbGVyLmJpbmQodGhpcykpXG4gICAgICAgICAgICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5pbWFnZUxvYWRIYW5kbGVyLmJpbmQodGhpcykpXG4gICAgICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZSgnc3JjJywgc3JjKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEFuaW1hdGlvbkdyb3VwXG4iLCJpbXBvcnQgQW5pbWF0aW9uR3JvdXAgZnJvbSAnLi9BbmltYXRpb25Hcm91cCdcblxuY2xhc3MgQW5pIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ncm91cHMgPSBbXVxuICAgICAgICB0aGlzLnVwZGF0ZSgpXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrKClcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5jaGVjaygpXG4gICAgfVxuXG4gICAgY2hlY2soKSB7XG4gICAgICAgIHRoaXMuZ3JvdXBzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGl0ZW0uY2hlY2soKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5lbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbYW5pXTpub3QoW2RhdGEtYW5pLWFkZGVkXSksIFtkYXRhLWFuaV06bm90KFtkYXRhLWFuaS1hZGRlZF0pJylcbiAgICAgICAgdGhpcy5lbHMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtYW5pLWFkZGVkJywgdHJ1ZSlcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBzLnB1c2gobmV3IEFuaW1hdGlvbkdyb3VwKGl0ZW0pKVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmNoZWNrKClcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBBbmlcbiIsImltcG9ydCAnQGJhYmVsL3BvbHlmaWxsL25vQ29uZmxpY3QnXG5pbXBvcnQgcG9seWZpbGwgZnJvbSAnZWxlbWVudC1jbG9zZXN0J1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh3aW5kb3cuTm9kZUxpc3QgJiYgIU5vZGVMaXN0LnByb3RvdHlwZS5mb3JFYWNoKSB7XG4gICAgICAgIE5vZGVMaXN0LnByb3RvdHlwZS5mb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2hcbiAgICB9XG4gICAgcG9seWZpbGwod2luZG93KVxufVxuaW1wb3J0IEFuaSBmcm9tICcuL21vZHVsZXMvQW5pLmpzJ1xuaW1wb3J0IEFuaUVsZW1lbnQgZnJvbSAnLi9tb2R1bGVzL0FuaUVsZW1lbnQuanMnXG5pbXBvcnQgQW5pbWF0aW9uR3JvdXAgZnJvbSAnLi9tb2R1bGVzL0FuaW1hdGlvbkdyb3VwLmpzJ1xuaW1wb3J0IHsgSGVscGVycyB9IGZyb20gJy4vbW9kdWxlcy9IZWxwZXJzLmpzJ1xuaW1wb3J0IHsgQW5pR3JvdXBBY3Rpb25zIH0gZnJvbSAnLi9tb2R1bGVzL0FuaUdyb3VwQWN0aW9ucy5qcydcbmltcG9ydCB7IEFuaUNvbmZpZyB9IGZyb20gJy4vbW9kdWxlcy9BbmlDb25maWcuanMnXG5cbmV4cG9ydCB7IEFuaSwgQW5pQ29uZmlnLCBBbmlFbGVtZW50LCBBbmlHcm91cEFjdGlvbnMsIEFuaW1hdGlvbkdyb3VwLCBIZWxwZXJzIH1cbiJdLCJzb3VyY2VSb290IjoiIn0=