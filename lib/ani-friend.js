!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("ani-friend",[],t):"object"==typeof exports?exports["ani-friend"]=t():e["ani-friend"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function i(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,i),a.l=!0,a.exports}return i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)i.d(n,a,function(t){return e[t]}.bind(null,a));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=3)}([function(e,t){e.exports=require("gsap/TweenMax")},function(e,t){e.exports=require("element-closest")},function(e,t){e.exports=require("@babel/polyfill/noConflict")},function(e,t,i){"use strict";i.r(t);i(2);var n=i(1),a=i.n(n),r=i(0),o={initialDelay:.1,delaySpeed:.2,moveDistance:40,zoomScale:1.6,inViewTriggerPercent:.2,speed:1,ease:"Power2.easeOut",textLineDelaySpeed:.1,textLineYOffset:0},s={getAttribute:function(e,t){return e.hasAttribute(t)?e.getAttribute(t):!!e.hasAttribute("data-".concat(t))&&e.getAttribute("data-".concat(t))},hasAttribute:function(e,t){return!(!e.hasAttribute(t)&&!e.hasAttribute("data-".concat(t)))},wrapLines:function(e){var t=e.innerText.split(" "),i="";i+="<span>"+t.join(" </span><span>")+" </span> ",e.innerHTML=i;i="";var n=null;e.querySelectorAll("span").forEach(function(e){null===n&&(n=e.offsetTop,i='<span class="ani-line"><span class="ani-line-group">'),n<e.offsetTop&&(i+='</span></span><span class="ani-line"><span class="ani-line-group">',n=e.offsetTop),i+=e.innerText+" "}),i+="</span>",e.innerHTML=i}};function l(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var c=function(){function e(t,i,n,a){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t,this.index=i,this.completeHandler=a,this.delaySpeed=o.delaySpeed,s.hasAttribute(this.el,"ani-delay-speed")&&(this.delaySpeed=parseFloat(s.getAttribute(this.el,"ani-delay-speed"))),this.movement=o.moveDistance,s.hasAttribute(this.el,"ani-move-distance")&&(this.movement=parseFloat(s.getAttribute(this.el,"ani-move-distance"))),this.zoomScale=o.zoomScale,s.hasAttribute(this.el,"ani-zoom-scale")&&(this.zoomScale=parseFloat(s.getAttribute(this.el,"ani-zoom-scale"))),this.speed=o.speed,s.hasAttribute(this.el,"ani-speed")&&(this.speed=parseFloat(s.getAttribute(this.el,"ani-speed"))),this.ease=window.EaseLookup.find(o.ease),s.hasAttribute(this.el,"ani-ease")){var r=window.EaseLookup.find(s.getAttribute(this.el,"ani-ease"));r&&(this.ease=r)}this.textLineDelaySpeed=o.textLineDelaySpeed,s.hasAttribute(this.el,"ani-text-line-delay-speed")&&(this.textLineDelaySpeed=parseFloat(o.textLineDelaySpeed)),this.textLineYOffset=o.textLineYOffset,s.hasAttribute(this.el,"ani-text-line-y-offset")&&(this.textLineYOffset=parseFloat(o.textLineYOffset)),this.preset=n&&"string"==typeof n&&""!==n?n:"fade"}var t,i,n;return t=e,(i=[{key:"appear",value:function(){var e=this.preset.split("-"),t=e.shift(),i=e.join("-");"wipe"===t?this.wipe(i):"zoom"===t?this.zoom(i):"class"===t&&i?this.addClass(i):"text"===t?this.text(i):this.fade(i)}},{key:"fade",value:function(e){var t={x:0,y:0,opacity:0};if("string"==typeof e)switch(e){case"left":t.x=this.movement;break;case"right":t.x=-this.movement;break;case"down":t.y=-this.movement;break;case"up":t.y=this.movement;break;default:t.y=0}r.TweenMax.fromTo(this.el,this.speed,t,{opacity:1,y:0,x:0,ease:this.ease,delay:this.index*this.delaySpeed,onComplete:this.completeHandler,clearProps:"x,y,opacity"})}},{key:"wipe",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"left",t=this.clipPath(100),i=this.clipPath(0);switch(e){case"up":t=this.clipPath(500,0,0,0),i=this.clipPath(0,0,0,0);break;case"down":t=this.clipPath(0,0,500,0),i=this.clipPath(0,0,0,0);break;case"left":t=this.clipPath(0,0,0,500),i=this.clipPath(0,0,0,0);break;case"right":default:t=this.clipPath(0,500,0),i=this.clipPath(0,0,0)}i.delay=this.index*this.delaySpeed,i.ease=this.ease,i.onComplete=this.completeHandler,r.TweenMax.fromTo(this.el,this.speed,t,i)}},{key:"zoom",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"in",t=this.el.parentElement;t.style.overflow="hidden","inline"===getComputedStyle(this.el,null).display?t.style.display="inline-block":t.style.display=getComputedStyle(this.el,null).display,"out"===e?r.TweenMax.fromTo(this.el,this.speed,{opacity:0,scale:1},{opacity:1,scale:this.zoomScale,delay:this.index*this.delaySpeed,onComplete:this.completeHandler,ease:this.ease,clearProps:"opacity"}):r.TweenMax.fromTo(this.el,this.speed,{opacity:0,scale:this.zoomScale},{opacity:1,scale:1,delay:this.index*this.delaySpeed,onComplete:this.completeHandler,ease:this.ease,clearProps:"opacity, scale"})}},{key:"text",value:function(e){var t=this,i=this.el.innerHTML;s.wrapLines(this.el);var n=this.el.querySelectorAll(".ani-line"),a=this.speed/n.length+1,o=this.index*this.delaySpeed;n.forEach(function(s,l){var c=0,d=s.querySelector(".ani-line-group");s.style.display="block","line-mask"===e&&(s.style.overflow="hidden",c=1),d.style.display="inline-block";r.TweenMax.fromTo(d,a,{y:d.offsetHeight+t.textLineYOffset,opacity:c},{opacity:1,y:0,x:0,ease:t.ease,delay:o+l*t.textLineDelaySpeed,onComplete:function(e){e===n.length-1&&(t.el.innerHTML=i,t.completeHandler())},onCompleteParams:[l],clearProps:"all"})})}},{key:"clipPath",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;return{clipPath:"inset(".concat(e,"% ").concat(t,"% ").concat(i,"% ").concat(n,"%)"),webkitClipPath:"inset(".concat(e,"% ").concat(t,"% ").concat(i,"% ").concat(n,"%)")}}},{key:"addClass",value:function(e){var t=this;setTimeout(function(){t.el.classList.add(e),t.completeHandler()},this.index*this.delaySpeed)}}])&&l(t.prototype,i),n&&l(t,n),e}(),d={"default-appear":function(e){e.style.opacity=1}};function u(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function h(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}d["basic-appear"]=function(e,t){e.style.opacity=1,e.style.transition="none",e.classList.add("ani-has-appeared"),e.classList.add("ani-start");var i=0,n=0,a=function(){++n===i&&(e.classList.remove("ani-start"),e.classList.add("ani-complete"))};t.forEach(function(e,t){var n="";i++,s.hasAttribute(e,"ani-preset")&&(n=s.getAttribute(e,"ani-preset")),new c(e,t,n,a).appear()})};var p=function(){function e(t){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t,s.hasAttribute(this.el,"ani-in-view-trigger-percent")?this.offsetPercentage=parseFloat(s.getAttribute(this.el,"ani-in-view-trigger-percent")):this.offsetPercentage=o.inViewTriggerPercent,console.log({inViewTriggerPercent:o.inViewTriggerPercent,offsetPercentage:this.offsetPercentage});var n=t.querySelectorAll("img[load-src], img[data-load-src]");this.images=u(n).filter(function(e){return e.closest("[ani], [data-ani]")===i.el}),this.imageLoadedCount=0,this.hasAppeared=!1;var a=u(this.el.querySelectorAll("[ani-child], [data-ani-child]")).filter(function(e){return e.closest("[ani], [data-ani]")===i.el});this.children=a,this.children.forEach(function(e,t){s.hasAttribute(e,"ani-child-order")?e.order=parseInt(s.getAttribute(e,"ani-child-order")):e.order=i.children.length+t}),this.children.sort(function(e,t){return e.order>t.order?1:-1}),this.onAppear=function(){i.el.classList.add("appear")},s.hasAttribute(t,"ani")&&"function"==typeof d[s.getAttribute(t,"ani")]&&(this.onAppear=d[s.getAttribute(t,"ani")])}var t,i,n;return t=e,(i=[{key:"check",value:function(){this.isInViewport(this.el,window.innerHeight)&&this.loadAssets(),!this.hasAppeared&&this.imageLoadedCount===this.images.length&&this.isInViewport(this.el,window.innerHeight*-this.offsetPercentage)&&this.appear()}},{key:"appear",value:function(){var e=this;this.hasAppeared=!0,setTimeout(function(){e.onAppear(e.el,e.children)},1e3*o.initialDelay)}},{key:"isInViewport",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return window.innerHeight+window.scrollY>=document.body.offsetHeight&&(t=0),e.getBoundingClientRect().top-t<(window.innerHeight||document.documentElement.clientHeight)}},{key:"imageLoadHandler",value:function(){this.imageLoadedCount++,this.check()}},{key:"loadAssets",value:function(){var e=this;this.images.forEach(function(t){if(s.hasAttribute(t,"load-src")){var i=s.getAttribute(t,"load-src");t.removeAttribute("load-src"),t.removeAttribute("data-load-src"),t.addEventListener("load",e.imageLoadHandler.bind(e)),t.addEventListener("error",e.imageLoadHandler.bind(e)),t.setAttribute("src",i)}})}}])&&h(t.prototype,i),n&&h(t,n),e}();function f(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var y=function(){function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.groups=[],this.update(),window.addEventListener("scroll",function(){t.check()}),this.check()}var t,i,n;return t=e,(i=[{key:"check",value:function(){this.groups.forEach(function(e){e.check()})}},{key:"update",value:function(){var e=this;this.els=document.querySelectorAll("[ani]:not([data-ani-added]), [data-ani]:not([data-ani-added])"),this.els.forEach(function(t){t.setAttribute("data-ani-added",!0),e.groups.push(new p(t))}),this.check()}}])&&f(t.prototype,i),n&&f(t,n),e}();i.d(t,"Ani",function(){return y}),i.d(t,"AniConfig",function(){return o}),i.d(t,"AniElement",function(){return c}),i.d(t,"AniGroupActions",function(){return d}),i.d(t,"AnimationGroup",function(){return p}),i.d(t,"Helpers",function(){return s}),"undefined"!=typeof document&&"undefined"!=typeof window&&(window.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=Array.prototype.forEach),a()(window)),console.log("ani-friend v1.0.4037")}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,