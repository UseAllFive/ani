!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("ani-friend",[],t):"object"==typeof exports?exports["ani-friend"]=t():e["ani-friend"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function i(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,i),a.l=!0,a.exports}return i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)i.d(n,a,function(t){return e[t]}.bind(null,a));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=3)}([function(e,t){e.exports=require("gsap/TweenMax")},function(e,t){e.exports=require("element-closest")},function(e,t){e.exports=require("@babel/polyfill/noConflict")},function(e,t,i){"use strict";i.r(t);i(2);var n=i(1),a=i.n(n),r=i(0),o={initialDelay:.1,delaySpeed:.2,moveDistance:40,zoomScale:1.6,inViewTriggerPercent:.2,speed:1,ease:"Power2.easeOut",textLineDelaySpeed:.1,textLineYOffset:0},s={getAttribute:function(e,t){return e.hasAttribute(t)?e.getAttribute(t):!!e.hasAttribute("data-".concat(t))&&e.getAttribute("data-".concat(t))},hasAttribute:function(e,t){return!(!e.hasAttribute(t)&&!e.hasAttribute("data-".concat(t)))},wrapLines:function(e){var t=e.innerText.split(" "),i=[];t.forEach(function(e){if(-1!==e.indexOf("-")){var t=e.split("-");t.forEach(function(e,n){var a=e;n!==t.length-1&&(a+="-"),i.push(a)})}else i.push(e)});var n="";i.forEach(function(e){var t=-1!==e.indexOf("-")?"":" ";n+="<span>".concat(e).concat(t,"</span>")}),e.innerHTML=n;n="";var a=null;e.querySelectorAll("span").forEach(function(e){null===a&&(a=e.offsetTop,n='<span class="ani-line"><span class="ani-line-group">'),a<e.offsetTop&&(n+='</span></span><span class="ani-line"><span class="ani-line-group">',a=e.offsetTop);var t=-1!==e.innerText.indexOf("-")?"":" ";n+=e.innerText+t}),n+="</span>",e.innerHTML=n}};function l(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var c=function(){function e(t,i,n,a){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t,this.index=i,this.completeHandler=a,this.delaySpeed=o.delaySpeed,s.hasAttribute(this.el,"ani-delay-speed")&&(this.delaySpeed=parseFloat(s.getAttribute(this.el,"ani-delay-speed"))),this.movement=o.moveDistance,s.hasAttribute(this.el,"ani-move-distance")&&(this.movement=parseFloat(s.getAttribute(this.el,"ani-move-distance"))),this.zoomScale=o.zoomScale,s.hasAttribute(this.el,"ani-zoom-scale")&&(this.zoomScale=parseFloat(s.getAttribute(this.el,"ani-zoom-scale"))),this.speed=o.speed,s.hasAttribute(this.el,"ani-speed")&&(this.speed=parseFloat(s.getAttribute(this.el,"ani-speed"))),this.ease=window.EaseLookup.find(o.ease),s.hasAttribute(this.el,"ani-ease")){var r=window.EaseLookup.find(s.getAttribute(this.el,"ani-ease"));r&&(this.ease=r)}this.textLineDelaySpeed=o.textLineDelaySpeed,s.hasAttribute(this.el,"ani-text-line-delay-speed")&&(this.textLineDelaySpeed=parseFloat(o.textLineDelaySpeed)),this.textLineYOffset=o.textLineYOffset,s.hasAttribute(this.el,"ani-text-line-y-offset")&&(this.textLineYOffset=parseFloat(o.textLineYOffset)),this.preset=n&&"string"==typeof n&&""!==n?n:"fade"}var t,i,n;return t=e,(i=[{key:"appear",value:function(){var e=this.preset.split("-"),t=e.shift(),i=e.join("-");"wipe"===t?this.wipe(i):"zoom"===t?this.zoom(i):"class"===t&&i?this.addClass(i):"text"===t?this.text(i):this.fade(i)}},{key:"fade",value:function(e){var t={x:0,y:0,opacity:0};if("string"==typeof e)switch(e){case"left":t.x=this.movement;break;case"right":t.x=-this.movement;break;case"down":t.y=-this.movement;break;case"up":t.y=this.movement;break;default:t.y=0}r.TweenMax.fromTo(this.el,this.speed,t,{opacity:1,y:0,x:0,ease:this.ease,delay:(1+this.index)*this.delaySpeed,onComplete:this.completeHandler,clearProps:"x,y,opacity"})}},{key:"wipe",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"left",t=this.clipPath(100),i=this.clipPath(0);switch(e){case"up":t=this.clipPath(500,0,0,0),i=this.clipPath(0,0,0,0);break;case"down":t=this.clipPath(0,0,500,0),i=this.clipPath(0,0,0,0);break;case"left":t=this.clipPath(0,0,0,500),i=this.clipPath(0,0,0,0);break;case"right":default:t=this.clipPath(0,500,0),i=this.clipPath(0,0,0)}i.delay=(1+this.index)*this.delaySpeed,i.ease=this.ease,i.onComplete=this.completeHandler,r.TweenMax.fromTo(this.el,this.speed,t,i)}},{key:"zoom",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"in",t=this.el.parentElement;t.style.overflow="hidden","inline"===getComputedStyle(this.el,null).display?t.style.display="inline-block":t.style.display=getComputedStyle(this.el,null).display,"out"===e?r.TweenMax.fromTo(this.el,this.speed,{opacity:0,scale:1},{opacity:1,scale:this.zoomScale,delay:(1+this.index)*this.delaySpeed,onComplete:this.completeHandler,ease:this.ease,clearProps:"opacity"}):r.TweenMax.fromTo(this.el,this.speed,{opacity:0,scale:this.zoomScale},{opacity:1,scale:1,delay:(1+this.index)*this.delaySpeed,onComplete:this.completeHandler,ease:this.ease,clearProps:"opacity, scale"})}},{key:"text",value:function(e){var t=this,i=this.el.innerHTML;s.wrapLines(this.el);var n=this.el.querySelectorAll(".ani-line"),a=this.speed/n.length+1,o=(1+this.index)*this.delaySpeed;n.forEach(function(s,l){var c=0,d=s.querySelector(".ani-line-group");s.style.display="block","line-mask"===e&&(s.style.overflow="hidden",c=1),d.style.display="inline-block";r.TweenMax.fromTo(d,a,{y:d.offsetHeight+t.textLineYOffset,opacity:c},{opacity:1,y:0,x:0,ease:t.ease,delay:o+l*t.delaySpeed,onComplete:function(e){e===n.length-1&&(t.el.innerHTML=i,t.completeHandler())},onCompleteParams:[l],clearProps:"all"})})}},{key:"clipPath",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;return{clipPath:"inset(".concat(e,"% ").concat(t,"% ").concat(i,"% ").concat(n,"%)"),webkitClipPath:"inset(".concat(e,"% ").concat(t,"% ").concat(i,"% ").concat(n,"%)")}}},{key:"addClass",value:function(e){var t=this;setTimeout(function(){t.el.classList.add(e),t.completeHandler()},(1+this.index)*this.delaySpeed)}}])&&l(t.prototype,i),n&&l(t,n),e}(),d={"default-appear":function(e){e.style.opacity=1}};function u(e){return function(e){if(Array.isArray(e)){for(var t=0,i=new Array(e.length);t<e.length;t++)i[t]=e[t];return i}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function h(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}d["basic-appear"]=function(e,t){e.style.opacity=1,e.style.transition="none",e.classList.add("ani-has-appeared"),e.classList.add("ani-start");var i=0,n=0,a=function(){++n===i&&(e.classList.remove("ani-start"),e.classList.add("ani-complete"))};t.forEach(function(e,t){var n="";i++,s.hasAttribute(e,"ani-preset")&&(n=s.getAttribute(e,"ani-preset")),new c(e,t,n,a).appear()})};var p=function(){function e(t){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t,s.hasAttribute(this.el,"ani-in-view-trigger-percent")?this.offsetPercentage=parseFloat(s.getAttribute(this.el,"ani-in-view-trigger-percent")):this.offsetPercentage=o.inViewTriggerPercent;var n=t.querySelectorAll("img[load-src], img[data-load-src]");this.images=u(n).filter(function(e){return e.closest("[ani], [data-ani]")===i.el}),this.imageLoadedCount=0,this.hasAppeared=!1;var a=u(this.el.querySelectorAll("[ani-child], [data-ani-child]")).filter(function(e){return e.closest("[ani], [data-ani]")===i.el});this.children=a,this.children.forEach(function(e,t){s.hasAttribute(e,"ani-child-order")?e.order=parseInt(s.getAttribute(e,"ani-child-order")):e.order=i.children.length+t}),this.children.sort(function(e,t){return e.order>t.order?1:-1}),this.onAppear=function(){i.el.classList.add("appear")},s.hasAttribute(t,"ani")&&"function"==typeof d[s.getAttribute(t,"ani")]&&(this.onAppear=d[s.getAttribute(t,"ani")])}var t,i,n;return t=e,(i=[{key:"check",value:function(){this.isInViewport(this.el,window.innerHeight)&&this.loadAssets(),!this.hasAppeared&&this.imageLoadedCount===this.images.length&&this.isInViewport(this.el,window.innerHeight*-this.offsetPercentage)&&this.appear()}},{key:"appear",value:function(){var e=this;this.hasAppeared=!0,setTimeout(function(){e.onAppear(e.el,e.children)},1e3*o.initialDelay)}},{key:"isInViewport",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return window.innerHeight+window.scrollY>=document.body.offsetHeight&&(t=0),e.getBoundingClientRect().top-t<(window.innerHeight||document.documentElement.clientHeight)}},{key:"imageLoadHandler",value:function(){this.imageLoadedCount++,this.check()}},{key:"loadAssets",value:function(){var e=this;this.images.forEach(function(t){if(s.hasAttribute(t,"load-src")){var i=s.getAttribute(t,"load-src");t.removeAttribute("load-src"),t.removeAttribute("data-load-src"),t.addEventListener("load",e.imageLoadHandler.bind(e)),t.addEventListener("error",e.imageLoadHandler.bind(e)),t.setAttribute("src",i)}})}}])&&h(t.prototype,i),n&&h(t,n),e}();function f(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var y=function(){function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.groups=[],this.update(),window.addEventListener("scroll",function(){t.check()}),this.check()}var t,i,n;return t=e,(i=[{key:"check",value:function(){this.groups.forEach(function(e){e.check()})}},{key:"update",value:function(){var e=this;this.els=document.querySelectorAll("[ani]:not([data-ani-added]), [data-ani]:not([data-ani-added])"),this.els.forEach(function(t){t.setAttribute("data-ani-added",!0),e.groups.push(new p(t))}),this.check()}}])&&f(t.prototype,i),n&&f(t,n),e}();i.d(t,"Ani",function(){return y}),i.d(t,"AniConfig",function(){return o}),i.d(t,"AniElement",function(){return c}),i.d(t,"AniGroupActions",function(){return d}),i.d(t,"AnimationGroup",function(){return p}),i.d(t,"Helpers",function(){return s}),"undefined"!=typeof document&&"undefined"!=typeof window&&(window.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=Array.prototype.forEach),a()(window))}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmktZnJpZW5kL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9hbmktZnJpZW5kL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2FuaS1mcmllbmQvZXh0ZXJuYWwgXCJnc2FwL1R3ZWVuTWF4XCIiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC9leHRlcm5hbCBcImVsZW1lbnQtY2xvc2VzdFwiIiwid2VicGFjazovL2FuaS1mcmllbmQvZXh0ZXJuYWwgXCJAYmFiZWwvcG9seWZpbGwvbm9Db25mbGljdFwiIiwid2VicGFjazovL2FuaS1mcmllbmQvLi9zcmMvbW9kdWxlcy9BbmlDb25maWcuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL3NyYy9tb2R1bGVzL0hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL3NyYy9tb2R1bGVzL0FuaUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL3NyYy9tb2R1bGVzL0FuaUdyb3VwQWN0aW9ucy5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vc3JjL21vZHVsZXMvQW5pbWF0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vYW5pLWZyaWVuZC8uL3NyYy9tb2R1bGVzL0FuaS5qcyIsIndlYnBhY2s6Ly9hbmktZnJpZW5kLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJ0aGlzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInJlcXVpcmUiLCJBbmlDb25maWciLCJpbml0aWFsRGVsYXkiLCJkZWxheVNwZWVkIiwibW92ZURpc3RhbmNlIiwiem9vbVNjYWxlIiwiaW5WaWV3VHJpZ2dlclBlcmNlbnQiLCJzcGVlZCIsImVhc2UiLCJ0ZXh0TGluZURlbGF5U3BlZWQiLCJ0ZXh0TGluZVlPZmZzZXQiLCJIZWxwZXJzIiwiZ2V0QXR0cmlidXRlIiwiZWwiLCJhdHQiLCJoYXNBdHRyaWJ1dGUiLCJjb25jYXQiLCJ3cmFwTGluZXMiLCIkY29udGFpbmVyIiwid29yZHMiLCJpbm5lclRleHQiLCJzcGxpdCIsInBhcnNlZFdvcmRzIiwiZm9yRWFjaCIsIndvcmQiLCJpbmRleE9mIiwiaHlwaGVuYXRlZFdvcmRzIiwiaHciLCJ3b3JkVXBkYXRlZCIsImxlbmd0aCIsInB1c2giLCJ0bXAiLCJzcGFjaW5nIiwiaW5uZXJIVE1MIiwidG9wIiwicXVlcnlTZWxlY3RvckFsbCIsIm9mZnNldFRvcCIsIkFuaUVsZW1lbnQiLCJpbmRleCIsInByZXNldCIsImNvbXBsZXRlSGFuZGxlciIsIl9jbGFzc0NhbGxDaGVjayIsInBhcnNlRmxvYXQiLCJtb3ZlbWVudCIsIndpbmRvdyIsIkVhc2VMb29rdXAiLCJmaW5kIiwibW90aW9ucyIsIm1vdGlvbk5hbWUiLCJzaGlmdCIsIm9wdGlvbiIsImpvaW4iLCJ3aXBlIiwiem9vbSIsImFkZENsYXNzIiwidGV4dCIsImZhZGUiLCJkaXJlY3Rpb24iLCJzdGFydFByb3BzIiwieCIsInkiLCJvcGFjaXR5IiwiVHdlZW5NYXgiLCJmcm9tVG8iLCJkZWxheSIsIm9uQ29tcGxldGUiLCJjbGVhclByb3BzIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwiY2xpcFBhdGgiLCJlbmRQcm9wcyIsIndyYXBwZXIiLCJwYXJlbnRFbGVtZW50Iiwic3R5bGUiLCJvdmVyZmxvdyIsImdldENvbXB1dGVkU3R5bGUiLCJkaXNwbGF5Iiwic2NhbGUiLCJfdGhpcyIsIm9yaWdpbmFsQ29udGVudCIsImxpbmVzIiwic3RhcnRpbmdEZWxheSIsIml0ZW0iLCJzdGFydGluZ09wYWNpdHkiLCIkZ3JvdXAiLCJxdWVyeVNlbGVjdG9yIiwib2Zmc2V0SGVpZ2h0Iiwib25Db21wbGV0ZVBhcmFtcyIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsIndlYmtpdENsaXBQYXRoIiwiX3RoaXMyIiwic2V0VGltZW91dCIsImNsYXNzTGlzdCIsImFkZCIsIkFuaUdyb3VwQWN0aW9ucyIsImRlZmF1bHQtYXBwZWFyIiwiY2hpbGRyZW4iLCJ0cmFuc2l0aW9uIiwiY291bnQiLCJjb21wbGV0ZUNvdW50IiwicmVtb3ZlIiwiYXBwZWFyIiwiQW5pbWF0aW9uR3JvdXAiLCJBbmltYXRpb25Hcm91cF9jbGFzc0NhbGxDaGVjayIsIm9mZnNldFBlcmNlbnRhZ2UiLCJpbWFnZXMiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJmaWx0ZXIiLCJjaGlsZCIsImNsb3Nlc3QiLCJpbWFnZUxvYWRlZENvdW50IiwiaGFzQXBwZWFyZWQiLCJmaWx0ZXJlZENoaWxkcmVuIiwib3JkZXIiLCJwYXJzZUludCIsInNvcnQiLCJhIiwiYiIsIm9uQXBwZWFyIiwiaXNJblZpZXdwb3J0IiwiaW5uZXJIZWlnaHQiLCJsb2FkQXNzZXRzIiwiZWxlbSIsInBhZGRpbmciLCJzY3JvbGxZIiwiZG9jdW1lbnQiLCJib2R5IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50SGVpZ2h0IiwiY2hlY2siLCJfdGhpczMiLCJpbWciLCJzcmMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1hZ2VMb2FkSGFuZGxlciIsInNldEF0dHJpYnV0ZSIsIkFuaSIsIkFuaV9jbGFzc0NhbGxDaGVjayIsImdyb3VwcyIsInVwZGF0ZSIsImVscyIsIl9fd2VicGFja19leHBvcnRzX18iLCJtb2R1bGVzX0FuaSIsIm1vZHVsZXNfQW5pRWxlbWVudCIsIm1vZHVsZXNfQW5pbWF0aW9uR3JvdXAiLCJOb2RlTGlzdCIsIkFycmF5IiwicG9seWZpbGwiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0EsaUJBQUFDLFNBQUEsaUJBQUFDLE9BQ0FBLE9BQUFELFFBQUFELElBQ0EsbUJBQUFHLGVBQUFDLElBQ0FELE9BQUEsZ0JBQUFILEdBQ0EsaUJBQUFDLFFBQ0FBLFFBQUEsY0FBQUQsSUFFQUQsRUFBQSxjQUFBQyxJQVJBLENBU0Msb0JBQUFLLFVBQUFDLEtBQUEsV0FDRCxtQkNUQSxJQUFBQyxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFSLFFBR0EsSUFBQUMsRUFBQUssRUFBQUUsR0FBQSxDQUNBQyxFQUFBRCxFQUNBRSxHQUFBLEVBQ0FWLFFBQUEsSUFVQSxPQU5BVyxFQUFBSCxHQUFBSSxLQUFBWCxFQUFBRCxRQUFBQyxJQUFBRCxRQUFBTyxHQUdBTixFQUFBUyxHQUFBLEVBR0FULEVBQUFELFFBMERBLE9BckRBTyxFQUFBTSxFQUFBRixFQUdBSixFQUFBTyxFQUFBUixFQUdBQyxFQUFBUSxFQUFBLFNBQUFmLEVBQUFnQixFQUFBQyxHQUNBVixFQUFBVyxFQUFBbEIsRUFBQWdCLElBQ0FHLE9BQUFDLGVBQUFwQixFQUFBZ0IsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1YsRUFBQWdCLEVBQUEsU0FBQXZCLEdBQ0Esb0JBQUF3QixlQUFBQyxhQUNBTixPQUFBQyxlQUFBcEIsRUFBQXdCLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFwQixFQUFBLGNBQWlEMEIsT0FBQSxLQVFqRG5CLEVBQUFvQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBbkIsRUFBQW1CLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtB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YUF4QlgsU0FBQUEsSUFBYyxJQUFBOUQsRUFBQWxILGtHQUFBaUwsQ0FBQWpMLEtBQUFnTCxHQUNWaEwsS0FBS2tMLE9BQVMsR0FDZGxMLEtBQUttTCxTQUNMbkcsT0FBTzZGLGlCQUFpQixTQUFVLFdBQzlCM0QsRUFBS3NELFVBRVR4SyxLQUFLd0ssK0RBSUx4SyxLQUFLa0wsT0FBT3ZILFFBQVEsU0FBQzJELEdBQ2pCQSxFQUFLa0QsMkNBSUosSUFBQXhDLEVBQUFoSSxLQUNMQSxLQUFLb0wsSUFBTWpCLFNBQVM1RixpQkFBaUIsaUVBQ3JDdkUsS0FBS29MLElBQUl6SCxRQUFRLFNBQUMyRCxHQUNkQSxFQUFLeUQsYUFBYSxrQkFBa0IsR0FDcEMvQyxFQUFLa0QsT0FBT2hILEtBQUssSUFBSTBFLEVBQWV0QixNQUV4Q3RILEtBQUt3Syw2Q0N4QmJ0SyxFQUFBUSxFQUFBMkssRUFBQSx3QkFBQUMsSUFBQXBMLEVBQUFRLEVBQUEySyxFQUFBLDhCQUFBaEosSUFBQW5DLEVBQUFRLEVBQUEySyxFQUFBLCtCQUFBRSxJQUFBckwsRUFBQVEsRUFBQTJLLEVBQUEsb0NBQUFqRCxJQUFBbEksRUFBQVEsRUFBQTJLLEVBQUEsbUNBQUFHLElBQUF0TCxFQUFBUSxFQUFBMkssRUFBQSw0QkFBQXRJLElBR3dCLG9CQUFib0gsVUFBOEMsb0JBQVhuRixTQUN0Q0EsT0FBT3lHLFdBQWFBLFNBQVN6SixVQUFVMkIsVUFDdkM4SCxTQUFTekosVUFBVTJCLFFBQVUrSCxNQUFNMUosVUFBVTJCLFNBRWpEZ0ksSUFBUzNHIiwiZmlsZSI6ImFuaS1mcmllbmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcImFuaS1mcmllbmRcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiYW5pLWZyaWVuZFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJhbmktZnJpZW5kXCJdID0gZmFjdG9yeSgpO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImdzYXAvVHdlZW5NYXhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZWxlbWVudC1jbG9zZXN0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIkBiYWJlbC9wb2x5ZmlsbC9ub0NvbmZsaWN0XCIpOyIsImV4cG9ydCBjb25zdCBBbmlDb25maWcgPSB7XG4gICAgaW5pdGlhbERlbGF5OiAwLjEsXG4gICAgLy8gQW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXMgdGltZSAqIGl0cyBvcmRlclxuICAgIGRlbGF5U3BlZWQ6IDAuMixcbiAgICBtb3ZlRGlzdGFuY2U6IDQwLFxuICAgIHpvb21TY2FsZTogMS42LFxuICAgIGluVmlld1RyaWdnZXJQZXJjZW50OiAwLjIsXG4gICAgc3BlZWQ6IDEsXG4gICAgZWFzZTogJ1Bvd2VyMi5lYXNlT3V0JyxcbiAgICB0ZXh0TGluZURlbGF5U3BlZWQ6IDAuMSxcbiAgICB0ZXh0TGluZVlPZmZzZXQ6IDAsXG59XG4iLCJleHBvcnQgY29uc3QgSGVscGVycyA9IHtcbiAgICBnZXRBdHRyaWJ1dGU6IGZ1bmN0aW9uKGVsLCBhdHQpIHtcbiAgICAgICAgaWYgKGVsLmhhc0F0dHJpYnV0ZShhdHQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKGF0dClcbiAgICAgICAgfSBlbHNlIGlmIChlbC5oYXNBdHRyaWJ1dGUoYGRhdGEtJHthdHR9YCkpIHtcbiAgICAgICAgICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoYGRhdGEtJHthdHR9YClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9LFxuICAgIGhhc0F0dHJpYnV0ZTogZnVuY3Rpb24oZWwsIGF0dCkge1xuICAgICAgICBpZiAoZWwuaGFzQXR0cmlidXRlKGF0dCkgfHwgZWwuaGFzQXR0cmlidXRlKGBkYXRhLSR7YXR0fWApKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH0sXG4gICAgd3JhcExpbmVzOiBmdW5jdGlvbigkY29udGFpbmVyKSB7XG4gICAgICAgIC8vIGdldCB0aGUgdGV4dCBmcm9tIHRoZSBjb25hdGluZXJcbiAgICAgICAgdmFyIHRleHQgPSAkY29udGFpbmVyLmlubmVyVGV4dFxuXG4gICAgICAgIC8vIHNwbGl0IHRoZSB0ZXh0IGludG8gd29yZHNcbiAgICAgICAgdmFyIHdvcmRzID0gdGV4dC5zcGxpdCgnICcpXG5cbiAgICAgICAgdmFyIHBhcnNlZFdvcmRzID0gW11cbiAgICAgICAgd29yZHMuZm9yRWFjaCgod29yZCkgPT4ge1xuICAgICAgICAgICAgaWYgKHdvcmQuaW5kZXhPZignLScpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHZhciBoeXBoZW5hdGVkV29yZHMgPSB3b3JkLnNwbGl0KCctJylcbiAgICAgICAgICAgICAgICBoeXBoZW5hdGVkV29yZHMuZm9yRWFjaCgoaHcsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHdvcmRVcGRhdGVkID0gaHdcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IGh5cGhlbmF0ZWRXb3Jkcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JkVXBkYXRlZCArPSAnLSdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRXb3Jkcy5wdXNoKHdvcmRVcGRhdGVkKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnNlZFdvcmRzLnB1c2god29yZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICAvLyB3cmFwIGVhY2ggd29yZCBpbiBhIHNwYW4gYW5kIGFkZCBpdCB0byBhIHRtcFxuICAgICAgICB2YXIgdG1wID0gJydcbiAgICAgICAgcGFyc2VkV29yZHMuZm9yRWFjaCgod29yZCkgPT4ge1xuICAgICAgICAgICAgbGV0IHNwYWNpbmcgPSB3b3JkLmluZGV4T2YoJy0nKSAhPT0gLTEgPyAnJyA6ICcgJ1xuICAgICAgICAgICAgdG1wICs9IGA8c3Bhbj4ke3dvcmR9JHtzcGFjaW5nfTwvc3Bhbj5gXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gcmVtb3ZlIHRoZSB0ZXh0IGZyb20gdGhlIGNvbnRhaW5lciwgYW5kIHJlcGxhY2UgaXQgd2l0aCB0aGUgd3JhcHBlZCB3b3Jkc1xuICAgICAgICAkY29udGFpbmVyLmlubmVySFRNTCA9IHRtcFxuXG4gICAgICAgIC8vIHByZXBhcmUgdGhlIG9mZnNldCB2YXJpYWJsZSBhbmQgdG1wXG4gICAgICAgIHZhciB0bXAgPSAnJ1xuICAgICAgICB2YXIgdG9wID0gbnVsbFxuICAgICAgICAkY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW4nKS5mb3JFYWNoKCh3b3JkKSA9PiB7XG4gICAgICAgICAgICAvLyBpZiB0aGlzIGlzIHRoZSBmaXJzdCBpdGVyYXRpb25cbiAgICAgICAgICAgIGlmICh0b3AgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIHRvcFxuICAgICAgICAgICAgICAgIHRvcCA9IHdvcmQub2Zmc2V0VG9wXG4gICAgICAgICAgICAgICAgLy8gb3BlbiB0aGUgZmlyc3QgbGluZVxuICAgICAgICAgICAgICAgIHRtcCA9ICc8c3BhbiBjbGFzcz1cImFuaS1saW5lXCI+PHNwYW4gY2xhc3M9XCJhbmktbGluZS1ncm91cFwiPidcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhIG5ldyBsaW5lICh0b3AgaXMgYmlnZ2VyIHRoZW4gdGhlIHByZXZpb3VzIHdvcmQpXG4gICAgICAgICAgICBpZiAodG9wIDwgd29yZC5vZmZzZXRUb3ApIHtcbiAgICAgICAgICAgICAgICAvLyBjbG9zZSB0aGUgcHJldmlvdXMgbGluZSBhbmQgc3RhcnQgYSBuZXcgb25lXG4gICAgICAgICAgICAgICAgdG1wICs9ICc8L3NwYW4+PC9zcGFuPjxzcGFuIGNsYXNzPVwiYW5pLWxpbmVcIj48c3BhbiBjbGFzcz1cImFuaS1saW5lLWdyb3VwXCI+J1xuICAgICAgICAgICAgICAgIC8vIGNoYW5nZSB0aGUgdG9wXG4gICAgICAgICAgICAgICAgdG9wID0gd29yZC5vZmZzZXRUb3BcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzcGFjaW5nID0gd29yZC5pbm5lclRleHQuaW5kZXhPZignLScpICE9PSAtMSA/ICcnIDogJyAnXG4gICAgICAgICAgICAvLyBhZGQgdGhlIGNvbnRlbnQgb2YgdGhlIHdvcmQgbm9kZSArIGEgc3BhY2VcbiAgICAgICAgICAgIHRtcCArPSB3b3JkLmlubmVyVGV4dCArIHNwYWNpbmdcbiAgICAgICAgfSlcbiAgICAgICAgLy8gY2xvc2UgdGhlIGxhc3QgbGluZVxuICAgICAgICB0bXAgKz0gJzwvc3Bhbj4nXG5cbiAgICAgICAgLy8gcmVtb3ZlIHRoZSBjb250ZW50IG9mIHRoZSBjb25hdGluZXIsIGFuZCByZXBsYWNlIGl0IHdpdGggdGhlIHdyYXBwZWQgbGluZXNcbiAgICAgICAgJGNvbnRhaW5lci5pbm5lckhUTUwgPSB0bXBcbiAgICB9LFxufVxuIiwiaW1wb3J0IHsgVHdlZW5NYXggfSBmcm9tICdnc2FwL1R3ZWVuTWF4J1xuaW1wb3J0IHsgQW5pQ29uZmlnIH0gZnJvbSAnLi9BbmlDb25maWcnXG5pbXBvcnQgeyBIZWxwZXJzIH0gZnJvbSAnLi9IZWxwZXJzJ1xuXG5jbGFzcyBBbmlFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihlbCwgaW5kZXgsIHByZXNldCwgY29tcGxldGVIYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuZWwgPSBlbFxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXhcbiAgICAgICAgdGhpcy5jb21wbGV0ZUhhbmRsZXIgPSBjb21wbGV0ZUhhbmRsZXJcbiAgICAgICAgdGhpcy5kZWxheVNwZWVkID0gQW5pQ29uZmlnLmRlbGF5U3BlZWRcbiAgICAgICAgaWYgKEhlbHBlcnMuaGFzQXR0cmlidXRlKHRoaXMuZWwsICdhbmktZGVsYXktc3BlZWQnKSkge1xuICAgICAgICAgICAgdGhpcy5kZWxheVNwZWVkID0gcGFyc2VGbG9hdChIZWxwZXJzLmdldEF0dHJpYnV0ZSh0aGlzLmVsLCAnYW5pLWRlbGF5LXNwZWVkJykpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb3ZlbWVudCA9IEFuaUNvbmZpZy5tb3ZlRGlzdGFuY2VcbiAgICAgICAgaWYgKEhlbHBlcnMuaGFzQXR0cmlidXRlKHRoaXMuZWwsICdhbmktbW92ZS1kaXN0YW5jZScpKSB7XG4gICAgICAgICAgICB0aGlzLm1vdmVtZW50ID0gcGFyc2VGbG9hdChIZWxwZXJzLmdldEF0dHJpYnV0ZSh0aGlzLmVsLCAnYW5pLW1vdmUtZGlzdGFuY2UnKSlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnpvb21TY2FsZSA9IEFuaUNvbmZpZy56b29tU2NhbGVcbiAgICAgICAgaWYgKEhlbHBlcnMuaGFzQXR0cmlidXRlKHRoaXMuZWwsICdhbmktem9vbS1zY2FsZScpKSB7XG4gICAgICAgICAgICB0aGlzLnpvb21TY2FsZSA9IHBhcnNlRmxvYXQoSGVscGVycy5nZXRBdHRyaWJ1dGUodGhpcy5lbCwgJ2FuaS16b29tLXNjYWxlJykpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zcGVlZCA9IEFuaUNvbmZpZy5zcGVlZFxuICAgICAgICBpZiAoSGVscGVycy5oYXNBdHRyaWJ1dGUodGhpcy5lbCwgJ2FuaS1zcGVlZCcpKSB7XG4gICAgICAgICAgICB0aGlzLnNwZWVkID0gcGFyc2VGbG9hdChIZWxwZXJzLmdldEF0dHJpYnV0ZSh0aGlzLmVsLCAnYW5pLXNwZWVkJykpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lYXNlID0gd2luZG93LkVhc2VMb29rdXAuZmluZChBbmlDb25maWcuZWFzZSlcbiAgICAgICAgaWYgKEhlbHBlcnMuaGFzQXR0cmlidXRlKHRoaXMuZWwsICdhbmktZWFzZScpKSB7XG4gICAgICAgICAgICBjb25zdCBlYXNlID0gd2luZG93LkVhc2VMb29rdXAuZmluZChIZWxwZXJzLmdldEF0dHJpYnV0ZSh0aGlzLmVsLCAnYW5pLWVhc2UnKSlcbiAgICAgICAgICAgIGlmIChlYXNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lYXNlID0gZWFzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudGV4dExpbmVEZWxheVNwZWVkID0gQW5pQ29uZmlnLnRleHRMaW5lRGVsYXlTcGVlZFxuICAgICAgICBpZiAoSGVscGVycy5oYXNBdHRyaWJ1dGUodGhpcy5lbCwgJ2FuaS10ZXh0LWxpbmUtZGVsYXktc3BlZWQnKSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0TGluZURlbGF5U3BlZWQgPSBwYXJzZUZsb2F0KEFuaUNvbmZpZy50ZXh0TGluZURlbGF5U3BlZWQpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50ZXh0TGluZVlPZmZzZXQgPSBBbmlDb25maWcudGV4dExpbmVZT2Zmc2V0XG4gICAgICAgIGlmIChIZWxwZXJzLmhhc0F0dHJpYnV0ZSh0aGlzLmVsLCAnYW5pLXRleHQtbGluZS15LW9mZnNldCcpKSB7XG4gICAgICAgICAgICB0aGlzLnRleHRMaW5lWU9mZnNldCA9IHBhcnNlRmxvYXQoQW5pQ29uZmlnLnRleHRMaW5lWU9mZnNldClcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlc2V0ICYmIHR5cGVvZiBwcmVzZXQgPT09ICdzdHJpbmcnICYmIHByZXNldCAhPT0gJycpIHtcbiAgICAgICAgICAgIHRoaXMucHJlc2V0ID0gcHJlc2V0XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnByZXNldCA9ICdmYWRlJ1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXBwZWFyKCkge1xuICAgICAgICBjb25zdCBtb3Rpb25zID0gdGhpcy5wcmVzZXQuc3BsaXQoJy0nKVxuICAgICAgICBjb25zdCBtb3Rpb25OYW1lID0gbW90aW9ucy5zaGlmdCgpXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IG1vdGlvbnMuam9pbignLScpXG4gICAgICAgIGlmIChtb3Rpb25OYW1lID09PSAnd2lwZScpIHtcbiAgICAgICAgICAgIHRoaXMud2lwZShvcHRpb24pXG4gICAgICAgIH0gZWxzZSBpZiAobW90aW9uTmFtZSA9PT0gJ3pvb20nKSB7XG4gICAgICAgICAgICB0aGlzLnpvb20ob3B0aW9uKVxuICAgICAgICB9IGVsc2UgaWYgKG1vdGlvbk5hbWUgPT09ICdjbGFzcycgJiYgb3B0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmFkZENsYXNzKG9wdGlvbilcbiAgICAgICAgfSBlbHNlIGlmIChtb3Rpb25OYW1lID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dChvcHRpb24pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZhZGUob3B0aW9uKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmFkZShkaXJlY3Rpb24pIHtcbiAgICAgICAgbGV0IHN0YXJ0UHJvcHMgPSB7IHg6IDAsIHk6IDAsIG9wYWNpdHk6IDAgfVxuICAgICAgICBpZiAodHlwZW9mIGRpcmVjdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UHJvcHMueCA9IHRoaXMubW92ZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UHJvcHMueCA9IC10aGlzLm1vdmVtZW50XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnZG93bic6XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UHJvcHMueSA9IC10aGlzLm1vdmVtZW50XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAndXAnOlxuICAgICAgICAgICAgICAgICAgICBzdGFydFByb3BzLnkgPSB0aGlzLm1vdmVtZW50XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQcm9wcy55ID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFR3ZWVuTWF4LmZyb21Ubyh0aGlzLmVsLCB0aGlzLnNwZWVkLCBzdGFydFByb3BzLCB7XG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICBlYXNlOiB0aGlzLmVhc2UsXG4gICAgICAgICAgICBkZWxheTogKDEgKyB0aGlzLmluZGV4KSAqIHRoaXMuZGVsYXlTcGVlZCxcbiAgICAgICAgICAgIG9uQ29tcGxldGU6IHRoaXMuY29tcGxldGVIYW5kbGVyLFxuICAgICAgICAgICAgY2xlYXJQcm9wczogJ3gseSxvcGFjaXR5JyxcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICB3aXBlKGRpcmVjdGlvbiA9ICdsZWZ0Jykge1xuICAgICAgICBsZXQgc3RhcnRQcm9wcyA9IHRoaXMuY2xpcFBhdGgoMTAwKVxuICAgICAgICBsZXQgZW5kUHJvcHMgPSB0aGlzLmNsaXBQYXRoKDApXG4gICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlICd1cCc6XG4gICAgICAgICAgICAgICAgc3RhcnRQcm9wcyA9IHRoaXMuY2xpcFBhdGgoNTAwLCAwLCAwLCAwKVxuICAgICAgICAgICAgICAgIGVuZFByb3BzID0gdGhpcy5jbGlwUGF0aCgwLCAwLCAwLCAwKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlICdkb3duJzpcbiAgICAgICAgICAgICAgICBzdGFydFByb3BzID0gdGhpcy5jbGlwUGF0aCgwLCAwLCA1MDAsIDApXG4gICAgICAgICAgICAgICAgZW5kUHJvcHMgPSB0aGlzLmNsaXBQYXRoKDAsIDAsIDAsIDApXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgIHN0YXJ0UHJvcHMgPSB0aGlzLmNsaXBQYXRoKDAsIDAsIDAsIDUwMClcbiAgICAgICAgICAgICAgICBlbmRQcm9wcyA9IHRoaXMuY2xpcFBhdGgoMCwgMCwgMCwgMClcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBzdGFydFByb3BzID0gdGhpcy5jbGlwUGF0aCgwLCA1MDAsIDApXG4gICAgICAgICAgICAgICAgZW5kUHJvcHMgPSB0aGlzLmNsaXBQYXRoKDAsIDAsIDApXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBlbmRQcm9wcy5kZWxheSA9ICgxICsgdGhpcy5pbmRleCkgKiB0aGlzLmRlbGF5U3BlZWRcbiAgICAgICAgZW5kUHJvcHMuZWFzZSA9IHRoaXMuZWFzZVxuICAgICAgICBlbmRQcm9wcy5vbkNvbXBsZXRlID0gdGhpcy5jb21wbGV0ZUhhbmRsZXJcbiAgICAgICAgVHdlZW5NYXguZnJvbVRvKHRoaXMuZWwsIHRoaXMuc3BlZWQsIHN0YXJ0UHJvcHMsIGVuZFByb3BzKVxuICAgIH1cblxuICAgIHpvb20oZGlyZWN0aW9uID0gJ2luJykge1xuICAgICAgICBjb25zdCB3cmFwcGVyID0gdGhpcy5lbC5wYXJlbnRFbGVtZW50XG5cbiAgICAgICAgd3JhcHBlci5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nXG4gICAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKHRoaXMuZWwsIG51bGwpLmRpc3BsYXkgPT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgICB3cmFwcGVyLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlci5zdHlsZS5kaXNwbGF5ID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsLCBudWxsKS5kaXNwbGF5XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAnb3V0Jykge1xuICAgICAgICAgICAgVHdlZW5NYXguZnJvbVRvKFxuICAgICAgICAgICAgICAgIHRoaXMuZWwsXG4gICAgICAgICAgICAgICAgdGhpcy5zcGVlZCxcbiAgICAgICAgICAgICAgICB7IG9wYWNpdHk6IDAsIHNjYWxlOiAxIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICBzY2FsZTogdGhpcy56b29tU2NhbGUsXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5OiAoMSArIHRoaXMuaW5kZXgpICogdGhpcy5kZWxheVNwZWVkLFxuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiB0aGlzLmNvbXBsZXRlSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgZWFzZTogdGhpcy5lYXNlLFxuICAgICAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIGtlZXAgc2NhbGVcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJQcm9wczogJ29wYWNpdHknLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFR3ZWVuTWF4LmZyb21UbyhcbiAgICAgICAgICAgICAgICB0aGlzLmVsLFxuICAgICAgICAgICAgICAgIHRoaXMuc3BlZWQsXG4gICAgICAgICAgICAgICAgeyBvcGFjaXR5OiAwLCBzY2FsZTogdGhpcy56b29tU2NhbGUgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiAxLFxuICAgICAgICAgICAgICAgICAgICBkZWxheTogKDEgKyB0aGlzLmluZGV4KSAqIHRoaXMuZGVsYXlTcGVlZCxcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZTogdGhpcy5jb21wbGV0ZUhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIGVhc2U6IHRoaXMuZWFzZSxcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJQcm9wczogJ29wYWNpdHksIHNjYWxlJyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0ZXh0KG9wdGlvbikge1xuICAgICAgICBjb25zdCBvcmlnaW5hbENvbnRlbnQgPSB0aGlzLmVsLmlubmVySFRNTFxuICAgICAgICBIZWxwZXJzLndyYXBMaW5lcyh0aGlzLmVsKVxuICAgICAgICBjb25zdCBsaW5lcyA9IHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbCgnLmFuaS1saW5lJylcbiAgICAgICAgY29uc3Qgc3BlZWQgPSB0aGlzLnNwZWVkIC8gbGluZXMubGVuZ3RoICsgMVxuICAgICAgICBjb25zdCBzdGFydGluZ0RlbGF5ID0gKDEgKyB0aGlzLmluZGV4KSAqIHRoaXMuZGVsYXlTcGVlZFxuICAgICAgICBsaW5lcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IHN0YXJ0aW5nT3BhY2l0eSA9IDBcbiAgICAgICAgICAgIGNvbnN0ICRncm91cCA9IGl0ZW0ucXVlcnlTZWxlY3RvcignLmFuaS1saW5lLWdyb3VwJylcbiAgICAgICAgICAgIGl0ZW0uc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICAgICAgICAgIGlmIChvcHRpb24gPT09ICdsaW5lLW1hc2snKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgc3RhcnRpbmdPcGFjaXR5ID0gMVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJGdyb3VwLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJ1xuICAgICAgICAgICAgY29uc3QgY29tcGxldGUgPSAoaSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpID09PSBsaW5lcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gb3JpZ2luYWxDb250ZW50XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGVIYW5kbGVyKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBUd2Vlbk1heC5mcm9tVG8oXG4gICAgICAgICAgICAgICAgJGdyb3VwLFxuICAgICAgICAgICAgICAgIHNwZWVkLFxuICAgICAgICAgICAgICAgIHsgeTogJGdyb3VwLm9mZnNldEhlaWdodCArIHRoaXMudGV4dExpbmVZT2Zmc2V0LCBvcGFjaXR5OiBzdGFydGluZ09wYWNpdHkgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgICAgIGVhc2U6IHRoaXMuZWFzZSxcbiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IHN0YXJ0aW5nRGVsYXkgKyBpbmRleCAqIHRoaXMuZGVsYXlTcGVlZCxcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZTogY29tcGxldGUsXG4gICAgICAgICAgICAgICAgICAgIG9uQ29tcGxldGVQYXJhbXM6IFtpbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyUHJvcHM6ICdhbGwnLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjbGlwUGF0aCh0b3AgPSAwLCByaWdodCA9IDAsIGJvdHRvbSA9IDAsIGxlZnQgPSAwKSB7XG4gICAgICAgIGNvbnN0IHBhdGhzID0ge1xuICAgICAgICAgICAgY2xpcFBhdGg6IGBpbnNldCgke3RvcH0lICR7cmlnaHR9JSAke2JvdHRvbX0lICR7bGVmdH0lKWAsXG4gICAgICAgICAgICAvLyBUT0RPOiBtYWtlIHVwL2Rvd24gd29yayBpbiBzYWZhcmlcbiAgICAgICAgICAgIHdlYmtpdENsaXBQYXRoOiBgaW5zZXQoJHt0b3B9JSAke3JpZ2h0fSUgJHtib3R0b219JSAke2xlZnR9JSlgLFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXRoc1xuICAgIH1cblxuICAgIGFkZENsYXNzKG5hbWUpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQobmFtZSlcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVIYW5kbGVyKClcbiAgICAgICAgfSwgKDEgKyB0aGlzLmluZGV4KSAqIHRoaXMuZGVsYXlTcGVlZClcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBBbmlFbGVtZW50XG4iLCJpbXBvcnQgQW5pRWxlbWVudCBmcm9tICcuL0FuaUVsZW1lbnQnXG5pbXBvcnQgeyBIZWxwZXJzIH0gZnJvbSAnLi9IZWxwZXJzJ1xuXG5leHBvcnQgY29uc3QgQW5pR3JvdXBBY3Rpb25zID0ge1xuICAgICdkZWZhdWx0LWFwcGVhcic6IChlbCkgPT4ge1xuICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMVxuICAgIH0sXG59XG5cbkFuaUdyb3VwQWN0aW9uc1snYmFzaWMtYXBwZWFyJ10gPSAoZWwsIGNoaWxkcmVuKSA9PiB7XG4gICAgZWwuc3R5bGUub3BhY2l0eSA9IDFcbiAgICBlbC5zdHlsZS50cmFuc2l0aW9uID0gJ25vbmUnXG4gICAgZWwuY2xhc3NMaXN0LmFkZCgnYW5pLWhhcy1hcHBlYXJlZCcpXG4gICAgZWwuY2xhc3NMaXN0LmFkZCgnYW5pLXN0YXJ0JylcbiAgICBsZXQgY291bnQgPSAwXG4gICAgbGV0IGNvbXBsZXRlQ291bnQgPSAwXG4gICAgY29uc3Qgb25Db21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgY29tcGxldGVDb3VudCsrXG4gICAgICAgIGlmIChjb21wbGV0ZUNvdW50ID09PSBjb3VudCkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnYW5pLXN0YXJ0JylcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2FuaS1jb21wbGV0ZScpXG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hpbGRyZW4uZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgbGV0IHByZXNldCA9ICcnXG4gICAgICAgIGNvdW50KytcbiAgICAgICAgaWYgKEhlbHBlcnMuaGFzQXR0cmlidXRlKGl0ZW0sICdhbmktcHJlc2V0JykpIHtcbiAgICAgICAgICAgIHByZXNldCA9IEhlbHBlcnMuZ2V0QXR0cmlidXRlKGl0ZW0sICdhbmktcHJlc2V0JylcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmkgPSBuZXcgQW5pRWxlbWVudChpdGVtLCBpbmRleCwgcHJlc2V0LCBvbkNvbXBsZXRlKVxuICAgICAgICBhbmkuYXBwZWFyKClcbiAgICB9KVxufVxuIiwiaW1wb3J0IHsgQW5pR3JvdXBBY3Rpb25zIH0gZnJvbSAnLi9BbmlHcm91cEFjdGlvbnMnXG5pbXBvcnQgeyBIZWxwZXJzIH0gZnJvbSAnLi9IZWxwZXJzJ1xuaW1wb3J0IHsgQW5pQ29uZmlnIH0gZnJvbSAnLi9BbmlDb25maWcnXG5cbmNsYXNzIEFuaW1hdGlvbkdyb3VwIHtcbiAgICBjb25zdHJ1Y3RvcihlbCkge1xuICAgICAgICB0aGlzLmVsID0gZWxcbiAgICAgICAgLy8gUmV2ZWFsIHdoZW4gYXQgdGhpcyBwZXJjZW50IG9mIHRoZSBzY3JlZW46XG4gICAgICAgIGlmIChIZWxwZXJzLmhhc0F0dHJpYnV0ZSh0aGlzLmVsLCAnYW5pLWluLXZpZXctdHJpZ2dlci1wZXJjZW50JykpIHtcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0UGVyY2VudGFnZSA9IHBhcnNlRmxvYXQoSGVscGVycy5nZXRBdHRyaWJ1dGUodGhpcy5lbCwgJ2FuaS1pbi12aWV3LXRyaWdnZXItcGVyY2VudCcpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vZmZzZXRQZXJjZW50YWdlID0gQW5pQ29uZmlnLmluVmlld1RyaWdnZXJQZXJjZW50XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW1hZ2VzID0gZWwucXVlcnlTZWxlY3RvckFsbCgnaW1nW2xvYWQtc3JjXSwgaW1nW2RhdGEtbG9hZC1zcmNdJylcbiAgICAgICAgdGhpcy5pbWFnZXMgPSBbLi4uaW1hZ2VzXS5maWx0ZXIoKGNoaWxkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGQuY2xvc2VzdCgnW2FuaV0sIFtkYXRhLWFuaV0nKSA9PT0gdGhpcy5lbFxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmltYWdlTG9hZGVkQ291bnQgPSAwXG4gICAgICAgIHRoaXMuaGFzQXBwZWFyZWQgPSBmYWxzZVxuXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbYW5pLWNoaWxkXSwgW2RhdGEtYW5pLWNoaWxkXScpXG5cbiAgICAgICAgY29uc3QgZmlsdGVyZWRDaGlsZHJlbiA9IFsuLi5jaGlsZHJlbl0uZmlsdGVyKChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkLmNsb3Nlc3QoJ1thbmldLCBbZGF0YS1hbmldJykgPT09IHRoaXMuZWxcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmNoaWxkcmVuID0gZmlsdGVyZWRDaGlsZHJlblxuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoSGVscGVycy5oYXNBdHRyaWJ1dGUoaXRlbSwgJ2FuaS1jaGlsZC1vcmRlcicpKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5vcmRlciA9IHBhcnNlSW50KEhlbHBlcnMuZ2V0QXR0cmlidXRlKGl0ZW0sICdhbmktY2hpbGQtb3JkZXInKSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbS5vcmRlciA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoICsgaW5kZXhcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5zb3J0KChhLCBiKSA9PiAoYS5vcmRlciA+IGIub3JkZXIgPyAxIDogLTEpKVxuICAgICAgICB0aGlzLm9uQXBwZWFyID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKCdhcHBlYXInKVxuICAgICAgICB9XG4gICAgICAgIGlmIChIZWxwZXJzLmhhc0F0dHJpYnV0ZShlbCwgJ2FuaScpKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIEFuaUdyb3VwQWN0aW9uc1tIZWxwZXJzLmdldEF0dHJpYnV0ZShlbCwgJ2FuaScpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMub25BcHBlYXIgPSBBbmlHcm91cEFjdGlvbnNbSGVscGVycy5nZXRBdHRyaWJ1dGUoZWwsICdhbmknKV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrKCkge1xuICAgICAgICBpZiAodGhpcy5pc0luVmlld3BvcnQodGhpcy5lbCwgd2luZG93LmlubmVySGVpZ2h0KSkge1xuICAgICAgICAgICAgdGhpcy5sb2FkQXNzZXRzKClcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhdGhpcy5oYXNBcHBlYXJlZCAmJlxuICAgICAgICAgICAgdGhpcy5pbWFnZUxvYWRlZENvdW50ID09PSB0aGlzLmltYWdlcy5sZW5ndGggJiZcbiAgICAgICAgICAgIHRoaXMuaXNJblZpZXdwb3J0KHRoaXMuZWwsIHdpbmRvdy5pbm5lckhlaWdodCAqIC10aGlzLm9mZnNldFBlcmNlbnRhZ2UpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5hcHBlYXIoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXBwZWFyKCkge1xuICAgICAgICB0aGlzLmhhc0FwcGVhcmVkID0gdHJ1ZVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25BcHBlYXIodGhpcy5lbCwgdGhpcy5jaGlsZHJlbilcbiAgICAgICAgfSwgQW5pQ29uZmlnLmluaXRpYWxEZWxheSAqIDEwMDApXG4gICAgfVxuXG4gICAgaXNJblZpZXdwb3J0KGVsZW0sIHBhZGRpbmcgPSAwKSB7XG4gICAgICAgIC8vIElmIGF0IHRoZSBib3R0b20gb2YgdGhlIHBhZ2U6XG4gICAgICAgIGlmICh3aW5kb3cuaW5uZXJIZWlnaHQgKyB3aW5kb3cuc2Nyb2xsWSA+PSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCkge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIHBhZGRpbmcgaW4gY2FzZSBhbiBlbCBpcyBuZWFyIHRoZSBib3R0b21cbiAgICAgICAgICAgIHBhZGRpbmcgPSAwXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYm91bmRpbmcgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgIHJldHVybiBib3VuZGluZy50b3AgLSBwYWRkaW5nIDwgKHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KVxuICAgIH1cblxuICAgIGltYWdlTG9hZEhhbmRsZXIoKSB7XG4gICAgICAgIHRoaXMuaW1hZ2VMb2FkZWRDb3VudCsrXG4gICAgICAgIC8vIFdhbnQgdG8gY2hlY2sgYWdhaW4gaW4gY2FzZSB1c2VyIGhhc24ndCBzY3JvbGxlZFxuICAgICAgICAvLyB3aGlsZSB0aGUgaW1hZ2UgZmluaXNoZXMgbG9hZGluZ1xuICAgICAgICB0aGlzLmNoZWNrKClcbiAgICB9XG5cbiAgICBsb2FkQXNzZXRzKCkge1xuICAgICAgICB0aGlzLmltYWdlcy5mb3JFYWNoKChpbWcpID0+IHtcbiAgICAgICAgICAgIGlmIChIZWxwZXJzLmhhc0F0dHJpYnV0ZShpbWcsICdsb2FkLXNyYycpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3JjID0gSGVscGVycy5nZXRBdHRyaWJ1dGUoaW1nLCAnbG9hZC1zcmMnKVxuICAgICAgICAgICAgICAgIGltZy5yZW1vdmVBdHRyaWJ1dGUoJ2xvYWQtc3JjJylcbiAgICAgICAgICAgICAgICBpbWcucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWxvYWQtc3JjJylcbiAgICAgICAgICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRoaXMuaW1hZ2VMb2FkSGFuZGxlci5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuaW1hZ2VMb2FkSGFuZGxlci5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNyYylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBBbmltYXRpb25Hcm91cFxuIiwiaW1wb3J0IEFuaW1hdGlvbkdyb3VwIGZyb20gJy4vQW5pbWF0aW9uR3JvdXAnXG5cbmNsYXNzIEFuaSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZ3JvdXBzID0gW11cbiAgICAgICAgdGhpcy51cGRhdGUoKVxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaGVjaygpXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMuY2hlY2soKVxuICAgIH1cblxuICAgIGNoZWNrKCkge1xuICAgICAgICB0aGlzLmdyb3Vwcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpdGVtLmNoZWNrKClcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIHRoaXMuZWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2FuaV06bm90KFtkYXRhLWFuaS1hZGRlZF0pLCBbZGF0YS1hbmldOm5vdChbZGF0YS1hbmktYWRkZWRdKScpXG4gICAgICAgIHRoaXMuZWxzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGl0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLWFuaS1hZGRlZCcsIHRydWUpXG4gICAgICAgICAgICB0aGlzLmdyb3Vwcy5wdXNoKG5ldyBBbmltYXRpb25Hcm91cChpdGVtKSlcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5jaGVjaygpXG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQW5pXG4iLCJpbXBvcnQgJ0BiYWJlbC9wb2x5ZmlsbC9ub0NvbmZsaWN0J1xuaW1wb3J0IHBvbHlmaWxsIGZyb20gJ2VsZW1lbnQtY2xvc2VzdCdcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAod2luZG93Lk5vZGVMaXN0ICYmICFOb2RlTGlzdC5wcm90b3R5cGUuZm9yRWFjaCkge1xuICAgICAgICBOb2RlTGlzdC5wcm90b3R5cGUuZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoXG4gICAgfVxuICAgIHBvbHlmaWxsKHdpbmRvdylcbn1cblxuaW1wb3J0IEFuaSBmcm9tICcuL21vZHVsZXMvQW5pLmpzJ1xuaW1wb3J0IEFuaUVsZW1lbnQgZnJvbSAnLi9tb2R1bGVzL0FuaUVsZW1lbnQuanMnXG5pbXBvcnQgQW5pbWF0aW9uR3JvdXAgZnJvbSAnLi9tb2R1bGVzL0FuaW1hdGlvbkdyb3VwLmpzJ1xuaW1wb3J0IHsgSGVscGVycyB9IGZyb20gJy4vbW9kdWxlcy9IZWxwZXJzLmpzJ1xuaW1wb3J0IHsgQW5pR3JvdXBBY3Rpb25zIH0gZnJvbSAnLi9tb2R1bGVzL0FuaUdyb3VwQWN0aW9ucy5qcydcbmltcG9ydCB7IEFuaUNvbmZpZyB9IGZyb20gJy4vbW9kdWxlcy9BbmlDb25maWcuanMnXG5cbmV4cG9ydCB7IEFuaSwgQW5pQ29uZmlnLCBBbmlFbGVtZW50LCBBbmlHcm91cEFjdGlvbnMsIEFuaW1hdGlvbkdyb3VwLCBIZWxwZXJzIH0iXSwic291cmNlUm9vdCI6IiJ9